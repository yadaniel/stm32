ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ff.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ld_word,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	ld_word:
  26              	.LVL0:
  27              	.LFB939:
  28              		.file 1 "./FW/ff.c"
   1:./FW/ff.c     **** /*----------------------------------------------------------------------------/
   2:./FW/ff.c     **** /  FatFs - Generic FAT file system module  R0.12c                             /
   3:./FW/ff.c     **** /-----------------------------------------------------------------------------/
   4:./FW/ff.c     **** /
   5:./FW/ff.c     **** / Copyright (C) 2017, ChaN, all right reserved.
   6:./FW/ff.c     **** /
   7:./FW/ff.c     **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:./FW/ff.c     **** / source and binary forms, with or without modification, are permitted provided
   9:./FW/ff.c     **** / that the following condition is met:
  10:./FW/ff.c     **** /
  11:./FW/ff.c     **** / 1. Redistributions of source code must retain the above copyright notice,
  12:./FW/ff.c     **** /    this condition and the following disclaimer.
  13:./FW/ff.c     **** /
  14:./FW/ff.c     **** / This software is provided by the copyright holder and contributors "AS IS"
  15:./FW/ff.c     **** / and any warranties related to this software are DISCLAIMED.
  16:./FW/ff.c     **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:./FW/ff.c     **** / by use of this software.
  18:./FW/ff.c     **** /----------------------------------------------------------------------------*/
  19:./FW/ff.c     **** 
  20:./FW/ff.c     **** 
  21:./FW/ff.c     **** #include "ff.h"         /* Declarations of FatFs API */
  22:./FW/ff.c     **** #include "diskio.h"     /* Declarations of device I/O functions */
  23:./FW/ff.c     **** 
  24:./FW/ff.c     **** 
  25:./FW/ff.c     **** /*--------------------------------------------------------------------------
  26:./FW/ff.c     **** 
  27:./FW/ff.c     ****    Module Private Definitions
  28:./FW/ff.c     **** 
  29:./FW/ff.c     **** ---------------------------------------------------------------------------*/
  30:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 2


  31:./FW/ff.c     **** #if _FATFS != 68300 /* Revision ID */
  32:./FW/ff.c     **** #error Wrong include file (ff.h).
  33:./FW/ff.c     **** #endif
  34:./FW/ff.c     **** 
  35:./FW/ff.c     **** 
  36:./FW/ff.c     **** /* DBCS code ranges and SBCS upper conversion tables */
  37:./FW/ff.c     **** 
  38:./FW/ff.c     **** #if _CODE_PAGE == 932   /* Japanese Shift-JIS */
  39:./FW/ff.c     **** #define _DF1S   0x81    /* DBC 1st byte range 1 start */
  40:./FW/ff.c     **** #define _DF1E   0x9F    /* DBC 1st byte range 1 end */
  41:./FW/ff.c     **** #define _DF2S   0xE0    /* DBC 1st byte range 2 start */
  42:./FW/ff.c     **** #define _DF2E   0xFC    /* DBC 1st byte range 2 end */
  43:./FW/ff.c     **** #define _DS1S   0x40    /* DBC 2nd byte range 1 start */
  44:./FW/ff.c     **** #define _DS1E   0x7E    /* DBC 2nd byte range 1 end */
  45:./FW/ff.c     **** #define _DS2S   0x80    /* DBC 2nd byte range 2 start */
  46:./FW/ff.c     **** #define _DS2E   0xFC    /* DBC 2nd byte range 2 end */
  47:./FW/ff.c     **** 
  48:./FW/ff.c     **** #elif _CODE_PAGE == 936 /* Simplified Chinese GBK */
  49:./FW/ff.c     **** #define _DF1S   0x81
  50:./FW/ff.c     **** #define _DF1E   0xFE
  51:./FW/ff.c     **** #define _DS1S   0x40
  52:./FW/ff.c     **** #define _DS1E   0x7E
  53:./FW/ff.c     **** #define _DS2S   0x80
  54:./FW/ff.c     **** #define _DS2E   0xFE
  55:./FW/ff.c     **** 
  56:./FW/ff.c     **** #elif _CODE_PAGE == 949 /* Korean */
  57:./FW/ff.c     **** #define _DF1S   0x81
  58:./FW/ff.c     **** #define _DF1E   0xFE
  59:./FW/ff.c     **** #define _DS1S   0x41
  60:./FW/ff.c     **** #define _DS1E   0x5A
  61:./FW/ff.c     **** #define _DS2S   0x61
  62:./FW/ff.c     **** #define _DS2E   0x7A
  63:./FW/ff.c     **** #define _DS3S   0x81
  64:./FW/ff.c     **** #define _DS3E   0xFE
  65:./FW/ff.c     **** 
  66:./FW/ff.c     **** #elif _CODE_PAGE == 950 /* Traditional Chinese Big5 */
  67:./FW/ff.c     **** #define _DF1S   0x81
  68:./FW/ff.c     **** #define _DF1E   0xFE
  69:./FW/ff.c     **** #define _DS1S   0x40
  70:./FW/ff.c     **** #define _DS1E   0x7E
  71:./FW/ff.c     **** #define _DS2S   0xA1
  72:./FW/ff.c     **** #define _DS2E   0xFE
  73:./FW/ff.c     **** 
  74:./FW/ff.c     **** #elif _CODE_PAGE == 437 /* U.S. */
  75:./FW/ff.c     **** #define _DF1S   0
  76:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  77:./FW/ff.c     ****                 0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  78:./FW/ff.c     ****                 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  79:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  80:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  81:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  82:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  83:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  84:./FW/ff.c     **** 
  85:./FW/ff.c     **** #elif _CODE_PAGE == 720 /* Arabic */
  86:./FW/ff.c     **** #define _DF1S   0
  87:./FW/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 3


  88:./FW/ff.c     ****                 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  89:./FW/ff.c     ****                 0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  90:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  91:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  92:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  93:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  94:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  95:./FW/ff.c     **** 
  96:./FW/ff.c     **** #elif _CODE_PAGE == 737 /* Greek */
  97:./FW/ff.c     **** #define _DF1S   0
  98:./FW/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  99:./FW/ff.c     ****                 0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 100:./FW/ff.c     ****                 0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 101:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 102:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 103:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 104:./FW/ff.c     ****                 0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 105:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 106:./FW/ff.c     **** 
 107:./FW/ff.c     **** #elif _CODE_PAGE == 771 /* KBL */
 108:./FW/ff.c     **** #define _DF1S   0
 109:./FW/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 110:./FW/ff.c     ****                 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 111:./FW/ff.c     ****                 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 112:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 113:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 114:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 115:./FW/ff.c     ****                 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 116:./FW/ff.c     ****                 0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 117:./FW/ff.c     **** 
 118:./FW/ff.c     **** #elif _CODE_PAGE == 775 /* Baltic */
 119:./FW/ff.c     **** #define _DF1S   0
 120:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
 121:./FW/ff.c     ****                 0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 122:./FW/ff.c     ****                 0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 123:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 124:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 125:./FW/ff.c     ****                 0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 126:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 127:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 128:./FW/ff.c     **** 
 129:./FW/ff.c     **** #elif _CODE_PAGE == 850 /* Latin 1 */
 130:./FW/ff.c     **** #define _DF1S   0
 131:./FW/ff.c     **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
 132:./FW/ff.c     ****                 0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 133:./FW/ff.c     ****                 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 134:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 135:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 136:./FW/ff.c     ****                 0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 137:./FW/ff.c     ****                 0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 138:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 139:./FW/ff.c     **** 
 140:./FW/ff.c     **** #elif _CODE_PAGE == 852 /* Latin 2 */
 141:./FW/ff.c     **** #define _DF1S   0
 142:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
 143:./FW/ff.c     ****                 0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 144:./FW/ff.c     ****                 0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 4


 145:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 146:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 147:./FW/ff.c     ****                 0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 148:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 149:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 150:./FW/ff.c     **** 
 151:./FW/ff.c     **** #elif _CODE_PAGE == 855 /* Cyrillic */
 152:./FW/ff.c     **** #define _DF1S   0
 153:./FW/ff.c     **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
 154:./FW/ff.c     ****                 0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 155:./FW/ff.c     ****                 0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 156:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 157:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 158:./FW/ff.c     ****                 0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 159:./FW/ff.c     ****                 0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 160:./FW/ff.c     ****                 0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 161:./FW/ff.c     **** 
 162:./FW/ff.c     **** #elif _CODE_PAGE == 857 /* Turkish */
 163:./FW/ff.c     **** #define _DF1S   0
 164:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
 165:./FW/ff.c     ****                 0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 166:./FW/ff.c     ****                 0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 167:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 168:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 169:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 170:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 171:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 172:./FW/ff.c     **** 
 173:./FW/ff.c     **** #elif _CODE_PAGE == 860 /* Portuguese */
 174:./FW/ff.c     **** #define _DF1S   0
 175:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
 176:./FW/ff.c     ****                 0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 177:./FW/ff.c     ****                 0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 178:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 179:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 180:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 181:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 182:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 183:./FW/ff.c     **** 
 184:./FW/ff.c     **** #elif _CODE_PAGE == 861 /* Icelandic */
 185:./FW/ff.c     **** #define _DF1S   0
 186:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
 187:./FW/ff.c     ****                 0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 188:./FW/ff.c     ****                 0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 189:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 190:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 191:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 192:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 193:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 194:./FW/ff.c     **** 
 195:./FW/ff.c     **** #elif _CODE_PAGE == 862 /* Hebrew */
 196:./FW/ff.c     **** #define _DF1S   0
 197:./FW/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 198:./FW/ff.c     ****                 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 199:./FW/ff.c     ****                 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 200:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 201:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 5


 202:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 203:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 204:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 205:./FW/ff.c     **** 
 206:./FW/ff.c     **** #elif _CODE_PAGE == 863 /* Canadian-French */
 207:./FW/ff.c     **** #define _DF1S   0
 208:./FW/ff.c     **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
 209:./FW/ff.c     ****                 0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 210:./FW/ff.c     ****                 0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 211:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 212:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 213:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 214:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 215:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 216:./FW/ff.c     **** 
 217:./FW/ff.c     **** #elif _CODE_PAGE == 864 /* Arabic */
 218:./FW/ff.c     **** #define _DF1S   0
 219:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 220:./FW/ff.c     ****                 0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 221:./FW/ff.c     ****                 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 222:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 223:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 224:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 225:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 226:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 227:./FW/ff.c     **** 
 228:./FW/ff.c     **** #elif _CODE_PAGE == 865 /* Nordic */
 229:./FW/ff.c     **** #define _DF1S   0
 230:./FW/ff.c     **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 231:./FW/ff.c     ****                 0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 232:./FW/ff.c     ****                 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 233:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 234:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 235:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 236:./FW/ff.c     ****                 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 237:./FW/ff.c     ****                 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 238:./FW/ff.c     **** 
 239:./FW/ff.c     **** #elif _CODE_PAGE == 866 /* Russian */
 240:./FW/ff.c     **** #define _DF1S   0
 241:./FW/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 242:./FW/ff.c     ****                 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 243:./FW/ff.c     ****                 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 244:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 245:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 246:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 247:./FW/ff.c     ****                 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 248:./FW/ff.c     ****                 0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 249:./FW/ff.c     **** 
 250:./FW/ff.c     **** #elif _CODE_PAGE == 869 /* Greek 2 */
 251:./FW/ff.c     **** #define _DF1S   0
 252:./FW/ff.c     **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 253:./FW/ff.c     ****                 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 254:./FW/ff.c     ****                 0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 255:./FW/ff.c     ****                 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 256:./FW/ff.c     ****                 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 257:./FW/ff.c     ****                 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 258:./FW/ff.c     ****                 0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 6


 259:./FW/ff.c     ****                 0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 260:./FW/ff.c     **** 
 261:./FW/ff.c     **** #elif _CODE_PAGE == 1   /* ASCII (for only non-LFN cfg) */
 262:./FW/ff.c     **** #if _USE_LFN != 0
 263:./FW/ff.c     **** #error Cannot enable LFN without valid code page.
 264:./FW/ff.c     **** #endif
 265:./FW/ff.c     **** #define _DF1S   0
 266:./FW/ff.c     **** 
 267:./FW/ff.c     **** #else
 268:./FW/ff.c     **** #error Unknown code page
 269:./FW/ff.c     **** 
 270:./FW/ff.c     **** #endif
 271:./FW/ff.c     **** 
 272:./FW/ff.c     **** 
 273:./FW/ff.c     **** /* Character code support macros */
 274:./FW/ff.c     **** #define IsUpper(c)  (((c)>='A')&&((c)<='Z'))
 275:./FW/ff.c     **** #define IsLower(c)  (((c)>='a')&&((c)<='z'))
 276:./FW/ff.c     **** #define IsDigit(c)  (((c)>='0')&&((c)<='9'))
 277:./FW/ff.c     **** 
 278:./FW/ff.c     **** #if _DF1S != 0  /* Code page is DBCS */
 279:./FW/ff.c     **** 
 280:./FW/ff.c     **** #ifdef _DF2S    /* Two 1st byte areas */
 281:./FW/ff.c     **** #define IsDBCS1(c)  (((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c)
 282:./FW/ff.c     **** #else           /* One 1st byte area */
 283:./FW/ff.c     **** #define IsDBCS1(c)  ((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 284:./FW/ff.c     **** #endif
 285:./FW/ff.c     **** 
 286:./FW/ff.c     **** #ifdef _DS3S    /* Three 2nd byte areas */
 287:./FW/ff.c     **** #define IsDBCS2(c)  (((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c)
 288:./FW/ff.c     **** #else           /* Two 2nd byte areas */
 289:./FW/ff.c     **** #define IsDBCS2(c)  (((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c)
 290:./FW/ff.c     **** #endif
 291:./FW/ff.c     **** 
 292:./FW/ff.c     **** #else           /* Code page is SBCS */
 293:./FW/ff.c     **** 
 294:./FW/ff.c     **** #define IsDBCS1(c)  0
 295:./FW/ff.c     **** #define IsDBCS2(c)  0
 296:./FW/ff.c     **** 
 297:./FW/ff.c     **** #endif /* _DF1S */
 298:./FW/ff.c     **** 
 299:./FW/ff.c     **** 
 300:./FW/ff.c     **** /* Additional file attribute bits for internal use */
 301:./FW/ff.c     **** #define AM_VOL      0x08    /* Volume label */
 302:./FW/ff.c     **** #define AM_LFN      0x0F    /* LFN entry */
 303:./FW/ff.c     **** #define AM_MASK     0x3F    /* Mask of defined bits */
 304:./FW/ff.c     **** 
 305:./FW/ff.c     **** 
 306:./FW/ff.c     **** /* Additional file access control and file status flags for internal use */
 307:./FW/ff.c     **** #define FA_SEEKEND  0x20    /* Seek to end of the file on file open */
 308:./FW/ff.c     **** #define FA_MODIFIED 0x40    /* File has been modified */
 309:./FW/ff.c     **** #define FA_DIRTY    0x80    /* FIL.buf[] needs to be written-back */
 310:./FW/ff.c     **** 
 311:./FW/ff.c     **** 
 312:./FW/ff.c     **** /* Name status flags in fn[] */
 313:./FW/ff.c     **** #define NSFLAG      11      /* Index of the name status byte */
 314:./FW/ff.c     **** #define NS_LOSS     0x01    /* Out of 8.3 format */
 315:./FW/ff.c     **** #define NS_LFN      0x02    /* Force to create LFN entry */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 7


 316:./FW/ff.c     **** #define NS_LAST     0x04    /* Last segment */
 317:./FW/ff.c     **** #define NS_BODY     0x08    /* Lower case flag (body) */
 318:./FW/ff.c     **** #define NS_EXT      0x10    /* Lower case flag (ext) */
 319:./FW/ff.c     **** #define NS_DOT      0x20    /* Dot entry */
 320:./FW/ff.c     **** #define NS_NOLFN    0x40    /* Do not find LFN */
 321:./FW/ff.c     **** #define NS_NONAME   0x80    /* Not followed */
 322:./FW/ff.c     **** 
 323:./FW/ff.c     **** 
 324:./FW/ff.c     **** /* Limits and boundaries */
 325:./FW/ff.c     **** #define MAX_DIR     0x200000        /* Max size of FAT directory */
 326:./FW/ff.c     **** #define MAX_DIR_EX  0x10000000      /* Max size of exFAT directory */
 327:./FW/ff.c     **** #define MAX_FAT12   0xFF5           /* Max FAT12 clusters (differs from specs, but correct for real
 328:./FW/ff.c     **** #define MAX_FAT16   0xFFF5          /* Max FAT16 clusters (differs from specs, but correct for real
 329:./FW/ff.c     **** #define MAX_FAT32   0x0FFFFFF5      /* Max FAT32 clusters (not specified, practical limit) */
 330:./FW/ff.c     **** #define MAX_EXFAT   0x7FFFFFFD      /* Max exFAT clusters (differs from specs, implementation limit
 331:./FW/ff.c     **** 
 332:./FW/ff.c     **** 
 333:./FW/ff.c     **** /* FatFs refers the FAT structure as simple byte array instead of structure member
 334:./FW/ff.c     **** / because the C structure is not binary compatible between different platforms */
 335:./FW/ff.c     **** 
 336:./FW/ff.c     **** #define BS_JmpBoot          0       /* x86 jump instruction (3-byte) */
 337:./FW/ff.c     **** #define BS_OEMName          3       /* OEM name (8-byte) */
 338:./FW/ff.c     **** #define BPB_BytsPerSec      11      /* Sector size [byte] (WORD) */
 339:./FW/ff.c     **** #define BPB_SecPerClus      13      /* Cluster size [sector] (BYTE) */
 340:./FW/ff.c     **** #define BPB_RsvdSecCnt      14      /* Size of reserved area [sector] (WORD) */
 341:./FW/ff.c     **** #define BPB_NumFATs         16      /* Number of FATs (BYTE) */
 342:./FW/ff.c     **** #define BPB_RootEntCnt      17      /* Size of root directory area for FAT12/16 [entry] (WORD) */
 343:./FW/ff.c     **** #define BPB_TotSec16        19      /* Volume size (16-bit) [sector] (WORD) */
 344:./FW/ff.c     **** #define BPB_Media           21      /* Media descriptor byte (BYTE) */
 345:./FW/ff.c     **** #define BPB_FATSz16         22      /* FAT size (16-bit) [sector] (WORD) */
 346:./FW/ff.c     **** #define BPB_SecPerTrk       24      /* Track size for int13h [sector] (WORD) */
 347:./FW/ff.c     **** #define BPB_NumHeads        26      /* Number of heads for int13h (WORD) */
 348:./FW/ff.c     **** #define BPB_HiddSec         28      /* Volume offset from top of the drive (DWORD) */
 349:./FW/ff.c     **** #define BPB_TotSec32        32      /* Volume size (32-bit) [sector] (DWORD) */
 350:./FW/ff.c     **** #define BS_DrvNum           36      /* Physical drive number for int13h (BYTE) */
 351:./FW/ff.c     **** #define BS_NTres            37      /* Error flag (BYTE) */
 352:./FW/ff.c     **** #define BS_BootSig          38      /* Extended boot signature (BYTE) */
 353:./FW/ff.c     **** #define BS_VolID            39      /* Volume serial number (DWORD) */
 354:./FW/ff.c     **** #define BS_VolLab           43      /* Volume label string (8-byte) */
 355:./FW/ff.c     **** #define BS_FilSysType       54      /* File system type string (8-byte) */
 356:./FW/ff.c     **** #define BS_BootCode         62      /* Boot code (448-byte) */
 357:./FW/ff.c     **** #define BS_55AA             510     /* Signature word (WORD) */
 358:./FW/ff.c     **** 
 359:./FW/ff.c     **** #define BPB_FATSz32         36      /* FAT32: FAT size [sector] (DWORD) */
 360:./FW/ff.c     **** #define BPB_ExtFlags32      40      /* FAT32: Extended flags (WORD) */
 361:./FW/ff.c     **** #define BPB_FSVer32         42      /* FAT32: File system version (WORD) */
 362:./FW/ff.c     **** #define BPB_RootClus32      44      /* FAT32: Root directory cluster (DWORD) */
 363:./FW/ff.c     **** #define BPB_FSInfo32        48      /* FAT32: Offset of FSINFO sector (WORD) */
 364:./FW/ff.c     **** #define BPB_BkBootSec32     50      /* FAT32: Offset of backup boot sector (WORD) */
 365:./FW/ff.c     **** #define BS_DrvNum32         64      /* FAT32: Physical drive number for int13h (BYTE) */
 366:./FW/ff.c     **** #define BS_NTres32          65      /* FAT32: Error flag (BYTE) */
 367:./FW/ff.c     **** #define BS_BootSig32        66      /* FAT32: Extended boot signature (BYTE) */
 368:./FW/ff.c     **** #define BS_VolID32          67      /* FAT32: Volume serial number (DWORD) */
 369:./FW/ff.c     **** #define BS_VolLab32         71      /* FAT32: Volume label string (8-byte) */
 370:./FW/ff.c     **** #define BS_FilSysType32     82      /* FAT32: File system type string (8-byte) */
 371:./FW/ff.c     **** #define BS_BootCode32       90      /* FAT32: Boot code (420-byte) */
 372:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 8


 373:./FW/ff.c     **** #define BPB_ZeroedEx        11      /* exFAT: MBZ field (53-byte) */
 374:./FW/ff.c     **** #define BPB_VolOfsEx        64      /* exFAT: Volume offset from top of the drive [sector] (QWORD) 
 375:./FW/ff.c     **** #define BPB_TotSecEx        72      /* exFAT: Volume size [sector] (QWORD) */
 376:./FW/ff.c     **** #define BPB_FatOfsEx        80      /* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 377:./FW/ff.c     **** #define BPB_FatSzEx         84      /* exFAT: FAT size [sector] (DWORD) */
 378:./FW/ff.c     **** #define BPB_DataOfsEx       88      /* exFAT: Data offset from top of the volume [sector] (DWORD) *
 379:./FW/ff.c     **** #define BPB_NumClusEx       92      /* exFAT: Number of clusters (DWORD) */
 380:./FW/ff.c     **** #define BPB_RootClusEx      96      /* exFAT: Root directory start cluster (DWORD) */
 381:./FW/ff.c     **** #define BPB_VolIDEx         100     /* exFAT: Volume serial number (DWORD) */
 382:./FW/ff.c     **** #define BPB_FSVerEx         104     /* exFAT: File system version (WORD) */
 383:./FW/ff.c     **** #define BPB_VolFlagEx       106     /* exFAT: Volume flags (BYTE) */
 384:./FW/ff.c     **** #define BPB_ActFatEx        107     /* exFAT: Active FAT flags (BYTE) */
 385:./FW/ff.c     **** #define BPB_BytsPerSecEx    108     /* exFAT: Log2 of sector size in unit of byte (BYTE) */
 386:./FW/ff.c     **** #define BPB_SecPerClusEx    109     /* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 387:./FW/ff.c     **** #define BPB_NumFATsEx       110     /* exFAT: Number of FATs (BYTE) */
 388:./FW/ff.c     **** #define BPB_DrvNumEx        111     /* exFAT: Physical drive number for int13h (BYTE) */
 389:./FW/ff.c     **** #define BPB_PercInUseEx     112     /* exFAT: Percent in use (BYTE) */
 390:./FW/ff.c     **** #define BPB_RsvdEx          113     /* exFAT: Reserved (7-byte) */
 391:./FW/ff.c     **** #define BS_BootCodeEx       120     /* exFAT: Boot code (390-byte) */
 392:./FW/ff.c     **** 
 393:./FW/ff.c     **** #define DIR_Name            0       /* Short file name (11-byte) */
 394:./FW/ff.c     **** #define DIR_Attr            11      /* Attribute (BYTE) */
 395:./FW/ff.c     **** #define DIR_NTres           12      /* Lower case flag (BYTE) */
 396:./FW/ff.c     **** #define DIR_CrtTime10       13      /* Created time sub-second (BYTE) */
 397:./FW/ff.c     **** #define DIR_CrtTime         14      /* Created time (DWORD) */
 398:./FW/ff.c     **** #define DIR_LstAccDate      18      /* Last accessed date (WORD) */
 399:./FW/ff.c     **** #define DIR_FstClusHI       20      /* Higher 16-bit of first cluster (WORD) */
 400:./FW/ff.c     **** #define DIR_ModTime         22      /* Modified time (DWORD) */
 401:./FW/ff.c     **** #define DIR_FstClusLO       26      /* Lower 16-bit of first cluster (WORD) */
 402:./FW/ff.c     **** #define DIR_FileSize        28      /* File size (DWORD) */
 403:./FW/ff.c     **** #define LDIR_Ord            0       /* LFN: LFN order and LLE flag (BYTE) */
 404:./FW/ff.c     **** #define LDIR_Attr           11      /* LFN: LFN attribute (BYTE) */
 405:./FW/ff.c     **** #define LDIR_Type           12      /* LFN: Entry type (BYTE) */
 406:./FW/ff.c     **** #define LDIR_Chksum         13      /* LFN: Checksum of the SFN (BYTE) */
 407:./FW/ff.c     **** #define LDIR_FstClusLO      26      /* LFN: MBZ field (WORD) */
 408:./FW/ff.c     **** #define XDIR_Type           0       /* exFAT: Type of exFAT directory entry (BYTE) */
 409:./FW/ff.c     **** #define XDIR_NumLabel       1       /* exFAT: Number of volume label characters (BYTE) */
 410:./FW/ff.c     **** #define XDIR_Label          2       /* exFAT: Volume label (11-WORD) */
 411:./FW/ff.c     **** #define XDIR_CaseSum        4       /* exFAT: Sum of case conversion table (DWORD) */
 412:./FW/ff.c     **** #define XDIR_NumSec         1       /* exFAT: Number of secondary entries (BYTE) */
 413:./FW/ff.c     **** #define XDIR_SetSum         2       /* exFAT: Sum of the set of directory entries (WORD) */
 414:./FW/ff.c     **** #define XDIR_Attr           4       /* exFAT: File attribute (WORD) */
 415:./FW/ff.c     **** #define XDIR_CrtTime        8       /* exFAT: Created time (DWORD) */
 416:./FW/ff.c     **** #define XDIR_ModTime        12      /* exFAT: Modified time (DWORD) */
 417:./FW/ff.c     **** #define XDIR_AccTime        16      /* exFAT: Last accessed time (DWORD) */
 418:./FW/ff.c     **** #define XDIR_CrtTime10      20      /* exFAT: Created time subsecond (BYTE) */
 419:./FW/ff.c     **** #define XDIR_ModTime10      21      /* exFAT: Modified time subsecond (BYTE) */
 420:./FW/ff.c     **** #define XDIR_CrtTZ          22      /* exFAT: Created timezone (BYTE) */
 421:./FW/ff.c     **** #define XDIR_ModTZ          23      /* exFAT: Modified timezone (BYTE) */
 422:./FW/ff.c     **** #define XDIR_AccTZ          24      /* exFAT: Last accessed timezone (BYTE) */
 423:./FW/ff.c     **** #define XDIR_GenFlags       33      /* exFAT: General secondary flags (WORD) */
 424:./FW/ff.c     **** #define XDIR_NumName        35      /* exFAT: Number of file name characters (BYTE) */
 425:./FW/ff.c     **** #define XDIR_NameHash       36      /* exFAT: Hash of file name (WORD) */
 426:./FW/ff.c     **** #define XDIR_ValidFileSize  40      /* exFAT: Valid file size (QWORD) */
 427:./FW/ff.c     **** #define XDIR_FstClus        52      /* exFAT: First cluster of the file data (DWORD) */
 428:./FW/ff.c     **** #define XDIR_FileSize       56      /* exFAT: File/Directory size (QWORD) */
 429:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 9


 430:./FW/ff.c     **** #define SZDIRE              32      /* Size of a directory entry */
 431:./FW/ff.c     **** #define DDEM                0xE5    /* Deleted directory entry mark set to DIR_Name[0] */
 432:./FW/ff.c     **** #define RDDEM               0x05    /* Replacement of the character collides with DDEM */
 433:./FW/ff.c     **** #define LLEF                0x40    /* Last long entry flag in LDIR_Ord */
 434:./FW/ff.c     **** 
 435:./FW/ff.c     **** #define FSI_LeadSig         0       /* FAT32 FSI: Leading signature (DWORD) */
 436:./FW/ff.c     **** #define FSI_StrucSig        484     /* FAT32 FSI: Structure signature (DWORD) */
 437:./FW/ff.c     **** #define FSI_Free_Count      488     /* FAT32 FSI: Number of free clusters (DWORD) */
 438:./FW/ff.c     **** #define FSI_Nxt_Free        492     /* FAT32 FSI: Last allocated cluster (DWORD) */
 439:./FW/ff.c     **** 
 440:./FW/ff.c     **** #define MBR_Table           446     /* MBR: Offset of partition table in the MBR */
 441:./FW/ff.c     **** #define SZ_PTE              16      /* MBR: Size of a partition table entry */
 442:./FW/ff.c     **** #define PTE_Boot            0       /* MBR PTE: Boot indicator */
 443:./FW/ff.c     **** #define PTE_StHead          1       /* MBR PTE: Start head */
 444:./FW/ff.c     **** #define PTE_StSec           2       /* MBR PTE: Start sector */
 445:./FW/ff.c     **** #define PTE_StCyl           3       /* MBR PTE: Start cylinder */
 446:./FW/ff.c     **** #define PTE_System          4       /* MBR PTE: System ID */
 447:./FW/ff.c     **** #define PTE_EdHead          5       /* MBR PTE: End head */
 448:./FW/ff.c     **** #define PTE_EdSec           6       /* MBR PTE: End sector */
 449:./FW/ff.c     **** #define PTE_EdCyl           7       /* MBR PTE: End cylinder */
 450:./FW/ff.c     **** #define PTE_StLba           8       /* MBR PTE: Start in LBA */
 451:./FW/ff.c     **** #define PTE_SizLba          12      /* MBR PTE: Size in LBA */
 452:./FW/ff.c     **** 
 453:./FW/ff.c     **** 
 454:./FW/ff.c     **** /* Post process after fatal error on file operation */
 455:./FW/ff.c     **** #define ABORT(fs, res)      { fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 456:./FW/ff.c     **** 
 457:./FW/ff.c     **** 
 458:./FW/ff.c     **** /* Reentrancy related */
 459:./FW/ff.c     **** #if _FS_REENTRANT
 460:./FW/ff.c     **** #if _USE_LFN == 1
 461:./FW/ff.c     **** #error Static LFN work area cannot be used at thread-safe configuration
 462:./FW/ff.c     **** #endif
 463:./FW/ff.c     **** #define ENTER_FF(fs)        { if (!lock_fs(fs)) return FR_TIMEOUT; }
 464:./FW/ff.c     **** #define LEAVE_FF(fs, res)   { unlock_fs(fs, res); return res; }
 465:./FW/ff.c     **** #else
 466:./FW/ff.c     **** #define ENTER_FF(fs)
 467:./FW/ff.c     **** #define LEAVE_FF(fs, res)   return res
 468:./FW/ff.c     **** #endif
 469:./FW/ff.c     **** 
 470:./FW/ff.c     **** 
 471:./FW/ff.c     **** /* Definitions of volume - partition conversion */
 472:./FW/ff.c     **** #if _MULTI_PARTITION
 473:./FW/ff.c     **** #define LD2PD(vol) VolToPart[vol].pd    /* Get physical drive number */
 474:./FW/ff.c     **** #define LD2PT(vol) VolToPart[vol].pt    /* Get partition index */
 475:./FW/ff.c     **** #else
 476:./FW/ff.c     **** #define LD2PD(vol) (BYTE)(vol)  /* Each logical drive is bound to the same physical drive number */
 477:./FW/ff.c     **** #define LD2PT(vol) 0            /* Find first valid partition or in SFD */
 478:./FW/ff.c     **** #endif
 479:./FW/ff.c     **** 
 480:./FW/ff.c     **** 
 481:./FW/ff.c     **** /* Definitions of sector size */
 482:./FW/ff.c     **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 483:./FW/ff.c     **** #error Wrong sector size configuration
 484:./FW/ff.c     **** #endif
 485:./FW/ff.c     **** #if _MAX_SS == _MIN_SS
 486:./FW/ff.c     **** #define SS(fs)  ((UINT)_MAX_SS) /* Fixed sector size */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 10


 487:./FW/ff.c     **** #else
 488:./FW/ff.c     **** #define SS(fs)  ((fs)->ssize)   /* Variable sector size */
 489:./FW/ff.c     **** #endif
 490:./FW/ff.c     **** 
 491:./FW/ff.c     **** 
 492:./FW/ff.c     **** /* Timestamp */
 493:./FW/ff.c     **** #if _FS_NORTC == 1
 494:./FW/ff.c     **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
 495:./FW/ff.c     **** #error Invalid _FS_NORTC settings
 496:./FW/ff.c     **** #endif
 497:./FW/ff.c     **** #define GET_FATTIME()   ((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORT
 498:./FW/ff.c     **** #else
 499:./FW/ff.c     **** #define GET_FATTIME()   get_fattime()
 500:./FW/ff.c     **** #endif
 501:./FW/ff.c     **** 
 502:./FW/ff.c     **** 
 503:./FW/ff.c     **** /* File lock controls */
 504:./FW/ff.c     **** #if _FS_LOCK != 0
 505:./FW/ff.c     **** #if _FS_READONLY
 506:./FW/ff.c     **** #error _FS_LOCK must be 0 at read-only configuration
 507:./FW/ff.c     **** #endif
 508:./FW/ff.c     **** typedef struct {
 509:./FW/ff.c     ****     FATFS *fs;      /* Object ID 1, volume (NULL:blank entry) */
 510:./FW/ff.c     ****     DWORD clu;      /* Object ID 2, containing directory (0:root) */
 511:./FW/ff.c     ****     DWORD ofs;      /* Object ID 3, offset in the directory */
 512:./FW/ff.c     ****     WORD ctr;       /* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mo
 513:./FW/ff.c     **** } FILESEM;
 514:./FW/ff.c     **** #endif
 515:./FW/ff.c     **** 
 516:./FW/ff.c     **** 
 517:./FW/ff.c     **** 
 518:./FW/ff.c     **** 
 519:./FW/ff.c     **** 
 520:./FW/ff.c     **** /*--------------------------------------------------------------------------
 521:./FW/ff.c     **** 
 522:./FW/ff.c     ****    Module Private Work Area
 523:./FW/ff.c     **** 
 524:./FW/ff.c     **** ---------------------------------------------------------------------------*/
 525:./FW/ff.c     **** 
 526:./FW/ff.c     **** /* Remark: Variables defined here without initial value shall be guaranteed
 527:./FW/ff.c     **** /  zero/null at start-up. If not, the linker option or start-up routine is
 528:./FW/ff.c     **** /  not compliance with C standard. */
 529:./FW/ff.c     **** 
 530:./FW/ff.c     **** #if _VOLUMES < 1 || _VOLUMES > 10
 531:./FW/ff.c     **** #error Wrong _VOLUMES setting
 532:./FW/ff.c     **** #endif
 533:./FW/ff.c     **** static FATFS *FatFs[_VOLUMES];  /* Pointer to the file system objects (logical drives) */
 534:./FW/ff.c     **** static WORD Fsid;               /* File system mount ID */
 535:./FW/ff.c     **** 
 536:./FW/ff.c     **** #if _FS_RPATH != 0 && _VOLUMES >= 2
 537:./FW/ff.c     **** static BYTE CurrVol;            /* Current drive */
 538:./FW/ff.c     **** #endif
 539:./FW/ff.c     **** 
 540:./FW/ff.c     **** #if _FS_LOCK != 0
 541:./FW/ff.c     **** static FILESEM Files[_FS_LOCK]; /* Open object lock semaphores */
 542:./FW/ff.c     **** #endif
 543:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 11


 544:./FW/ff.c     **** #if _USE_LFN == 0       /* Non-LFN configuration */
 545:./FW/ff.c     **** #define DEF_NAMBUF
 546:./FW/ff.c     **** #define INIT_NAMBUF(fs)
 547:./FW/ff.c     **** #define FREE_NAMBUF()
 548:./FW/ff.c     **** 
 549:./FW/ff.c     **** #else                   /* LFN configuration */
 550:./FW/ff.c     **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 551:./FW/ff.c     **** #error Wrong _MAX_LFN value
 552:./FW/ff.c     **** #endif
 553:./FW/ff.c     **** #define MAXDIRB(nc) ((nc + 44U) / 15 * SZDIRE)
 554:./FW/ff.c     **** 
 555:./FW/ff.c     **** #if _USE_LFN == 1       /* LFN enabled with static working buffer */
 556:./FW/ff.c     **** #if _FS_EXFAT
 557:./FW/ff.c     **** static BYTE DirBuf[MAXDIRB(_MAX_LFN)];  /* Directory entry block scratchpad buffer */
 558:./FW/ff.c     **** #endif
 559:./FW/ff.c     **** static WCHAR LfnBuf[_MAX_LFN + 1];  /* LFN enabled with static working buffer */
 560:./FW/ff.c     **** #define DEF_NAMBUF
 561:./FW/ff.c     **** #define INIT_NAMBUF(fs)
 562:./FW/ff.c     **** #define FREE_NAMBUF()
 563:./FW/ff.c     **** 
 564:./FW/ff.c     **** #elif _USE_LFN == 2     /* LFN enabled with dynamic working buffer on the stack */
 565:./FW/ff.c     **** #if _FS_EXFAT
 566:./FW/ff.c     **** #define DEF_NAMBUF      WCHAR lbuf[_MAX_LFN+1]; BYTE dbuf[MAXDIRB(_MAX_LFN)];
 567:./FW/ff.c     **** #define INIT_NAMBUF(fs) { (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 568:./FW/ff.c     **** #define FREE_NAMBUF()
 569:./FW/ff.c     **** #else
 570:./FW/ff.c     **** #define DEF_NAMBUF      WCHAR lbuf[_MAX_LFN+1];
 571:./FW/ff.c     **** #define INIT_NAMBUF(fs) { (fs)->lfnbuf = lbuf; }
 572:./FW/ff.c     **** #define FREE_NAMBUF()
 573:./FW/ff.c     **** #endif
 574:./FW/ff.c     **** 
 575:./FW/ff.c     **** #elif _USE_LFN == 3     /* LFN enabled with dynamic working buffer on the heap */
 576:./FW/ff.c     **** #if _FS_EXFAT
 577:./FW/ff.c     **** #define DEF_NAMBUF      WCHAR *lfn;
 578:./FW/ff.c     **** #define INIT_NAMBUF(fs) { lfn = ff_memalloc((_MAX_LFN+1)*2 + MAXDIRB(_MAX_LFN)); if (!lfn) LEAVE_FF
 579:./FW/ff.c     **** #define FREE_NAMBUF()   ff_memfree(lfn)
 580:./FW/ff.c     **** #else
 581:./FW/ff.c     **** #define DEF_NAMBUF      WCHAR *lfn;
 582:./FW/ff.c     **** #define INIT_NAMBUF(fs) { lfn = ff_memalloc((_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_C
 583:./FW/ff.c     **** #define FREE_NAMBUF()   ff_memfree(lfn)
 584:./FW/ff.c     **** #endif
 585:./FW/ff.c     **** 
 586:./FW/ff.c     **** #else
 587:./FW/ff.c     **** #error Wrong _USE_LFN setting
 588:./FW/ff.c     **** 
 589:./FW/ff.c     **** #endif
 590:./FW/ff.c     **** #endif  /* else _USE_LFN == 0 */
 591:./FW/ff.c     **** 
 592:./FW/ff.c     **** #ifdef _EXCVT
 593:./FW/ff.c     **** static const BYTE ExCvt[] = _EXCVT; /* Upper conversion table for SBCS extended characters */
 594:./FW/ff.c     **** #endif
 595:./FW/ff.c     **** 
 596:./FW/ff.c     **** 
 597:./FW/ff.c     **** 
 598:./FW/ff.c     **** 
 599:./FW/ff.c     **** 
 600:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 12


 601:./FW/ff.c     **** /*--------------------------------------------------------------------------
 602:./FW/ff.c     **** 
 603:./FW/ff.c     ****    Module Private Functions
 604:./FW/ff.c     **** 
 605:./FW/ff.c     **** ---------------------------------------------------------------------------*/
 606:./FW/ff.c     **** 
 607:./FW/ff.c     **** 
 608:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 609:./FW/ff.c     **** /* Load/Store multi-byte word in the FAT structure                       */
 610:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 611:./FW/ff.c     **** 
 612:./FW/ff.c     **** static
 613:./FW/ff.c     **** WORD ld_word (const BYTE* ptr) {    /*   Load a 2-byte little-endian word */
  29              		.loc 1 613 32 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 614:./FW/ff.c     ****     WORD rv;
  34              		.loc 1 614 5 view .LVU1
 615:./FW/ff.c     **** 
 616:./FW/ff.c     ****     rv = ptr[1];
  35              		.loc 1 616 5 view .LVU2
  36              		.loc 1 616 13 is_stmt 0 view .LVU3
  37 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  38              	.LVL1:
 617:./FW/ff.c     ****     rv = rv << 8 | ptr[0];
  39              		.loc 1 617 5 is_stmt 1 view .LVU4
  40              		.loc 1 617 23 is_stmt 0 view .LVU5
  41 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  42              	.LVL2:
 618:./FW/ff.c     ****     return rv;
  43              		.loc 1 618 5 is_stmt 1 view .LVU6
 619:./FW/ff.c     **** }
  44              		.loc 1 619 1 is_stmt 0 view .LVU7
  45 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  46              	.LVL3:
  47              		.loc 1 619 1 view .LVU8
  48 0008 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE939:
  52              		.section	.text.ld_dword,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	ld_dword:
  60              	.LVL4:
  61              	.LFB940:
 620:./FW/ff.c     **** 
 621:./FW/ff.c     **** static
 622:./FW/ff.c     **** DWORD ld_dword (const BYTE* ptr) {  /* Load a 4-byte little-endian word */
  62              		.loc 1 622 34 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 13


  66              		@ link register save eliminated.
 623:./FW/ff.c     ****     DWORD rv;
  67              		.loc 1 623 5 view .LVU10
 624:./FW/ff.c     **** 
 625:./FW/ff.c     ****     rv = ptr[3];
  68              		.loc 1 625 5 view .LVU11
  69              		.loc 1 625 13 is_stmt 0 view .LVU12
  70 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  71              	.LVL5:
 626:./FW/ff.c     ****     rv = rv << 8 | ptr[2];
  72              		.loc 1 626 5 is_stmt 1 view .LVU13
  73              		.loc 1 626 23 is_stmt 0 view .LVU14
  74 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  75              		.loc 1 626 8 view .LVU15
  76 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  77              	.LVL6:
 627:./FW/ff.c     ****     rv = rv << 8 | ptr[1];
  78              		.loc 1 627 5 is_stmt 1 view .LVU16
  79              		.loc 1 627 23 is_stmt 0 view .LVU17
  80 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  81              		.loc 1 627 8 view .LVU18
  82 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  83              	.LVL7:
 628:./FW/ff.c     ****     rv = rv << 8 | ptr[0];
  84              		.loc 1 628 5 is_stmt 1 view .LVU19
  85              		.loc 1 628 23 is_stmt 0 view .LVU20
  86 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  87              	.LVL8:
 629:./FW/ff.c     ****     return rv;
  88              		.loc 1 629 5 is_stmt 1 view .LVU21
 630:./FW/ff.c     **** }
  89              		.loc 1 630 1 is_stmt 0 view .LVU22
  90 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  91              	.LVL9:
  92              		.loc 1 630 1 view .LVU23
  93 0014 7047     		bx	lr
  94              		.cfi_endproc
  95              	.LFE940:
  97              		.section	.text.st_word,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	st_word:
 105              	.LVL10:
 106              	.LFB941:
 631:./FW/ff.c     **** 
 632:./FW/ff.c     **** #if _FS_EXFAT
 633:./FW/ff.c     **** static
 634:./FW/ff.c     **** QWORD ld_qword (const BYTE* ptr) {  /* Load an 8-byte little-endian word */
 635:./FW/ff.c     ****     QWORD rv;
 636:./FW/ff.c     **** 
 637:./FW/ff.c     ****     rv = ptr[7];
 638:./FW/ff.c     ****     rv = rv << 8 | ptr[6];
 639:./FW/ff.c     ****     rv = rv << 8 | ptr[5];
 640:./FW/ff.c     ****     rv = rv << 8 | ptr[4];
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 14


 641:./FW/ff.c     ****     rv = rv << 8 | ptr[3];
 642:./FW/ff.c     ****     rv = rv << 8 | ptr[2];
 643:./FW/ff.c     ****     rv = rv << 8 | ptr[1];
 644:./FW/ff.c     ****     rv = rv << 8 | ptr[0];
 645:./FW/ff.c     ****     return rv;
 646:./FW/ff.c     **** }
 647:./FW/ff.c     **** #endif
 648:./FW/ff.c     **** 
 649:./FW/ff.c     **** #if !_FS_READONLY
 650:./FW/ff.c     **** static
 651:./FW/ff.c     **** void st_word (BYTE* ptr, WORD val) {    /* Store a 2-byte word in little-endian */
 107              		.loc 1 651 36 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 652:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 112              		.loc 1 652 5 view .LVU25
 113              		.loc 1 652 12 is_stmt 0 view .LVU26
 114 0000 0170     		strb	r1, [r0]
 653:./FW/ff.c     ****     val >>= 8;
 115              		.loc 1 653 5 is_stmt 1 view .LVU27
 116              	.LVL11:
 654:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 117              		.loc 1 654 5 view .LVU28
 118              		.loc 1 654 14 is_stmt 0 view .LVU29
 119 0002 090A     		lsrs	r1, r1, #8
 120              	.LVL12:
 121              		.loc 1 654 12 view .LVU30
 122 0004 4170     		strb	r1, [r0, #1]
 655:./FW/ff.c     **** }
 123              		.loc 1 655 1 view .LVU31
 124 0006 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE941:
 128              		.section	.text.st_dword,"ax",%progbits
 129              		.align	1
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 133              		.fpu fpv4-sp-d16
 135              	st_dword:
 136              	.LVL13:
 137              	.LFB942:
 656:./FW/ff.c     **** 
 657:./FW/ff.c     **** static
 658:./FW/ff.c     **** void st_dword (BYTE* ptr, DWORD val) {  /* Store a 4-byte word in little-endian */
 138              		.loc 1 658 38 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 659:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 143              		.loc 1 659 5 view .LVU33
 144              		.loc 1 659 12 is_stmt 0 view .LVU34
 145 0000 0170     		strb	r1, [r0]
 660:./FW/ff.c     ****     val >>= 8;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 15


 146              		.loc 1 660 5 is_stmt 1 view .LVU35
 147              	.LVL14:
 661:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 148              		.loc 1 661 5 view .LVU36
 149              		.loc 1 661 14 is_stmt 0 view .LVU37
 150 0002 C1F30723 		ubfx	r3, r1, #8, #8
 151              		.loc 1 661 12 view .LVU38
 152 0006 4370     		strb	r3, [r0, #1]
 662:./FW/ff.c     ****     val >>= 8;
 153              		.loc 1 662 5 is_stmt 1 view .LVU39
 154              	.LVL15:
 663:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 155              		.loc 1 663 5 view .LVU40
 156              		.loc 1 663 14 is_stmt 0 view .LVU41
 157 0008 C1F30743 		ubfx	r3, r1, #16, #8
 158              		.loc 1 663 12 view .LVU42
 159 000c 8370     		strb	r3, [r0, #2]
 664:./FW/ff.c     ****     val >>= 8;
 160              		.loc 1 664 5 is_stmt 1 view .LVU43
 161              	.LVL16:
 665:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 162              		.loc 1 665 5 view .LVU44
 163              		.loc 1 665 14 is_stmt 0 view .LVU45
 164 000e 090E     		lsrs	r1, r1, #24
 165              	.LVL17:
 166              		.loc 1 665 12 view .LVU46
 167 0010 C170     		strb	r1, [r0, #3]
 666:./FW/ff.c     **** }
 168              		.loc 1 666 1 view .LVU47
 169 0012 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE942:
 173              		.section	.text.mem_cpy,"ax",%progbits
 174              		.align	1
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu fpv4-sp-d16
 180              	mem_cpy:
 181              	.LVL18:
 182              	.LFB943:
 667:./FW/ff.c     **** 
 668:./FW/ff.c     **** #if _FS_EXFAT
 669:./FW/ff.c     **** static
 670:./FW/ff.c     **** void st_qword (BYTE* ptr, QWORD val) {  /* Store an 8-byte word in little-endian */
 671:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 672:./FW/ff.c     ****     val >>= 8;
 673:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 674:./FW/ff.c     ****     val >>= 8;
 675:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 676:./FW/ff.c     ****     val >>= 8;
 677:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 678:./FW/ff.c     ****     val >>= 8;
 679:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 680:./FW/ff.c     ****     val >>= 8;
 681:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 682:./FW/ff.c     ****     val >>= 8;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 16


 683:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 684:./FW/ff.c     ****     val >>= 8;
 685:./FW/ff.c     ****     *ptr++ = (BYTE)val;
 686:./FW/ff.c     **** }
 687:./FW/ff.c     **** #endif
 688:./FW/ff.c     **** #endif  /* !_FS_READONLY */
 689:./FW/ff.c     **** 
 690:./FW/ff.c     **** 
 691:./FW/ff.c     **** 
 692:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 693:./FW/ff.c     **** /* String functions                                                      */
 694:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 695:./FW/ff.c     **** 
 696:./FW/ff.c     **** /* Copy memory to memory */
 697:./FW/ff.c     **** static
 698:./FW/ff.c     **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 183              		.loc 1 698 53 is_stmt 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188              		.loc 1 698 53 is_stmt 0 view .LVU49
 189 0000 10B4     		push	{r4}
 190              	.LCFI0:
 191              		.cfi_def_cfa_offset 4
 192              		.cfi_offset 4, -4
 699:./FW/ff.c     ****     BYTE *d = (BYTE*)dst;
 193              		.loc 1 699 5 is_stmt 1 view .LVU50
 194              	.LVL19:
 700:./FW/ff.c     ****     const BYTE *s = (const BYTE*)src;
 195              		.loc 1 700 5 view .LVU51
 701:./FW/ff.c     **** 
 702:./FW/ff.c     ****     if (cnt) {
 196              		.loc 1 702 5 view .LVU52
 197              		.loc 1 702 8 is_stmt 0 view .LVU53
 198 0002 1446     		mov	r4, r2
 199 0004 2AB1     		cbz	r2, .L5
 200              	.LVL20:
 201              	.L7:
 703:./FW/ff.c     ****         do {
 202              		.loc 1 703 9 is_stmt 1 discriminator 1 view .LVU54
 704:./FW/ff.c     ****             *d++ = *s++;
 203              		.loc 1 704 13 discriminator 1 view .LVU55
 204              		.loc 1 704 20 is_stmt 0 discriminator 1 view .LVU56
 205 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 206 0008 0131     		adds	r1, r1, #1
 207              	.LVL21:
 208              		.loc 1 704 18 discriminator 1 view .LVU57
 209 000a 0270     		strb	r2, [r0]
 210 000c 0130     		adds	r0, r0, #1
 211              	.LVL22:
 705:./FW/ff.c     ****         } while (--cnt);
 212              		.loc 1 705 17 is_stmt 1 discriminator 1 view .LVU58
 213              		.loc 1 705 9 is_stmt 0 discriminator 1 view .LVU59
 214 000e 013C     		subs	r4, r4, #1
 215              	.LVL23:
 216              		.loc 1 705 9 discriminator 1 view .LVU60
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 17


 217 0010 F9D1     		bne	.L7
 218              	.LVL24:
 219              	.L5:
 706:./FW/ff.c     ****     }
 707:./FW/ff.c     **** }
 220              		.loc 1 707 1 view .LVU61
 221 0012 5DF8044B 		ldr	r4, [sp], #4
 222              	.LCFI1:
 223              		.cfi_restore 4
 224              		.cfi_def_cfa_offset 0
 225              	.LVL25:
 226              		.loc 1 707 1 view .LVU62
 227 0016 7047     		bx	lr
 228              		.cfi_endproc
 229              	.LFE943:
 231              		.section	.text.mem_set,"ax",%progbits
 232              		.align	1
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	mem_set:
 239              	.LFB944:
 708:./FW/ff.c     **** 
 709:./FW/ff.c     **** /* Fill memory block */
 710:./FW/ff.c     **** static
 711:./FW/ff.c     **** void mem_set (void* dst, int val, UINT cnt) {
 240              		.loc 1 711 45 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL26:
 246              	.L10:
 712:./FW/ff.c     ****     BYTE *d = (BYTE*)dst;
 713:./FW/ff.c     **** 
 714:./FW/ff.c     ****     do {
 247              		.loc 1 714 5 discriminator 1 view .LVU64
 715:./FW/ff.c     ****         *d++ = (BYTE)val;
 248              		.loc 1 715 9 discriminator 1 view .LVU65
 249              		.loc 1 715 14 is_stmt 0 discriminator 1 view .LVU66
 250 0000 0170     		strb	r1, [r0]
 251 0002 0130     		adds	r0, r0, #1
 716:./FW/ff.c     ****     } while (--cnt);
 252              		.loc 1 716 13 is_stmt 1 discriminator 1 view .LVU67
 253              	.LVL27:
 254              		.loc 1 716 5 is_stmt 0 discriminator 1 view .LVU68
 255 0004 013A     		subs	r2, r2, #1
 256              	.LVL28:
 257              		.loc 1 716 5 discriminator 1 view .LVU69
 258 0006 FBD1     		bne	.L10
 717:./FW/ff.c     **** }
 259              		.loc 1 717 1 view .LVU70
 260 0008 7047     		bx	lr
 261              		.cfi_endproc
 262              	.LFE944:
 264              		.section	.text.mem_cmp,"ax",%progbits
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 18


 265              		.align	1
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu fpv4-sp-d16
 271              	mem_cmp:
 272              	.LVL29:
 273              	.LFB945:
 718:./FW/ff.c     **** 
 719:./FW/ff.c     **** /* Compare memory block */
 720:./FW/ff.c     **** static
 721:./FW/ff.c     **** int mem_cmp (const void* dst, const void* src, UINT cnt) {  /* ZR:same, NZ:different */
 274              		.loc 1 721 58 is_stmt 1 view -0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              		.loc 1 721 58 is_stmt 0 view .LVU72
 280 0000 10B4     		push	{r4}
 281              	.LCFI2:
 282              		.cfi_def_cfa_offset 4
 283              		.cfi_offset 4, -4
 284 0002 0446     		mov	r4, r0
 722:./FW/ff.c     ****     const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 285              		.loc 1 722 5 is_stmt 1 view .LVU73
 286              	.LVL30:
 723:./FW/ff.c     ****     int r = 0;
 287              		.loc 1 723 5 view .LVU74
 288              	.L13:
 724:./FW/ff.c     **** 
 725:./FW/ff.c     ****     do {
 289              		.loc 1 725 5 discriminator 2 view .LVU75
 726:./FW/ff.c     ****         r = *d++ - *s++;
 290              		.loc 1 726 9 discriminator 2 view .LVU76
 291              		.loc 1 726 13 is_stmt 0 discriminator 2 view .LVU77
 292 0004 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 293 0006 0134     		adds	r4, r4, #1
 294              	.LVL31:
 295              		.loc 1 726 20 discriminator 2 view .LVU78
 296 0008 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 297 000a 0131     		adds	r1, r1, #1
 298              	.LVL32:
 299              		.loc 1 726 11 discriminator 2 view .LVU79
 300 000c C01A     		subs	r0, r0, r3
 301              	.LVL33:
 727:./FW/ff.c     ****     } while (--cnt && r == 0);
 302              		.loc 1 727 13 is_stmt 1 discriminator 2 view .LVU80
 303              		.loc 1 727 5 is_stmt 0 discriminator 2 view .LVU81
 304 000e 013A     		subs	r2, r2, #1
 305              	.LVL34:
 306              		.loc 1 727 5 discriminator 2 view .LVU82
 307 0010 01D0     		beq	.L11
 308              		.loc 1 727 20 discriminator 1 view .LVU83
 309 0012 0028     		cmp	r0, #0
 310 0014 F6D0     		beq	.L13
 311              	.L11:
 728:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 19


 729:./FW/ff.c     ****     return r;
 730:./FW/ff.c     **** }
 312              		.loc 1 730 1 view .LVU84
 313 0016 5DF8044B 		ldr	r4, [sp], #4
 314              	.LCFI3:
 315              		.cfi_restore 4
 316              		.cfi_def_cfa_offset 0
 317              	.LVL35:
 318              		.loc 1 730 1 view .LVU85
 319 001a 7047     		bx	lr
 320              		.cfi_endproc
 321              	.LFE945:
 323              		.section	.text.chk_chr,"ax",%progbits
 324              		.align	1
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu fpv4-sp-d16
 330              	chk_chr:
 331              	.LVL36:
 332              	.LFB946:
 731:./FW/ff.c     **** 
 732:./FW/ff.c     **** /* Check if chr is contained in the string */
 733:./FW/ff.c     **** static
 734:./FW/ff.c     **** int chk_chr (const char* str, int chr) {    /* NZ:contained, ZR:not contained */
 333              		.loc 1 734 40 is_stmt 1 view -0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338              		.loc 1 734 40 is_stmt 0 view .LVU87
 339 0000 0346     		mov	r3, r0
 735:./FW/ff.c     ****     while (*str && *str != chr) { str++; }
 340              		.loc 1 735 5 is_stmt 1 view .LVU88
 341              	.LVL37:
 342              	.L16:
 343              		.loc 1 735 11 discriminator 1 view .LVU89
 344              		.loc 1 735 12 is_stmt 0 discriminator 1 view .LVU90
 345 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 346              		.loc 1 735 11 discriminator 1 view .LVU91
 347 0004 18B1     		cbz	r0, .L17
 348              		.loc 1 735 17 discriminator 2 view .LVU92
 349 0006 8842     		cmp	r0, r1
 350 0008 01D0     		beq	.L17
 351              		.loc 1 735 35 is_stmt 1 discriminator 3 view .LVU93
 352              		.loc 1 735 38 is_stmt 0 discriminator 3 view .LVU94
 353 000a 0133     		adds	r3, r3, #1
 354              	.LVL38:
 355              		.loc 1 735 38 discriminator 3 view .LVU95
 356 000c F9E7     		b	.L16
 357              	.L17:
 736:./FW/ff.c     ****     return *str;
 358              		.loc 1 736 5 is_stmt 1 view .LVU96
 737:./FW/ff.c     **** }
 359              		.loc 1 737 1 is_stmt 0 view .LVU97
 360 000e 7047     		bx	lr
 361              		.cfi_endproc
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 20


 362              	.LFE946:
 364              		.section	.text.chk_lock,"ax",%progbits
 365              		.align	1
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu fpv4-sp-d16
 371              	chk_lock:
 372              	.LVL39:
 373              	.LFB947:
 738:./FW/ff.c     **** 
 739:./FW/ff.c     **** 
 740:./FW/ff.c     **** 
 741:./FW/ff.c     **** 
 742:./FW/ff.c     **** #if _FS_REENTRANT
 743:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 744:./FW/ff.c     **** /* Request/Release grant to access the volume                            */
 745:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 746:./FW/ff.c     **** static
 747:./FW/ff.c     **** int lock_fs (
 748:./FW/ff.c     ****     FATFS* fs       /* File system object */
 749:./FW/ff.c     **** ) {
 750:./FW/ff.c     ****     return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 751:./FW/ff.c     **** }
 752:./FW/ff.c     **** 
 753:./FW/ff.c     **** 
 754:./FW/ff.c     **** static
 755:./FW/ff.c     **** void unlock_fs (
 756:./FW/ff.c     ****     FATFS* fs,      /* File system object */
 757:./FW/ff.c     ****     FRESULT res     /* Result code to be returned */
 758:./FW/ff.c     **** ) {
 759:./FW/ff.c     ****     if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 760:./FW/ff.c     ****         ff_rel_grant(fs->sobj);
 761:./FW/ff.c     ****     }
 762:./FW/ff.c     **** }
 763:./FW/ff.c     **** 
 764:./FW/ff.c     **** #endif
 765:./FW/ff.c     **** 
 766:./FW/ff.c     **** 
 767:./FW/ff.c     **** 
 768:./FW/ff.c     **** #if _FS_LOCK != 0
 769:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 770:./FW/ff.c     **** /* File lock control functions                                           */
 771:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 772:./FW/ff.c     **** 
 773:./FW/ff.c     **** static
 774:./FW/ff.c     **** FRESULT chk_lock (  /* Check if the file can be accessed */
 775:./FW/ff.c     ****     DIR* dp,        /* Directory object pointing the file to be checked */
 776:./FW/ff.c     ****     int acc         /* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 777:./FW/ff.c     **** ) {
 374              		.loc 1 777 3 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379              		.loc 1 777 3 is_stmt 0 view .LVU99
 380 0000 30B4     		push	{r4, r5}
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 21


 381              	.LCFI4:
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 4, -8
 384              		.cfi_offset 5, -4
 778:./FW/ff.c     ****     UINT i, be;
 385              		.loc 1 778 5 is_stmt 1 view .LVU100
 779:./FW/ff.c     **** 
 780:./FW/ff.c     ****     /* Search file semaphore table */
 781:./FW/ff.c     ****     for (i = be = 0; i < _FS_LOCK; i++) {
 386              		.loc 1 781 5 view .LVU101
 387              	.LVL40:
 388              		.loc 1 781 17 is_stmt 0 view .LVU102
 389 0002 0025     		movs	r5, #0
 390              		.loc 1 781 12 view .LVU103
 391 0004 2B46     		mov	r3, r5
 392              		.loc 1 781 5 view .LVU104
 393 0006 01E0     		b	.L20
 394              	.LVL41:
 395              	.L27:
 782:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 783:./FW/ff.c     ****             if (Files[i].fs == dp->obj.fs &&        /* Check if the object matched with an open obj
 784:./FW/ff.c     ****                     Files[i].clu == dp->obj.sclust &&
 785:./FW/ff.c     ****                     Files[i].ofs == dp->dptr) { break; }
 786:./FW/ff.c     ****         } else {            /* Blank entry */
 787:./FW/ff.c     ****             be = 1;
 396              		.loc 1 787 16 view .LVU105
 397 0008 0125     		movs	r5, #1
 398              	.LVL42:
 399              	.L21:
 781:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 400              		.loc 1 781 36 is_stmt 1 discriminator 2 view .LVU106
 781:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 401              		.loc 1 781 37 is_stmt 0 discriminator 2 view .LVU107
 402 000a 0133     		adds	r3, r3, #1
 403              	.LVL43:
 404              	.L20:
 781:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 405              		.loc 1 781 22 is_stmt 1 discriminator 1 view .LVU108
 781:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 406              		.loc 1 781 5 is_stmt 0 discriminator 1 view .LVU109
 407 000c 012B     		cmp	r3, #1
 408 000e 15D8     		bhi	.L22
 782:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 409              		.loc 1 782 9 is_stmt 1 view .LVU110
 782:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 410              		.loc 1 782 21 is_stmt 0 view .LVU111
 411 0010 1A01     		lsls	r2, r3, #4
 412 0012 174C     		ldr	r4, .L36
 413 0014 A258     		ldr	r2, [r4, r2]
 782:./FW/ff.c     ****         if (Files[i].fs) {  /* Existing entry */
 414              		.loc 1 782 12 view .LVU112
 415 0016 002A     		cmp	r2, #0
 416 0018 F6D0     		beq	.L27
 783:./FW/ff.c     ****                     Files[i].clu == dp->obj.sclust &&
 417              		.loc 1 783 13 is_stmt 1 view .LVU113
 783:./FW/ff.c     ****                     Files[i].clu == dp->obj.sclust &&
 418              		.loc 1 783 39 is_stmt 0 view .LVU114
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 22


 419 001a 0468     		ldr	r4, [r0]
 783:./FW/ff.c     ****                     Files[i].clu == dp->obj.sclust &&
 420              		.loc 1 783 16 view .LVU115
 421 001c A242     		cmp	r2, r4
 422 001e F4D1     		bne	.L21
 784:./FW/ff.c     ****                     Files[i].ofs == dp->dptr) { break; }
 423              		.loc 1 784 29 discriminator 1 view .LVU116
 424 0020 134A     		ldr	r2, .L36
 425 0022 02EB0312 		add	r2, r2, r3, lsl #4
 426 0026 5468     		ldr	r4, [r2, #4]
 784:./FW/ff.c     ****                     Files[i].ofs == dp->dptr) { break; }
 427              		.loc 1 784 44 discriminator 1 view .LVU117
 428 0028 8268     		ldr	r2, [r0, #8]
 783:./FW/ff.c     ****                     Files[i].clu == dp->obj.sclust &&
 429              		.loc 1 783 43 discriminator 1 view .LVU118
 430 002a 9442     		cmp	r4, r2
 431 002c EDD1     		bne	.L21
 785:./FW/ff.c     ****         } else {            /* Blank entry */
 432              		.loc 1 785 29 view .LVU119
 433 002e 104A     		ldr	r2, .L36
 434 0030 02EB0312 		add	r2, r2, r3, lsl #4
 435 0034 9468     		ldr	r4, [r2, #8]
 785:./FW/ff.c     ****         } else {            /* Blank entry */
 436              		.loc 1 785 39 view .LVU120
 437 0036 4269     		ldr	r2, [r0, #20]
 784:./FW/ff.c     ****                     Files[i].ofs == dp->dptr) { break; }
 438              		.loc 1 784 52 view .LVU121
 439 0038 9442     		cmp	r4, r2
 440 003a E6D1     		bne	.L21
 441              	.L22:
 788:./FW/ff.c     ****         }
 789:./FW/ff.c     ****     }
 790:./FW/ff.c     ****     if (i == _FS_LOCK) {    /* The object is not opened */
 442              		.loc 1 790 5 is_stmt 1 view .LVU122
 443              		.loc 1 790 8 is_stmt 0 view .LVU123
 444 003c 022B     		cmp	r3, #2
 445 003e 0AD0     		beq	.L33
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 792:./FW/ff.c     ****     }
 793:./FW/ff.c     **** 
 794:./FW/ff.c     ****     /* The object has been opened. Reject any open against writing file and all write mode open */
 795:./FW/ff.c     ****     return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 446              		.loc 1 795 5 is_stmt 1 view .LVU124
 447              		.loc 1 795 55 is_stmt 0 view .LVU125
 448 0040 A1B9     		cbnz	r1, .L30
 449              		.loc 1 795 28 discriminator 2 view .LVU126
 450 0042 0B4A     		ldr	r2, .L36
 451 0044 02EB0313 		add	r3, r2, r3, lsl #4
 452              	.LVL44:
 453              		.loc 1 795 28 discriminator 2 view .LVU127
 454 0048 9B89     		ldrh	r3, [r3, #12]
 455              		.loc 1 795 17 discriminator 2 view .LVU128
 456 004a B3F5807F 		cmp	r3, #256
 457 004e 0BD0     		beq	.L34
 458              		.loc 1 795 55 view .LVU129
 459 0050 0020     		movs	r0, #0
 460              	.LVL45:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 23


 461              	.L26:
 796:./FW/ff.c     **** }
 462              		.loc 1 796 1 view .LVU130
 463 0052 30BC     		pop	{r4, r5}
 464              	.LCFI5:
 465              		.cfi_remember_state
 466              		.cfi_restore 5
 467              		.cfi_restore 4
 468              		.cfi_def_cfa_offset 0
 469              	.LVL46:
 470              		.loc 1 796 1 view .LVU131
 471 0054 7047     		bx	lr
 472              	.LVL47:
 473              	.L33:
 474              	.LCFI6:
 475              		.cfi_restore_state
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 476              		.loc 1 791 9 is_stmt 1 view .LVU132
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 477              		.loc 1 791 41 is_stmt 0 view .LVU133
 478 0056 2DB9     		cbnz	r5, .L28
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 479              		.loc 1 791 20 discriminator 2 view .LVU134
 480 0058 0229     		cmp	r1, #2
 481 005a 01D0     		beq	.L35
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 482              		.loc 1 791 41 view .LVU135
 483 005c 1220     		movs	r0, #18
 484              	.LVL48:
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 485              		.loc 1 791 41 view .LVU136
 486 005e F8E7     		b	.L26
 487              	.LVL49:
 488              	.L35:
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 489              		.loc 1 791 41 view .LVU137
 490 0060 0020     		movs	r0, #0
 491              	.LVL50:
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 492              		.loc 1 791 41 view .LVU138
 493 0062 F6E7     		b	.L26
 494              	.LVL51:
 495              	.L28:
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 496              		.loc 1 791 41 view .LVU139
 497 0064 0020     		movs	r0, #0
 498              	.LVL52:
 791:./FW/ff.c     ****         return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;   /* Is there a blank entry for n
 499              		.loc 1 791 41 view .LVU140
 500 0066 F4E7     		b	.L26
 501              	.LVL53:
 502              	.L34:
 795:./FW/ff.c     **** }
 503              		.loc 1 795 55 view .LVU141
 504 0068 1020     		movs	r0, #16
 505              	.LVL54:
 795:./FW/ff.c     **** }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 24


 506              		.loc 1 795 55 view .LVU142
 507 006a F2E7     		b	.L26
 508              	.LVL55:
 509              	.L30:
 795:./FW/ff.c     **** }
 510              		.loc 1 795 55 view .LVU143
 511 006c 1020     		movs	r0, #16
 512              	.LVL56:
 795:./FW/ff.c     **** }
 513              		.loc 1 795 55 view .LVU144
 514 006e F0E7     		b	.L26
 515              	.L37:
 516              		.align	2
 517              	.L36:
 518 0070 00000000 		.word	.LANCHOR0
 519              		.cfi_endproc
 520              	.LFE947:
 522              		.section	.text.enq_lock,"ax",%progbits
 523              		.align	1
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu fpv4-sp-d16
 529              	enq_lock:
 530              	.LFB948:
 797:./FW/ff.c     **** 
 798:./FW/ff.c     **** 
 799:./FW/ff.c     **** static
 800:./FW/ff.c     **** int enq_lock (void) {   /* Check if an entry is available for a new object */
 531              		.loc 1 800 21 is_stmt 1 view -0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 801:./FW/ff.c     ****     UINT i;
 536              		.loc 1 801 5 view .LVU146
 802:./FW/ff.c     **** 
 803:./FW/ff.c     ****     for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 537              		.loc 1 803 5 view .LVU147
 538              	.LVL57:
 539              		.loc 1 803 12 is_stmt 0 view .LVU148
 540 0000 0020     		movs	r0, #0
 541              		.loc 1 803 5 view .LVU149
 542 0002 00E0     		b	.L39
 543              	.LVL58:
 544              	.L41:
 545              		.loc 1 803 51 is_stmt 1 discriminator 4 view .LVU150
 546              		.loc 1 803 46 discriminator 4 view .LVU151
 547              		.loc 1 803 47 is_stmt 0 discriminator 4 view .LVU152
 548 0004 0130     		adds	r0, r0, #1
 549              	.LVL59:
 550              	.L39:
 551              		.loc 1 803 17 is_stmt 1 discriminator 1 view .LVU153
 552              		.loc 1 803 5 is_stmt 0 discriminator 1 view .LVU154
 553 0006 0128     		cmp	r0, #1
 554 0008 04D8     		bhi	.L40
 555              		.loc 1 803 41 discriminator 3 view .LVU155
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 25


 556 000a 0301     		lsls	r3, r0, #4
 557 000c 034A     		ldr	r2, .L42
 558 000e D358     		ldr	r3, [r2, r3]
 559              		.loc 1 803 30 discriminator 3 view .LVU156
 560 0010 002B     		cmp	r3, #0
 561 0012 F7D1     		bne	.L41
 562              	.L40:
 804:./FW/ff.c     ****     return (i == _FS_LOCK) ? 0 : 1;
 563              		.loc 1 804 5 is_stmt 1 view .LVU157
 805:./FW/ff.c     **** }
 564              		.loc 1 805 1 is_stmt 0 view .LVU158
 565 0014 0238     		subs	r0, r0, #2
 566              	.LVL60:
 567              		.loc 1 805 1 view .LVU159
 568 0016 18BF     		it	ne
 569 0018 0120     		movne	r0, #1
 570              	.LVL61:
 571              		.loc 1 805 1 view .LVU160
 572 001a 7047     		bx	lr
 573              	.L43:
 574              		.align	2
 575              	.L42:
 576 001c 00000000 		.word	.LANCHOR0
 577              		.cfi_endproc
 578              	.LFE948:
 580              		.section	.text.inc_lock,"ax",%progbits
 581              		.align	1
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu fpv4-sp-d16
 587              	inc_lock:
 588              	.LVL62:
 589              	.LFB949:
 806:./FW/ff.c     **** 
 807:./FW/ff.c     **** 
 808:./FW/ff.c     **** static
 809:./FW/ff.c     **** UINT inc_lock ( /* Increment object open counter and returns its index (0:Internal error) */
 810:./FW/ff.c     ****     DIR* dp,    /* Directory object pointing the file to register or increment */
 811:./FW/ff.c     ****     int acc     /* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 812:./FW/ff.c     **** ) {
 590              		.loc 1 812 3 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              		.loc 1 812 3 is_stmt 0 view .LVU162
 596 0000 70B4     		push	{r4, r5, r6}
 597              	.LCFI7:
 598              		.cfi_def_cfa_offset 12
 599              		.cfi_offset 4, -12
 600              		.cfi_offset 5, -8
 601              		.cfi_offset 6, -4
 813:./FW/ff.c     ****     UINT i;
 602              		.loc 1 813 5 is_stmt 1 view .LVU163
 814:./FW/ff.c     **** 
 815:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 26


 816:./FW/ff.c     ****     for (i = 0; i < _FS_LOCK; i++) {    /* Find the object */
 603              		.loc 1 816 5 view .LVU164
 604              	.LVL63:
 605              		.loc 1 816 12 is_stmt 0 view .LVU165
 606 0002 0023     		movs	r3, #0
 607              		.loc 1 816 5 view .LVU166
 608 0004 00E0     		b	.L45
 609              	.LVL64:
 610              	.L46:
 611              		.loc 1 816 31 is_stmt 1 discriminator 2 view .LVU167
 612              		.loc 1 816 32 is_stmt 0 discriminator 2 view .LVU168
 613 0006 0133     		adds	r3, r3, #1
 614              	.LVL65:
 615              	.L45:
 616              		.loc 1 816 17 is_stmt 1 discriminator 1 view .LVU169
 617              		.loc 1 816 5 is_stmt 0 discriminator 1 view .LVU170
 618 0008 012B     		cmp	r3, #1
 619 000a 13D8     		bhi	.L47
 817:./FW/ff.c     ****         if (Files[i].fs == dp->obj.fs &&
 620              		.loc 1 817 9 is_stmt 1 view .LVU171
 621              		.loc 1 817 21 is_stmt 0 view .LVU172
 622 000c 1A01     		lsls	r2, r3, #4
 623 000e 244C     		ldr	r4, .L62
 624 0010 A458     		ldr	r4, [r4, r2]
 625              		.loc 1 817 35 view .LVU173
 626 0012 0268     		ldr	r2, [r0]
 627              		.loc 1 817 12 view .LVU174
 628 0014 9442     		cmp	r4, r2
 629 0016 F6D1     		bne	.L46
 818:./FW/ff.c     ****                 Files[i].clu == dp->obj.sclust &&
 630              		.loc 1 818 25 discriminator 1 view .LVU175
 631 0018 214A     		ldr	r2, .L62
 632 001a 02EB0312 		add	r2, r2, r3, lsl #4
 633 001e 5468     		ldr	r4, [r2, #4]
 634              		.loc 1 818 40 discriminator 1 view .LVU176
 635 0020 8268     		ldr	r2, [r0, #8]
 817:./FW/ff.c     ****         if (Files[i].fs == dp->obj.fs &&
 636              		.loc 1 817 39 discriminator 1 view .LVU177
 637 0022 9442     		cmp	r4, r2
 638 0024 EFD1     		bne	.L46
 819:./FW/ff.c     ****                 Files[i].ofs == dp->dptr) { break; }
 639              		.loc 1 819 25 view .LVU178
 640 0026 1E4A     		ldr	r2, .L62
 641 0028 02EB0312 		add	r2, r2, r3, lsl #4
 642 002c 9468     		ldr	r4, [r2, #8]
 643              		.loc 1 819 35 view .LVU179
 644 002e 4269     		ldr	r2, [r0, #20]
 818:./FW/ff.c     ****                 Files[i].clu == dp->obj.sclust &&
 645              		.loc 1 818 48 view .LVU180
 646 0030 9442     		cmp	r4, r2
 647 0032 E8D1     		bne	.L46
 648              	.L47:
 820:./FW/ff.c     ****     }
 821:./FW/ff.c     **** 
 822:./FW/ff.c     ****     if (i == _FS_LOCK) {                /* Not opened. Register it as new. */
 649              		.loc 1 822 5 is_stmt 1 view .LVU181
 650              		.loc 1 822 8 is_stmt 0 view .LVU182
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 27


 651 0034 022B     		cmp	r3, #2
 652 0036 13D0     		beq	.L61
 653              	.LVL66:
 654              	.L50:
 823:./FW/ff.c     ****         for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 824:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 825:./FW/ff.c     ****         Files[i].fs = dp->obj.fs;
 826:./FW/ff.c     ****         Files[i].clu = dp->obj.sclust;
 827:./FW/ff.c     ****         Files[i].ofs = dp->dptr;
 828:./FW/ff.c     ****         Files[i].ctr = 0;
 829:./FW/ff.c     ****     }
 830:./FW/ff.c     **** 
 831:./FW/ff.c     ****     if (acc && Files[i].ctr) { return 0; }  /* Access violation (int err) */
 655              		.loc 1 831 5 is_stmt 1 view .LVU183
 656              		.loc 1 831 8 is_stmt 0 view .LVU184
 657 0038 21B1     		cbz	r1, .L54
 658              		.loc 1 831 24 discriminator 1 view .LVU185
 659 003a 194A     		ldr	r2, .L62
 660 003c 02EB0312 		add	r2, r2, r3, lsl #4
 661 0040 9289     		ldrh	r2, [r2, #12]
 662              		.loc 1 831 13 discriminator 1 view .LVU186
 663 0042 52BB     		cbnz	r2, .L58
 664              	.L54:
 832:./FW/ff.c     **** 
 833:./FW/ff.c     ****     Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;  /* Set semaphore value */
 665              		.loc 1 833 5 is_stmt 1 view .LVU187
 666              		.loc 1 833 18 is_stmt 0 view .LVU188
 667 0044 21BB     		cbnz	r1, .L59
 668              		.loc 1 833 42 discriminator 1 view .LVU189
 669 0046 164A     		ldr	r2, .L62
 670 0048 02EB0312 		add	r2, r2, r3, lsl #4
 671 004c 9189     		ldrh	r1, [r2, #12]
 672              	.LVL67:
 673              		.loc 1 833 18 discriminator 1 view .LVU190
 674 004e 0131     		adds	r1, r1, #1
 675 0050 89B2     		uxth	r1, r1
 676              	.L55:
 677              		.loc 1 833 18 discriminator 4 view .LVU191
 678 0052 134A     		ldr	r2, .L62
 679 0054 02EB0312 		add	r2, r2, r3, lsl #4
 680 0058 9181     		strh	r1, [r2, #12]	@ movhi
 834:./FW/ff.c     **** 
 835:./FW/ff.c     ****     return i + 1;
 681              		.loc 1 835 5 is_stmt 1 discriminator 4 view .LVU192
 682              		.loc 1 835 14 is_stmt 0 discriminator 4 view .LVU193
 683 005a 581C     		adds	r0, r3, #1
 684              	.L44:
 836:./FW/ff.c     **** }
 685              		.loc 1 836 1 view .LVU194
 686 005c 70BC     		pop	{r4, r5, r6}
 687              	.LCFI8:
 688              		.cfi_remember_state
 689              		.cfi_restore 6
 690              		.cfi_restore 5
 691              		.cfi_restore 4
 692              		.cfi_def_cfa_offset 0
 693 005e 7047     		bx	lr
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 28


 694              	.LVL68:
 695              	.L61:
 696              	.LCFI9:
 697              		.cfi_restore_state
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 698              		.loc 1 823 16 view .LVU195
 699 0060 0023     		movs	r3, #0
 700              	.LVL69:
 701              	.L49:
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 702              		.loc 1 823 21 is_stmt 1 discriminator 1 view .LVU196
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 703              		.loc 1 823 9 is_stmt 0 discriminator 1 view .LVU197
 704 0062 012B     		cmp	r3, #1
 705 0064 05D8     		bhi	.L51
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 706              		.loc 1 823 45 discriminator 3 view .LVU198
 707 0066 1A01     		lsls	r2, r3, #4
 708 0068 0D4C     		ldr	r4, .L62
 709 006a A258     		ldr	r2, [r4, r2]
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 710              		.loc 1 823 34 discriminator 3 view .LVU199
 711 006c 0AB1     		cbz	r2, .L51
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 712              		.loc 1 823 55 is_stmt 1 discriminator 4 view .LVU200
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 713              		.loc 1 823 50 discriminator 4 view .LVU201
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 714              		.loc 1 823 51 is_stmt 0 discriminator 4 view .LVU202
 715 006e 0133     		adds	r3, r3, #1
 716              	.LVL70:
 823:./FW/ff.c     ****         if (i == _FS_LOCK) { return 0; }    /* No free entry to register (int err) */
 717              		.loc 1 823 51 discriminator 4 view .LVU203
 718 0070 F7E7     		b	.L49
 719              	.L51:
 824:./FW/ff.c     ****         Files[i].fs = dp->obj.fs;
 720              		.loc 1 824 9 is_stmt 1 view .LVU204
 824:./FW/ff.c     ****         Files[i].fs = dp->obj.fs;
 721              		.loc 1 824 12 is_stmt 0 view .LVU205
 722 0072 022B     		cmp	r3, #2
 723 0074 0FD0     		beq	.L57
 825:./FW/ff.c     ****         Files[i].clu = dp->obj.sclust;
 724              		.loc 1 825 9 is_stmt 1 view .LVU206
 825:./FW/ff.c     ****         Files[i].clu = dp->obj.sclust;
 725              		.loc 1 825 30 is_stmt 0 view .LVU207
 726 0076 0668     		ldr	r6, [r0]
 825:./FW/ff.c     ****         Files[i].clu = dp->obj.sclust;
 727              		.loc 1 825 21 view .LVU208
 728 0078 094D     		ldr	r5, .L62
 729 007a 1C01     		lsls	r4, r3, #4
 730 007c 05EB0312 		add	r2, r5, r3, lsl #4
 731 0080 2E51     		str	r6, [r5, r4]
 826:./FW/ff.c     ****         Files[i].ofs = dp->dptr;
 732              		.loc 1 826 9 is_stmt 1 view .LVU209
 826:./FW/ff.c     ****         Files[i].ofs = dp->dptr;
 733              		.loc 1 826 31 is_stmt 0 view .LVU210
 734 0082 8468     		ldr	r4, [r0, #8]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 29


 826:./FW/ff.c     ****         Files[i].ofs = dp->dptr;
 735              		.loc 1 826 22 view .LVU211
 736 0084 5460     		str	r4, [r2, #4]
 827:./FW/ff.c     ****         Files[i].ctr = 0;
 737              		.loc 1 827 9 is_stmt 1 view .LVU212
 827:./FW/ff.c     ****         Files[i].ctr = 0;
 738              		.loc 1 827 26 is_stmt 0 view .LVU213
 739 0086 4069     		ldr	r0, [r0, #20]
 740              	.LVL71:
 827:./FW/ff.c     ****         Files[i].ctr = 0;
 741              		.loc 1 827 22 view .LVU214
 742 0088 9060     		str	r0, [r2, #8]
 828:./FW/ff.c     ****     }
 743              		.loc 1 828 9 is_stmt 1 view .LVU215
 828:./FW/ff.c     ****     }
 744              		.loc 1 828 22 is_stmt 0 view .LVU216
 745 008a 0020     		movs	r0, #0
 746 008c 9081     		strh	r0, [r2, #12]	@ movhi
 747 008e D3E7     		b	.L50
 748              	.L59:
 833:./FW/ff.c     **** 
 749              		.loc 1 833 18 view .LVU217
 750 0090 4FF48071 		mov	r1, #256
 751              	.LVL72:
 833:./FW/ff.c     **** 
 752              		.loc 1 833 18 view .LVU218
 753 0094 DDE7     		b	.L55
 754              	.LVL73:
 755              	.L57:
 824:./FW/ff.c     ****         Files[i].fs = dp->obj.fs;
 756              		.loc 1 824 37 view .LVU219
 757 0096 0020     		movs	r0, #0
 758              	.LVL74:
 824:./FW/ff.c     ****         Files[i].fs = dp->obj.fs;
 759              		.loc 1 824 37 view .LVU220
 760 0098 E0E7     		b	.L44
 761              	.L58:
 831:./FW/ff.c     **** 
 762              		.loc 1 831 39 view .LVU221
 763 009a 0020     		movs	r0, #0
 764 009c DEE7     		b	.L44
 765              	.L63:
 766 009e 00BF     		.align	2
 767              	.L62:
 768 00a0 00000000 		.word	.LANCHOR0
 769              		.cfi_endproc
 770              	.LFE949:
 772              		.section	.text.dec_lock,"ax",%progbits
 773              		.align	1
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 777              		.fpu fpv4-sp-d16
 779              	dec_lock:
 780              	.LVL75:
 781              	.LFB950:
 837:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 30


 838:./FW/ff.c     **** 
 839:./FW/ff.c     **** static
 840:./FW/ff.c     **** FRESULT dec_lock (  /* Decrement object open counter */
 841:./FW/ff.c     ****     UINT i          /* Semaphore index (1..) */
 842:./FW/ff.c     **** ) {
 782              		.loc 1 842 3 is_stmt 1 view -0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 843:./FW/ff.c     ****     WORD n;
 787              		.loc 1 843 5 view .LVU223
 844:./FW/ff.c     ****     FRESULT res;
 788              		.loc 1 844 5 view .LVU224
 845:./FW/ff.c     **** 
 846:./FW/ff.c     **** 
 847:./FW/ff.c     ****     if (--i < _FS_LOCK) {   /* Shift index number origin from 0 */
 789              		.loc 1 847 5 view .LVU225
 790              		.loc 1 847 8 is_stmt 0 view .LVU226
 791 0000 0138     		subs	r0, r0, #1
 792              	.LVL76:
 793              		.loc 1 847 8 view .LVU227
 794 0002 0128     		cmp	r0, #1
 795 0004 15D8     		bhi	.L67
 848:./FW/ff.c     ****         n = Files[i].ctr;
 796              		.loc 1 848 9 is_stmt 1 view .LVU228
 797              		.loc 1 848 11 is_stmt 0 view .LVU229
 798 0006 0D4B     		ldr	r3, .L70
 799 0008 03EB0013 		add	r3, r3, r0, lsl #4
 800 000c 9B89     		ldrh	r3, [r3, #12]
 801              	.LVL77:
 849:./FW/ff.c     ****         if (n == 0x100) { n = 0; }      /* If write mode open, delete the entry */
 802              		.loc 1 849 9 is_stmt 1 view .LVU230
 803              		.loc 1 849 12 is_stmt 0 view .LVU231
 804 000e B3F5807F 		cmp	r3, #256
 805 0012 03D0     		beq	.L68
 850:./FW/ff.c     ****         if (n > 0) { n--; }             /* Decrement read mode open count */
 806              		.loc 1 850 9 is_stmt 1 view .LVU232
 807              		.loc 1 850 12 is_stmt 0 view .LVU233
 808 0014 1BB1     		cbz	r3, .L66
 809              		.loc 1 850 22 is_stmt 1 discriminator 1 view .LVU234
 810              		.loc 1 850 23 is_stmt 0 discriminator 1 view .LVU235
 811 0016 013B     		subs	r3, r3, #1
 812              	.LVL78:
 813              		.loc 1 850 23 discriminator 1 view .LVU236
 814 0018 9BB2     		uxth	r3, r3
 815              	.LVL79:
 816              		.loc 1 850 23 discriminator 1 view .LVU237
 817 001a 00E0     		b	.L66
 818              	.L68:
 849:./FW/ff.c     ****         if (n == 0x100) { n = 0; }      /* If write mode open, delete the entry */
 819              		.loc 1 849 29 view .LVU238
 820 001c 0023     		movs	r3, #0
 821              	.LVL80:
 822              	.L66:
 851:./FW/ff.c     ****         Files[i].ctr = n;
 823              		.loc 1 851 9 is_stmt 1 view .LVU239
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 31


 824              		.loc 1 851 22 is_stmt 0 view .LVU240
 825 001e 074A     		ldr	r2, .L70
 826 0020 02EB0012 		add	r2, r2, r0, lsl #4
 827 0024 9381     		strh	r3, [r2, #12]	@ movhi
 852:./FW/ff.c     ****         if (n == 0) { Files[i].fs = 0; }    /* Delete the entry if open count gets zero */
 828              		.loc 1 852 9 is_stmt 1 view .LVU241
 829              		.loc 1 852 12 is_stmt 0 view .LVU242
 830 0026 33B9     		cbnz	r3, .L69
 831              		.loc 1 852 23 is_stmt 1 discriminator 1 view .LVU243
 832              		.loc 1 852 35 is_stmt 0 discriminator 1 view .LVU244
 833 0028 0301     		lsls	r3, r0, #4
 834              	.LVL81:
 835              		.loc 1 852 35 discriminator 1 view .LVU245
 836 002a 0020     		movs	r0, #0
 837              	.LVL82:
 838              		.loc 1 852 35 discriminator 1 view .LVU246
 839 002c 034A     		ldr	r2, .L70
 840              	.LVL83:
 841              		.loc 1 852 35 discriminator 1 view .LVU247
 842 002e D050     		str	r0, [r2, r3]
 843 0030 7047     		bx	lr
 844              	.LVL84:
 845              	.L67:
 853:./FW/ff.c     ****         res = FR_OK;
 854:./FW/ff.c     ****     } else {
 855:./FW/ff.c     ****         res = FR_INT_ERR;           /* Invalid index nunber */
 846              		.loc 1 855 13 view .LVU248
 847 0032 0220     		movs	r0, #2
 848              	.LVL85:
 849              		.loc 1 855 13 view .LVU249
 850 0034 7047     		bx	lr
 851              	.LVL86:
 852              	.L69:
 853:./FW/ff.c     ****         res = FR_OK;
 853              		.loc 1 853 13 view .LVU250
 854 0036 0020     		movs	r0, #0
 855              	.LVL87:
 856:./FW/ff.c     ****     }
 857:./FW/ff.c     ****     return res;
 856              		.loc 1 857 5 is_stmt 1 view .LVU251
 858:./FW/ff.c     **** }
 857              		.loc 1 858 1 is_stmt 0 view .LVU252
 858 0038 7047     		bx	lr
 859              	.L71:
 860 003a 00BF     		.align	2
 861              	.L70:
 862 003c 00000000 		.word	.LANCHOR0
 863              		.cfi_endproc
 864              	.LFE950:
 866              		.section	.text.clear_lock,"ax",%progbits
 867              		.align	1
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 871              		.fpu fpv4-sp-d16
 873              	clear_lock:
 874              	.LVL88:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 32


 875              	.LFB951:
 859:./FW/ff.c     **** 
 860:./FW/ff.c     **** 
 861:./FW/ff.c     **** static
 862:./FW/ff.c     **** void clear_lock (   /* Clear lock entries of the volume */
 863:./FW/ff.c     ****     FATFS *fs
 864:./FW/ff.c     **** ) {
 876              		.loc 1 864 3 is_stmt 1 view -0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 865:./FW/ff.c     ****     UINT i;
 881              		.loc 1 865 5 view .LVU254
 866:./FW/ff.c     **** 
 867:./FW/ff.c     ****     for (i = 0; i < _FS_LOCK; i++) {
 882              		.loc 1 867 5 view .LVU255
 883              		.loc 1 867 12 is_stmt 0 view .LVU256
 884 0000 0023     		movs	r3, #0
 885              		.loc 1 867 5 view .LVU257
 886 0002 03E0     		b	.L77
 887              	.LVL89:
 888              	.L84:
 889              	.LCFI10:
 890              		.cfi_def_cfa_offset 4
 891              		.cfi_offset 4, -4
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 869:./FW/ff.c     ****     }
 870:./FW/ff.c     **** }
 892              		.loc 1 870 1 view .LVU258
 893 0004 5DF8044B 		ldr	r4, [sp], #4
 894              	.LCFI11:
 895              		.cfi_restore 4
 896              		.cfi_def_cfa_offset 0
 897 0008 7047     		bx	lr
 898              	.L83:
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 899              		.loc 1 867 31 is_stmt 1 view .LVU259
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 900              		.loc 1 867 32 is_stmt 0 view .LVU260
 901 000a 0133     		adds	r3, r3, #1
 902              	.LVL90:
 903              	.L77:
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 904              		.loc 1 867 17 is_stmt 1 view .LVU261
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 905              		.loc 1 867 5 is_stmt 0 view .LVU262
 906 000c 012B     		cmp	r3, #1
 907 000e 11D8     		bhi	.L82
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 908              		.loc 1 868 9 is_stmt 1 view .LVU263
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 909              		.loc 1 868 21 is_stmt 0 view .LVU264
 910 0010 1A01     		lsls	r2, r3, #4
 911 0012 0949     		ldr	r1, .L85
 912 0014 8A58     		ldr	r2, [r1, r2]
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 33


 913              		.loc 1 868 12 view .LVU265
 914 0016 8242     		cmp	r2, r0
 915 0018 F7D1     		bne	.L83
 864:./FW/ff.c     ****     UINT i;
 916              		.loc 1 864 3 view .LVU266
 917 001a 10B4     		push	{r4}
 918              	.LCFI12:
 919              		.cfi_def_cfa_offset 4
 920              		.cfi_offset 4, -4
 921              	.L78:
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 922              		.loc 1 868 34 is_stmt 1 discriminator 1 view .LVU267
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 923              		.loc 1 868 46 is_stmt 0 discriminator 1 view .LVU268
 924 001c 1A01     		lsls	r2, r3, #4
 925 001e 0024     		movs	r4, #0
 926 0020 8C50     		str	r4, [r1, r2]
 927              	.L74:
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 928              		.loc 1 867 31 is_stmt 1 discriminator 2 view .LVU269
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 929              		.loc 1 867 32 is_stmt 0 discriminator 2 view .LVU270
 930 0022 0133     		adds	r3, r3, #1
 931              	.LVL91:
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 932              		.loc 1 867 17 is_stmt 1 discriminator 2 view .LVU271
 867:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 933              		.loc 1 867 5 is_stmt 0 discriminator 2 view .LVU272
 934 0024 012B     		cmp	r3, #1
 935 0026 EDD8     		bhi	.L84
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 936              		.loc 1 868 9 is_stmt 1 view .LVU273
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 937              		.loc 1 868 21 is_stmt 0 view .LVU274
 938 0028 1A01     		lsls	r2, r3, #4
 939 002a 0349     		ldr	r1, .L85
 940 002c 8A58     		ldr	r2, [r1, r2]
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 941              		.loc 1 868 12 view .LVU275
 942 002e 8242     		cmp	r2, r0
 943 0030 F7D1     		bne	.L74
 944 0032 F3E7     		b	.L78
 945              	.L82:
 946              	.LCFI13:
 947              		.cfi_def_cfa_offset 0
 948              		.cfi_restore 4
 868:./FW/ff.c     ****         if (Files[i].fs == fs) { Files[i].fs = 0; }
 949              		.loc 1 868 12 view .LVU276
 950 0034 7047     		bx	lr
 951              	.L86:
 952 0036 00BF     		.align	2
 953              	.L85:
 954 0038 00000000 		.word	.LANCHOR0
 955              		.cfi_endproc
 956              	.LFE951:
 958              		.section	.text.clust2sect,"ax",%progbits
 959              		.align	1
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 34


 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu fpv4-sp-d16
 965              	clust2sect:
 966              	.LVL92:
 967              	.LFB955:
 871:./FW/ff.c     **** 
 872:./FW/ff.c     **** #endif  /* _FS_LOCK != 0 */
 873:./FW/ff.c     **** 
 874:./FW/ff.c     **** 
 875:./FW/ff.c     **** 
 876:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 877:./FW/ff.c     **** /* Move/Flush disk access window in the file system object               */
 878:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 879:./FW/ff.c     **** #if !_FS_READONLY
 880:./FW/ff.c     **** static
 881:./FW/ff.c     **** FRESULT sync_window (   /* Returns FR_OK or FR_DISK_ERROR */
 882:./FW/ff.c     ****     FATFS* fs           /* File system object */
 883:./FW/ff.c     **** ) {
 884:./FW/ff.c     ****     DWORD wsect;
 885:./FW/ff.c     ****     UINT nf;
 886:./FW/ff.c     ****     FRESULT res = FR_OK;
 887:./FW/ff.c     **** 
 888:./FW/ff.c     **** 
 889:./FW/ff.c     ****     if (fs->wflag) {    /* Write back the sector if it is dirty */
 890:./FW/ff.c     ****         wsect = fs->winsect;    /* Current sector number */
 891:./FW/ff.c     ****         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 892:./FW/ff.c     ****             res = FR_DISK_ERR;
 893:./FW/ff.c     ****         } else {
 894:./FW/ff.c     ****             fs->wflag = 0;
 895:./FW/ff.c     ****             if (wsect - fs->fatbase < fs->fsize) {      /* Is it in the FAT area? */
 896:./FW/ff.c     ****                 for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
 897:./FW/ff.c     ****                     wsect += fs->fsize;
 898:./FW/ff.c     ****                     disk_write(fs->drv, fs->win, wsect, 1);
 899:./FW/ff.c     ****                 }
 900:./FW/ff.c     ****             }
 901:./FW/ff.c     ****         }
 902:./FW/ff.c     ****     }
 903:./FW/ff.c     ****     return res;
 904:./FW/ff.c     **** }
 905:./FW/ff.c     **** #endif
 906:./FW/ff.c     **** 
 907:./FW/ff.c     **** 
 908:./FW/ff.c     **** static
 909:./FW/ff.c     **** FRESULT move_window (   /* Returns FR_OK or FR_DISK_ERROR */
 910:./FW/ff.c     ****     FATFS* fs,          /* File system object */
 911:./FW/ff.c     ****     DWORD sector        /* Sector number to make appearance in the fs->win[] */
 912:./FW/ff.c     **** ) {
 913:./FW/ff.c     ****     FRESULT res = FR_OK;
 914:./FW/ff.c     **** 
 915:./FW/ff.c     **** 
 916:./FW/ff.c     ****     if (sector != fs->winsect) {    /* Window offset changed? */
 917:./FW/ff.c     **** #if !_FS_READONLY
 918:./FW/ff.c     ****         res = sync_window(fs);      /* Write-back changes */
 919:./FW/ff.c     **** #endif
 920:./FW/ff.c     ****         if (res == FR_OK) {         /* Fill sector window with new data */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 35


 921:./FW/ff.c     ****             if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 922:./FW/ff.c     ****                 sector = 0xFFFFFFFF;    /* Invalidate window if data is not reliable */
 923:./FW/ff.c     ****                 res = FR_DISK_ERR;
 924:./FW/ff.c     ****             }
 925:./FW/ff.c     ****             fs->winsect = sector;
 926:./FW/ff.c     ****         }
 927:./FW/ff.c     ****     }
 928:./FW/ff.c     ****     return res;
 929:./FW/ff.c     **** }
 930:./FW/ff.c     **** 
 931:./FW/ff.c     **** 
 932:./FW/ff.c     **** 
 933:./FW/ff.c     **** 
 934:./FW/ff.c     **** #if !_FS_READONLY
 935:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 936:./FW/ff.c     **** /* Synchronize file system and strage device                             */
 937:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 938:./FW/ff.c     **** 
 939:./FW/ff.c     **** static
 940:./FW/ff.c     **** FRESULT sync_fs (   /* FR_OK:succeeded, !=0:error */
 941:./FW/ff.c     ****     FATFS* fs       /* File system object */
 942:./FW/ff.c     **** ) {
 943:./FW/ff.c     ****     FRESULT res;
 944:./FW/ff.c     **** 
 945:./FW/ff.c     **** 
 946:./FW/ff.c     ****     res = sync_window(fs);
 947:./FW/ff.c     ****     if (res == FR_OK) {
 948:./FW/ff.c     ****         /* Update FSInfo sector if needed */
 949:./FW/ff.c     ****         if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 950:./FW/ff.c     ****             /* Create FSInfo structure */
 951:./FW/ff.c     ****             mem_set(fs->win, 0, SS(fs));
 952:./FW/ff.c     ****             st_word(fs->win + BS_55AA, 0xAA55);
 953:./FW/ff.c     ****             st_dword(fs->win + FSI_LeadSig, 0x41615252);
 954:./FW/ff.c     ****             st_dword(fs->win + FSI_StrucSig, 0x61417272);
 955:./FW/ff.c     ****             st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 956:./FW/ff.c     ****             st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 957:./FW/ff.c     ****             /* Write it into the FSInfo sector */
 958:./FW/ff.c     ****             fs->winsect = fs->volbase + 1;
 959:./FW/ff.c     ****             disk_write(fs->drv, fs->win, fs->winsect, 1);
 960:./FW/ff.c     ****             fs->fsi_flag = 0;
 961:./FW/ff.c     ****         }
 962:./FW/ff.c     ****         /* Make sure that no pending write process in the physical drive */
 963:./FW/ff.c     ****         if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) { res = FR_DISK_ERR; }
 964:./FW/ff.c     ****     }
 965:./FW/ff.c     **** 
 966:./FW/ff.c     ****     return res;
 967:./FW/ff.c     **** }
 968:./FW/ff.c     **** 
 969:./FW/ff.c     **** #endif
 970:./FW/ff.c     **** 
 971:./FW/ff.c     **** 
 972:./FW/ff.c     **** 
 973:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 974:./FW/ff.c     **** /* Get sector# from cluster#                                             */
 975:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 976:./FW/ff.c     **** 
 977:./FW/ff.c     **** static
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 36


 978:./FW/ff.c     **** DWORD clust2sect (  /* !=0:Sector number, 0:Failed (invalid cluster#) */
 979:./FW/ff.c     ****     FATFS* fs,      /* File system object */
 980:./FW/ff.c     ****     DWORD clst      /* Cluster# to be converted */
 981:./FW/ff.c     **** ) {
 968              		.loc 1 981 3 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              		@ link register save eliminated.
 982:./FW/ff.c     ****     clst -= 2;
 973              		.loc 1 982 5 view .LVU278
 974              		.loc 1 982 10 is_stmt 0 view .LVU279
 975 0000 0239     		subs	r1, r1, #2
 976              	.LVL93:
 983:./FW/ff.c     ****     if (clst >= fs->n_fatent - 2) { return 0; }     /* Invalid cluster# */
 977              		.loc 1 983 5 is_stmt 1 view .LVU280
 978              		.loc 1 983 19 is_stmt 0 view .LVU281
 979 0002 4369     		ldr	r3, [r0, #20]
 980              		.loc 1 983 30 view .LVU282
 981 0004 023B     		subs	r3, r3, #2
 982              		.loc 1 983 8 view .LVU283
 983 0006 8B42     		cmp	r3, r1
 984 0008 04D9     		bls	.L89
 984:./FW/ff.c     ****     return clst * fs->csize + fs->database;
 985              		.loc 1 984 5 is_stmt 1 view .LVU284
 986              		.loc 1 984 21 is_stmt 0 view .LVU285
 987 000a 4389     		ldrh	r3, [r0, #10]
 988              		.loc 1 984 33 view .LVU286
 989 000c 806A     		ldr	r0, [r0, #40]
 990              	.LVL94:
 991              		.loc 1 984 29 view .LVU287
 992 000e 01FB0300 		mla	r0, r1, r3, r0
 993 0012 7047     		bx	lr
 994              	.LVL95:
 995              	.L89:
 983:./FW/ff.c     ****     if (clst >= fs->n_fatent - 2) { return 0; }     /* Invalid cluster# */
 996              		.loc 1 983 44 view .LVU288
 997 0014 0020     		movs	r0, #0
 998              	.LVL96:
 985:./FW/ff.c     **** }
 999              		.loc 1 985 1 view .LVU289
 1000 0016 7047     		bx	lr
 1001              		.cfi_endproc
 1002              	.LFE955:
 1004              		.section	.text.clmt_clust,"ax",%progbits
 1005              		.align	1
 1006              		.syntax unified
 1007              		.thumb
 1008              		.thumb_func
 1009              		.fpu fpv4-sp-d16
 1011              	clmt_clust:
 1012              	.LVL97:
 1013              	.LFB960:
 986:./FW/ff.c     **** 
 987:./FW/ff.c     **** 
 988:./FW/ff.c     **** 
 989:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 37


 990:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 991:./FW/ff.c     **** /* FAT access - Read value of a FAT entry                                */
 992:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
 993:./FW/ff.c     **** 
 994:./FW/ff.c     **** static
 995:./FW/ff.c     **** DWORD get_fat ( /* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 996:./FW/ff.c     ****     _FDID* obj, /* Corresponding object */
 997:./FW/ff.c     ****     DWORD clst  /* Cluster number to get the value */
 998:./FW/ff.c     **** ) {
 999:./FW/ff.c     ****     UINT wc, bc;
1000:./FW/ff.c     ****     DWORD val;
1001:./FW/ff.c     ****     FATFS *fs = obj->fs;
1002:./FW/ff.c     **** 
1003:./FW/ff.c     **** 
1004:./FW/ff.c     ****     if (clst < 2 || clst >= fs->n_fatent) { /* Check if in valid range */
1005:./FW/ff.c     ****         val = 1;    /* Internal error */
1006:./FW/ff.c     **** 
1007:./FW/ff.c     ****     } else {
1008:./FW/ff.c     ****         val = 0xFFFFFFFF;   /* Default value falls on disk error */
1009:./FW/ff.c     **** 
1010:./FW/ff.c     ****         switch (fs->fs_type) {
1011:./FW/ff.c     ****         case FS_FAT12 :
1012:./FW/ff.c     ****             bc = (UINT)clst;
1013:./FW/ff.c     ****             bc += bc / 2;
1014:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
1015:./FW/ff.c     ****             wc = fs->win[bc++ % SS(fs)];
1016:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
1017:./FW/ff.c     ****             wc |= fs->win[bc % SS(fs)] << 8;
1018:./FW/ff.c     ****             val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1019:./FW/ff.c     ****             break;
1020:./FW/ff.c     **** 
1021:./FW/ff.c     ****         case FS_FAT16 :
1022:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) { break; }
1023:./FW/ff.c     ****             val = ld_word(fs->win + clst * 2 % SS(fs));
1024:./FW/ff.c     ****             break;
1025:./FW/ff.c     **** 
1026:./FW/ff.c     ****         case FS_FAT32 :
1027:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) { break; }
1028:./FW/ff.c     ****             val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1029:./FW/ff.c     ****             break;
1030:./FW/ff.c     **** #if _FS_EXFAT
1031:./FW/ff.c     ****         case FS_EXFAT :
1032:./FW/ff.c     ****             if (obj->objsize) {
1033:./FW/ff.c     ****                 DWORD cofs = clst - obj->sclust;    /* Offset from start cluster */
1034:./FW/ff.c     ****                 DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;  /* Number of cluste
1035:./FW/ff.c     **** 
1036:./FW/ff.c     ****                 if (obj->stat == 2) {   /* Is there no valid chain on the FAT? */
1037:./FW/ff.c     ****                     if (cofs <= clen) {
1038:./FW/ff.c     ****                         val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;   /* Generate the value */
1039:./FW/ff.c     ****                         break;
1040:./FW/ff.c     ****                     }
1041:./FW/ff.c     ****                 }
1042:./FW/ff.c     ****                 if (obj->stat == 3 && cofs < obj->n_cont) { /* Is it in the 1st fragment? */
1043:./FW/ff.c     ****                     val = clst + 1;     /* Generate the value */
1044:./FW/ff.c     ****                     break;
1045:./FW/ff.c     ****                 }
1046:./FW/ff.c     ****                 if (obj->stat != 2) {   /* Get value from FAT if FAT chain is valid */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 38


1047:./FW/ff.c     ****                     if (obj->n_frag != 0) { /* Is it on the growing edge? */
1048:./FW/ff.c     ****                         val = 0x7FFFFFFF;   /* Generate EOC */
1049:./FW/ff.c     ****                     } else {
1050:./FW/ff.c     ****                         if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) { break;
1051:./FW/ff.c     ****                         val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1052:./FW/ff.c     ****                     }
1053:./FW/ff.c     ****                     break;
1054:./FW/ff.c     ****                 }
1055:./FW/ff.c     ****             }
1056:./FW/ff.c     ****             /* go to default */
1057:./FW/ff.c     **** #endif
1058:./FW/ff.c     ****         default:
1059:./FW/ff.c     ****             val = 1;    /* Internal error */
1060:./FW/ff.c     ****         }
1061:./FW/ff.c     ****     }
1062:./FW/ff.c     **** 
1063:./FW/ff.c     ****     return val;
1064:./FW/ff.c     **** }
1065:./FW/ff.c     **** 
1066:./FW/ff.c     **** 
1067:./FW/ff.c     **** 
1068:./FW/ff.c     **** 
1069:./FW/ff.c     **** #if !_FS_READONLY
1070:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1071:./FW/ff.c     **** /* FAT access - Change value of a FAT entry                              */
1072:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1073:./FW/ff.c     **** 
1074:./FW/ff.c     **** static
1075:./FW/ff.c     **** FRESULT put_fat (   /* FR_OK(0):succeeded, !=0:error */
1076:./FW/ff.c     ****     FATFS* fs,      /* Corresponding file system object */
1077:./FW/ff.c     ****     DWORD clst,     /* FAT index number (cluster number) to be changed */
1078:./FW/ff.c     ****     DWORD val       /* New value to be set to the entry */
1079:./FW/ff.c     **** ) {
1080:./FW/ff.c     ****     UINT bc;
1081:./FW/ff.c     ****     BYTE *p;
1082:./FW/ff.c     ****     FRESULT res = FR_INT_ERR;
1083:./FW/ff.c     **** 
1084:./FW/ff.c     ****     if (clst >= 2 && clst < fs->n_fatent) { /* Check if in valid range */
1085:./FW/ff.c     ****         switch (fs->fs_type) {
1086:./FW/ff.c     ****         case FS_FAT12 : /* Bitfield items */
1087:./FW/ff.c     ****             bc = (UINT)clst;
1088:./FW/ff.c     ****             bc += bc / 2;
1089:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1090:./FW/ff.c     ****             if (res != FR_OK) { break; }
1091:./FW/ff.c     ****             p = fs->win + bc++ % SS(fs);
1092:./FW/ff.c     ****             *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1093:./FW/ff.c     ****             fs->wflag = 1;
1094:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1095:./FW/ff.c     ****             if (res != FR_OK) { break; }
1096:./FW/ff.c     ****             p = fs->win + bc % SS(fs);
1097:./FW/ff.c     ****             *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1098:./FW/ff.c     ****             fs->wflag = 1;
1099:./FW/ff.c     ****             break;
1100:./FW/ff.c     **** 
1101:./FW/ff.c     ****         case FS_FAT16 : /* WORD aligned items */
1102:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1103:./FW/ff.c     ****             if (res != FR_OK) { break; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 39


1104:./FW/ff.c     ****             st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1105:./FW/ff.c     ****             fs->wflag = 1;
1106:./FW/ff.c     ****             break;
1107:./FW/ff.c     **** 
1108:./FW/ff.c     ****         case FS_FAT32 : /* DWORD aligned items */
1109:./FW/ff.c     **** #if _FS_EXFAT
1110:./FW/ff.c     ****         case FS_EXFAT :
1111:./FW/ff.c     **** #endif
1112:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1113:./FW/ff.c     ****             if (res != FR_OK) { break; }
1114:./FW/ff.c     ****             if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1115:./FW/ff.c     ****                 val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1116:./FW/ff.c     ****             }
1117:./FW/ff.c     ****             st_dword(fs->win + clst * 4 % SS(fs), val);
1118:./FW/ff.c     ****             fs->wflag = 1;
1119:./FW/ff.c     ****             break;
1120:./FW/ff.c     ****         }
1121:./FW/ff.c     ****     }
1122:./FW/ff.c     ****     return res;
1123:./FW/ff.c     **** }
1124:./FW/ff.c     **** 
1125:./FW/ff.c     **** #endif /* !_FS_READONLY */
1126:./FW/ff.c     **** 
1127:./FW/ff.c     **** 
1128:./FW/ff.c     **** 
1129:./FW/ff.c     **** 
1130:./FW/ff.c     **** #if _FS_EXFAT && !_FS_READONLY
1131:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1132:./FW/ff.c     **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1133:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1134:./FW/ff.c     **** 
1135:./FW/ff.c     **** /*--------------------------------------*/
1136:./FW/ff.c     **** /* Find a contiguous free cluster block */
1137:./FW/ff.c     **** /*--------------------------------------*/
1138:./FW/ff.c     **** 
1139:./FW/ff.c     **** static
1140:./FW/ff.c     **** DWORD find_bitmap ( /* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1141:./FW/ff.c     ****     FATFS* fs,  /* File system object */
1142:./FW/ff.c     ****     DWORD clst, /* Cluster number to scan from */
1143:./FW/ff.c     ****     DWORD ncl   /* Number of contiguous clusters to find (1..) */
1144:./FW/ff.c     **** ) {
1145:./FW/ff.c     ****     BYTE bm, bv;
1146:./FW/ff.c     ****     UINT i;
1147:./FW/ff.c     ****     DWORD val, scl, ctr;
1148:./FW/ff.c     **** 
1149:./FW/ff.c     **** 
1150:./FW/ff.c     ****     clst -= 2;  /* The first bit in the bitmap corresponds to cluster #2 */
1151:./FW/ff.c     ****     if (clst >= fs->n_fatent - 2) { clst = 0; }
1152:./FW/ff.c     ****     scl = val = clst;
1153:./FW/ff.c     ****     ctr = 0;
1154:./FW/ff.c     ****     for (;;) {
1155:./FW/ff.c     ****         if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) { return 0xFFFFFFFF; }   /* 
1156:./FW/ff.c     ****         i = val / 8 % SS(fs);
1157:./FW/ff.c     ****         bm = 1 << (val % 8);
1158:./FW/ff.c     ****         do {
1159:./FW/ff.c     ****             do {
1160:./FW/ff.c     ****                 bv = fs->win[i] & bm;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 40


1161:./FW/ff.c     ****                 bm <<= 1;       /* Get bit value */
1162:./FW/ff.c     ****                 if (++val >= fs->n_fatent - 2) {    /* Next cluster (with wrap-around) */
1163:./FW/ff.c     ****                     val = 0;
1164:./FW/ff.c     ****                     bm = 0;
1165:./FW/ff.c     ****                     i = SS(fs);
1166:./FW/ff.c     ****                 }
1167:./FW/ff.c     ****                 if (!bv) {  /* Is it a free cluster? */
1168:./FW/ff.c     ****                     if (++ctr == ncl) { return scl + 2; }   /* Check if run length is sufficient fo
1169:./FW/ff.c     ****                 } else {
1170:./FW/ff.c     ****                     scl = val;
1171:./FW/ff.c     ****                     ctr = 0;        /* Encountered a cluster in-use, restart to scan */
1172:./FW/ff.c     ****                 }
1173:./FW/ff.c     ****                 if (val == clst) { return 0; }  /* All cluster scanned? */
1174:./FW/ff.c     ****             } while (bm);
1175:./FW/ff.c     ****             bm = 1;
1176:./FW/ff.c     ****         } while (++i < SS(fs));
1177:./FW/ff.c     ****     }
1178:./FW/ff.c     **** }
1179:./FW/ff.c     **** 
1180:./FW/ff.c     **** 
1181:./FW/ff.c     **** /*----------------------------------------*/
1182:./FW/ff.c     **** /* Set/Clear a block of allocation bitmap */
1183:./FW/ff.c     **** /*----------------------------------------*/
1184:./FW/ff.c     **** 
1185:./FW/ff.c     **** static
1186:./FW/ff.c     **** FRESULT change_bitmap (
1187:./FW/ff.c     ****     FATFS* fs,  /* File system object */
1188:./FW/ff.c     ****     DWORD clst, /* Cluster number to change from */
1189:./FW/ff.c     ****     DWORD ncl,  /* Number of clusters to be changed */
1190:./FW/ff.c     ****     int bv      /* bit value to be set (0 or 1) */
1191:./FW/ff.c     **** ) {
1192:./FW/ff.c     ****     BYTE bm;
1193:./FW/ff.c     ****     UINT i;
1194:./FW/ff.c     ****     DWORD sect;
1195:./FW/ff.c     **** 
1196:./FW/ff.c     ****     clst -= 2;  /* The first bit corresponds to cluster #2 */
1197:./FW/ff.c     ****     sect = fs->database + clst / 8 / SS(fs);    /* Sector address (assuming bitmap is located top o
1198:./FW/ff.c     ****     i = clst / 8 % SS(fs);                      /* Byte offset in the sector */
1199:./FW/ff.c     ****     bm = 1 << (clst % 8);                       /* Bit mask in the byte */
1200:./FW/ff.c     ****     for (;;) {
1201:./FW/ff.c     ****         if (move_window(fs, sect++) != FR_OK) { return FR_DISK_ERR; }
1202:./FW/ff.c     ****         do {
1203:./FW/ff.c     ****             do {
1204:./FW/ff.c     ****                 if (bv == (int)((fs->win[i] & bm) != 0)) { return FR_INT_ERR; } /* Is the bit expec
1205:./FW/ff.c     ****                 fs->win[i] ^= bm;   /* Flip the bit */
1206:./FW/ff.c     ****                 fs->wflag = 1;
1207:./FW/ff.c     ****                 if (--ncl == 0) { return FR_OK; }   /* All bits processed? */
1208:./FW/ff.c     ****             } while (bm <<= 1);     /* Next bit */
1209:./FW/ff.c     ****             bm = 1;
1210:./FW/ff.c     ****         } while (++i < SS(fs));     /* Next byte */
1211:./FW/ff.c     ****         i = 0;
1212:./FW/ff.c     ****     }
1213:./FW/ff.c     **** }
1214:./FW/ff.c     **** 
1215:./FW/ff.c     **** 
1216:./FW/ff.c     **** /*---------------------------------------------*/
1217:./FW/ff.c     **** /* Fill the first fragment of the FAT chain    */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 41


1218:./FW/ff.c     **** /*---------------------------------------------*/
1219:./FW/ff.c     **** 
1220:./FW/ff.c     **** static
1221:./FW/ff.c     **** FRESULT fill_first_frag (
1222:./FW/ff.c     ****     _FDID* obj  /* Pointer to the corresponding object */
1223:./FW/ff.c     **** ) {
1224:./FW/ff.c     ****     FRESULT res;
1225:./FW/ff.c     ****     DWORD cl, n;
1226:./FW/ff.c     **** 
1227:./FW/ff.c     ****     if (obj->stat == 3) {   /* Has the object been changed 'fragmented'? */
1228:./FW/ff.c     ****         for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) { /* Create cluster chain on the FAT 
1229:./FW/ff.c     ****             res = put_fat(obj->fs, cl, cl + 1);
1230:./FW/ff.c     ****             if (res != FR_OK) { return res; }
1231:./FW/ff.c     ****         }
1232:./FW/ff.c     ****         obj->stat = 0;  /* Change status 'FAT chain is valid' */
1233:./FW/ff.c     ****     }
1234:./FW/ff.c     ****     return FR_OK;
1235:./FW/ff.c     **** }
1236:./FW/ff.c     **** 
1237:./FW/ff.c     **** 
1238:./FW/ff.c     **** /*---------------------------------------------*/
1239:./FW/ff.c     **** /* Fill the last fragment of the FAT chain     */
1240:./FW/ff.c     **** /*---------------------------------------------*/
1241:./FW/ff.c     **** 
1242:./FW/ff.c     **** static
1243:./FW/ff.c     **** FRESULT fill_last_frag (
1244:./FW/ff.c     ****     _FDID* obj, /* Pointer to the corresponding object */
1245:./FW/ff.c     ****     DWORD lcl,  /* Last cluster of the fragment */
1246:./FW/ff.c     ****     DWORD term  /* Value to set the last FAT entry */
1247:./FW/ff.c     **** ) {
1248:./FW/ff.c     ****     FRESULT res;
1249:./FW/ff.c     **** 
1250:./FW/ff.c     ****     while (obj->n_frag > 0) {   /* Create the last chain on the FAT */
1251:./FW/ff.c     ****         res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : t
1252:./FW/ff.c     ****         if (res != FR_OK) { return res; }
1253:./FW/ff.c     ****         obj->n_frag--;
1254:./FW/ff.c     ****     }
1255:./FW/ff.c     ****     return FR_OK;
1256:./FW/ff.c     **** }
1257:./FW/ff.c     **** 
1258:./FW/ff.c     **** #endif  /* _FS_EXFAT && !_FS_READONLY */
1259:./FW/ff.c     **** 
1260:./FW/ff.c     **** 
1261:./FW/ff.c     **** 
1262:./FW/ff.c     **** #if !_FS_READONLY
1263:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1264:./FW/ff.c     **** /* FAT handling - Remove a cluster chain                                 */
1265:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1266:./FW/ff.c     **** static
1267:./FW/ff.c     **** FRESULT remove_chain (  /* FR_OK(0):succeeded, !=0:error */
1268:./FW/ff.c     ****     _FDID* obj,         /* Corresponding object */
1269:./FW/ff.c     ****     DWORD clst,         /* Cluster to remove a chain from */
1270:./FW/ff.c     ****     DWORD pclst         /* Previous cluster of clst (0:an entire chain) */
1271:./FW/ff.c     **** ) {
1272:./FW/ff.c     ****     FRESULT res = FR_OK;
1273:./FW/ff.c     ****     DWORD nxt;
1274:./FW/ff.c     ****     FATFS *fs = obj->fs;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 42


1275:./FW/ff.c     **** #if _FS_EXFAT || _USE_TRIM
1276:./FW/ff.c     ****     DWORD scl = clst, ecl = clst;
1277:./FW/ff.c     **** #endif
1278:./FW/ff.c     **** #if _USE_TRIM
1279:./FW/ff.c     ****     DWORD rt[2];
1280:./FW/ff.c     **** #endif
1281:./FW/ff.c     **** 
1282:./FW/ff.c     ****     if (clst < 2 || clst >= fs->n_fatent) { return FR_INT_ERR; }    /* Check if in valid range */
1283:./FW/ff.c     **** 
1284:./FW/ff.c     ****     /* Mark the previous cluster 'EOC' on the FAT if it exists */
1285:./FW/ff.c     ****     if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1286:./FW/ff.c     ****         res = put_fat(fs, pclst, 0xFFFFFFFF);
1287:./FW/ff.c     ****         if (res != FR_OK) { return res; }
1288:./FW/ff.c     ****     }
1289:./FW/ff.c     **** 
1290:./FW/ff.c     ****     /* Remove the chain */
1291:./FW/ff.c     ****     do {
1292:./FW/ff.c     ****         nxt = get_fat(obj, clst);           /* Get cluster status */
1293:./FW/ff.c     ****         if (nxt == 0) { break; }                /* Empty cluster? */
1294:./FW/ff.c     ****         if (nxt == 1) { return FR_INT_ERR; }    /* Internal error? */
1295:./FW/ff.c     ****         if (nxt == 0xFFFFFFFF) { return FR_DISK_ERR; }  /* Disk error? */
1296:./FW/ff.c     ****         if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1297:./FW/ff.c     ****             res = put_fat(fs, clst, 0);     /* Mark the cluster 'free' on the FAT */
1298:./FW/ff.c     ****             if (res != FR_OK) { return res; }
1299:./FW/ff.c     ****         }
1300:./FW/ff.c     ****         if (fs->free_clst < fs->n_fatent - 2) { /* Update FSINFO */
1301:./FW/ff.c     ****             fs->free_clst++;
1302:./FW/ff.c     ****             fs->fsi_flag |= 1;
1303:./FW/ff.c     ****         }
1304:./FW/ff.c     **** #if _FS_EXFAT || _USE_TRIM
1305:./FW/ff.c     ****         if (ecl + 1 == nxt) {   /* Is next cluster contiguous? */
1306:./FW/ff.c     ****             ecl = nxt;
1307:./FW/ff.c     ****         } else {                /* End of contiguous cluster block */
1308:./FW/ff.c     **** #if _FS_EXFAT
1309:./FW/ff.c     ****             if (fs->fs_type == FS_EXFAT) {
1310:./FW/ff.c     ****                 res = change_bitmap(fs, scl, ecl - scl + 1, 0); /* Mark the cluster block 'free' on
1311:./FW/ff.c     ****                 if (res != FR_OK) { return res; }
1312:./FW/ff.c     ****             }
1313:./FW/ff.c     **** #endif
1314:./FW/ff.c     **** #if _USE_TRIM
1315:./FW/ff.c     ****             rt[0] = clust2sect(fs, scl);                    /* Start sector */
1316:./FW/ff.c     ****             rt[1] = clust2sect(fs, ecl) + fs->csize - 1;    /* End sector */
1317:./FW/ff.c     ****             disk_ioctl(fs->drv, CTRL_TRIM, rt);             /* Inform device the block can be erase
1318:./FW/ff.c     **** #endif
1319:./FW/ff.c     ****             scl = ecl = nxt;
1320:./FW/ff.c     ****         }
1321:./FW/ff.c     **** #endif
1322:./FW/ff.c     ****         clst = nxt;                 /* Next cluster */
1323:./FW/ff.c     ****     } while (clst < fs->n_fatent);  /* Repeat while not the last link */
1324:./FW/ff.c     **** 
1325:./FW/ff.c     **** #if _FS_EXFAT
1326:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT) {
1327:./FW/ff.c     ****         if (pclst == 0) {   /* Does the object have no chain? */
1328:./FW/ff.c     ****             obj->stat = 0;      /* Change the object status 'initial' */
1329:./FW/ff.c     ****         } else {
1330:./FW/ff.c     ****             if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) { /* 
1331:./FW/ff.c     ****                 obj->stat = 2;  /* Change the object status 'contiguous' */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 43


1332:./FW/ff.c     ****             }
1333:./FW/ff.c     ****         }
1334:./FW/ff.c     ****     }
1335:./FW/ff.c     **** #endif
1336:./FW/ff.c     ****     return FR_OK;
1337:./FW/ff.c     **** }
1338:./FW/ff.c     **** 
1339:./FW/ff.c     **** 
1340:./FW/ff.c     **** 
1341:./FW/ff.c     **** 
1342:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1343:./FW/ff.c     **** /* FAT handling - Stretch a chain or Create a new chain                  */
1344:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1345:./FW/ff.c     **** static
1346:./FW/ff.c     **** DWORD create_chain (    /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New clus
1347:./FW/ff.c     ****     _FDID* obj,         /* Corresponding object */
1348:./FW/ff.c     ****     DWORD clst          /* Cluster# to stretch, 0:Create a new chain */
1349:./FW/ff.c     **** ) {
1350:./FW/ff.c     ****     DWORD cs, ncl, scl;
1351:./FW/ff.c     ****     FRESULT res;
1352:./FW/ff.c     ****     FATFS *fs = obj->fs;
1353:./FW/ff.c     **** 
1354:./FW/ff.c     **** 
1355:./FW/ff.c     ****     if (clst == 0) {    /* Create a new chain */
1356:./FW/ff.c     ****         scl = fs->last_clst;                /* Get suggested cluster to start from */
1357:./FW/ff.c     ****         if (scl == 0 || scl >= fs->n_fatent) { scl = 1; }
1358:./FW/ff.c     ****     } else {                /* Stretch current chain */
1359:./FW/ff.c     ****         cs = get_fat(obj, clst);            /* Check the cluster status */
1360:./FW/ff.c     ****         if (cs < 2) { return 1; }               /* Invalid FAT value */
1361:./FW/ff.c     ****         if (cs == 0xFFFFFFFF) { return cs; }    /* A disk error occurred */
1362:./FW/ff.c     ****         if (cs < fs->n_fatent) { return cs; }   /* It is already followed by next cluster */
1363:./FW/ff.c     ****         scl = clst;
1364:./FW/ff.c     ****     }
1365:./FW/ff.c     **** 
1366:./FW/ff.c     **** #if _FS_EXFAT
1367:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT) {  /* On the exFAT volume */
1368:./FW/ff.c     ****         ncl = find_bitmap(fs, scl, 1);              /* Find a free cluster */
1369:./FW/ff.c     ****         if (ncl == 0 || ncl == 0xFFFFFFFF) { return ncl; }  /* No free cluster or hard error? */
1370:./FW/ff.c     ****         res = change_bitmap(fs, ncl, 1, 1);         /* Mark the cluster 'in use' */
1371:./FW/ff.c     ****         if (res == FR_INT_ERR) { return 1; }
1372:./FW/ff.c     ****         if (res == FR_DISK_ERR) { return 0xFFFFFFFF; }
1373:./FW/ff.c     ****         if (clst == 0) {                            /* Is it a new chain? */
1374:./FW/ff.c     ****             obj->stat = 2;                          /* Set status 'contiguous' */
1375:./FW/ff.c     ****         } else {                                    /* It is a stretched chain */
1376:./FW/ff.c     ****             if (obj->stat == 2 && ncl != scl + 1) { /* Is the chain got fragmented? */
1377:./FW/ff.c     ****                 obj->n_cont = scl - obj->sclust;    /* Set size of the contiguous part */
1378:./FW/ff.c     ****                 obj->stat = 3;                      /* Change status 'just fragmented' */
1379:./FW/ff.c     ****             }
1380:./FW/ff.c     ****         }
1381:./FW/ff.c     ****         if (obj->stat != 2) {   /* Is the file non-contiguous? */
1382:./FW/ff.c     ****             if (ncl == clst + 1) {  /* Is the cluster next to previous one? */
1383:./FW/ff.c     ****                 obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;    /* Increment size of last framg
1384:./FW/ff.c     ****             } else {                /* New fragment */
1385:./FW/ff.c     ****                 if (obj->n_frag == 0) { obj->n_frag = 1; }
1386:./FW/ff.c     ****                 res = fill_last_frag(obj, clst, ncl);   /* Fill last fragment on the FAT and link i
1387:./FW/ff.c     ****                 if (res == FR_OK) { obj->n_frag = 1; }
1388:./FW/ff.c     ****             }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 44


1389:./FW/ff.c     ****         }
1390:./FW/ff.c     ****     } else
1391:./FW/ff.c     **** #endif
1392:./FW/ff.c     ****     {
1393:./FW/ff.c     ****         /* On the FAT12/16/32 volume */
1394:./FW/ff.c     ****         ncl = scl;  /* Start cluster */
1395:./FW/ff.c     ****         for (;;) {
1396:./FW/ff.c     ****             ncl++;                          /* Next cluster */
1397:./FW/ff.c     ****             if (ncl >= fs->n_fatent) {      /* Check wrap-around */
1398:./FW/ff.c     ****                 ncl = 2;
1399:./FW/ff.c     ****                 if (ncl > scl) { return 0; }    /* No free cluster */
1400:./FW/ff.c     ****             }
1401:./FW/ff.c     ****             cs = get_fat(obj, ncl);         /* Get the cluster status */
1402:./FW/ff.c     ****             if (cs == 0) { break; }             /* Found a free cluster */
1403:./FW/ff.c     ****             if (cs == 1 || cs == 0xFFFFFFFF) { return cs; } /* An error occurred */
1404:./FW/ff.c     ****             if (ncl == scl) { return 0; }       /* No free cluster */
1405:./FW/ff.c     ****         }
1406:./FW/ff.c     ****         res = put_fat(fs, ncl, 0xFFFFFFFF); /* Mark the new cluster 'EOC' */
1407:./FW/ff.c     ****         if (res == FR_OK && clst != 0) {
1408:./FW/ff.c     ****             res = put_fat(fs, clst, ncl);   /* Link it from the previous one if needed */
1409:./FW/ff.c     ****         }
1410:./FW/ff.c     ****     }
1411:./FW/ff.c     **** 
1412:./FW/ff.c     ****     if (res == FR_OK) {         /* Update FSINFO if function succeeded. */
1413:./FW/ff.c     ****         fs->last_clst = ncl;
1414:./FW/ff.c     ****         if (fs->free_clst <= fs->n_fatent - 2) { fs->free_clst--; }
1415:./FW/ff.c     ****         fs->fsi_flag |= 1;
1416:./FW/ff.c     ****     } else {
1417:./FW/ff.c     ****         ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;    /* Failed. Generate error status */
1418:./FW/ff.c     ****     }
1419:./FW/ff.c     **** 
1420:./FW/ff.c     ****     return ncl;     /* Return new cluster number or error status */
1421:./FW/ff.c     **** }
1422:./FW/ff.c     **** 
1423:./FW/ff.c     **** #endif /* !_FS_READONLY */
1424:./FW/ff.c     **** 
1425:./FW/ff.c     **** 
1426:./FW/ff.c     **** 
1427:./FW/ff.c     **** 
1428:./FW/ff.c     **** #if _USE_FASTSEEK
1429:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1430:./FW/ff.c     **** /* FAT handling - Convert offset into cluster with link map table        */
1431:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1432:./FW/ff.c     **** 
1433:./FW/ff.c     **** static
1434:./FW/ff.c     **** DWORD clmt_clust (  /* <2:Error, >=2:Cluster number */
1435:./FW/ff.c     ****     FIL* fp,        /* Pointer to the file object */
1436:./FW/ff.c     ****     FSIZE_t ofs     /* File offset to be converted to cluster# */
1437:./FW/ff.c     **** ) {
 1014              		.loc 1 1437 3 is_stmt 1 view -0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
1438:./FW/ff.c     ****     DWORD cl, ncl, *tbl;
 1019              		.loc 1 1438 5 view .LVU291
1439:./FW/ff.c     ****     FATFS *fs = fp->obj.fs;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 45


 1020              		.loc 1 1439 5 view .LVU292
 1021              		.loc 1 1439 12 is_stmt 0 view .LVU293
 1022 0000 0268     		ldr	r2, [r0]
 1023              	.LVL98:
1440:./FW/ff.c     **** 
1441:./FW/ff.c     **** 
1442:./FW/ff.c     ****     tbl = fp->cltbl + 1;    /* Top of CLMT */
 1024              		.loc 1 1442 5 is_stmt 1 view .LVU294
 1025              		.loc 1 1442 13 is_stmt 0 view .LVU295
 1026 0002 C36A     		ldr	r3, [r0, #44]
 1027              		.loc 1 1442 9 view .LVU296
 1028 0004 0433     		adds	r3, r3, #4
 1029              	.LVL99:
1443:./FW/ff.c     ****     cl = (DWORD)(ofs / SS(fs) / fs->csize); /* Cluster order from top of the file */
 1030              		.loc 1 1443 5 is_stmt 1 view .LVU297
 1031              		.loc 1 1443 22 is_stmt 0 view .LVU298
 1032 0006 490A     		lsrs	r1, r1, #9
 1033              	.LVL100:
 1034              		.loc 1 1443 35 view .LVU299
 1035 0008 5289     		ldrh	r2, [r2, #10]
 1036              	.LVL101:
 1037              		.loc 1 1443 8 view .LVU300
 1038 000a B1FBF2F1 		udiv	r1, r1, r2
 1039              	.LVL102:
 1040              	.L93:
1444:./FW/ff.c     ****     for (;;) {
 1041              		.loc 1 1444 5 is_stmt 1 view .LVU301
1445:./FW/ff.c     ****         ncl = *tbl++;           /* Number of cluters in the fragment */
 1042              		.loc 1 1445 9 view .LVU302
 1043              		.loc 1 1445 13 is_stmt 0 view .LVU303
 1044 000e 1868     		ldr	r0, [r3]
 1045              	.LVL103:
1446:./FW/ff.c     ****         if (ncl == 0) { return 0; } /* End of table? (error) */
 1046              		.loc 1 1446 9 is_stmt 1 view .LVU304
 1047              		.loc 1 1446 12 is_stmt 0 view .LVU305
 1048 0010 30B1     		cbz	r0, .L90
1447:./FW/ff.c     ****         if (cl < ncl) { break; }    /* In this fragment? */
 1049              		.loc 1 1447 9 is_stmt 1 view .LVU306
 1050              		.loc 1 1447 12 is_stmt 0 view .LVU307
 1051 0012 8142     		cmp	r1, r0
 1052 0014 02D3     		bcc	.L92
1448:./FW/ff.c     ****         cl -= ncl;
 1053              		.loc 1 1448 9 is_stmt 1 view .LVU308
 1054              		.loc 1 1448 12 is_stmt 0 view .LVU309
 1055 0016 091A     		subs	r1, r1, r0
 1056              	.LVL104:
1449:./FW/ff.c     ****         tbl++;      /* Next fragment */
 1057              		.loc 1 1449 9 is_stmt 1 view .LVU310
 1058              		.loc 1 1449 12 is_stmt 0 view .LVU311
 1059 0018 0833     		adds	r3, r3, #8
 1060              	.LVL105:
1444:./FW/ff.c     ****         ncl = *tbl++;           /* Number of cluters in the fragment */
 1061              		.loc 1 1444 11 is_stmt 1 view .LVU312
1445:./FW/ff.c     ****         if (ncl == 0) { return 0; } /* End of table? (error) */
 1062              		.loc 1 1445 13 is_stmt 0 view .LVU313
 1063 001a F8E7     		b	.L93
 1064              	.LVL106:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 46


 1065              	.L92:
1450:./FW/ff.c     ****     }
1451:./FW/ff.c     ****     return cl + *tbl;   /* Return the cluster number */
 1066              		.loc 1 1451 5 is_stmt 1 view .LVU314
 1067              		.loc 1 1451 17 is_stmt 0 view .LVU315
 1068 001c 5868     		ldr	r0, [r3, #4]
 1069              	.LVL107:
 1070              		.loc 1 1451 15 view .LVU316
 1071 001e 0844     		add	r0, r0, r1
 1072              	.L90:
1452:./FW/ff.c     **** }
 1073              		.loc 1 1452 1 view .LVU317
 1074 0020 7047     		bx	lr
 1075              		.cfi_endproc
 1076              	.LFE960:
 1078              		.section	.text.ld_clust,"ax",%progbits
 1079              		.align	1
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	ld_clust:
 1086              	.LVL108:
 1087              	.LFB964:
1453:./FW/ff.c     **** 
1454:./FW/ff.c     **** #endif  /* _USE_FASTSEEK */
1455:./FW/ff.c     **** 
1456:./FW/ff.c     **** 
1457:./FW/ff.c     **** 
1458:./FW/ff.c     **** 
1459:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1460:./FW/ff.c     **** /* Directory handling - Set directory index                              */
1461:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1462:./FW/ff.c     **** 
1463:./FW/ff.c     **** static
1464:./FW/ff.c     **** FRESULT dir_sdi (   /* FR_OK(0):succeeded, !=0:error */
1465:./FW/ff.c     ****     DIR* dp,        /* Pointer to directory object */
1466:./FW/ff.c     ****     DWORD ofs       /* Offset of directory table */
1467:./FW/ff.c     **** ) {
1468:./FW/ff.c     ****     DWORD csz, clst;
1469:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
1470:./FW/ff.c     **** 
1471:./FW/ff.c     **** 
1472:./FW/ff.c     ****     if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDI
1473:./FW/ff.c     ****         return FR_INT_ERR;
1474:./FW/ff.c     ****     }
1475:./FW/ff.c     ****     dp->dptr = ofs;             /* Set current offset */
1476:./FW/ff.c     ****     clst = dp->obj.sclust;      /* Table start cluster (0:root) */
1477:./FW/ff.c     ****     if (clst == 0 && fs->fs_type >= FS_FAT32) { /* Replace cluster# 0 with root cluster# */
1478:./FW/ff.c     ****         clst = fs->dirbase;
1479:./FW/ff.c     ****         if (_FS_EXFAT) { dp->obj.stat = 0; }    /* exFAT: Root dir has an FAT chain */
1480:./FW/ff.c     ****     }
1481:./FW/ff.c     **** 
1482:./FW/ff.c     ****     if (clst == 0) {    /* Static table (root-directory in FAT12/16) */
1483:./FW/ff.c     ****         if (ofs / SZDIRE >= fs->n_rootdir)  { return FR_INT_ERR; }  /* Is index out of range? */
1484:./FW/ff.c     ****         dp->sect = fs->dirbase;
1485:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 47


1486:./FW/ff.c     ****     } else {            /* Dynamic table (sub-directory or root-directory in FAT32+) */
1487:./FW/ff.c     ****         csz = (DWORD)fs->csize * SS(fs);    /* Bytes per cluster */
1488:./FW/ff.c     ****         while (ofs >= csz) {                /* Follow cluster chain */
1489:./FW/ff.c     ****             clst = get_fat(&dp->obj, clst);             /* Get next cluster */
1490:./FW/ff.c     ****             if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
1491:./FW/ff.c     ****             if (clst < 2 || clst >= fs->n_fatent) { return FR_INT_ERR; }    /* Reached to end of ta
1492:./FW/ff.c     ****             ofs -= csz;
1493:./FW/ff.c     ****         }
1494:./FW/ff.c     ****         dp->sect = clust2sect(fs, clst);
1495:./FW/ff.c     ****     }
1496:./FW/ff.c     ****     dp->clust = clst;                   /* Current cluster# */
1497:./FW/ff.c     ****     if (!dp->sect) { return FR_INT_ERR; }
1498:./FW/ff.c     ****     dp->sect += ofs / SS(fs);           /* Sector# of the directory entry */
1499:./FW/ff.c     ****     dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
1500:./FW/ff.c     **** 
1501:./FW/ff.c     ****     return FR_OK;
1502:./FW/ff.c     **** }
1503:./FW/ff.c     **** 
1504:./FW/ff.c     **** 
1505:./FW/ff.c     **** 
1506:./FW/ff.c     **** 
1507:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1508:./FW/ff.c     **** /* Directory handling - Move directory table index next                  */
1509:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1510:./FW/ff.c     **** 
1511:./FW/ff.c     **** static
1512:./FW/ff.c     **** FRESULT dir_next (  /* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1513:./FW/ff.c     ****     DIR* dp,        /* Pointer to the directory object */
1514:./FW/ff.c     ****     int stretch     /* 0: Do not stretch table, 1: Stretch table if needed */
1515:./FW/ff.c     **** ) {
1516:./FW/ff.c     ****     DWORD ofs, clst;
1517:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
1518:./FW/ff.c     **** #if !_FS_READONLY
1519:./FW/ff.c     ****     UINT n;
1520:./FW/ff.c     **** #endif
1521:./FW/ff.c     **** 
1522:./FW/ff.c     ****     ofs = dp->dptr + SZDIRE;    /* Next entry */
1523:./FW/ff.c     ****     if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR))
1524:./FW/ff.c     **** 
1525:./FW/ff.c     ****     if (ofs % SS(fs) == 0) {    /* Sector changed? */
1526:./FW/ff.c     ****         dp->sect++;             /* Next sector */
1527:./FW/ff.c     **** 
1528:./FW/ff.c     ****         if (!dp->clust) {       /* Static table */
1529:./FW/ff.c     ****             if (ofs / SZDIRE >= fs->n_rootdir) {    /* Report EOT if it reached end of static table
1530:./FW/ff.c     ****                 dp->sect = 0;
1531:./FW/ff.c     ****                 return FR_NO_FILE;
1532:./FW/ff.c     ****             }
1533:./FW/ff.c     ****         } else {                    /* Dynamic table */
1534:./FW/ff.c     ****             if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {        /* Cluster changed? */
1535:./FW/ff.c     ****                 clst = get_fat(&dp->obj, dp->clust);            /* Get next cluster */
1536:./FW/ff.c     ****                 if (clst <= 1) { return FR_INT_ERR; }               /* Internal error */
1537:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; }     /* Disk error */
1538:./FW/ff.c     ****                 if (clst >= fs->n_fatent) {                     /* Reached end of dynamic table */
1539:./FW/ff.c     **** #if !_FS_READONLY
1540:./FW/ff.c     ****                     if (!stretch) {                             /* If no stretch, report EOT */
1541:./FW/ff.c     ****                         dp->sect = 0;
1542:./FW/ff.c     ****                         return FR_NO_FILE;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 48


1543:./FW/ff.c     ****                     }
1544:./FW/ff.c     ****                     clst = create_chain(&dp->obj, dp->clust);   /* Allocate a cluster */
1545:./FW/ff.c     ****                     if (clst == 0) { return FR_DENIED; }            /* No free cluster */
1546:./FW/ff.c     ****                     if (clst == 1) { return FR_INT_ERR; }           /* Internal error */
1547:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
1548:./FW/ff.c     ****                     /* Clean-up the stretched table */
1549:./FW/ff.c     ****                     if (_FS_EXFAT) { dp->obj.stat |= 4; }           /* The directory needs to be up
1550:./FW/ff.c     ****                     if (sync_window(fs) != FR_OK) { return FR_DISK_ERR; }   /* Flush disk access wi
1551:./FW/ff.c     ****                     mem_set(fs->win, 0, SS(fs));                /* Clear window buffer */
1552:./FW/ff.c     ****                     for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect
1553:./FW/ff.c     ****                         fs->wflag = 1;
1554:./FW/ff.c     ****                         if (sync_window(fs) != FR_OK) { return FR_DISK_ERR; }
1555:./FW/ff.c     ****                     }
1556:./FW/ff.c     ****                     fs->winsect -= n;                           /* Restore window offset */
1557:./FW/ff.c     **** #else
1558:./FW/ff.c     ****                     if (!stretch) { dp->sect = 0; }                 /* (this line is to suppress co
1559:./FW/ff.c     ****                     dp->sect = 0;
1560:./FW/ff.c     ****                     return FR_NO_FILE;          /* Report EOT */
1561:./FW/ff.c     **** #endif
1562:./FW/ff.c     ****                 }
1563:./FW/ff.c     ****                 dp->clust = clst;       /* Initialize data for new cluster */
1564:./FW/ff.c     ****                 dp->sect = clust2sect(fs, clst);
1565:./FW/ff.c     ****             }
1566:./FW/ff.c     ****         }
1567:./FW/ff.c     ****     }
1568:./FW/ff.c     ****     dp->dptr = ofs;                     /* Current entry */
1569:./FW/ff.c     ****     dp->dir = fs->win + ofs % SS(fs);   /* Pointer to the entry in the win[] */
1570:./FW/ff.c     **** 
1571:./FW/ff.c     ****     return FR_OK;
1572:./FW/ff.c     **** }
1573:./FW/ff.c     **** 
1574:./FW/ff.c     **** 
1575:./FW/ff.c     **** 
1576:./FW/ff.c     **** 
1577:./FW/ff.c     **** #if !_FS_READONLY
1578:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1579:./FW/ff.c     **** /* Directory handling - Reserve a block of directory entries             */
1580:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1581:./FW/ff.c     **** 
1582:./FW/ff.c     **** static
1583:./FW/ff.c     **** FRESULT dir_alloc ( /* FR_OK(0):succeeded, !=0:error */
1584:./FW/ff.c     ****     DIR* dp,        /* Pointer to the directory object */
1585:./FW/ff.c     ****     UINT nent       /* Number of contiguous entries to allocate */
1586:./FW/ff.c     **** ) {
1587:./FW/ff.c     ****     FRESULT res;
1588:./FW/ff.c     ****     UINT n;
1589:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
1590:./FW/ff.c     **** 
1591:./FW/ff.c     **** 
1592:./FW/ff.c     ****     res = dir_sdi(dp, 0);
1593:./FW/ff.c     ****     if (res == FR_OK) {
1594:./FW/ff.c     ****         n = 0;
1595:./FW/ff.c     ****         do {
1596:./FW/ff.c     ****             res = move_window(fs, dp->sect);
1597:./FW/ff.c     ****             if (res != FR_OK) { break; }
1598:./FW/ff.c     **** #if _FS_EXFAT
1599:./FW/ff.c     ****             if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 49


1600:./FW/ff.c     **** #else
1601:./FW/ff.c     ****             if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1602:./FW/ff.c     **** #endif
1603:./FW/ff.c     ****                 if (++n == nent) { break; } /* A block of contiguous free entries is found */
1604:./FW/ff.c     ****             } else {
1605:./FW/ff.c     ****                 n = 0;                  /* Not a blank entry. Restart to search */
1606:./FW/ff.c     ****             }
1607:./FW/ff.c     ****             res = dir_next(dp, 1);
1608:./FW/ff.c     ****         }
1609:./FW/ff.c     ****         while (res == FR_OK);   /* Next entry with table stretch enabled */
1610:./FW/ff.c     ****     }
1611:./FW/ff.c     **** 
1612:./FW/ff.c     ****     if (res == FR_NO_FILE) { res = FR_DENIED; } /* No directory entry to allocate */
1613:./FW/ff.c     ****     return res;
1614:./FW/ff.c     **** }
1615:./FW/ff.c     **** 
1616:./FW/ff.c     **** #endif  /* !_FS_READONLY */
1617:./FW/ff.c     **** 
1618:./FW/ff.c     **** 
1619:./FW/ff.c     **** 
1620:./FW/ff.c     **** 
1621:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1622:./FW/ff.c     **** /* FAT: Directory handling - Load/Store start cluster number             */
1623:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1624:./FW/ff.c     **** 
1625:./FW/ff.c     **** static
1626:./FW/ff.c     **** DWORD ld_clust (    /* Returns the top cluster value of the SFN entry */
1627:./FW/ff.c     ****     FATFS* fs,      /* Pointer to the fs object */
1628:./FW/ff.c     ****     const BYTE* dir /* Pointer to the key entry */
1629:./FW/ff.c     **** ) {
 1088              		.loc 1 1629 3 is_stmt 1 view -0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              		.loc 1 1629 3 is_stmt 0 view .LVU319
 1093 0000 70B5     		push	{r4, r5, r6, lr}
 1094              	.LCFI14:
 1095              		.cfi_def_cfa_offset 16
 1096              		.cfi_offset 4, -16
 1097              		.cfi_offset 5, -12
 1098              		.cfi_offset 6, -8
 1099              		.cfi_offset 14, -4
 1100 0002 0646     		mov	r6, r0
 1101 0004 0D46     		mov	r5, r1
1630:./FW/ff.c     ****     DWORD cl;
 1102              		.loc 1 1630 5 is_stmt 1 view .LVU320
1631:./FW/ff.c     **** 
1632:./FW/ff.c     ****     cl = ld_word(dir + DIR_FstClusLO);
 1103              		.loc 1 1632 5 view .LVU321
 1104              		.loc 1 1632 10 is_stmt 0 view .LVU322
 1105 0006 01F11A00 		add	r0, r1, #26
 1106              	.LVL109:
 1107              		.loc 1 1632 10 view .LVU323
 1108 000a FFF7FEFF 		bl	ld_word
 1109              	.LVL110:
1633:./FW/ff.c     ****     if (fs->fs_type == FS_FAT32) {
 1110              		.loc 1 1633 5 is_stmt 1 view .LVU324
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 50


 1111              		.loc 1 1633 11 is_stmt 0 view .LVU325
 1112 000e 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 1113              		.loc 1 1633 8 view .LVU326
 1114 0010 032B     		cmp	r3, #3
 1115 0012 00D0     		beq	.L97
 1116              	.LVL111:
 1117              	.L94:
1634:./FW/ff.c     ****         cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1635:./FW/ff.c     ****     }
1636:./FW/ff.c     **** 
1637:./FW/ff.c     ****     return cl;
1638:./FW/ff.c     **** }
 1118              		.loc 1 1638 1 view .LVU327
 1119 0014 70BD     		pop	{r4, r5, r6, pc}
 1120              	.LVL112:
 1121              	.L97:
 1122              		.loc 1 1638 1 view .LVU328
 1123 0016 0446     		mov	r4, r0
1634:./FW/ff.c     ****         cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 1124              		.loc 1 1634 9 is_stmt 1 view .LVU329
1634:./FW/ff.c     ****         cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 1125              		.loc 1 1634 22 is_stmt 0 view .LVU330
 1126 0018 05F11400 		add	r0, r5, #20
 1127              	.LVL113:
1634:./FW/ff.c     ****         cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 1128              		.loc 1 1634 22 view .LVU331
 1129 001c FFF7FEFF 		bl	ld_word
 1130              	.LVL114:
1634:./FW/ff.c     ****         cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 1131              		.loc 1 1634 12 view .LVU332
 1132 0020 44EA0040 		orr	r0, r4, r0, lsl #16
 1133              	.LVL115:
1637:./FW/ff.c     **** }
 1134              		.loc 1 1637 5 is_stmt 1 view .LVU333
1637:./FW/ff.c     **** }
 1135              		.loc 1 1637 12 is_stmt 0 view .LVU334
 1136 0024 F6E7     		b	.L94
 1137              		.cfi_endproc
 1138              	.LFE964:
 1140              		.section	.text.st_clust,"ax",%progbits
 1141              		.align	1
 1142              		.syntax unified
 1143              		.thumb
 1144              		.thumb_func
 1145              		.fpu fpv4-sp-d16
 1147              	st_clust:
 1148              	.LVL116:
 1149              	.LFB965:
1639:./FW/ff.c     **** 
1640:./FW/ff.c     **** 
1641:./FW/ff.c     **** #if !_FS_READONLY
1642:./FW/ff.c     **** static
1643:./FW/ff.c     **** void st_clust (
1644:./FW/ff.c     ****     FATFS* fs,  /* Pointer to the fs object */
1645:./FW/ff.c     ****     BYTE* dir,  /* Pointer to the key entry */
1646:./FW/ff.c     ****     DWORD cl    /* Value to be set */
1647:./FW/ff.c     **** ) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 51


 1150              		.loc 1 1647 3 is_stmt 1 view -0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154              		.loc 1 1647 3 is_stmt 0 view .LVU336
 1155 0000 70B5     		push	{r4, r5, r6, lr}
 1156              	.LCFI15:
 1157              		.cfi_def_cfa_offset 16
 1158              		.cfi_offset 4, -16
 1159              		.cfi_offset 5, -12
 1160              		.cfi_offset 6, -8
 1161              		.cfi_offset 14, -4
 1162 0002 0646     		mov	r6, r0
 1163 0004 0C46     		mov	r4, r1
 1164 0006 1546     		mov	r5, r2
1648:./FW/ff.c     ****     st_word(dir + DIR_FstClusLO, (WORD)cl);
 1165              		.loc 1 1648 5 is_stmt 1 view .LVU337
 1166 0008 91B2     		uxth	r1, r2
 1167              	.LVL117:
 1168              		.loc 1 1648 5 is_stmt 0 view .LVU338
 1169 000a 04F11A00 		add	r0, r4, #26
 1170              	.LVL118:
 1171              		.loc 1 1648 5 view .LVU339
 1172 000e FFF7FEFF 		bl	st_word
 1173              	.LVL119:
1649:./FW/ff.c     ****     if (fs->fs_type == FS_FAT32) {
 1174              		.loc 1 1649 5 is_stmt 1 view .LVU340
 1175              		.loc 1 1649 11 is_stmt 0 view .LVU341
 1176 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 1177              		.loc 1 1649 8 view .LVU342
 1178 0014 032B     		cmp	r3, #3
 1179 0016 00D0     		beq	.L101
 1180              	.L98:
1650:./FW/ff.c     ****         st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1651:./FW/ff.c     ****     }
1652:./FW/ff.c     **** }
 1181              		.loc 1 1652 1 view .LVU343
 1182 0018 70BD     		pop	{r4, r5, r6, pc}
 1183              	.LVL120:
 1184              	.L101:
1650:./FW/ff.c     ****         st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 1185              		.loc 1 1650 9 is_stmt 1 view .LVU344
 1186 001a 290C     		lsrs	r1, r5, #16
 1187 001c 04F11400 		add	r0, r4, #20
 1188 0020 FFF7FEFF 		bl	st_word
 1189              	.LVL121:
 1190              		.loc 1 1652 1 is_stmt 0 view .LVU345
 1191 0024 F8E7     		b	.L98
 1192              		.cfi_endproc
 1193              	.LFE965:
 1195              		.section	.text.get_fileinfo,"ax",%progbits
 1196              		.align	1
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu fpv4-sp-d16
 1202              	get_fileinfo:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 52


 1203              	.LVL122:
 1204              	.LFB970:
1653:./FW/ff.c     **** #endif
1654:./FW/ff.c     **** 
1655:./FW/ff.c     **** 
1656:./FW/ff.c     **** 
1657:./FW/ff.c     **** #if _USE_LFN != 0
1658:./FW/ff.c     **** /*------------------------------------------------------------------------*/
1659:./FW/ff.c     **** /* FAT-LFN: LFN handling                                                  */
1660:./FW/ff.c     **** /*------------------------------------------------------------------------*/
1661:./FW/ff.c     **** static
1662:./FW/ff.c     **** const BYTE LfnOfs[] = {1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30};  /* Offset of LFN characters
1663:./FW/ff.c     **** 
1664:./FW/ff.c     **** 
1665:./FW/ff.c     **** /*--------------------------------------------------------*/
1666:./FW/ff.c     **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1667:./FW/ff.c     **** /*--------------------------------------------------------*/
1668:./FW/ff.c     **** static
1669:./FW/ff.c     **** int cmp_lfn (               /* 1:matched, 0:not matched */
1670:./FW/ff.c     ****     const WCHAR* lfnbuf,    /* Pointer to the LFN working buffer to be compared */
1671:./FW/ff.c     ****     BYTE* dir               /* Pointer to the directory entry containing the part of LFN */
1672:./FW/ff.c     **** ) {
1673:./FW/ff.c     ****     UINT i, s;
1674:./FW/ff.c     ****     WCHAR wc, uc;
1675:./FW/ff.c     **** 
1676:./FW/ff.c     **** 
1677:./FW/ff.c     ****     if (ld_word(dir + LDIR_FstClusLO) != 0) { return 0; }   /* Check LDIR_FstClusLO */
1678:./FW/ff.c     **** 
1679:./FW/ff.c     ****     i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;  /* Offset in the LFN buffer */
1680:./FW/ff.c     **** 
1681:./FW/ff.c     ****     for (wc = 1, s = 0; s < 13; s++) {      /* Process all characters in the entry */
1682:./FW/ff.c     ****         uc = ld_word(dir + LfnOfs[s]);      /* Pick an LFN character */
1683:./FW/ff.c     ****         if (wc) {
1684:./FW/ff.c     ****             if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) { /* Compare it */
1685:./FW/ff.c     ****                 return 0;                   /* Not matched */
1686:./FW/ff.c     ****             }
1687:./FW/ff.c     ****             wc = uc;
1688:./FW/ff.c     ****         } else {
1689:./FW/ff.c     ****             if (uc != 0xFFFF) { return 0; }     /* Check filler */
1690:./FW/ff.c     ****         }
1691:./FW/ff.c     ****     }
1692:./FW/ff.c     **** 
1693:./FW/ff.c     ****     if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) { return 0; }    /* Last segment matched but dif
1694:./FW/ff.c     **** 
1695:./FW/ff.c     ****     return 1;       /* The part of LFN matched */
1696:./FW/ff.c     **** }
1697:./FW/ff.c     **** 
1698:./FW/ff.c     **** 
1699:./FW/ff.c     **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
1700:./FW/ff.c     **** /*-----------------------------------------------------*/
1701:./FW/ff.c     **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1702:./FW/ff.c     **** /*-----------------------------------------------------*/
1703:./FW/ff.c     **** static
1704:./FW/ff.c     **** int pick_lfn (          /* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1705:./FW/ff.c     ****     WCHAR* lfnbuf,      /* Pointer to the LFN working buffer */
1706:./FW/ff.c     ****     BYTE* dir           /* Pointer to the LFN entry */
1707:./FW/ff.c     **** ) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 53


1708:./FW/ff.c     ****     UINT i, s;
1709:./FW/ff.c     ****     WCHAR wc, uc;
1710:./FW/ff.c     **** 
1711:./FW/ff.c     **** 
1712:./FW/ff.c     ****     if (ld_word(dir + LDIR_FstClusLO) != 0) { return 0; }   /* Check LDIR_FstClusLO is 0 */
1713:./FW/ff.c     **** 
1714:./FW/ff.c     ****     i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13; /* Offset in the LFN buffer */
1715:./FW/ff.c     **** 
1716:./FW/ff.c     ****     for (wc = 1, s = 0; s < 13; s++) {      /* Process all characters in the entry */
1717:./FW/ff.c     ****         uc = ld_word(dir + LfnOfs[s]);      /* Pick an LFN character */
1718:./FW/ff.c     ****         if (wc) {
1719:./FW/ff.c     ****             if (i >= _MAX_LFN) { return 0; }    /* Buffer overflow? */
1720:./FW/ff.c     ****             lfnbuf[i++] = wc = uc;          /* Store it */
1721:./FW/ff.c     ****         } else {
1722:./FW/ff.c     ****             if (uc != 0xFFFF) { return 0; }     /* Check filler */
1723:./FW/ff.c     ****         }
1724:./FW/ff.c     ****     }
1725:./FW/ff.c     **** 
1726:./FW/ff.c     ****     if (dir[LDIR_Ord] & LLEF) {             /* Put terminator if it is the last LFN part */
1727:./FW/ff.c     ****         if (i >= _MAX_LFN) { return 0; }        /* Buffer overflow? */
1728:./FW/ff.c     ****         lfnbuf[i] = 0;
1729:./FW/ff.c     ****     }
1730:./FW/ff.c     **** 
1731:./FW/ff.c     ****     return 1;       /* The part of LFN is valid */
1732:./FW/ff.c     **** }
1733:./FW/ff.c     **** #endif
1734:./FW/ff.c     **** 
1735:./FW/ff.c     **** 
1736:./FW/ff.c     **** #if !_FS_READONLY
1737:./FW/ff.c     **** /*-----------------------------------------*/
1738:./FW/ff.c     **** /* FAT-LFN: Create an entry of LFN entries */
1739:./FW/ff.c     **** /*-----------------------------------------*/
1740:./FW/ff.c     **** static
1741:./FW/ff.c     **** void put_lfn (
1742:./FW/ff.c     ****     const WCHAR* lfn,   /* Pointer to the LFN */
1743:./FW/ff.c     ****     BYTE* dir,          /* Pointer to the LFN entry to be created */
1744:./FW/ff.c     ****     BYTE ord,           /* LFN order (1-20) */
1745:./FW/ff.c     ****     BYTE sum            /* Checksum of the corresponding SFN */
1746:./FW/ff.c     **** ) {
1747:./FW/ff.c     ****     UINT i, s;
1748:./FW/ff.c     ****     WCHAR wc;
1749:./FW/ff.c     **** 
1750:./FW/ff.c     **** 
1751:./FW/ff.c     ****     dir[LDIR_Chksum] = sum;         /* Set checksum */
1752:./FW/ff.c     ****     dir[LDIR_Attr] = AM_LFN;        /* Set attribute. LFN entry */
1753:./FW/ff.c     ****     dir[LDIR_Type] = 0;
1754:./FW/ff.c     ****     st_word(dir + LDIR_FstClusLO, 0);
1755:./FW/ff.c     **** 
1756:./FW/ff.c     ****     i = (ord - 1) * 13;             /* Get offset in the LFN working buffer */
1757:./FW/ff.c     ****     s = wc = 0;
1758:./FW/ff.c     ****     do {
1759:./FW/ff.c     ****         if (wc != 0xFFFF) { wc = lfn[i++]; }    /* Get an effective character */
1760:./FW/ff.c     ****         st_word(dir + LfnOfs[s], wc);       /* Put it */
1761:./FW/ff.c     ****         if (wc == 0) { wc = 0xFFFF; }       /* Padding characters for left locations */
1762:./FW/ff.c     ****     } while (++s < 13);
1763:./FW/ff.c     ****     if (wc == 0xFFFF || !lfn[i]) { ord |= LLEF; }   /* Last LFN part is the start of LFN sequence *
1764:./FW/ff.c     ****     dir[LDIR_Ord] = ord;            /* Set the LFN order */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 54


1765:./FW/ff.c     **** }
1766:./FW/ff.c     **** 
1767:./FW/ff.c     **** #endif  /* !_FS_READONLY */
1768:./FW/ff.c     **** #endif  /* _USE_LFN != 0 */
1769:./FW/ff.c     **** 
1770:./FW/ff.c     **** 
1771:./FW/ff.c     **** 
1772:./FW/ff.c     **** #if _USE_LFN != 0 && !_FS_READONLY
1773:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1774:./FW/ff.c     **** /* FAT-LFN: Create a Numbered SFN                                        */
1775:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1776:./FW/ff.c     **** 
1777:./FW/ff.c     **** static
1778:./FW/ff.c     **** void gen_numname (
1779:./FW/ff.c     ****     BYTE* dst,          /* Pointer to the buffer to store numbered SFN */
1780:./FW/ff.c     ****     const BYTE* src,    /* Pointer to SFN */
1781:./FW/ff.c     ****     const WCHAR* lfn,   /* Pointer to LFN */
1782:./FW/ff.c     ****     UINT seq            /* Sequence number */
1783:./FW/ff.c     **** ) {
1784:./FW/ff.c     ****     BYTE ns[8], c;
1785:./FW/ff.c     ****     UINT i, j;
1786:./FW/ff.c     ****     WCHAR wc;
1787:./FW/ff.c     ****     DWORD sr;
1788:./FW/ff.c     **** 
1789:./FW/ff.c     **** 
1790:./FW/ff.c     ****     mem_cpy(dst, src, 11);
1791:./FW/ff.c     **** 
1792:./FW/ff.c     ****     if (seq > 5) {  /* In case of many collisions, generate a hash number instead of sequential num
1793:./FW/ff.c     ****         sr = seq;
1794:./FW/ff.c     ****         while (*lfn) {  /* Create a CRC */
1795:./FW/ff.c     ****             wc = *lfn++;
1796:./FW/ff.c     ****             for (i = 0; i < 16; i++) {
1797:./FW/ff.c     ****                 sr = (sr << 1) + (wc & 1);
1798:./FW/ff.c     ****                 wc >>= 1;
1799:./FW/ff.c     ****                 if (sr & 0x10000) { sr ^= 0x11021; }
1800:./FW/ff.c     ****             }
1801:./FW/ff.c     ****         }
1802:./FW/ff.c     ****         seq = (UINT)sr;
1803:./FW/ff.c     ****     }
1804:./FW/ff.c     **** 
1805:./FW/ff.c     ****     /* itoa (hexdecimal) */
1806:./FW/ff.c     ****     i = 7;
1807:./FW/ff.c     ****     do {
1808:./FW/ff.c     ****         c = (BYTE)((seq % 16) + '0');
1809:./FW/ff.c     ****         if (c > '9') { c += 7; }
1810:./FW/ff.c     ****         ns[i--] = c;
1811:./FW/ff.c     ****         seq /= 16;
1812:./FW/ff.c     ****     } while (seq);
1813:./FW/ff.c     ****     ns[i] = '~';
1814:./FW/ff.c     **** 
1815:./FW/ff.c     ****     /* Append the number */
1816:./FW/ff.c     ****     for (j = 0; j < i && dst[j] != ' '; j++) {
1817:./FW/ff.c     ****         if (IsDBCS1(dst[j])) {
1818:./FW/ff.c     ****             if (j == i - 1) { break; }
1819:./FW/ff.c     ****             j++;
1820:./FW/ff.c     ****         }
1821:./FW/ff.c     ****     }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 55


1822:./FW/ff.c     ****     do {
1823:./FW/ff.c     ****         dst[j++] = (i < 8) ? ns[i++] : ' ';
1824:./FW/ff.c     ****     } while (j < 8);
1825:./FW/ff.c     **** }
1826:./FW/ff.c     **** #endif  /* _USE_LFN != 0 && !_FS_READONLY */
1827:./FW/ff.c     **** 
1828:./FW/ff.c     **** 
1829:./FW/ff.c     **** 
1830:./FW/ff.c     **** #if _USE_LFN != 0
1831:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1832:./FW/ff.c     **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
1833:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1834:./FW/ff.c     **** 
1835:./FW/ff.c     **** static
1836:./FW/ff.c     **** BYTE sum_sfn (
1837:./FW/ff.c     ****     const BYTE* dir     /* Pointer to the SFN entry */
1838:./FW/ff.c     **** ) {
1839:./FW/ff.c     ****     BYTE sum = 0;
1840:./FW/ff.c     ****     UINT n = 11;
1841:./FW/ff.c     **** 
1842:./FW/ff.c     ****     do {
1843:./FW/ff.c     ****         sum = (sum >> 1) + (sum << 7) + *dir++;
1844:./FW/ff.c     ****     } while (--n);
1845:./FW/ff.c     ****     return sum;
1846:./FW/ff.c     **** }
1847:./FW/ff.c     **** 
1848:./FW/ff.c     **** #endif  /* _USE_LFN != 0 */
1849:./FW/ff.c     **** 
1850:./FW/ff.c     **** 
1851:./FW/ff.c     **** 
1852:./FW/ff.c     **** #if _FS_EXFAT
1853:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1854:./FW/ff.c     **** /* exFAT: Checksum                                                       */
1855:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
1856:./FW/ff.c     **** 
1857:./FW/ff.c     **** static
1858:./FW/ff.c     **** WORD xdir_sum (         /* Get checksum of the directoly block */
1859:./FW/ff.c     ****     const BYTE* dir     /* Directory entry block to be calculated */
1860:./FW/ff.c     **** ) {
1861:./FW/ff.c     ****     UINT i, szblk;
1862:./FW/ff.c     ****     WORD sum;
1863:./FW/ff.c     **** 
1864:./FW/ff.c     **** 
1865:./FW/ff.c     ****     szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
1866:./FW/ff.c     ****     for (i = sum = 0; i < szblk; i++) {
1867:./FW/ff.c     ****         if (i == XDIR_SetSum) { /* Skip sum field */
1868:./FW/ff.c     ****             i++;
1869:./FW/ff.c     ****         } else {
1870:./FW/ff.c     ****             sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1871:./FW/ff.c     ****         }
1872:./FW/ff.c     ****     }
1873:./FW/ff.c     ****     return sum;
1874:./FW/ff.c     **** }
1875:./FW/ff.c     **** 
1876:./FW/ff.c     **** 
1877:./FW/ff.c     **** 
1878:./FW/ff.c     **** static
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 56


1879:./FW/ff.c     **** WORD xname_sum (        /* Get check sum (to be used as hash) of the name */
1880:./FW/ff.c     ****     const WCHAR* name   /* File name to be calculated */
1881:./FW/ff.c     **** ) {
1882:./FW/ff.c     ****     WCHAR chr;
1883:./FW/ff.c     ****     WORD sum = 0;
1884:./FW/ff.c     **** 
1885:./FW/ff.c     **** 
1886:./FW/ff.c     ****     while ((chr = *name++) != 0) {
1887:./FW/ff.c     ****         chr = ff_wtoupper(chr);     /* File name needs to be ignored case */
1888:./FW/ff.c     ****         sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1889:./FW/ff.c     ****         sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1890:./FW/ff.c     ****     }
1891:./FW/ff.c     ****     return sum;
1892:./FW/ff.c     **** }
1893:./FW/ff.c     **** 
1894:./FW/ff.c     **** 
1895:./FW/ff.c     **** #if !_FS_READONLY && _USE_MKFS
1896:./FW/ff.c     **** static
1897:./FW/ff.c     **** DWORD xsum32 (
1898:./FW/ff.c     ****     BYTE  dat,  /* Data to be sumed */
1899:./FW/ff.c     ****     DWORD sum   /* Previous value */
1900:./FW/ff.c     **** ) {
1901:./FW/ff.c     ****     sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
1902:./FW/ff.c     ****     return sum;
1903:./FW/ff.c     **** }
1904:./FW/ff.c     **** #endif
1905:./FW/ff.c     **** 
1906:./FW/ff.c     **** 
1907:./FW/ff.c     **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1908:./FW/ff.c     **** /*------------------------------------------------------*/
1909:./FW/ff.c     **** /* exFAT: Get object information from a directory block */
1910:./FW/ff.c     **** /*------------------------------------------------------*/
1911:./FW/ff.c     **** 
1912:./FW/ff.c     **** static
1913:./FW/ff.c     **** void get_xdir_info (
1914:./FW/ff.c     ****     BYTE* dirb,         /* Pointer to the direcotry entry block 85+C0+C1s */
1915:./FW/ff.c     ****     FILINFO* fno        /* Buffer to store the extracted file information */
1916:./FW/ff.c     **** ) {
1917:./FW/ff.c     ****     UINT di, si;
1918:./FW/ff.c     ****     WCHAR w;
1919:./FW/ff.c     **** #if !_LFN_UNICODE
1920:./FW/ff.c     ****     UINT nc;
1921:./FW/ff.c     **** #endif
1922:./FW/ff.c     **** 
1923:./FW/ff.c     ****     /* Get file name */
1924:./FW/ff.c     ****     di = 0;
1925:./FW/ff.c     **** #if _LFN_UNICODE
1926:./FW/ff.c     ****     for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
1927:./FW/ff.c     ****         if ((si % SZDIRE) == 0) { si += 2; }        /* Skip entry type field */
1928:./FW/ff.c     ****         w = ld_word(dirb + si);                 /* Get a character */
1929:./FW/ff.c     ****         if (di >= _MAX_LFN) { di = 0; break; }  /* Buffer overflow --> inaccessible object name */
1930:./FW/ff.c     ****         fno->fname[di] = w;                     /* Store it */
1931:./FW/ff.c     ****     }
1932:./FW/ff.c     **** #else
1933:./FW/ff.c     ****     for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
1934:./FW/ff.c     ****         if ((si % SZDIRE) == 0) { si += 2; }        /* Skip entry type field */
1935:./FW/ff.c     ****         w = ff_convert(ld_word(dirb + si), 0);  /* Get a character and Unicode -> OEM */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 57


1936:./FW/ff.c     ****         if (_DF1S && w >= 0x100) {              /* Is it a double byte char? (always false at SBCS 
1937:./FW/ff.c     ****             fno->fname[di++] = (char)(w >> 8);  /* Put 1st byte of the DBC */
1938:./FW/ff.c     ****         }
1939:./FW/ff.c     ****         if (w == 0 || di >= _MAX_LFN) { di = 0; break; }    /* Invalid char or buffer overflow --> 
1940:./FW/ff.c     ****         fno->fname[di++] = (char)w;
1941:./FW/ff.c     ****     }
1942:./FW/ff.c     **** #endif
1943:./FW/ff.c     ****     if (di == 0) { fno->fname[di++] = '?'; }    /* Inaccessible object name? */
1944:./FW/ff.c     ****     fno->fname[di] = 0;                     /* Terminate file name */
1945:./FW/ff.c     **** 
1946:./FW/ff.c     ****     fno->altname[0] = 0;                            /* No SFN */
1947:./FW/ff.c     ****     fno->fattrib = dirb[XDIR_Attr];                 /* Attribute */
1948:./FW/ff.c     ****     fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);  /* Size */
1949:./FW/ff.c     ****     fno->ftime = ld_word(dirb + XDIR_ModTime + 0);  /* Time */
1950:./FW/ff.c     ****     fno->fdate = ld_word(dirb + XDIR_ModTime + 2);  /* Date */
1951:./FW/ff.c     **** }
1952:./FW/ff.c     **** 
1953:./FW/ff.c     **** #endif  /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1954:./FW/ff.c     **** 
1955:./FW/ff.c     **** 
1956:./FW/ff.c     **** /*-----------------------------------*/
1957:./FW/ff.c     **** /* exFAT: Get a directry entry block */
1958:./FW/ff.c     **** /*-----------------------------------*/
1959:./FW/ff.c     **** 
1960:./FW/ff.c     **** static
1961:./FW/ff.c     **** FRESULT load_xdir ( /* FR_INT_ERR: invalid entry block */
1962:./FW/ff.c     ****     DIR* dp         /* Pointer to the reading direcotry object pointing the 85 entry */
1963:./FW/ff.c     **** ) {
1964:./FW/ff.c     ****     FRESULT res;
1965:./FW/ff.c     ****     UINT i, sz_ent;
1966:./FW/ff.c     ****     BYTE* dirb = dp->obj.fs->dirbuf;    /* Pointer to the on-memory direcotry entry block 85+C0+C1s
1967:./FW/ff.c     **** 
1968:./FW/ff.c     **** 
1969:./FW/ff.c     ****     /* Load 85 entry */
1970:./FW/ff.c     ****     res = move_window(dp->obj.fs, dp->sect);
1971:./FW/ff.c     ****     if (res != FR_OK) { return res; }
1972:./FW/ff.c     ****     if (dp->dir[XDIR_Type] != 0x85) { return FR_INT_ERR; }
1973:./FW/ff.c     ****     mem_cpy(dirb + 0, dp->dir, SZDIRE);
1974:./FW/ff.c     ****     sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1975:./FW/ff.c     ****     if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) { return FR_INT_ERR; }
1976:./FW/ff.c     **** 
1977:./FW/ff.c     ****     /* Load C0 entry */
1978:./FW/ff.c     ****     res = dir_next(dp, 0);
1979:./FW/ff.c     ****     if (res != FR_OK) { return res; }
1980:./FW/ff.c     ****     res = move_window(dp->obj.fs, dp->sect);
1981:./FW/ff.c     ****     if (res != FR_OK) { return res; }
1982:./FW/ff.c     ****     if (dp->dir[XDIR_Type] != 0xC0) { return FR_INT_ERR; }
1983:./FW/ff.c     ****     mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
1984:./FW/ff.c     ****     if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) { return FR_INT_ERR; }
1985:./FW/ff.c     **** 
1986:./FW/ff.c     ****     /* Load C1 entries */
1987:./FW/ff.c     ****     i = SZDIRE * 2; /* C1 offset */
1988:./FW/ff.c     ****     do {
1989:./FW/ff.c     ****         res = dir_next(dp, 0);
1990:./FW/ff.c     ****         if (res != FR_OK) { return res; }
1991:./FW/ff.c     ****         res = move_window(dp->obj.fs, dp->sect);
1992:./FW/ff.c     ****         if (res != FR_OK) { return res; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 58


1993:./FW/ff.c     ****         if (dp->dir[XDIR_Type] != 0xC1) { return FR_INT_ERR; }
1994:./FW/ff.c     ****         if (i < MAXDIRB(_MAX_LFN)) { mem_cpy(dirb + i, dp->dir, SZDIRE); }
1995:./FW/ff.c     ****     } while ((i += SZDIRE) < sz_ent);
1996:./FW/ff.c     **** 
1997:./FW/ff.c     ****     /* Sanity check (do it when accessible object name) */
1998:./FW/ff.c     ****     if (i <= MAXDIRB(_MAX_LFN)) {
1999:./FW/ff.c     ****         if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) { return FR_INT_ERR; }
2000:./FW/ff.c     ****     }
2001:./FW/ff.c     ****     return FR_OK;
2002:./FW/ff.c     **** }
2003:./FW/ff.c     **** 
2004:./FW/ff.c     **** 
2005:./FW/ff.c     **** #if !_FS_READONLY || _FS_RPATH != 0
2006:./FW/ff.c     **** /*------------------------------------------------*/
2007:./FW/ff.c     **** /* exFAT: Load the object's directory entry block */
2008:./FW/ff.c     **** /*------------------------------------------------*/
2009:./FW/ff.c     **** static
2010:./FW/ff.c     **** FRESULT load_obj_dir (
2011:./FW/ff.c     ****     DIR* dp,            /* Blank directory object to be used to access containing direcotry */
2012:./FW/ff.c     ****     const _FDID* obj    /* Object with its containing directory information */
2013:./FW/ff.c     **** ) {
2014:./FW/ff.c     ****     FRESULT res;
2015:./FW/ff.c     **** 
2016:./FW/ff.c     ****     /* Open object containing directory */
2017:./FW/ff.c     ****     dp->obj.fs = obj->fs;
2018:./FW/ff.c     ****     dp->obj.sclust = obj->c_scl;
2019:./FW/ff.c     ****     dp->obj.stat = (BYTE)obj->c_size;
2020:./FW/ff.c     ****     dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2021:./FW/ff.c     ****     dp->blk_ofs = obj->c_ofs;
2022:./FW/ff.c     **** 
2023:./FW/ff.c     ****     res = dir_sdi(dp, dp->blk_ofs); /* Goto object's entry block */
2024:./FW/ff.c     ****     if (res == FR_OK) {
2025:./FW/ff.c     ****         res = load_xdir(dp);        /* Load the object's entry block */
2026:./FW/ff.c     ****     }
2027:./FW/ff.c     ****     return res;
2028:./FW/ff.c     **** }
2029:./FW/ff.c     **** #endif
2030:./FW/ff.c     **** 
2031:./FW/ff.c     **** 
2032:./FW/ff.c     **** #if !_FS_READONLY
2033:./FW/ff.c     **** /*-----------------------------------------------*/
2034:./FW/ff.c     **** /* exFAT: Store the directory block to the media */
2035:./FW/ff.c     **** /*-----------------------------------------------*/
2036:./FW/ff.c     **** static
2037:./FW/ff.c     **** FRESULT store_xdir (
2038:./FW/ff.c     ****     DIR* dp             /* Pointer to the direcotry object */
2039:./FW/ff.c     **** ) {
2040:./FW/ff.c     ****     FRESULT res;
2041:./FW/ff.c     ****     UINT nent;
2042:./FW/ff.c     ****     BYTE* dirb = dp->obj.fs->dirbuf;    /* Pointer to the direcotry entry block 85+C0+C1s */
2043:./FW/ff.c     **** 
2044:./FW/ff.c     ****     /* Create set sum */
2045:./FW/ff.c     ****     st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2046:./FW/ff.c     ****     nent = dirb[XDIR_NumSec] + 1;
2047:./FW/ff.c     **** 
2048:./FW/ff.c     ****     /* Store the set of directory to the volume */
2049:./FW/ff.c     ****     res = dir_sdi(dp, dp->blk_ofs);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 59


2050:./FW/ff.c     ****     while (res == FR_OK) {
2051:./FW/ff.c     ****         res = move_window(dp->obj.fs, dp->sect);
2052:./FW/ff.c     ****         if (res != FR_OK) { break; }
2053:./FW/ff.c     ****         mem_cpy(dp->dir, dirb, SZDIRE);
2054:./FW/ff.c     ****         dp->obj.fs->wflag = 1;
2055:./FW/ff.c     ****         if (--nent == 0) { break; }
2056:./FW/ff.c     ****         dirb += SZDIRE;
2057:./FW/ff.c     ****         res = dir_next(dp, 0);
2058:./FW/ff.c     ****     }
2059:./FW/ff.c     ****     return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2060:./FW/ff.c     **** }
2061:./FW/ff.c     **** 
2062:./FW/ff.c     **** 
2063:./FW/ff.c     **** 
2064:./FW/ff.c     **** /*-------------------------------------------*/
2065:./FW/ff.c     **** /* exFAT: Create a new directory enrty block */
2066:./FW/ff.c     **** /*-------------------------------------------*/
2067:./FW/ff.c     **** 
2068:./FW/ff.c     **** static
2069:./FW/ff.c     **** void create_xdir (
2070:./FW/ff.c     ****     BYTE* dirb,         /* Pointer to the direcotry entry block buffer */
2071:./FW/ff.c     ****     const WCHAR* lfn    /* Pointer to the nul terminated file name */
2072:./FW/ff.c     **** ) {
2073:./FW/ff.c     ****     UINT i;
2074:./FW/ff.c     ****     BYTE nb, nc;
2075:./FW/ff.c     ****     WCHAR chr;
2076:./FW/ff.c     **** 
2077:./FW/ff.c     **** 
2078:./FW/ff.c     ****     /* Create 85+C0 entry */
2079:./FW/ff.c     ****     mem_set(dirb, 0, 2 * SZDIRE);
2080:./FW/ff.c     ****     dirb[XDIR_Type] = 0x85;
2081:./FW/ff.c     ****     dirb[XDIR_Type + SZDIRE] = 0xC0;
2082:./FW/ff.c     **** 
2083:./FW/ff.c     ****     /* Create C1 entries */
2084:./FW/ff.c     ****     nc = 0;
2085:./FW/ff.c     ****     nb = 1;
2086:./FW/ff.c     ****     chr = 1;
2087:./FW/ff.c     ****     i = SZDIRE * 2;
2088:./FW/ff.c     ****     do {
2089:./FW/ff.c     ****         dirb[i++] = 0xC1;
2090:./FW/ff.c     ****         dirb[i++] = 0;  /* Entry type C1 */
2091:./FW/ff.c     ****         do {    /* Fill name field */
2092:./FW/ff.c     ****             if (chr && (chr = lfn[nc]) != 0) { nc++; }  /* Get a character if exist */
2093:./FW/ff.c     ****             st_word(dirb + i, chr);         /* Store it */
2094:./FW/ff.c     ****         } while ((i += 2) % SZDIRE != 0);
2095:./FW/ff.c     ****         nb++;
2096:./FW/ff.c     ****     } while (lfn[nc]);  /* Fill next entry if any char follows */
2097:./FW/ff.c     **** 
2098:./FW/ff.c     ****     dirb[XDIR_NumName] = nc;    /* Set name length */
2099:./FW/ff.c     ****     dirb[XDIR_NumSec] = nb;     /* Set block length */
2100:./FW/ff.c     ****     st_word(dirb + XDIR_NameHash, xname_sum(lfn));  /* Set name hash */
2101:./FW/ff.c     **** }
2102:./FW/ff.c     **** 
2103:./FW/ff.c     **** #endif  /* !_FS_READONLY */
2104:./FW/ff.c     **** #endif  /* _FS_EXFAT */
2105:./FW/ff.c     **** 
2106:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 60


2107:./FW/ff.c     **** 
2108:./FW/ff.c     **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
2109:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2110:./FW/ff.c     **** /* Read an object from the directory                                     */
2111:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2112:./FW/ff.c     **** 
2113:./FW/ff.c     **** static
2114:./FW/ff.c     **** FRESULT dir_read (
2115:./FW/ff.c     ****     DIR* dp,        /* Pointer to the directory object */
2116:./FW/ff.c     ****     int vol         /* Filtered by 0:file/directory or 1:volume label */
2117:./FW/ff.c     **** ) {
2118:./FW/ff.c     ****     FRESULT res = FR_NO_FILE;
2119:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
2120:./FW/ff.c     ****     BYTE a, c;
2121:./FW/ff.c     **** #if _USE_LFN != 0
2122:./FW/ff.c     ****     BYTE ord = 0xFF, sum = 0xFF;
2123:./FW/ff.c     **** #endif
2124:./FW/ff.c     **** 
2125:./FW/ff.c     ****     while (dp->sect) {
2126:./FW/ff.c     ****         res = move_window(fs, dp->sect);
2127:./FW/ff.c     ****         if (res != FR_OK) { break; }
2128:./FW/ff.c     ****         c = dp->dir[DIR_Name];  /* Test for the entry type */
2129:./FW/ff.c     ****         if (c == 0) {
2130:./FW/ff.c     ****             res = FR_NO_FILE;
2131:./FW/ff.c     ****             break; /* Reached to end of the directory */
2132:./FW/ff.c     ****         }
2133:./FW/ff.c     **** #if _FS_EXFAT
2134:./FW/ff.c     ****         if (fs->fs_type == FS_EXFAT) {  /* On the exFAT volume */
2135:./FW/ff.c     ****             if (_USE_LABEL && vol) {
2136:./FW/ff.c     ****                 if (c == 0x83) { break; }   /* Volume label entry? */
2137:./FW/ff.c     ****             } else {
2138:./FW/ff.c     ****                 if (c == 0x85) {        /* Start of the file entry block? */
2139:./FW/ff.c     ****                     dp->blk_ofs = dp->dptr; /* Get location of the block */
2140:./FW/ff.c     ****                     res = load_xdir(dp);    /* Load the entry block */
2141:./FW/ff.c     ****                     if (res == FR_OK) {
2142:./FW/ff.c     ****                         dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK; /* Get attribute */
2143:./FW/ff.c     ****                     }
2144:./FW/ff.c     ****                     break;
2145:./FW/ff.c     ****                 }
2146:./FW/ff.c     ****             }
2147:./FW/ff.c     ****         } else
2148:./FW/ff.c     **** #endif
2149:./FW/ff.c     ****         {
2150:./FW/ff.c     ****             /* On the FAT12/16/32 volume */
2151:./FW/ff.c     ****             dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK; /* Get attribute */
2152:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
2153:./FW/ff.c     ****             if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {   /* An entry wit
2154:./FW/ff.c     ****                 ord = 0xFF;
2155:./FW/ff.c     ****             } else {
2156:./FW/ff.c     ****                 if (a == AM_LFN) {          /* An LFN entry is found */
2157:./FW/ff.c     ****                     if (c & LLEF) {         /* Is it start of an LFN sequence? */
2158:./FW/ff.c     ****                         sum = dp->dir[LDIR_Chksum];
2159:./FW/ff.c     ****                         c &= (BYTE)~LLEF;
2160:./FW/ff.c     ****                         ord = c;
2161:./FW/ff.c     ****                         dp->blk_ofs = dp->dptr;
2162:./FW/ff.c     ****                     }
2163:./FW/ff.c     ****                     /* Check LFN validity and capture it */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 61


2164:./FW/ff.c     ****                     ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)
2165:./FW/ff.c     ****                 } else {                    /* An SFN entry is found */
2166:./FW/ff.c     ****                     if (ord || sum != sum_sfn(dp->dir)) {   /* Is there a valid LFN? */
2167:./FW/ff.c     ****                         dp->blk_ofs = 0xFFFFFFFF;           /* It has no LFN. */
2168:./FW/ff.c     ****                     }
2169:./FW/ff.c     ****                     break;
2170:./FW/ff.c     ****                 }
2171:./FW/ff.c     ****             }
2172:./FW/ff.c     **** #else       /* Non LFN configuration */
2173:./FW/ff.c     ****             if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {   
2174:./FW/ff.c     ****                 break;
2175:./FW/ff.c     ****             }
2176:./FW/ff.c     **** #endif
2177:./FW/ff.c     ****         }
2178:./FW/ff.c     ****         res = dir_next(dp, 0);      /* Next entry */
2179:./FW/ff.c     ****         if (res != FR_OK) { break; }
2180:./FW/ff.c     ****     }
2181:./FW/ff.c     **** 
2182:./FW/ff.c     ****     if (res != FR_OK) { dp->sect = 0; }     /* Terminate the read operation on error or EOT */
2183:./FW/ff.c     ****     return res;
2184:./FW/ff.c     **** }
2185:./FW/ff.c     **** 
2186:./FW/ff.c     **** #endif  /* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
2187:./FW/ff.c     **** 
2188:./FW/ff.c     **** 
2189:./FW/ff.c     **** 
2190:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2191:./FW/ff.c     **** /* Directory handling - Find an object in the directory                  */
2192:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2193:./FW/ff.c     **** 
2194:./FW/ff.c     **** static
2195:./FW/ff.c     **** FRESULT dir_find (  /* FR_OK(0):succeeded, !=0:error */
2196:./FW/ff.c     ****     DIR* dp         /* Pointer to the directory object with the file name */
2197:./FW/ff.c     **** ) {
2198:./FW/ff.c     ****     FRESULT res;
2199:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
2200:./FW/ff.c     ****     BYTE c;
2201:./FW/ff.c     **** #if _USE_LFN != 0
2202:./FW/ff.c     ****     BYTE a, ord, sum;
2203:./FW/ff.c     **** #endif
2204:./FW/ff.c     **** 
2205:./FW/ff.c     ****     res = dir_sdi(dp, 0);           /* Rewind directory object */
2206:./FW/ff.c     ****     if (res != FR_OK) { return res; }
2207:./FW/ff.c     **** #if _FS_EXFAT
2208:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT) {  /* On the exFAT volume */
2209:./FW/ff.c     ****         BYTE nc;
2210:./FW/ff.c     ****         UINT di, ni;
2211:./FW/ff.c     ****         WORD hash = xname_sum(fs->lfnbuf);      /* Hash value of the name to find */
2212:./FW/ff.c     **** 
2213:./FW/ff.c     ****         while ((res = dir_read(dp, 0)) == FR_OK) {  /* Read an item */
2214:./FW/ff.c     **** #if _MAX_LFN < 255
2215:./FW/ff.c     ****             if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) { continue; }          /* Skip comparison if i
2216:./FW/ff.c     **** #endif
2217:./FW/ff.c     ****             if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) { continue; }  /* Skip comparison if h
2218:./FW/ff.c     ****             for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {
2219:./FW/ff.c     ****                 if ((di % SZDIRE) == 0) { di += 2; }
2220:./FW/ff.c     ****                 if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) { break; 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 62


2221:./FW/ff.c     ****             }
2222:./FW/ff.c     ****             if (nc == 0 && !fs->lfnbuf[ni]) { break; }  /* Name matched? */
2223:./FW/ff.c     ****         }
2224:./FW/ff.c     ****         return res;
2225:./FW/ff.c     ****     }
2226:./FW/ff.c     **** #endif
2227:./FW/ff.c     ****     /* On the FAT12/16/32 volume */
2228:./FW/ff.c     **** #if _USE_LFN != 0
2229:./FW/ff.c     ****     ord = sum = 0xFF;
2230:./FW/ff.c     ****     dp->blk_ofs = 0xFFFFFFFF;   /* Reset LFN sequence */
2231:./FW/ff.c     **** #endif
2232:./FW/ff.c     ****     do {
2233:./FW/ff.c     ****         res = move_window(fs, dp->sect);
2234:./FW/ff.c     ****         if (res != FR_OK) { break; }
2235:./FW/ff.c     ****         c = dp->dir[DIR_Name];
2236:./FW/ff.c     ****         if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
2237:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
2238:./FW/ff.c     ****         dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2239:./FW/ff.c     ****         if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {   /* An entry without valid data */
2240:./FW/ff.c     ****             ord = 0xFF;
2241:./FW/ff.c     ****             dp->blk_ofs = 0xFFFFFFFF;   /* Reset LFN sequence */
2242:./FW/ff.c     ****         } else {
2243:./FW/ff.c     ****             if (a == AM_LFN) {          /* An LFN entry is found */
2244:./FW/ff.c     ****                 if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2245:./FW/ff.c     ****                     if (c & LLEF) {     /* Is it start of LFN sequence? */
2246:./FW/ff.c     ****                         sum = dp->dir[LDIR_Chksum];
2247:./FW/ff.c     ****                         c &= (BYTE)~LLEF;
2248:./FW/ff.c     ****                         ord = c;    /* LFN start order */
2249:./FW/ff.c     ****                         dp->blk_ofs = dp->dptr; /* Start offset of LFN */
2250:./FW/ff.c     ****                     }
2251:./FW/ff.c     ****                     /* Check validity of the LFN entry and compare it with given name */
2252:./FW/ff.c     ****                     ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir))
2253:./FW/ff.c     ****                 }
2254:./FW/ff.c     ****             } else {                    /* An SFN entry is found */
2255:./FW/ff.c     ****                 if (!ord && sum == sum_sfn(dp->dir)) { break; } /* LFN matched? */
2256:./FW/ff.c     ****                 if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) { break; }    /* 
2257:./FW/ff.c     ****                 ord = 0xFF;
2258:./FW/ff.c     ****                 dp->blk_ofs = 0xFFFFFFFF;   /* Reset LFN sequence */
2259:./FW/ff.c     ****             }
2260:./FW/ff.c     ****         }
2261:./FW/ff.c     **** #else       /* Non LFN configuration */
2262:./FW/ff.c     ****         dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2263:./FW/ff.c     ****         if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) { break; }  /* Is it a 
2264:./FW/ff.c     **** #endif
2265:./FW/ff.c     ****         res = dir_next(dp, 0);  /* Next entry */
2266:./FW/ff.c     ****     } while (res == FR_OK);
2267:./FW/ff.c     **** 
2268:./FW/ff.c     ****     return res;
2269:./FW/ff.c     **** }
2270:./FW/ff.c     **** 
2271:./FW/ff.c     **** 
2272:./FW/ff.c     **** 
2273:./FW/ff.c     **** 
2274:./FW/ff.c     **** #if !_FS_READONLY
2275:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2276:./FW/ff.c     **** /* Register an object to the directory                                   */
2277:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 63


2278:./FW/ff.c     **** 
2279:./FW/ff.c     **** static
2280:./FW/ff.c     **** FRESULT dir_register (  /* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_D
2281:./FW/ff.c     ****     DIR* dp             /* Target directory with object name to be created */
2282:./FW/ff.c     **** ) {
2283:./FW/ff.c     ****     FRESULT res;
2284:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
2285:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
2286:./FW/ff.c     ****     UINT n, nlen, nent;
2287:./FW/ff.c     ****     BYTE sn[12], sum;
2288:./FW/ff.c     **** 
2289:./FW/ff.c     **** 
2290:./FW/ff.c     ****     if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) { return FR_INVALID_NAME; }  /* Check name validity 
2291:./FW/ff.c     ****     for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;  /* Get lfn length */
2292:./FW/ff.c     **** 
2293:./FW/ff.c     **** #if _FS_EXFAT
2294:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT) {  /* On the exFAT volume */
2295:./FW/ff.c     ****         DIR dj;
2296:./FW/ff.c     **** 
2297:./FW/ff.c     ****         nent = (nlen + 14) / 15 + 2;    /* Number of entries to allocate (85+C0+C1s) */
2298:./FW/ff.c     ****         res = dir_alloc(dp, nent);      /* Allocate entries */
2299:./FW/ff.c     ****         if (res != FR_OK) { return res; }
2300:./FW/ff.c     ****         dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);   /* Set the allocated entry block offset */
2301:./FW/ff.c     **** 
2302:./FW/ff.c     ****         if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {    /* Has the sub-directory been stretched
2303:./FW/ff.c     ****             dp->obj.objsize += (DWORD)fs->csize * SS(fs);   /* Increase the directory size by clust
2304:./FW/ff.c     ****             res = fill_first_frag(&dp->obj);                /* Fill first fragment on the FAT if ne
2305:./FW/ff.c     ****             if (res != FR_OK) { return res; }
2306:./FW/ff.c     ****             res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);  /* Fill last fragment on the FA
2307:./FW/ff.c     ****             if (res != FR_OK) { return res; }
2308:./FW/ff.c     ****             res = load_obj_dir(&dj, &dp->obj);              /* Load the object status */
2309:./FW/ff.c     ****             if (res != FR_OK) { return res; }
2310:./FW/ff.c     ****             st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);      /* Update the allocation st
2311:./FW/ff.c     ****             st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2312:./FW/ff.c     ****             fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2313:./FW/ff.c     ****             res = store_xdir(&dj);                          /* Store the object status */
2314:./FW/ff.c     ****             if (res != FR_OK) { return res; }
2315:./FW/ff.c     ****         }
2316:./FW/ff.c     **** 
2317:./FW/ff.c     ****         create_xdir(fs->dirbuf, fs->lfnbuf);    /* Create on-memory directory block to be written l
2318:./FW/ff.c     ****         return FR_OK;
2319:./FW/ff.c     ****     }
2320:./FW/ff.c     **** #endif
2321:./FW/ff.c     ****     /* On the FAT12/16/32 volume */
2322:./FW/ff.c     ****     mem_cpy(sn, dp->fn, 12);
2323:./FW/ff.c     ****     if (sn[NSFLAG] & NS_LOSS) {         /* When LFN is out of 8.3 format, generate a numbered name 
2324:./FW/ff.c     ****         dp->fn[NSFLAG] = NS_NOLFN;      /* Find only SFN */
2325:./FW/ff.c     ****         for (n = 1; n < 100; n++) {
2326:./FW/ff.c     ****             gen_numname(dp->fn, sn, fs->lfnbuf, n); /* Generate a numbered name */
2327:./FW/ff.c     ****             res = dir_find(dp);             /* Check if the name collides with existing SFN */
2328:./FW/ff.c     ****             if (res != FR_OK) { break; }
2329:./FW/ff.c     ****         }
2330:./FW/ff.c     ****         if (n == 100) { return FR_DENIED; }     /* Abort if too many collisions */
2331:./FW/ff.c     ****         if (res != FR_NO_FILE) { return res; }  /* Abort if the result is other than 'not collided'
2332:./FW/ff.c     ****         dp->fn[NSFLAG] = sn[NSFLAG];
2333:./FW/ff.c     ****     }
2334:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 64


2335:./FW/ff.c     ****     /* Create an SFN with/without LFNs. */
2336:./FW/ff.c     ****     nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;    /* Number of entries to allocate */
2337:./FW/ff.c     ****     res = dir_alloc(dp, nent);      /* Allocate entries */
2338:./FW/ff.c     ****     if (res == FR_OK && --nent) {   /* Set LFN entry if needed */
2339:./FW/ff.c     ****         res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2340:./FW/ff.c     ****         if (res == FR_OK) {
2341:./FW/ff.c     ****             sum = sum_sfn(dp->fn);  /* Checksum value of the SFN tied to the LFN */
2342:./FW/ff.c     ****             do {                    /* Store LFN entries in bottom first */
2343:./FW/ff.c     ****                 res = move_window(fs, dp->sect);
2344:./FW/ff.c     ****                 if (res != FR_OK) { break; }
2345:./FW/ff.c     ****                 put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2346:./FW/ff.c     ****                 fs->wflag = 1;
2347:./FW/ff.c     ****                 res = dir_next(dp, 0);  /* Next entry */
2348:./FW/ff.c     ****             } while (res == FR_OK && --nent);
2349:./FW/ff.c     ****         }
2350:./FW/ff.c     ****     }
2351:./FW/ff.c     **** 
2352:./FW/ff.c     **** #else   /* Non LFN configuration */
2353:./FW/ff.c     ****     res = dir_alloc(dp, 1);     /* Allocate an entry for SFN */
2354:./FW/ff.c     **** 
2355:./FW/ff.c     **** #endif
2356:./FW/ff.c     **** 
2357:./FW/ff.c     ****     /* Set SFN entry */
2358:./FW/ff.c     ****     if (res == FR_OK) {
2359:./FW/ff.c     ****         res = move_window(fs, dp->sect);
2360:./FW/ff.c     ****         if (res == FR_OK) {
2361:./FW/ff.c     ****             mem_set(dp->dir, 0, SZDIRE);    /* Clean the entry */
2362:./FW/ff.c     ****             mem_cpy(dp->dir + DIR_Name, dp->fn, 11);    /* Put SFN */
2363:./FW/ff.c     **** #if _USE_LFN != 0
2364:./FW/ff.c     ****             dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);   /* Put NT flag */
2365:./FW/ff.c     **** #endif
2366:./FW/ff.c     ****             fs->wflag = 1;
2367:./FW/ff.c     ****         }
2368:./FW/ff.c     ****     }
2369:./FW/ff.c     **** 
2370:./FW/ff.c     ****     return res;
2371:./FW/ff.c     **** }
2372:./FW/ff.c     **** 
2373:./FW/ff.c     **** #endif /* !_FS_READONLY */
2374:./FW/ff.c     **** 
2375:./FW/ff.c     **** 
2376:./FW/ff.c     **** 
2377:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE == 0
2378:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2379:./FW/ff.c     **** /* Remove an object from the directory                                   */
2380:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2381:./FW/ff.c     **** 
2382:./FW/ff.c     **** static
2383:./FW/ff.c     **** FRESULT dir_remove (    /* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2384:./FW/ff.c     ****     DIR* dp             /* Directory object pointing the entry to be removed */
2385:./FW/ff.c     **** ) {
2386:./FW/ff.c     ****     FRESULT res;
2387:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
2388:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
2389:./FW/ff.c     ****     DWORD last = dp->dptr;
2390:./FW/ff.c     **** 
2391:./FW/ff.c     ****     res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);   /* Goto top of the entr
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 65


2392:./FW/ff.c     ****     if (res == FR_OK) {
2393:./FW/ff.c     ****         do {
2394:./FW/ff.c     ****             res = move_window(fs, dp->sect);
2395:./FW/ff.c     ****             if (res != FR_OK) { break; }
2396:./FW/ff.c     ****             /* Mark an entry 'deleted' */
2397:./FW/ff.c     ****             if (_FS_EXFAT && fs->fs_type == FS_EXFAT) { /* On the exFAT volume */
2398:./FW/ff.c     ****                 dp->dir[XDIR_Type] &= 0x7F;
2399:./FW/ff.c     ****             } else {                                    /* On the FAT12/16/32 volume */
2400:./FW/ff.c     ****                 dp->dir[DIR_Name] = DDEM;
2401:./FW/ff.c     ****             }
2402:./FW/ff.c     ****             fs->wflag = 1;
2403:./FW/ff.c     ****             if (dp->dptr >= last) { break; }    /* If reached last entry then all entries of the ob
2404:./FW/ff.c     ****             res = dir_next(dp, 0);  /* Next entry */
2405:./FW/ff.c     ****         } while (res == FR_OK);
2406:./FW/ff.c     ****         if (res == FR_NO_FILE) { res = FR_INT_ERR; }
2407:./FW/ff.c     ****     }
2408:./FW/ff.c     **** #else           /* Non LFN configuration */
2409:./FW/ff.c     **** 
2410:./FW/ff.c     ****     res = move_window(fs, dp->sect);
2411:./FW/ff.c     ****     if (res == FR_OK) {
2412:./FW/ff.c     ****         dp->dir[DIR_Name] = DDEM;
2413:./FW/ff.c     ****         fs->wflag = 1;
2414:./FW/ff.c     ****     }
2415:./FW/ff.c     **** #endif
2416:./FW/ff.c     **** 
2417:./FW/ff.c     ****     return res;
2418:./FW/ff.c     **** }
2419:./FW/ff.c     **** 
2420:./FW/ff.c     **** #endif /* !_FS_READONLY && _FS_MINIMIZE == 0 */
2421:./FW/ff.c     **** 
2422:./FW/ff.c     **** 
2423:./FW/ff.c     **** 
2424:./FW/ff.c     **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
2425:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2426:./FW/ff.c     **** /* Get file information from directory entry                             */
2427:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2428:./FW/ff.c     **** 
2429:./FW/ff.c     **** static
2430:./FW/ff.c     **** void get_fileinfo (     /* No return code */
2431:./FW/ff.c     ****     DIR* dp,            /* Pointer to the directory object */
2432:./FW/ff.c     ****     FILINFO* fno        /* Pointer to the file information to be filled */
2433:./FW/ff.c     **** ) {
 1205              		.loc 1 2433 3 is_stmt 1 view -0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 0
 1208              		@ frame_needed = 0, uses_anonymous_args = 0
 1209              		.loc 1 2433 3 is_stmt 0 view .LVU347
 1210 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1211              	.LCFI16:
 1212              		.cfi_def_cfa_offset 24
 1213              		.cfi_offset 3, -24
 1214              		.cfi_offset 4, -20
 1215              		.cfi_offset 5, -16
 1216              		.cfi_offset 6, -12
 1217              		.cfi_offset 7, -8
 1218              		.cfi_offset 14, -4
2434:./FW/ff.c     ****     UINT i, j;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 66


 1219              		.loc 1 2434 5 is_stmt 1 view .LVU348
2435:./FW/ff.c     ****     TCHAR c;
 1220              		.loc 1 2435 5 view .LVU349
2436:./FW/ff.c     ****     DWORD tm;
 1221              		.loc 1 2436 5 view .LVU350
2437:./FW/ff.c     **** #if _USE_LFN != 0
2438:./FW/ff.c     ****     WCHAR w, lfv;
2439:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
2440:./FW/ff.c     **** #endif
2441:./FW/ff.c     **** 
2442:./FW/ff.c     **** 
2443:./FW/ff.c     ****     fno->fname[0] = 0;      /* Invaidate file info */
 1222              		.loc 1 2443 5 view .LVU351
 1223              		.loc 1 2443 19 is_stmt 0 view .LVU352
 1224 0002 0023     		movs	r3, #0
 1225 0004 4B72     		strb	r3, [r1, #9]
2444:./FW/ff.c     ****     if (!dp->sect) { return; }  /* Exit if read pointer has reached end of directory */
 1226              		.loc 1 2444 5 is_stmt 1 view .LVU353
 1227              		.loc 1 2444 12 is_stmt 0 view .LVU354
 1228 0006 C369     		ldr	r3, [r0, #28]
 1229              		.loc 1 2444 8 view .LVU355
 1230 0008 63B3     		cbz	r3, .L102
 1231 000a 0746     		mov	r7, r0
 1232 000c 0E46     		mov	r6, r1
2445:./FW/ff.c     **** 
2446:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
2447:./FW/ff.c     **** #if _FS_EXFAT
2448:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT) {  /* On the exFAT volume */
2449:./FW/ff.c     ****         get_xdir_info(fs->dirbuf, fno);
2450:./FW/ff.c     ****         return;
2451:./FW/ff.c     ****     } else
2452:./FW/ff.c     **** #endif
2453:./FW/ff.c     ****     {
2454:./FW/ff.c     ****         /* On the FAT12/16/32 volume */
2455:./FW/ff.c     ****         if (dp->blk_ofs != 0xFFFFFFFF) {    /* Get LFN if available */
2456:./FW/ff.c     ****             i = j = 0;
2457:./FW/ff.c     ****             while ((w = fs->lfnbuf[j++]) != 0) {    /* Get an LFN character */
2458:./FW/ff.c     **** #if !_LFN_UNICODE
2459:./FW/ff.c     ****                 w = ff_convert(w, 0);       /* Unicode -> OEM */
2460:./FW/ff.c     ****                 if (w == 0) { i = 0; break; }   /* No LFN if it could not be converted */
2461:./FW/ff.c     ****                 if (_DF1S && w >= 0x100) {  /* Put 1st byte if it is a DBC (always false at SBCS cf
2462:./FW/ff.c     ****                     fno->fname[i++] = (char)(w >> 8);
2463:./FW/ff.c     ****                 }
2464:./FW/ff.c     **** #endif
2465:./FW/ff.c     ****                 if (i >= _MAX_LFN) { i = 0; break; }    /* No LFN if buffer overflow */
2466:./FW/ff.c     ****                 fno->fname[i++] = (TCHAR)w;
2467:./FW/ff.c     ****             }
2468:./FW/ff.c     ****             fno->fname[i] = 0;  /* Terminate the LFN */
2469:./FW/ff.c     ****         }
2470:./FW/ff.c     ****     }
2471:./FW/ff.c     **** 
2472:./FW/ff.c     ****     i = j = 0;
2473:./FW/ff.c     ****     lfv = fno->fname[i];    /* LFN is exist if non-zero */
2474:./FW/ff.c     ****     while (i < 11) {        /* Copy name body and extension */
2475:./FW/ff.c     ****         c = (TCHAR)dp->dir[i++];
2476:./FW/ff.c     ****         if (c == ' ') { continue; }             /* Skip padding spaces */
2477:./FW/ff.c     ****         if (c == RDDEM) { c = (TCHAR)DDEM; }    /* Restore replaced DDEM character */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 67


2478:./FW/ff.c     ****         if (i == 9) {                       /* Insert a . if extension is exist */
2479:./FW/ff.c     ****             if (!lfv) { fno->fname[j] = '.'; }
2480:./FW/ff.c     ****             fno->altname[j++] = '.';
2481:./FW/ff.c     ****         }
2482:./FW/ff.c     **** #if _LFN_UNICODE
2483:./FW/ff.c     ****         if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
2484:./FW/ff.c     ****             c = c << 8 | dp->dir[i++];
2485:./FW/ff.c     ****         }
2486:./FW/ff.c     ****         c = ff_convert(c, 1);   /* OEM -> Unicode */
2487:./FW/ff.c     ****         if (!c) { c = '?'; }
2488:./FW/ff.c     **** #endif
2489:./FW/ff.c     ****         fno->altname[j] = c;
2490:./FW/ff.c     ****         if (!lfv) {
2491:./FW/ff.c     ****             if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2492:./FW/ff.c     ****                 c += 0x20;          /* To lower */
2493:./FW/ff.c     ****             }
2494:./FW/ff.c     ****             fno->fname[j] = c;
2495:./FW/ff.c     ****         }
2496:./FW/ff.c     ****         j++;
2497:./FW/ff.c     ****     }
2498:./FW/ff.c     ****     if (!lfv) {
2499:./FW/ff.c     ****         fno->fname[j] = 0;
2500:./FW/ff.c     ****         if (!dp->dir[DIR_NTres]) { j = 0; } /* Altname is no longer needed if neither LFN nor case 
2501:./FW/ff.c     ****     }
2502:./FW/ff.c     ****     fno->altname[j] = 0;    /* Terminate the SFN */
2503:./FW/ff.c     **** 
2504:./FW/ff.c     **** #else   /* Non-LFN configuration */
2505:./FW/ff.c     ****     i = j = 0;
 1233              		.loc 1 2505 11 view .LVU356
 1234 000e 0022     		movs	r2, #0
 1235              		.loc 1 2505 7 view .LVU357
 1236 0010 1346     		mov	r3, r2
 1237 0012 05E0     		b	.L104
 1238              	.LVL123:
 1239              	.L106:
2506:./FW/ff.c     ****     while (i < 11) {        /* Copy name body and extension */
2507:./FW/ff.c     ****         c = (TCHAR)dp->dir[i++];
2508:./FW/ff.c     ****         if (c == ' ') { continue; }             /* Skip padding spaces */
2509:./FW/ff.c     ****         if (c == RDDEM) { c = (TCHAR)DDEM; }    /* Restore replaced DDEM character */
2510:./FW/ff.c     ****         if (i == 9) { fno->fname[j++] = '.'; }  /* Insert a . if extension is exist */
 1240              		.loc 1 2510 9 is_stmt 1 view .LVU358
 1241              		.loc 1 2510 12 is_stmt 0 view .LVU359
 1242 0014 092C     		cmp	r4, #9
 1243 0016 0ED0     		beq	.L111
 1244              	.L107:
2511:./FW/ff.c     ****         fno->fname[j++] = c;
 1245              		.loc 1 2511 9 is_stmt 1 view .LVU360
 1246              	.LVL124:
 1247              		.loc 1 2511 25 is_stmt 0 view .LVU361
 1248 0018 B118     		adds	r1, r6, r2
 1249 001a 4B72     		strb	r3, [r1, #9]
 1250              		.loc 1 2511 21 view .LVU362
 1251 001c 0132     		adds	r2, r2, #1
 1252              	.LVL125:
 1253              	.L105:
 1254              		.loc 1 2511 21 view .LVU363
 1255 001e 2346     		mov	r3, r4
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 68


 1256              	.LVL126:
 1257              	.L104:
2506:./FW/ff.c     ****     while (i < 11) {        /* Copy name body and extension */
 1258              		.loc 1 2506 11 is_stmt 1 view .LVU364
 1259 0020 0A2B     		cmp	r3, #10
 1260 0022 0DD8     		bhi	.L112
2507:./FW/ff.c     ****         if (c == ' ') { continue; }             /* Skip padding spaces */
 1261              		.loc 1 2507 9 view .LVU365
2507:./FW/ff.c     ****         if (c == ' ') { continue; }             /* Skip padding spaces */
 1262              		.loc 1 2507 22 is_stmt 0 view .LVU366
 1263 0024 3D6A     		ldr	r5, [r7, #32]
2507:./FW/ff.c     ****         if (c == ' ') { continue; }             /* Skip padding spaces */
 1264              		.loc 1 2507 29 view .LVU367
 1265 0026 5C1C     		adds	r4, r3, #1
 1266              	.LVL127:
2507:./FW/ff.c     ****         if (c == ' ') { continue; }             /* Skip padding spaces */
 1267              		.loc 1 2507 11 view .LVU368
 1268 0028 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1269              	.LVL128:
2508:./FW/ff.c     ****         if (c == RDDEM) { c = (TCHAR)DDEM; }    /* Restore replaced DDEM character */
 1270              		.loc 1 2508 9 is_stmt 1 view .LVU369
2508:./FW/ff.c     ****         if (c == RDDEM) { c = (TCHAR)DDEM; }    /* Restore replaced DDEM character */
 1271              		.loc 1 2508 12 is_stmt 0 view .LVU370
 1272 002a 202B     		cmp	r3, #32
 1273 002c F7D0     		beq	.L105
2509:./FW/ff.c     ****         if (i == 9) { fno->fname[j++] = '.'; }  /* Insert a . if extension is exist */
 1274              		.loc 1 2509 9 is_stmt 1 view .LVU371
2509:./FW/ff.c     ****         if (i == 9) { fno->fname[j++] = '.'; }  /* Insert a . if extension is exist */
 1275              		.loc 1 2509 12 is_stmt 0 view .LVU372
 1276 002e 052B     		cmp	r3, #5
 1277 0030 F0D1     		bne	.L106
2509:./FW/ff.c     ****         if (i == 9) { fno->fname[j++] = '.'; }  /* Insert a . if extension is exist */
 1278              		.loc 1 2509 29 view .LVU373
 1279 0032 E523     		movs	r3, #229
 1280              	.LVL129:
2509:./FW/ff.c     ****         if (i == 9) { fno->fname[j++] = '.'; }  /* Insert a . if extension is exist */
 1281              		.loc 1 2509 29 view .LVU374
 1282 0034 EEE7     		b	.L106
 1283              	.LVL130:
 1284              	.L111:
2510:./FW/ff.c     ****         fno->fname[j++] = c;
 1285              		.loc 1 2510 23 is_stmt 1 discriminator 1 view .LVU375
2510:./FW/ff.c     ****         fno->fname[j++] = c;
 1286              		.loc 1 2510 39 is_stmt 0 discriminator 1 view .LVU376
 1287 0036 B118     		adds	r1, r6, r2
 1288 0038 2E20     		movs	r0, #46
 1289 003a 4872     		strb	r0, [r1, #9]
2510:./FW/ff.c     ****         fno->fname[j++] = c;
 1290              		.loc 1 2510 35 discriminator 1 view .LVU377
 1291 003c 0132     		adds	r2, r2, #1
 1292              	.LVL131:
2510:./FW/ff.c     ****         fno->fname[j++] = c;
 1293              		.loc 1 2510 35 discriminator 1 view .LVU378
 1294 003e EBE7     		b	.L107
 1295              	.LVL132:
 1296              	.L112:
2512:./FW/ff.c     ****     }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 69


2513:./FW/ff.c     ****     fno->fname[j] = 0;
 1297              		.loc 1 2513 5 is_stmt 1 view .LVU379
 1298              		.loc 1 2513 19 is_stmt 0 view .LVU380
 1299 0040 3244     		add	r2, r2, r6
 1300              	.LVL133:
 1301              		.loc 1 2513 19 view .LVU381
 1302 0042 0023     		movs	r3, #0
 1303              	.LVL134:
 1304              		.loc 1 2513 19 view .LVU382
 1305 0044 5372     		strb	r3, [r2, #9]
2514:./FW/ff.c     **** #endif
2515:./FW/ff.c     **** 
2516:./FW/ff.c     ****     fno->fattrib = dp->dir[DIR_Attr];               /* Attribute */
 1306              		.loc 1 2516 5 is_stmt 1 view .LVU383
 1307              		.loc 1 2516 22 is_stmt 0 view .LVU384
 1308 0046 3B6A     		ldr	r3, [r7, #32]
 1309              		.loc 1 2516 18 view .LVU385
 1310 0048 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1311 004a 3372     		strb	r3, [r6, #8]
2517:./FW/ff.c     ****     fno->fsize = ld_dword(dp->dir + DIR_FileSize);  /* Size */
 1312              		.loc 1 2517 5 is_stmt 1 view .LVU386
 1313              		.loc 1 2517 29 is_stmt 0 view .LVU387
 1314 004c 386A     		ldr	r0, [r7, #32]
 1315              		.loc 1 2517 18 view .LVU388
 1316 004e 1C30     		adds	r0, r0, #28
 1317 0050 FFF7FEFF 		bl	ld_dword
 1318              	.LVL135:
 1319              		.loc 1 2517 16 view .LVU389
 1320 0054 3060     		str	r0, [r6]
2518:./FW/ff.c     ****     tm = ld_dword(dp->dir + DIR_ModTime);           /* Timestamp */
 1321              		.loc 1 2518 5 is_stmt 1 view .LVU390
 1322              		.loc 1 2518 21 is_stmt 0 view .LVU391
 1323 0056 386A     		ldr	r0, [r7, #32]
 1324              		.loc 1 2518 10 view .LVU392
 1325 0058 1630     		adds	r0, r0, #22
 1326 005a FFF7FEFF 		bl	ld_dword
 1327              	.LVL136:
2519:./FW/ff.c     ****     fno->ftime = (WORD)tm;
 1328              		.loc 1 2519 5 is_stmt 1 view .LVU393
 1329              		.loc 1 2519 16 is_stmt 0 view .LVU394
 1330 005e F080     		strh	r0, [r6, #6]	@ movhi
2520:./FW/ff.c     ****     fno->fdate = (WORD)(tm >> 16);
 1331              		.loc 1 2520 5 is_stmt 1 view .LVU395
 1332              		.loc 1 2520 18 is_stmt 0 view .LVU396
 1333 0060 000C     		lsrs	r0, r0, #16
 1334              	.LVL137:
 1335              		.loc 1 2520 16 view .LVU397
 1336 0062 B080     		strh	r0, [r6, #4]	@ movhi
 1337              	.LVL138:
 1338              	.L102:
2521:./FW/ff.c     **** }
 1339              		.loc 1 2521 1 view .LVU398
 1340 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1341              		.cfi_endproc
 1342              	.LFE970:
 1344              		.section	.rodata.create_name.str1.4,"aMS",%progbits,1
 1345              		.align	2
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 70


 1346              	.LC0:
 1347 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 1347      3A3B3C3D 
 1347      3E3F5B5D 
 1347      7C7F00
 1348              		.section	.text.create_name,"ax",%progbits
 1349              		.align	1
 1350              		.syntax unified
 1351              		.thumb
 1352              		.thumb_func
 1353              		.fpu fpv4-sp-d16
 1355              	create_name:
 1356              	.LVL139:
 1357              	.LFB971:
2522:./FW/ff.c     **** 
2523:./FW/ff.c     **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
2524:./FW/ff.c     **** 
2525:./FW/ff.c     **** 
2526:./FW/ff.c     **** 
2527:./FW/ff.c     **** #if _USE_FIND && _FS_MINIMIZE <= 1
2528:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2529:./FW/ff.c     **** /* Pattern matching                                                      */
2530:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2531:./FW/ff.c     **** 
2532:./FW/ff.c     **** static
2533:./FW/ff.c     **** WCHAR get_achar (       /* Get a character and advances ptr 1 or 2 */
2534:./FW/ff.c     ****     const TCHAR** ptr   /* Pointer to pointer to the SBCS/DBCS/Unicode string */
2535:./FW/ff.c     **** ) {
2536:./FW/ff.c     **** #if !_LFN_UNICODE
2537:./FW/ff.c     ****     WCHAR chr;
2538:./FW/ff.c     **** 
2539:./FW/ff.c     ****     chr = (BYTE) * (*ptr)++;                    /* Get a byte */
2540:./FW/ff.c     ****     if (IsLower(chr)) { chr -= 0x20; }          /* To upper ASCII char */
2541:./FW/ff.c     **** #ifdef _EXCVT
2542:./FW/ff.c     ****     if (chr >= 0x80) { chr = ExCvt[chr - 0x80]; }   /* To upper SBCS extended char */
2543:./FW/ff.c     **** #else
2544:./FW/ff.c     ****     if (IsDBCS1(chr) && IsDBCS2(**ptr)) {       /* Get DBC 2nd byte if needed */
2545:./FW/ff.c     ****         chr = chr << 8 | (BYTE) * (*ptr)++;
2546:./FW/ff.c     ****     }
2547:./FW/ff.c     **** #endif
2548:./FW/ff.c     ****     return chr;
2549:./FW/ff.c     **** #else
2550:./FW/ff.c     ****     return ff_wtoupper(*(*ptr)++);          /* Get a word and to upper */
2551:./FW/ff.c     **** #endif
2552:./FW/ff.c     **** }
2553:./FW/ff.c     **** 
2554:./FW/ff.c     **** 
2555:./FW/ff.c     **** static
2556:./FW/ff.c     **** int pattern_matching (  /* 0:not matched, 1:matched */
2557:./FW/ff.c     ****     const TCHAR* pat,   /* Matching pattern */
2558:./FW/ff.c     ****     const TCHAR* nam,   /* String to be tested */
2559:./FW/ff.c     ****     int skip,           /* Number of pre-skip chars (number of ?s) */
2560:./FW/ff.c     ****     int inf             /* Infinite search (* specified) */
2561:./FW/ff.c     **** ) {
2562:./FW/ff.c     ****     const TCHAR *pp, *np;
2563:./FW/ff.c     ****     WCHAR pc, nc;
2564:./FW/ff.c     ****     int nm, nx;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 71


2565:./FW/ff.c     **** 
2566:./FW/ff.c     **** 
2567:./FW/ff.c     ****     while (skip--) {                /* Pre-skip name chars */
2568:./FW/ff.c     ****         if (!get_achar(&nam)) { return 0; } /* Branch mismatched if less name chars */
2569:./FW/ff.c     ****     }
2570:./FW/ff.c     ****     if (!*pat && inf) { return 1; }     /* (short circuit) */
2571:./FW/ff.c     **** 
2572:./FW/ff.c     ****     do {
2573:./FW/ff.c     ****         pp = pat;
2574:./FW/ff.c     ****         np = nam;           /* Top of pattern and name to match */
2575:./FW/ff.c     ****         for (;;) {
2576:./FW/ff.c     ****             if (*pp == '?' || *pp == '*') { /* Wildcard? */
2577:./FW/ff.c     ****                 nm = nx = 0;
2578:./FW/ff.c     ****                 do {                /* Analyze the wildcard chars */
2579:./FW/ff.c     ****                     if (*pp++ == '?') { nm++; }
2580:./FW/ff.c     ****                     else { nx = 1; }
2581:./FW/ff.c     ****                 } while (*pp == '?' || *pp == '*');
2582:./FW/ff.c     ****                 if (pattern_matching(pp, np, nm, nx)) { return 1; } /* Test new branch (recurs upto
2583:./FW/ff.c     ****                 nc = *np;
2584:./FW/ff.c     ****                 break;  /* Branch mismatched */
2585:./FW/ff.c     ****             }
2586:./FW/ff.c     ****             pc = get_achar(&pp);    /* Get a pattern char */
2587:./FW/ff.c     ****             nc = get_achar(&np);    /* Get a name char */
2588:./FW/ff.c     ****             if (pc != nc) { break; }    /* Branch mismatched? */
2589:./FW/ff.c     ****             if (pc == 0) { return 1; }  /* Branch matched? (matched at end of both strings) */
2590:./FW/ff.c     ****         }
2591:./FW/ff.c     ****         get_achar(&nam);            /* nam++ */
2592:./FW/ff.c     ****     } while (inf && nc);            /* Retry until end of name if infinite search is specified */
2593:./FW/ff.c     **** 
2594:./FW/ff.c     ****     return 0;
2595:./FW/ff.c     **** }
2596:./FW/ff.c     **** 
2597:./FW/ff.c     **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
2598:./FW/ff.c     **** 
2599:./FW/ff.c     **** 
2600:./FW/ff.c     **** 
2601:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2602:./FW/ff.c     **** /* Pick a top segment and create the object name in directory form       */
2603:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2604:./FW/ff.c     **** 
2605:./FW/ff.c     **** static
2606:./FW/ff.c     **** FRESULT create_name (   /* FR_OK: successful, FR_INVALID_NAME: could not create */
2607:./FW/ff.c     ****     DIR* dp,            /* Pointer to the directory object */
2608:./FW/ff.c     ****     const TCHAR** path  /* Pointer to pointer to the segment in the path string */
2609:./FW/ff.c     **** ) {
 1358              		.loc 1 2609 3 is_stmt 1 view -0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              		.loc 1 2609 3 is_stmt 0 view .LVU400
 1363 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1364              	.LCFI17:
 1365              		.cfi_def_cfa_offset 40
 1366              		.cfi_offset 3, -40
 1367              		.cfi_offset 4, -36
 1368              		.cfi_offset 5, -32
 1369              		.cfi_offset 6, -28
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 72


 1370              		.cfi_offset 7, -24
 1371              		.cfi_offset 8, -20
 1372              		.cfi_offset 9, -16
 1373              		.cfi_offset 10, -12
 1374              		.cfi_offset 11, -8
 1375              		.cfi_offset 14, -4
 1376 0004 8146     		mov	r9, r0
 1377 0006 8A46     		mov	r10, r1
2610:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
2611:./FW/ff.c     ****     BYTE b, cf;
2612:./FW/ff.c     ****     WCHAR w, *lfn;
2613:./FW/ff.c     ****     UINT i, ni, si, di;
2614:./FW/ff.c     ****     const TCHAR *p;
2615:./FW/ff.c     **** 
2616:./FW/ff.c     ****     /* Create LFN in Unicode */
2617:./FW/ff.c     ****     p = *path;
2618:./FW/ff.c     ****     lfn = dp->obj.fs->lfnbuf;
2619:./FW/ff.c     ****     si = di = 0;
2620:./FW/ff.c     ****     for (;;) {
2621:./FW/ff.c     ****         w = p[si++];                    /* Get a character */
2622:./FW/ff.c     ****         if (w < ' ') { break; }             /* Break if end of the path name */
2623:./FW/ff.c     ****         if (w == '/' || w == '\\') {    /* Break if a separator is found */
2624:./FW/ff.c     ****             while (p[si] == '/' || p[si] == '\\') { si++; } /* Skip duplicated separator if exist *
2625:./FW/ff.c     ****             break;
2626:./FW/ff.c     ****         }
2627:./FW/ff.c     ****         if (di >= _MAX_LFN) { return FR_INVALID_NAME; } /* Reject too long name */
2628:./FW/ff.c     **** #if !_LFN_UNICODE
2629:./FW/ff.c     ****         w &= 0xFF;
2630:./FW/ff.c     ****         if (IsDBCS1(w)) {               /* Check if it is a DBC 1st byte (always false on SBCS cfg)
2631:./FW/ff.c     ****             b = (BYTE)p[si++];          /* Get 2nd byte */
2632:./FW/ff.c     ****             w = (w << 8) + b;           /* Create a DBC */
2633:./FW/ff.c     ****             if (!IsDBCS2(b)) { return FR_INVALID_NAME; }    /* Reject invalid sequence */
2634:./FW/ff.c     ****         }
2635:./FW/ff.c     ****         w = ff_convert(w, 1);           /* Convert ANSI/OEM to Unicode */
2636:./FW/ff.c     ****         if (!w) { return FR_INVALID_NAME; } /* Reject invalid code */
2637:./FW/ff.c     **** #endif
2638:./FW/ff.c     ****         if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) { return FR_INVALID_NAME; }    /* Reject illeg
2639:./FW/ff.c     ****         lfn[di++] = w;                  /* Store the Unicode character */
2640:./FW/ff.c     ****     }
2641:./FW/ff.c     ****     *path = &p[si];                     /* Return pointer to the next segment */
2642:./FW/ff.c     ****     cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of the path */
2643:./FW/ff.c     **** #if _FS_RPATH != 0
2644:./FW/ff.c     ****     if ((di == 1 && lfn[di - 1] == '.') ||
2645:./FW/ff.c     ****             (di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {    /* Is this segment a dot na
2646:./FW/ff.c     ****         lfn[di] = 0;
2647:./FW/ff.c     ****         for (i = 0; i < 11; i++)        /* Create dot name for SFN entry */
2648:./FW/ff.c     ****         { dp->fn[i] = (i < di) ? '.' : ' '; }
2649:./FW/ff.c     ****         dp->fn[i] = cf | NS_DOT;        /* This is a dot entry */
2650:./FW/ff.c     ****         return FR_OK;
2651:./FW/ff.c     ****     }
2652:./FW/ff.c     **** #endif
2653:./FW/ff.c     ****     while (di) {                        /* Snip off trailing spaces and dots if exist */
2654:./FW/ff.c     ****         w = lfn[di - 1];
2655:./FW/ff.c     ****         if (w != ' ' && w != '.') { break; }
2656:./FW/ff.c     ****         di--;
2657:./FW/ff.c     ****     }
2658:./FW/ff.c     ****     lfn[di] = 0;                        /* LFN is created */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 73


2659:./FW/ff.c     ****     if (di == 0) { return FR_INVALID_NAME; }    /* Reject nul name */
2660:./FW/ff.c     **** 
2661:./FW/ff.c     ****     /* Create SFN in directory form */
2662:./FW/ff.c     ****     mem_set(dp->fn, ' ', 11);
2663:./FW/ff.c     ****     for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;  /* Strip leading spaces and dots */
2664:./FW/ff.c     ****     if (si) { cf |= NS_LOSS | NS_LFN; }
2665:./FW/ff.c     ****     while (di && lfn[di - 1] != '.') { di--; }  /* Find extension (di<=si: no extension) */
2666:./FW/ff.c     **** 
2667:./FW/ff.c     ****     i = b = 0;
2668:./FW/ff.c     ****     ni = 8;
2669:./FW/ff.c     ****     for (;;) {
2670:./FW/ff.c     ****         w = lfn[si++];                  /* Get an LFN character */
2671:./FW/ff.c     ****         if (!w) { break; }                  /* Break on end of the LFN */
2672:./FW/ff.c     ****         if (w == ' ' || (w == '.' && si != di)) {   /* Remove spaces and dots */
2673:./FW/ff.c     ****             cf |= NS_LOSS | NS_LFN;
2674:./FW/ff.c     ****             continue;
2675:./FW/ff.c     ****         }
2676:./FW/ff.c     **** 
2677:./FW/ff.c     ****         if (i >= ni || si == di) {      /* Extension or end of SFN */
2678:./FW/ff.c     ****             if (ni == 11) {             /* Long extension */
2679:./FW/ff.c     ****                 cf |= NS_LOSS | NS_LFN;
2680:./FW/ff.c     ****                 break;
2681:./FW/ff.c     ****             }
2682:./FW/ff.c     ****             if (si != di) { cf |= NS_LOSS | NS_LFN; }   /* Out of 8.3 format */
2683:./FW/ff.c     ****             if (si > di) { break; }         /* No extension */
2684:./FW/ff.c     ****             si = di;
2685:./FW/ff.c     ****             i = 8;
2686:./FW/ff.c     ****             ni = 11;    /* Enter extension section */
2687:./FW/ff.c     ****             b <<= 2;
2688:./FW/ff.c     ****             continue;
2689:./FW/ff.c     ****         }
2690:./FW/ff.c     **** 
2691:./FW/ff.c     ****         if (w >= 0x80) {                /* Non ASCII character */
2692:./FW/ff.c     **** #ifdef _EXCVT
2693:./FW/ff.c     ****             w = ff_convert(w, 0);       /* Unicode -> OEM code */
2694:./FW/ff.c     ****             if (w) { w = ExCvt[w - 0x80]; } /* Convert extended character to upper (SBCS) */
2695:./FW/ff.c     **** #else
2696:./FW/ff.c     ****             w = ff_convert(ff_wtoupper(w), 0);  /* Upper converted Unicode -> OEM code */
2697:./FW/ff.c     **** #endif
2698:./FW/ff.c     ****             cf |= NS_LFN;               /* Force create LFN entry */
2699:./FW/ff.c     ****         }
2700:./FW/ff.c     **** 
2701:./FW/ff.c     ****         if (_DF1S && w >= 0x100) {      /* Is this DBC? (always false at SBCS cfg) */
2702:./FW/ff.c     ****             if (i >= ni - 1) {
2703:./FW/ff.c     ****                 cf |= NS_LOSS | NS_LFN;
2704:./FW/ff.c     ****                 i = ni;
2705:./FW/ff.c     ****                 continue;
2706:./FW/ff.c     ****             }
2707:./FW/ff.c     ****             dp->fn[i++] = (BYTE)(w >> 8);
2708:./FW/ff.c     ****         } else {                        /* SBC */
2709:./FW/ff.c     ****             if (!w || chk_chr("+,;=[]", w)) {   /* Replace illegal characters for SFN */
2710:./FW/ff.c     ****                 w = '_';
2711:./FW/ff.c     ****                 cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2712:./FW/ff.c     ****             } else {
2713:./FW/ff.c     ****                 if (IsUpper(w)) {       /* ASCII large capital */
2714:./FW/ff.c     ****                     b |= 2;
2715:./FW/ff.c     ****                 } else {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 74


2716:./FW/ff.c     ****                     if (IsLower(w)) {   /* ASCII small capital */
2717:./FW/ff.c     ****                         b |= 1;
2718:./FW/ff.c     ****                         w -= 0x20;
2719:./FW/ff.c     ****                     }
2720:./FW/ff.c     ****                 }
2721:./FW/ff.c     ****             }
2722:./FW/ff.c     ****         }
2723:./FW/ff.c     ****         dp->fn[i++] = (BYTE)w;
2724:./FW/ff.c     ****     }
2725:./FW/ff.c     **** 
2726:./FW/ff.c     ****     if (dp->fn[0] == DDEM) { dp->fn[0] = RDDEM; }   /* If the first character collides with DDEM, r
2727:./FW/ff.c     **** 
2728:./FW/ff.c     ****     if (ni == 8) { b <<= 2; }
2729:./FW/ff.c     ****     if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) { cf |= NS_LFN; } /* Create LFN entry when there 
2730:./FW/ff.c     ****     if (!(cf & NS_LFN)) {                       /* When LFN is in 8.3 format without extended chara
2731:./FW/ff.c     ****         if ((b & 0x03) == 0x01) { cf |= NS_EXT; }   /* NT flag (Extension has only small capital) *
2732:./FW/ff.c     ****         if ((b & 0x0C) == 0x04) { cf |= NS_BODY; }  /* NT flag (Filename has only small capital) */
2733:./FW/ff.c     ****     }
2734:./FW/ff.c     **** 
2735:./FW/ff.c     ****     dp->fn[NSFLAG] = cf;    /* SFN is created */
2736:./FW/ff.c     **** 
2737:./FW/ff.c     ****     return FR_OK;
2738:./FW/ff.c     **** 
2739:./FW/ff.c     **** 
2740:./FW/ff.c     **** #else   /* _USE_LFN != 0 : Non-LFN configuration */
2741:./FW/ff.c     ****     BYTE c, d, *sfn;
 1378              		.loc 1 2741 5 is_stmt 1 view .LVU401
2742:./FW/ff.c     ****     UINT ni, si, i;
 1379              		.loc 1 2742 5 view .LVU402
2743:./FW/ff.c     ****     const char *p;
 1380              		.loc 1 2743 5 view .LVU403
2744:./FW/ff.c     **** 
2745:./FW/ff.c     ****     /* Create file name in directory form */
2746:./FW/ff.c     ****     p = *path;
 1381              		.loc 1 2746 5 view .LVU404
 1382              		.loc 1 2746 7 is_stmt 0 view .LVU405
 1383 0008 0F68     		ldr	r7, [r1]
 1384              	.LVL140:
2747:./FW/ff.c     ****     sfn = dp->fn;
 1385              		.loc 1 2747 5 is_stmt 1 view .LVU406
 1386              		.loc 1 2747 9 is_stmt 0 view .LVU407
 1387 000a 00F1240B 		add	fp, r0, #36
 1388              	.LVL141:
2748:./FW/ff.c     ****     mem_set(sfn, ' ', 11);
 1389              		.loc 1 2748 5 is_stmt 1 view .LVU408
 1390 000e 0B22     		movs	r2, #11
 1391 0010 2021     		movs	r1, #32
 1392              	.LVL142:
 1393              		.loc 1 2748 5 is_stmt 0 view .LVU409
 1394 0012 5846     		mov	r0, fp
 1395              	.LVL143:
 1396              		.loc 1 2748 5 view .LVU410
 1397 0014 FFF7FEFF 		bl	mem_set
 1398              	.LVL144:
2749:./FW/ff.c     ****     si = i = 0;
 1399              		.loc 1 2749 5 is_stmt 1 view .LVU411
2750:./FW/ff.c     ****     ni = 8;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 75


 1400              		.loc 1 2750 5 view .LVU412
2749:./FW/ff.c     ****     si = i = 0;
 1401              		.loc 1 2749 12 is_stmt 0 view .LVU413
 1402 0018 0026     		movs	r6, #0
2749:./FW/ff.c     ****     si = i = 0;
 1403              		.loc 1 2749 8 view .LVU414
 1404 001a 3346     		mov	r3, r6
 1405              		.loc 1 2750 8 view .LVU415
 1406 001c 4FF00808 		mov	r8, #8
 1407 0020 2CE0     		b	.L114
 1408              	.LVL145:
 1409              	.L119:
2751:./FW/ff.c     **** #if _FS_RPATH != 0
2752:./FW/ff.c     ****     if (p[si] == '.') { /* Is this a dot entry? */
2753:./FW/ff.c     ****         for (;;) {
2754:./FW/ff.c     ****             c = (BYTE)p[si++];
2755:./FW/ff.c     ****             if (c != '.' || si >= 3) { break; }
2756:./FW/ff.c     ****             sfn[i++] = c;
2757:./FW/ff.c     ****         }
2758:./FW/ff.c     ****         if (c != '/' && c != '\\' && c > ' ') { return FR_INVALID_NAME; }
2759:./FW/ff.c     ****         *path = p + si;                             /* Return pointer to the next segment */
2760:./FW/ff.c     ****         sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;   /* Set last segment flag if end of 
2761:./FW/ff.c     ****         return FR_OK;
2762:./FW/ff.c     ****     }
2763:./FW/ff.c     **** #endif
2764:./FW/ff.c     ****     for (;;) {
2765:./FW/ff.c     ****         c = (BYTE)p[si++];
2766:./FW/ff.c     ****         if (c <= ' ') { break; }            /* Break if end of the path name */
2767:./FW/ff.c     ****         if (c == '/' || c == '\\') {    /* Break if a separator is found */
2768:./FW/ff.c     ****             while (p[si] == '/' || p[si] == '\\') { si++; } /* Skip duplicated separator if exist *
 1410              		.loc 1 2768 53 is_stmt 1 discriminator 4 view .LVU416
 1411              		.loc 1 2768 55 is_stmt 0 discriminator 4 view .LVU417
 1412 0022 0135     		adds	r5, r5, #1
 1413              	.LVL146:
 1414              	.L118:
 1415              		.loc 1 2768 19 is_stmt 1 discriminator 1 view .LVU418
 1416              		.loc 1 2768 21 is_stmt 0 discriminator 1 view .LVU419
 1417 0024 7B5D     		ldrb	r3, [r7, r5]	@ zero_extendqisi2
 1418              		.loc 1 2768 19 discriminator 1 view .LVU420
 1419 0026 2F2B     		cmp	r3, #47
 1420 0028 FBD0     		beq	.L119
 1421              		.loc 1 2768 33 discriminator 3 view .LVU421
 1422 002a 5C2B     		cmp	r3, #92
 1423 002c F9D0     		beq	.L119
 1424              	.L115:
2769:./FW/ff.c     ****             break;
2770:./FW/ff.c     ****         }
2771:./FW/ff.c     ****         if (c == '.' || i >= ni) {      /* End of body or over size? */
2772:./FW/ff.c     ****             if (ni == 11 || c != '.') { return FR_INVALID_NAME; }   /* Over size or invalid dot */
2773:./FW/ff.c     ****             i = 8;
2774:./FW/ff.c     ****             ni = 11;                /* Goto extension */
2775:./FW/ff.c     ****             continue;
2776:./FW/ff.c     ****         }
2777:./FW/ff.c     ****         if (c >= 0x80) {                /* Extended character? */
2778:./FW/ff.c     **** #ifdef _EXCVT
2779:./FW/ff.c     ****             c = ExCvt[c - 0x80];        /* To upper extended characters (SBCS cfg) */
2780:./FW/ff.c     **** #else
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 76


2781:./FW/ff.c     **** #if !_DF1S
2782:./FW/ff.c     ****             return FR_INVALID_NAME;     /* Reject extended characters (ASCII only cfg) */
2783:./FW/ff.c     **** #endif
2784:./FW/ff.c     **** #endif
2785:./FW/ff.c     ****         }
2786:./FW/ff.c     ****         if (IsDBCS1(c)) {               /* Check if it is a DBC 1st byte (always false at SBCS cfg.
2787:./FW/ff.c     ****             d = (BYTE)p[si++];          /* Get 2nd byte */
2788:./FW/ff.c     ****             if (!IsDBCS2(d) || i >= ni - 1) { return FR_INVALID_NAME; } /* Reject invalid DBC */
2789:./FW/ff.c     ****             sfn[i++] = c;
2790:./FW/ff.c     ****             sfn[i++] = d;
2791:./FW/ff.c     ****         } else {                        /* SBC */
2792:./FW/ff.c     ****             if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) { return FR_INVALID_NAME; }  /* Reject illegal c
2793:./FW/ff.c     ****             if (IsLower(c)) { c -= 0x20; }  /* To upper */
2794:./FW/ff.c     ****             sfn[i++] = c;
2795:./FW/ff.c     ****         }
2796:./FW/ff.c     ****     }
2797:./FW/ff.c     ****     *path = p + si;                     /* Return pointer to the next segment */
 1425              		.loc 1 2797 5 is_stmt 1 view .LVU422
 1426              		.loc 1 2797 15 is_stmt 0 view .LVU423
 1427 002e 3D44     		add	r5, r5, r7
 1428              	.LVL147:
 1429              		.loc 1 2797 11 view .LVU424
 1430 0030 CAF80050 		str	r5, [r10]
2798:./FW/ff.c     ****     if (i == 0) { return FR_INVALID_NAME; } /* Reject nul string */
 1431              		.loc 1 2798 5 is_stmt 1 view .LVU425
 1432              		.loc 1 2798 8 is_stmt 0 view .LVU426
 1433 0034 002E     		cmp	r6, #0
 1434 0036 43D0     		beq	.L131
2799:./FW/ff.c     **** 
2800:./FW/ff.c     ****     if (sfn[0] == DDEM) { sfn[0] = RDDEM; } /* If the first character collides with DDEM, replace i
 1435              		.loc 1 2800 5 is_stmt 1 view .LVU427
 1436              		.loc 1 2800 12 is_stmt 0 view .LVU428
 1437 0038 99F82430 		ldrb	r3, [r9, #36]	@ zero_extendqisi2
 1438              		.loc 1 2800 8 view .LVU429
 1439 003c E52B     		cmp	r3, #229
 1440 003e 35D0     		beq	.L135
 1441              	.L126:
2801:./FW/ff.c     ****     sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;     /* Set last segment flag if end of the path */
 1442              		.loc 1 2801 5 is_stmt 1 view .LVU430
 1443              		.loc 1 2801 17 is_stmt 0 view .LVU431
 1444 0040 202C     		cmp	r4, #32
 1445 0042 37D8     		bhi	.L132
 1446 0044 0423     		movs	r3, #4
 1447              	.L127:
 1448              		.loc 1 2801 17 discriminator 4 view .LVU432
 1449 0046 89F82F30 		strb	r3, [r9, #47]
2802:./FW/ff.c     **** 
2803:./FW/ff.c     ****     return FR_OK;
 1450              		.loc 1 2803 5 is_stmt 1 discriminator 4 view .LVU433
 1451              		.loc 1 2803 12 is_stmt 0 discriminator 4 view .LVU434
 1452 004a 0020     		movs	r0, #0
 1453 004c 28E0     		b	.L122
 1454              	.LVL148:
 1455              	.L137:
2773:./FW/ff.c     ****             ni = 11;                /* Goto extension */
 1456              		.loc 1 2773 15 view .LVU435
 1457 004e 0826     		movs	r6, #8
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 77


 1458              	.LVL149:
2774:./FW/ff.c     ****             continue;
 1459              		.loc 1 2774 16 view .LVU436
 1460 0050 4FF00B08 		mov	r8, #11
 1461              	.LVL150:
2774:./FW/ff.c     ****             continue;
 1462              		.loc 1 2774 16 view .LVU437
 1463 0054 11E0     		b	.L123
 1464              	.LVL151:
 1465              	.L121:
2777:./FW/ff.c     **** #ifdef _EXCVT
 1466              		.loc 1 2777 9 is_stmt 1 view .LVU438
2777:./FW/ff.c     **** #ifdef _EXCVT
 1467              		.loc 1 2777 12 is_stmt 0 view .LVU439
 1468 0056 14F0800F 		tst	r4, #128
 1469 005a 23D1     		bne	.L136
 1470              	.L124:
2786:./FW/ff.c     ****             d = (BYTE)p[si++];          /* Get 2nd byte */
 1471              		.loc 1 2786 9 is_stmt 1 view .LVU440
2792:./FW/ff.c     ****             if (IsLower(c)) { c -= 0x20; }  /* To upper */
 1472              		.loc 1 2792 13 view .LVU441
2792:./FW/ff.c     ****             if (IsLower(c)) { c -= 0x20; }  /* To upper */
 1473              		.loc 1 2792 17 is_stmt 0 view .LVU442
 1474 005c 2146     		mov	r1, r4
 1475 005e 1948     		ldr	r0, .L138
 1476 0060 FFF7FEFF 		bl	chk_chr
 1477              	.LVL152:
2792:./FW/ff.c     ****             if (IsLower(c)) { c -= 0x20; }  /* To upper */
 1478              		.loc 1 2792 16 view .LVU443
 1479 0064 50BB     		cbnz	r0, .L130
2793:./FW/ff.c     ****             sfn[i++] = c;
 1480              		.loc 1 2793 13 is_stmt 1 view .LVU444
2793:./FW/ff.c     ****             sfn[i++] = c;
 1481              		.loc 1 2793 17 is_stmt 0 view .LVU445
 1482 0066 A4F16103 		sub	r3, r4, #97
 1483 006a DBB2     		uxtb	r3, r3
2793:./FW/ff.c     ****             sfn[i++] = c;
 1484              		.loc 1 2793 16 view .LVU446
 1485 006c 192B     		cmp	r3, #25
 1486 006e 01D8     		bhi	.L125
2793:./FW/ff.c     ****             sfn[i++] = c;
 1487              		.loc 1 2793 31 is_stmt 1 discriminator 1 view .LVU447
2793:./FW/ff.c     ****             sfn[i++] = c;
 1488              		.loc 1 2793 33 is_stmt 0 discriminator 1 view .LVU448
 1489 0070 203C     		subs	r4, r4, #32
 1490              	.LVL153:
2793:./FW/ff.c     ****             sfn[i++] = c;
 1491              		.loc 1 2793 33 discriminator 1 view .LVU449
 1492 0072 E4B2     		uxtb	r4, r4
 1493              	.LVL154:
 1494              	.L125:
2794:./FW/ff.c     ****         }
 1495              		.loc 1 2794 13 is_stmt 1 view .LVU450
2794:./FW/ff.c     ****         }
 1496              		.loc 1 2794 22 is_stmt 0 view .LVU451
 1497 0074 0BF80640 		strb	r4, [fp, r6]
2794:./FW/ff.c     ****         }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 78


 1498              		.loc 1 2794 18 view .LVU452
 1499 0078 0136     		adds	r6, r6, #1
 1500              	.LVL155:
 1501              	.L123:
2774:./FW/ff.c     ****             continue;
 1502              		.loc 1 2774 16 view .LVU453
 1503 007a 2B46     		mov	r3, r5
 1504              	.LVL156:
 1505              	.L114:
2764:./FW/ff.c     ****         c = (BYTE)p[si++];
 1506              		.loc 1 2764 5 is_stmt 1 view .LVU454
2765:./FW/ff.c     ****         if (c <= ' ') { break; }            /* Break if end of the path name */
 1507              		.loc 1 2765 9 view .LVU455
2765:./FW/ff.c     ****         if (c <= ' ') { break; }            /* Break if end of the path name */
 1508              		.loc 1 2765 23 is_stmt 0 view .LVU456
 1509 007c 5D1C     		adds	r5, r3, #1
 1510              	.LVL157:
2765:./FW/ff.c     ****         if (c <= ' ') { break; }            /* Break if end of the path name */
 1511              		.loc 1 2765 11 view .LVU457
 1512 007e FC5C     		ldrb	r4, [r7, r3]	@ zero_extendqisi2
 1513              	.LVL158:
2766:./FW/ff.c     ****         if (c == '/' || c == '\\') {    /* Break if a separator is found */
 1514              		.loc 1 2766 9 is_stmt 1 view .LVU458
2766:./FW/ff.c     ****         if (c == '/' || c == '\\') {    /* Break if a separator is found */
 1515              		.loc 1 2766 12 is_stmt 0 view .LVU459
 1516 0080 202C     		cmp	r4, #32
 1517 0082 D4D9     		bls	.L115
2767:./FW/ff.c     ****             while (p[si] == '/' || p[si] == '\\') { si++; } /* Skip duplicated separator if exist *
 1518              		.loc 1 2767 9 is_stmt 1 view .LVU460
2767:./FW/ff.c     ****             while (p[si] == '/' || p[si] == '\\') { si++; } /* Skip duplicated separator if exist *
 1519              		.loc 1 2767 12 is_stmt 0 view .LVU461
 1520 0084 2F2C     		cmp	r4, #47
 1521 0086 CDD0     		beq	.L118
2767:./FW/ff.c     ****             while (p[si] == '/' || p[si] == '\\') { si++; } /* Skip duplicated separator if exist *
 1522              		.loc 1 2767 22 discriminator 1 view .LVU462
 1523 0088 5C2C     		cmp	r4, #92
 1524 008a CBD0     		beq	.L118
2771:./FW/ff.c     ****             if (ni == 11 || c != '.') { return FR_INVALID_NAME; }   /* Over size or invalid dot */
 1525              		.loc 1 2771 9 is_stmt 1 view .LVU463
2771:./FW/ff.c     ****             if (ni == 11 || c != '.') { return FR_INVALID_NAME; }   /* Over size or invalid dot */
 1526              		.loc 1 2771 12 is_stmt 0 view .LVU464
 1527 008c 2E2C     		cmp	r4, #46
 1528 008e 01D0     		beq	.L120
2771:./FW/ff.c     ****             if (ni == 11 || c != '.') { return FR_INVALID_NAME; }   /* Over size or invalid dot */
 1529              		.loc 1 2771 22 discriminator 1 view .LVU465
 1530 0090 B045     		cmp	r8, r6
 1531 0092 E0D8     		bhi	.L121
 1532              	.L120:
2772:./FW/ff.c     ****             i = 8;
 1533              		.loc 1 2772 13 is_stmt 1 view .LVU466
2772:./FW/ff.c     ****             i = 8;
 1534              		.loc 1 2772 16 is_stmt 0 view .LVU467
 1535 0094 B8F10B0F 		cmp	r8, #11
 1536 0098 0ED0     		beq	.L128
2772:./FW/ff.c     ****             i = 8;
 1537              		.loc 1 2772 26 discriminator 2 view .LVU468
 1538 009a 2E2C     		cmp	r4, #46
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 79


 1539 009c D7D0     		beq	.L137
2772:./FW/ff.c     ****             i = 8;
 1540              		.loc 1 2772 48 view .LVU469
 1541 009e 0620     		movs	r0, #6
 1542              	.LVL159:
 1543              	.L122:
2804:./FW/ff.c     **** #endif /* _USE_LFN != 0 */
2805:./FW/ff.c     **** }
 1544              		.loc 1 2805 1 view .LVU470
 1545 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1546              	.LVL160:
 1547              	.L136:
2779:./FW/ff.c     **** #else
 1548              		.loc 1 2779 13 is_stmt 1 view .LVU471
2779:./FW/ff.c     **** #else
 1549              		.loc 1 2779 25 is_stmt 0 view .LVU472
 1550 00a4 803C     		subs	r4, r4, #128
 1551              	.LVL161:
2779:./FW/ff.c     **** #else
 1552              		.loc 1 2779 15 view .LVU473
 1553 00a6 084B     		ldr	r3, .L138+4
 1554 00a8 1C5D     		ldrb	r4, [r3, r4]	@ zero_extendqisi2
 1555              	.LVL162:
2779:./FW/ff.c     **** #else
 1556              		.loc 1 2779 15 view .LVU474
 1557 00aa D7E7     		b	.L124
 1558              	.LVL163:
 1559              	.L135:
2800:./FW/ff.c     ****     sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;     /* Set last segment flag if end of the path */
 1560              		.loc 1 2800 27 is_stmt 1 discriminator 1 view .LVU475
2800:./FW/ff.c     ****     sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;     /* Set last segment flag if end of the path */
 1561              		.loc 1 2800 34 is_stmt 0 discriminator 1 view .LVU476
 1562 00ac 0523     		movs	r3, #5
 1563 00ae 89F82430 		strb	r3, [r9, #36]
 1564 00b2 C5E7     		b	.L126
 1565              	.L132:
2801:./FW/ff.c     **** 
 1566              		.loc 1 2801 17 view .LVU477
 1567 00b4 0023     		movs	r3, #0
 1568 00b6 C6E7     		b	.L127
 1569              	.LVL164:
 1570              	.L128:
2772:./FW/ff.c     ****             i = 8;
 1571              		.loc 1 2772 48 view .LVU478
 1572 00b8 0620     		movs	r0, #6
 1573 00ba F1E7     		b	.L122
 1574              	.L130:
2792:./FW/ff.c     ****             if (IsLower(c)) { c -= 0x20; }  /* To upper */
 1575              		.loc 1 2792 61 view .LVU479
 1576 00bc 0620     		movs	r0, #6
 1577 00be EFE7     		b	.L122
 1578              	.LVL165:
 1579              	.L131:
2798:./FW/ff.c     **** 
 1580              		.loc 1 2798 26 view .LVU480
 1581 00c0 0620     		movs	r0, #6
 1582 00c2 EDE7     		b	.L122
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 80


 1583              	.L139:
 1584              		.align	2
 1585              	.L138:
 1586 00c4 00000000 		.word	.LC0
 1587 00c8 00000000 		.word	.LANCHOR1
 1588              		.cfi_endproc
 1589              	.LFE971:
 1591              		.section	.text.get_ldnumber,"ax",%progbits
 1592              		.align	1
 1593              		.syntax unified
 1594              		.thumb
 1595              		.thumb_func
 1596              		.fpu fpv4-sp-d16
 1598              	get_ldnumber:
 1599              	.LVL166:
 1600              	.LFB973:
2806:./FW/ff.c     **** 
2807:./FW/ff.c     **** 
2808:./FW/ff.c     **** 
2809:./FW/ff.c     **** 
2810:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2811:./FW/ff.c     **** /* Follow a file path                                                    */
2812:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2813:./FW/ff.c     **** 
2814:./FW/ff.c     **** static
2815:./FW/ff.c     **** FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
2816:./FW/ff.c     ****     DIR* dp,            /* Directory object to return last directory and found object */
2817:./FW/ff.c     ****     const TCHAR* path   /* Full-path string to find a file or directory */
2818:./FW/ff.c     **** ) {
2819:./FW/ff.c     ****     FRESULT res;
2820:./FW/ff.c     ****     BYTE ns;
2821:./FW/ff.c     ****     _FDID *obj = &dp->obj;
2822:./FW/ff.c     ****     FATFS *fs = obj->fs;
2823:./FW/ff.c     **** 
2824:./FW/ff.c     **** 
2825:./FW/ff.c     **** #if _FS_RPATH != 0
2826:./FW/ff.c     ****     if (*path != '/' && *path != '\\') {    /* Without heading separator */
2827:./FW/ff.c     ****         obj->sclust = fs->cdir;             /* Start from current directory */
2828:./FW/ff.c     ****     } else
2829:./FW/ff.c     **** #endif
2830:./FW/ff.c     ****     {
2831:./FW/ff.c     ****         /* With heading separator */
2832:./FW/ff.c     ****         while (*path == '/' || *path == '\\') { path++; }   /* Strip heading separator */
2833:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
2834:./FW/ff.c     ****     }
2835:./FW/ff.c     **** #if _FS_EXFAT
2836:./FW/ff.c     ****     obj->n_frag = 0;    /* Invalidate last fragment counter of the object */
2837:./FW/ff.c     **** #if _FS_RPATH != 0
2838:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT && obj->sclust) {   /* Retrieve the sub-directory status if needed 
2839:./FW/ff.c     ****         DIR dj;
2840:./FW/ff.c     **** 
2841:./FW/ff.c     ****         obj->c_scl = fs->cdc_scl;
2842:./FW/ff.c     ****         obj->c_size = fs->cdc_size;
2843:./FW/ff.c     ****         obj->c_ofs = fs->cdc_ofs;
2844:./FW/ff.c     ****         res = load_obj_dir(&dj, obj);
2845:./FW/ff.c     ****         if (res != FR_OK) { return res; }
2846:./FW/ff.c     ****         obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 81


2847:./FW/ff.c     ****         obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2848:./FW/ff.c     ****     }
2849:./FW/ff.c     **** #endif
2850:./FW/ff.c     **** #endif
2851:./FW/ff.c     **** 
2852:./FW/ff.c     ****     if ((UINT)*path < ' ') {                /* Null path name is the origin directory itself */
2853:./FW/ff.c     ****         dp->fn[NSFLAG] = NS_NONAME;
2854:./FW/ff.c     ****         res = dir_sdi(dp, 0);
2855:./FW/ff.c     **** 
2856:./FW/ff.c     ****     } else {                                /* Follow path */
2857:./FW/ff.c     ****         for (;;) {
2858:./FW/ff.c     ****             res = create_name(dp, &path);   /* Get a segment name of the path */
2859:./FW/ff.c     ****             if (res != FR_OK) { break; }
2860:./FW/ff.c     ****             res = dir_find(dp);             /* Find an object with the segment name */
2861:./FW/ff.c     ****             ns = dp->fn[NSFLAG];
2862:./FW/ff.c     ****             if (res != FR_OK) {             /* Failed to find the object */
2863:./FW/ff.c     ****                 if (res == FR_NO_FILE) {    /* Object is not found */
2864:./FW/ff.c     ****                     if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exist, stay there */
2865:./FW/ff.c     ****                         if (!(ns & NS_LAST)) { continue; }  /* Continue to follow if not last segme
2866:./FW/ff.c     ****                         dp->fn[NSFLAG] = NS_NONAME;
2867:./FW/ff.c     ****                         res = FR_OK;
2868:./FW/ff.c     ****                     } else {                            /* Could not find the object */
2869:./FW/ff.c     ****                         if (!(ns & NS_LAST)) { res = FR_NO_PATH; }  /* Adjust error code if not las
2870:./FW/ff.c     ****                     }
2871:./FW/ff.c     ****                 }
2872:./FW/ff.c     ****                 break;
2873:./FW/ff.c     ****             }
2874:./FW/ff.c     ****             if (ns & NS_LAST) { break; }            /* Last segment matched. Function completed. */
2875:./FW/ff.c     ****             /* Get into the sub-directory */
2876:./FW/ff.c     ****             if (!(obj->attr & AM_DIR)) {        /* It is not a sub-directory and cannot follow */
2877:./FW/ff.c     ****                 res = FR_NO_PATH;
2878:./FW/ff.c     ****                 break;
2879:./FW/ff.c     ****             }
2880:./FW/ff.c     **** #if _FS_EXFAT
2881:./FW/ff.c     ****             if (fs->fs_type == FS_EXFAT) {      /* Save containing directory information for next d
2882:./FW/ff.c     ****                 obj->c_scl = obj->sclust;
2883:./FW/ff.c     ****                 obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
2884:./FW/ff.c     ****                 obj->c_ofs = dp->blk_ofs;
2885:./FW/ff.c     ****                 obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);  /* Open next directory */
2886:./FW/ff.c     ****                 obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2887:./FW/ff.c     ****                 obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
2888:./FW/ff.c     ****             } else
2889:./FW/ff.c     **** #endif
2890:./FW/ff.c     ****             {
2891:./FW/ff.c     ****                 obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));    /* Open next directory 
2892:./FW/ff.c     ****             }
2893:./FW/ff.c     ****         }
2894:./FW/ff.c     ****     }
2895:./FW/ff.c     **** 
2896:./FW/ff.c     ****     return res;
2897:./FW/ff.c     **** }
2898:./FW/ff.c     **** 
2899:./FW/ff.c     **** 
2900:./FW/ff.c     **** 
2901:./FW/ff.c     **** 
2902:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2903:./FW/ff.c     **** /* Get logical drive number from path name                               */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 82


2904:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2905:./FW/ff.c     **** 
2906:./FW/ff.c     **** static
2907:./FW/ff.c     **** int get_ldnumber (      /* Returns logical drive number (-1:invalid drive) */
2908:./FW/ff.c     ****     const TCHAR** path  /* Pointer to pointer to the path name */
2909:./FW/ff.c     **** ) {
 1601              		.loc 1 2909 3 is_stmt 1 view -0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 0
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 1605              		@ link register save eliminated.
 1606              		.loc 1 2909 3 is_stmt 0 view .LVU482
 1607 0000 0146     		mov	r1, r0
2910:./FW/ff.c     ****     const TCHAR *tp, *tt;
 1608              		.loc 1 2910 5 is_stmt 1 view .LVU483
2911:./FW/ff.c     ****     UINT i;
 1609              		.loc 1 2911 5 view .LVU484
2912:./FW/ff.c     ****     int vol = -1;
 1610              		.loc 1 2912 5 view .LVU485
 1611              	.LVL167:
2913:./FW/ff.c     **** #if _STR_VOLUME_ID      /* Find string drive id */
2914:./FW/ff.c     ****     static const char* const volid[] = {_VOLUME_STRS};
2915:./FW/ff.c     ****     const char *sp;
2916:./FW/ff.c     ****     char c;
2917:./FW/ff.c     ****     TCHAR tc;
2918:./FW/ff.c     **** #endif
2919:./FW/ff.c     **** 
2920:./FW/ff.c     **** 
2921:./FW/ff.c     ****     if (*path) {    /* If the pointer is not a null */
 1612              		.loc 1 2921 5 view .LVU486
 1613              		.loc 1 2921 9 is_stmt 0 view .LVU487
 1614 0002 0068     		ldr	r0, [r0]
 1615              	.LVL168:
 1616              		.loc 1 2921 8 view .LVU488
 1617 0004 08B1     		cbz	r0, .L155
2922:./FW/ff.c     ****         for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ; /* Find ':' in 
 1618              		.loc 1 2922 17 view .LVU489
 1619 0006 0246     		mov	r2, r0
 1620 0008 03E0     		b	.L141
 1621              	.L155:
2912:./FW/ff.c     ****     int vol = -1;
 1622              		.loc 1 2912 9 view .LVU490
 1623 000a 4FF0FF30 		mov	r0, #-1
 1624 000e 7047     		bx	lr
 1625              	.LVL169:
 1626              	.L144:
 1627              		.loc 1 2922 83 is_stmt 1 discriminator 4 view .LVU491
 1628              		.loc 1 2922 77 discriminator 4 view .LVU492
 1629              		.loc 1 2922 79 is_stmt 0 discriminator 4 view .LVU493
 1630 0010 0132     		adds	r2, r2, #1
 1631              	.LVL170:
 1632              	.L141:
 1633              		.loc 1 2922 26 is_stmt 1 discriminator 1 view .LVU494
 1634              		.loc 1 2922 32 is_stmt 0 discriminator 1 view .LVU495
 1635 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1636              		.loc 1 2922 9 discriminator 1 view .LVU496
 1637 0014 202B     		cmp	r3, #32
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 83


 1638 0016 01D9     		bls	.L143
 1639              		.loc 1 2922 62 discriminator 3 view .LVU497
 1640 0018 3A2B     		cmp	r3, #58
 1641 001a F9D1     		bne	.L144
 1642              	.L143:
2923:./FW/ff.c     ****         if (*tt == ':') {   /* If a ':' is exist in the path name */
 1643              		.loc 1 2923 9 is_stmt 1 view .LVU498
 1644              		.loc 1 2923 12 is_stmt 0 view .LVU499
 1645 001c 3A2B     		cmp	r3, #58
 1646 001e 01D0     		beq	.L156
2924:./FW/ff.c     ****             tp = *path;
2925:./FW/ff.c     ****             i = *tp++ - '0';
2926:./FW/ff.c     ****             if (i < 10 && tp == tt) {   /* Is there a numeric drive id? */
2927:./FW/ff.c     ****                 if (i < _VOLUMES) { /* If a drive id is found, get the value and strip it */
2928:./FW/ff.c     ****                     vol = (int)i;
2929:./FW/ff.c     ****                     *path = ++tt;
2930:./FW/ff.c     ****                 }
2931:./FW/ff.c     ****             }
2932:./FW/ff.c     **** #if _STR_VOLUME_ID
2933:./FW/ff.c     ****             else {  /* No numeric drive number, find string drive id */
2934:./FW/ff.c     ****                 i = 0;
2935:./FW/ff.c     ****                 tt++;
2936:./FW/ff.c     ****                 do {
2937:./FW/ff.c     ****                     sp = volid[i];
2938:./FW/ff.c     ****                     tp = *path;
2939:./FW/ff.c     ****                     do {    /* Compare a string drive id with path name */
2940:./FW/ff.c     ****                         c = *sp++;
2941:./FW/ff.c     ****                         tc = *tp++;
2942:./FW/ff.c     ****                         if (IsLower(tc)) { tc -= 0x20; }
2943:./FW/ff.c     ****                     } while (c && (TCHAR)c == tc);
2944:./FW/ff.c     ****                 } while ((c || tp != tt) && ++i < _VOLUMES);    /* Repeat for each id until pattern
2945:./FW/ff.c     ****                 if (i < _VOLUMES) { /* If a drive id is found, get the value and strip it */
2946:./FW/ff.c     ****                     vol = (int)i;
2947:./FW/ff.c     ****                     *path = tt;
2948:./FW/ff.c     ****                 }
2949:./FW/ff.c     ****             }
2950:./FW/ff.c     **** #endif
2951:./FW/ff.c     ****             return vol;
2952:./FW/ff.c     ****         }
2953:./FW/ff.c     **** #if _FS_RPATH != 0 && _VOLUMES >= 2
2954:./FW/ff.c     ****         vol = CurrVol;  /* Current drive */
2955:./FW/ff.c     **** #else
2956:./FW/ff.c     ****         vol = 0;        /* Drive 0 */
 1647              		.loc 1 2956 13 view .LVU500
 1648 0020 0020     		movs	r0, #0
 1649              	.LVL171:
2957:./FW/ff.c     **** #endif
2958:./FW/ff.c     ****     }
2959:./FW/ff.c     ****     return vol;
2960:./FW/ff.c     **** }
 1650              		.loc 1 2960 1 view .LVU501
 1651 0022 7047     		bx	lr
 1652              	.LVL172:
 1653              	.L156:
2909:./FW/ff.c     ****     const TCHAR *tp, *tt;
 1654              		.loc 1 2909 3 view .LVU502
 1655 0024 10B4     		push	{r4}
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 84


 1656              	.LCFI18:
 1657              		.cfi_def_cfa_offset 4
 1658              		.cfi_offset 4, -4
2924:./FW/ff.c     ****             tp = *path;
 1659              		.loc 1 2924 13 is_stmt 1 view .LVU503
 1660              	.LVL173:
2925:./FW/ff.c     ****             if (i < 10 && tp == tt) {   /* Is there a numeric drive id? */
 1661              		.loc 1 2925 13 view .LVU504
2925:./FW/ff.c     ****             if (i < 10 && tp == tt) {   /* Is there a numeric drive id? */
 1662              		.loc 1 2925 20 is_stmt 0 view .LVU505
 1663 0026 0346     		mov	r3, r0
 1664              	.LVL174:
2925:./FW/ff.c     ****             if (i < 10 && tp == tt) {   /* Is there a numeric drive id? */
 1665              		.loc 1 2925 17 view .LVU506
 1666 0028 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 1667              	.LVL175:
2925:./FW/ff.c     ****             if (i < 10 && tp == tt) {   /* Is there a numeric drive id? */
 1668              		.loc 1 2925 23 view .LVU507
 1669 002c 3038     		subs	r0, r0, #48
 1670              	.LVL176:
2926:./FW/ff.c     ****                 if (i < _VOLUMES) { /* If a drive id is found, get the value and strip it */
 1671              		.loc 1 2926 13 is_stmt 1 view .LVU508
2926:./FW/ff.c     ****                 if (i < _VOLUMES) { /* If a drive id is found, get the value and strip it */
 1672              		.loc 1 2926 16 is_stmt 0 view .LVU509
 1673 002e 0928     		cmp	r0, #9
 1674 0030 08D8     		bhi	.L148
2926:./FW/ff.c     ****                 if (i < _VOLUMES) { /* If a drive id is found, get the value and strip it */
 1675              		.loc 1 2926 24 discriminator 1 view .LVU510
 1676 0032 9A42     		cmp	r2, r3
 1677 0034 02D0     		beq	.L157
2912:./FW/ff.c     **** #if _STR_VOLUME_ID      /* Find string drive id */
 1678              		.loc 1 2912 9 view .LVU511
 1679 0036 4FF0FF30 		mov	r0, #-1
 1680              	.LVL177:
2912:./FW/ff.c     **** #if _STR_VOLUME_ID      /* Find string drive id */
 1681              		.loc 1 2912 9 view .LVU512
 1682 003a 05E0     		b	.L140
 1683              	.LVL178:
 1684              	.L157:
2927:./FW/ff.c     ****                     vol = (int)i;
 1685              		.loc 1 2927 17 is_stmt 1 view .LVU513
2927:./FW/ff.c     ****                     vol = (int)i;
 1686              		.loc 1 2927 20 is_stmt 0 view .LVU514
 1687 003c 38B9     		cbnz	r0, .L150
2928:./FW/ff.c     ****                     *path = ++tt;
 1688              		.loc 1 2928 21 is_stmt 1 view .LVU515
 1689              	.LVL179:
2929:./FW/ff.c     ****                 }
 1690              		.loc 1 2929 21 view .LVU516
2929:./FW/ff.c     ****                 }
 1691              		.loc 1 2929 27 is_stmt 0 view .LVU517
 1692 003e 0132     		adds	r2, r2, #1
 1693              	.LVL180:
2929:./FW/ff.c     ****                 }
 1694              		.loc 1 2929 27 view .LVU518
 1695 0040 0A60     		str	r2, [r1]
 1696 0042 01E0     		b	.L140
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 85


 1697              	.LVL181:
 1698              	.L148:
2912:./FW/ff.c     **** #if _STR_VOLUME_ID      /* Find string drive id */
 1699              		.loc 1 2912 9 view .LVU519
 1700 0044 4FF0FF30 		mov	r0, #-1
 1701              	.LVL182:
 1702              	.L140:
 1703              		.loc 1 2960 1 view .LVU520
 1704 0048 5DF8044B 		ldr	r4, [sp], #4
 1705              	.LCFI19:
 1706              		.cfi_remember_state
 1707              		.cfi_restore 4
 1708              		.cfi_def_cfa_offset 0
 1709 004c 7047     		bx	lr
 1710              	.LVL183:
 1711              	.L150:
 1712              	.LCFI20:
 1713              		.cfi_restore_state
2912:./FW/ff.c     **** #if _STR_VOLUME_ID      /* Find string drive id */
 1714              		.loc 1 2912 9 view .LVU521
 1715 004e 4FF0FF30 		mov	r0, #-1
 1716              	.LVL184:
2951:./FW/ff.c     ****         }
 1717              		.loc 1 2951 13 is_stmt 1 view .LVU522
2951:./FW/ff.c     ****         }
 1718              		.loc 1 2951 20 is_stmt 0 view .LVU523
 1719 0052 F9E7     		b	.L140
 1720              		.cfi_endproc
 1721              	.LFE973:
 1723              		.section	.text.putc_init,"ax",%progbits
 1724              		.align	1
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1728              		.fpu fpv4-sp-d16
 1730              	putc_init:
 1731              	.LVL185:
 1732              	.LFB997:
2961:./FW/ff.c     **** 
2962:./FW/ff.c     **** 
2963:./FW/ff.c     **** 
2964:./FW/ff.c     **** 
2965:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2966:./FW/ff.c     **** /* Load a sector and check if it is an FAT boot sector                   */
2967:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2968:./FW/ff.c     **** 
2969:./FW/ff.c     **** static
2970:./FW/ff.c     **** BYTE check_fs ( /* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
2971:./FW/ff.c     ****     FATFS* fs,  /* File system object */
2972:./FW/ff.c     ****     DWORD sect  /* Sector# (lba) to load and check if it is an FAT-VBR or not */
2973:./FW/ff.c     **** ) {
2974:./FW/ff.c     ****     fs->wflag = 0;
2975:./FW/ff.c     ****     fs->winsect = 0xFFFFFFFF;       /* Invaidate window */
2976:./FW/ff.c     ****     if (move_window(fs, sect) != FR_OK) { return 4; }   /* Load boot record */
2977:./FW/ff.c     **** 
2978:./FW/ff.c     ****     if (ld_word(fs->win + BS_55AA) != 0xAA55) { return 3; } /* Check boot record signature (always 
2979:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 86


2980:./FW/ff.c     ****     if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0
2981:./FW/ff.c     ****         if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) { return 0; }   /* Check "F
2982:./FW/ff.c     ****         if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) { return 0; }            /* Check "F
2983:./FW/ff.c     ****     }
2984:./FW/ff.c     **** #if _FS_EXFAT
2985:./FW/ff.c     ****     if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) { return 1; }
2986:./FW/ff.c     **** #endif
2987:./FW/ff.c     ****     return 2;
2988:./FW/ff.c     **** }
2989:./FW/ff.c     **** 
2990:./FW/ff.c     **** 
2991:./FW/ff.c     **** 
2992:./FW/ff.c     **** 
2993:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2994:./FW/ff.c     **** /* Find logical drive and check if the volume is mounted                 */
2995:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
2996:./FW/ff.c     **** 
2997:./FW/ff.c     **** static
2998:./FW/ff.c     **** FRESULT find_volume (   /* FR_OK(0): successful, !=0: any error occurred */
2999:./FW/ff.c     ****     const TCHAR** path, /* Pointer to pointer to the path name (drive number) */
3000:./FW/ff.c     ****     FATFS** rfs,        /* Pointer to pointer to the found file system object */
3001:./FW/ff.c     ****     BYTE mode           /* !=0: Check write protection for write access */
3002:./FW/ff.c     **** ) {
3003:./FW/ff.c     ****     BYTE fmt, *pt;
3004:./FW/ff.c     ****     int vol;
3005:./FW/ff.c     ****     DSTATUS stat;
3006:./FW/ff.c     ****     DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
3007:./FW/ff.c     ****     WORD nrsv;
3008:./FW/ff.c     ****     FATFS *fs;
3009:./FW/ff.c     ****     UINT i;
3010:./FW/ff.c     **** 
3011:./FW/ff.c     **** 
3012:./FW/ff.c     ****     /* Get logical drive number */
3013:./FW/ff.c     ****     *rfs = 0;
3014:./FW/ff.c     ****     vol = get_ldnumber(path);
3015:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
3016:./FW/ff.c     **** 
3017:./FW/ff.c     ****     /* Check if the file system object is valid or not */
3018:./FW/ff.c     ****     fs = FatFs[vol];                    /* Get pointer to the file system object */
3019:./FW/ff.c     ****     if (!fs) { return FR_NOT_ENABLED; }     /* Is the file system object available? */
3020:./FW/ff.c     **** 
3021:./FW/ff.c     ****     ENTER_FF(fs);                       /* Lock the volume */
3022:./FW/ff.c     ****     *rfs = fs;                          /* Return pointer to the file system object */
3023:./FW/ff.c     **** 
3024:./FW/ff.c     ****     mode &= (BYTE)~FA_READ;             /* Desired access mode, write access or not */
3025:./FW/ff.c     ****     if (fs->fs_type) {                  /* If the volume has been mounted */
3026:./FW/ff.c     ****         stat = disk_status(fs->drv);
3027:./FW/ff.c     ****         if (!(stat & STA_NOINIT)) {     /* and the physical drive is kept initialized */
3028:./FW/ff.c     ****             if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {    /* Check write protection if ne
3029:./FW/ff.c     ****                 return FR_WRITE_PROTECTED;
3030:./FW/ff.c     ****             }
3031:./FW/ff.c     ****             return FR_OK;               /* The file system object is valid */
3032:./FW/ff.c     ****         }
3033:./FW/ff.c     ****     }
3034:./FW/ff.c     **** 
3035:./FW/ff.c     ****     /* The file system object is not valid. */
3036:./FW/ff.c     ****     /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 87


3037:./FW/ff.c     **** 
3038:./FW/ff.c     ****     fs->fs_type = 0;                    /* Clear the file system object */
3039:./FW/ff.c     ****     fs->drv = LD2PD(vol);               /* Bind the logical drive and a physical drive */
3040:./FW/ff.c     ****     stat = disk_initialize(fs->drv);    /* Initialize the physical drive */
3041:./FW/ff.c     ****     if (stat & STA_NOINIT) {            /* Check if the initialization succeeded */
3042:./FW/ff.c     ****         return FR_NOT_READY;            /* Failed to initialize due to no medium or hard error */
3043:./FW/ff.c     ****     }
3044:./FW/ff.c     ****     if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed *
3045:./FW/ff.c     ****         return FR_WRITE_PROTECTED;
3046:./FW/ff.c     ****     }
3047:./FW/ff.c     **** #if _MAX_SS != _MIN_SS                  /* Get sector size (multiple sector size cfg only) */
3048:./FW/ff.c     ****     if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) { return FR_DISK_ERR; }
3049:./FW/ff.c     ****     if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) { return FR_DISK_ERR; }
3050:./FW/ff.c     **** #endif
3051:./FW/ff.c     **** 
3052:./FW/ff.c     ****     /* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD.
3053:./FW/ff.c     ****     bsect = 0;
3054:./FW/ff.c     ****     fmt = check_fs(fs, bsect);          /* Load sector 0 and check if it is an FAT-VBR as SFD */
3055:./FW/ff.c     ****     if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) { /* Not an FAT-VBR or forced partition number */
3056:./FW/ff.c     ****         for (i = 0; i < 4; i++) {       /* Get partition offset */
3057:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
3058:./FW/ff.c     ****             br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
3059:./FW/ff.c     ****         }
3060:./FW/ff.c     ****         i = LD2PT(vol);                 /* Partition number: 0:auto, 1-4:forced */
3061:./FW/ff.c     ****         if (i) { i--; }
3062:./FW/ff.c     ****         do {                            /* Find an FAT volume */
3063:./FW/ff.c     ****             bsect = br[i];
3064:./FW/ff.c     ****             fmt = bsect ? check_fs(fs, bsect) : 3;  /* Check the partition */
3065:./FW/ff.c     ****         } while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
3066:./FW/ff.c     ****     }
3067:./FW/ff.c     ****     if (fmt == 4) { return FR_DISK_ERR; }       /* An error occured in the disk I/O layer */
3068:./FW/ff.c     ****     if (fmt >= 2) { return FR_NO_FILESYSTEM; }  /* No FAT volume is found */
3069:./FW/ff.c     **** 
3070:./FW/ff.c     ****     /* An FAT volume is found (bsect). Following code initializes the file system object */
3071:./FW/ff.c     **** 
3072:./FW/ff.c     **** #if _FS_EXFAT
3073:./FW/ff.c     ****     if (fmt == 1) {
3074:./FW/ff.c     ****         QWORD maxlba;
3075:./FW/ff.c     **** 
3076:./FW/ff.c     ****         for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ; /* Check zero fille
3077:./FW/ff.c     ****         if (i < BPB_ZeroedEx + 53) { return FR_NO_FILESYSTEM; }
3078:./FW/ff.c     **** 
3079:./FW/ff.c     ****         if (ld_word(fs->win + BPB_FSVerEx) != 0x100) { return FR_NO_FILESYSTEM; }   /* Check exFAT 
3080:./FW/ff.c     **** 
3081:./FW/ff.c     ****         if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) { /* (BPB_BytsPerSecEx must be equal to the p
3082:./FW/ff.c     ****             return FR_NO_FILESYSTEM;
3083:./FW/ff.c     ****         }
3084:./FW/ff.c     **** 
3085:./FW/ff.c     ****         maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;  /* Last LBA + 1 of the volume */
3086:./FW/ff.c     ****         if (maxlba >= 0x100000000) { return FR_NO_FILESYSTEM; } /* (It cannot be handled in 32-bit 
3087:./FW/ff.c     **** 
3088:./FW/ff.c     ****         fs->fsize = ld_dword(fs->win + BPB_FatSzEx);    /* Number of sectors per FAT */
3089:./FW/ff.c     **** 
3090:./FW/ff.c     ****         fs->n_fats = fs->win[BPB_NumFATsEx];            /* Number of FATs */
3091:./FW/ff.c     ****         if (fs->n_fats != 1) { return FR_NO_FILESYSTEM; }   /* (Supports only 1 FAT) */
3092:./FW/ff.c     **** 
3093:./FW/ff.c     ****         fs->csize = 1 << fs->win[BPB_SecPerClusEx];     /* Cluster size */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 88


3094:./FW/ff.c     ****         if (fs->csize == 0) { return FR_NO_FILESYSTEM; }    /* (Must be 1..32768) */
3095:./FW/ff.c     **** 
3096:./FW/ff.c     ****         nclst = ld_dword(fs->win + BPB_NumClusEx);      /* Number of clusters */
3097:./FW/ff.c     ****         if (nclst > MAX_EXFAT) { return FR_NO_FILESYSTEM; } /* (Too many clusters) */
3098:./FW/ff.c     ****         fs->n_fatent = nclst + 2;
3099:./FW/ff.c     **** 
3100:./FW/ff.c     ****         /* Boundaries and Limits */
3101:./FW/ff.c     ****         fs->volbase = bsect;
3102:./FW/ff.c     ****         fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3103:./FW/ff.c     ****         fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3104:./FW/ff.c     ****         if (maxlba < (QWORD)fs->database + nclst * fs->csize) { return FR_NO_FILESYSTEM; }  /* (Vol
3105:./FW/ff.c     ****         fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3106:./FW/ff.c     **** 
3107:./FW/ff.c     ****         /* Check if bitmap location is in assumption (at the first cluster) */
3108:./FW/ff.c     ****         if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) { return FR_DISK_ERR; }
3109:./FW/ff.c     ****         for (i = 0; i < SS(fs); i += SZDIRE) {
3110:./FW/ff.c     ****             if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) { break; }   /* 81 entry wit
3111:./FW/ff.c     ****         }
3112:./FW/ff.c     ****         if (i == SS(fs)) { return FR_NO_FILESYSTEM; }
3113:./FW/ff.c     **** #if !_FS_READONLY
3114:./FW/ff.c     ****         fs->last_clst = fs->free_clst = 0xFFFFFFFF;     /* Initialize cluster allocation informatio
3115:./FW/ff.c     **** #endif
3116:./FW/ff.c     ****         fmt = FS_EXFAT;         /* FAT sub-type */
3117:./FW/ff.c     ****     } else
3118:./FW/ff.c     **** #endif  /* _FS_EXFAT */
3119:./FW/ff.c     ****     {
3120:./FW/ff.c     ****         if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) { return FR_NO_FILESYSTEM; }   /* (BPB_Byt
3121:./FW/ff.c     **** 
3122:./FW/ff.c     ****         fasize = ld_word(fs->win + BPB_FATSz16);        /* Number of sectors per FAT */
3123:./FW/ff.c     ****         if (fasize == 0) { fasize = ld_dword(fs->win + BPB_FATSz32); }
3124:./FW/ff.c     ****         fs->fsize = fasize;
3125:./FW/ff.c     **** 
3126:./FW/ff.c     ****         fs->n_fats = fs->win[BPB_NumFATs];              /* Number of FATs */
3127:./FW/ff.c     ****         if (fs->n_fats != 1 && fs->n_fats != 2) { return FR_NO_FILESYSTEM; }    /* (Must be 1 or 2)
3128:./FW/ff.c     ****         fasize *= fs->n_fats;                           /* Number of sectors for FAT area */
3129:./FW/ff.c     **** 
3130:./FW/ff.c     ****         fs->csize = fs->win[BPB_SecPerClus];            /* Cluster size */
3131:./FW/ff.c     ****         if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) { return FR_NO_FILESYSTEM; }   /* (Mus
3132:./FW/ff.c     **** 
3133:./FW/ff.c     ****         fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);  /* Number of root directory entries */
3134:./FW/ff.c     ****         if (fs->n_rootdir % (SS(fs) / SZDIRE)) { return FR_NO_FILESYSTEM; } /* (Must be sector alig
3135:./FW/ff.c     **** 
3136:./FW/ff.c     ****         tsect = ld_word(fs->win + BPB_TotSec16);        /* Number of sectors on the volume */
3137:./FW/ff.c     ****         if (tsect == 0) { tsect = ld_dword(fs->win + BPB_TotSec32); }
3138:./FW/ff.c     **** 
3139:./FW/ff.c     ****         nrsv = ld_word(fs->win + BPB_RsvdSecCnt);       /* Number of reserved sectors */
3140:./FW/ff.c     ****         if (nrsv == 0) { return FR_NO_FILESYSTEM; }         /* (Must not be 0) */
3141:./FW/ff.c     **** 
3142:./FW/ff.c     ****         /* Determine the FAT sub type */
3143:./FW/ff.c     ****         sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
3144:./FW/ff.c     ****         if (tsect < sysect) { return FR_NO_FILESYSTEM; }    /* (Invalid volume size) */
3145:./FW/ff.c     ****         nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
3146:./FW/ff.c     ****         if (nclst == 0) { return FR_NO_FILESYSTEM; }        /* (Invalid volume size) */
3147:./FW/ff.c     ****         fmt = FS_FAT32;
3148:./FW/ff.c     ****         if (nclst <= MAX_FAT16) { fmt = FS_FAT16; }
3149:./FW/ff.c     ****         if (nclst <= MAX_FAT12) { fmt = FS_FAT12; }
3150:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 89


3151:./FW/ff.c     ****         /* Boundaries and Limits */
3152:./FW/ff.c     ****         fs->n_fatent = nclst + 2;                       /* Number of FAT entries */
3153:./FW/ff.c     ****         fs->volbase = bsect;                            /* Volume start sector */
3154:./FW/ff.c     ****         fs->fatbase = bsect + nrsv;                     /* FAT start sector */
3155:./FW/ff.c     ****         fs->database = bsect + sysect;                  /* Data start sector */
3156:./FW/ff.c     ****         if (fmt == FS_FAT32) {
3157:./FW/ff.c     ****             if (ld_word(fs->win + BPB_FSVer32) != 0) { return FR_NO_FILESYSTEM; }   /* (Must be FAT
3158:./FW/ff.c     ****             if (fs->n_rootdir) { return FR_NO_FILESYSTEM; } /* (BPB_RootEntCnt must be 0) */
3159:./FW/ff.c     ****             fs->dirbase = ld_dword(fs->win + BPB_RootClus32);   /* Root directory start cluster */
3160:./FW/ff.c     ****             szbfat = fs->n_fatent * 4;                  /* (Needed FAT size) */
3161:./FW/ff.c     ****         } else {
3162:./FW/ff.c     ****             if (fs->n_rootdir == 0) { return FR_NO_FILESYSTEM; }/* (BPB_RootEntCnt must not be 0) *
3163:./FW/ff.c     ****             fs->dirbase = fs->fatbase + fasize;         /* Root directory start sector */
3164:./FW/ff.c     ****             szbfat = (fmt == FS_FAT16) ?                /* (Needed FAT size) */
3165:./FW/ff.c     ****                      fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3166:./FW/ff.c     ****         }
3167:./FW/ff.c     ****         if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) { return FR_NO_FILESYSTEM; }  /* (BPB_FAT
3168:./FW/ff.c     **** 
3169:./FW/ff.c     **** #if !_FS_READONLY
3170:./FW/ff.c     ****         /* Get FSINFO if available */
3171:./FW/ff.c     ****         fs->last_clst = fs->free_clst = 0xFFFFFFFF;     /* Initialize cluster allocation informatio
3172:./FW/ff.c     ****         fs->fsi_flag = 0x80;
3173:./FW/ff.c     **** #if (_FS_NOFSINFO & 3) != 3
3174:./FW/ff.c     ****         if (fmt == FS_FAT32             /* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
3175:./FW/ff.c     ****                 && ld_word(fs->win + BPB_FSInfo32) == 1
3176:./FW/ff.c     ****                 && move_window(fs, bsect + 1) == FR_OK) {
3177:./FW/ff.c     ****             fs->fsi_flag = 0;
3178:./FW/ff.c     ****             if (ld_word(fs->win + BS_55AA) == 0xAA55    /* Load FSINFO data if available */
3179:./FW/ff.c     ****                     && ld_dword(fs->win + FSI_LeadSig) == 0x41615252
3180:./FW/ff.c     ****                     && ld_dword(fs->win + FSI_StrucSig) == 0x61417272) {
3181:./FW/ff.c     **** #if (_FS_NOFSINFO & 1) == 0
3182:./FW/ff.c     ****                 fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3183:./FW/ff.c     **** #endif
3184:./FW/ff.c     **** #if (_FS_NOFSINFO & 2) == 0
3185:./FW/ff.c     ****                 fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3186:./FW/ff.c     **** #endif
3187:./FW/ff.c     ****             }
3188:./FW/ff.c     ****         }
3189:./FW/ff.c     **** #endif  /* (_FS_NOFSINFO & 3) != 3 */
3190:./FW/ff.c     **** #endif  /* !_FS_READONLY */
3191:./FW/ff.c     ****     }
3192:./FW/ff.c     **** 
3193:./FW/ff.c     ****     fs->fs_type = fmt;      /* FAT sub-type */
3194:./FW/ff.c     ****     fs->id = ++Fsid;        /* File system mount ID */
3195:./FW/ff.c     **** #if _USE_LFN == 1
3196:./FW/ff.c     ****     fs->lfnbuf = LfnBuf;    /* Static LFN working buffer */
3197:./FW/ff.c     **** #if _FS_EXFAT
3198:./FW/ff.c     ****     fs->dirbuf = DirBuf;    /* Static directory block scratchpad buuffer */
3199:./FW/ff.c     **** #endif
3200:./FW/ff.c     **** #endif
3201:./FW/ff.c     **** #if _FS_RPATH != 0
3202:./FW/ff.c     ****     fs->cdir = 0;           /* Initialize current directory */
3203:./FW/ff.c     **** #endif
3204:./FW/ff.c     **** #if _FS_LOCK != 0           /* Clear file lock semaphores */
3205:./FW/ff.c     ****     clear_lock(fs);
3206:./FW/ff.c     **** #endif
3207:./FW/ff.c     ****     return FR_OK;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 90


3208:./FW/ff.c     **** }
3209:./FW/ff.c     **** 
3210:./FW/ff.c     **** 
3211:./FW/ff.c     **** 
3212:./FW/ff.c     **** 
3213:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3214:./FW/ff.c     **** /* Check if the file/directory object is valid or not                    */
3215:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3216:./FW/ff.c     **** 
3217:./FW/ff.c     **** static
3218:./FW/ff.c     **** FRESULT validate (  /* Returns FR_OK or FR_INVALID_OBJECT */
3219:./FW/ff.c     ****     _FDID* obj,     /* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity
3220:./FW/ff.c     ****     FATFS** fs      /* Pointer to pointer to the owner file system object to return */
3221:./FW/ff.c     **** ) {
3222:./FW/ff.c     ****     FRESULT res = FR_INVALID_OBJECT;
3223:./FW/ff.c     **** 
3224:./FW/ff.c     **** 
3225:./FW/ff.c     ****     if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) { /* Test if the object is va
3226:./FW/ff.c     **** #if _FS_REENTRANT
3227:./FW/ff.c     ****         if (lock_fs(obj->fs)) { /* Obtain the filesystem object */
3228:./FW/ff.c     ****             if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept i
3229:./FW/ff.c     ****                 res = FR_OK;
3230:./FW/ff.c     ****             } else {
3231:./FW/ff.c     ****                 unlock_fs(obj->fs, FR_OK);
3232:./FW/ff.c     ****             }
3233:./FW/ff.c     ****         } else {
3234:./FW/ff.c     ****             res = FR_TIMEOUT;
3235:./FW/ff.c     ****         }
3236:./FW/ff.c     **** #else
3237:./FW/ff.c     ****         if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initi
3238:./FW/ff.c     ****             res = FR_OK;
3239:./FW/ff.c     ****         }
3240:./FW/ff.c     **** #endif
3241:./FW/ff.c     ****     }
3242:./FW/ff.c     ****     *fs = (res == FR_OK) ? obj->fs : 0; /* Corresponding filesystem object */
3243:./FW/ff.c     ****     return res;
3244:./FW/ff.c     **** }
3245:./FW/ff.c     **** 
3246:./FW/ff.c     **** 
3247:./FW/ff.c     **** 
3248:./FW/ff.c     **** 
3249:./FW/ff.c     **** /*---------------------------------------------------------------------------
3250:./FW/ff.c     **** 
3251:./FW/ff.c     ****    Public Functions (FatFs API)
3252:./FW/ff.c     **** 
3253:./FW/ff.c     **** ----------------------------------------------------------------------------*/
3254:./FW/ff.c     **** 
3255:./FW/ff.c     **** 
3256:./FW/ff.c     **** 
3257:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3258:./FW/ff.c     **** /* Mount/Unmount a Logical Drive                                         */
3259:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3260:./FW/ff.c     **** 
3261:./FW/ff.c     **** FRESULT f_mount (
3262:./FW/ff.c     ****     FATFS* fs,          /* Pointer to the file system object (NULL:unmount)*/
3263:./FW/ff.c     ****     const TCHAR* path,  /* Logical drive number to be mounted/unmounted */
3264:./FW/ff.c     ****     BYTE opt            /* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 91


3265:./FW/ff.c     **** ) {
3266:./FW/ff.c     ****     FATFS *cfs;
3267:./FW/ff.c     ****     int vol;
3268:./FW/ff.c     ****     FRESULT res;
3269:./FW/ff.c     ****     const TCHAR *rp = path;
3270:./FW/ff.c     **** 
3271:./FW/ff.c     **** 
3272:./FW/ff.c     ****     /* Get logical drive number */
3273:./FW/ff.c     ****     vol = get_ldnumber(&rp);
3274:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
3275:./FW/ff.c     ****     cfs = FatFs[vol];                   /* Pointer to fs object */
3276:./FW/ff.c     **** 
3277:./FW/ff.c     ****     if (cfs) {
3278:./FW/ff.c     **** #if _FS_LOCK != 0
3279:./FW/ff.c     ****         clear_lock(cfs);
3280:./FW/ff.c     **** #endif
3281:./FW/ff.c     **** #if _FS_REENTRANT                       /* Discard sync object of the current volume */
3282:./FW/ff.c     ****         if (!ff_del_syncobj(cfs->sobj)) { return FR_INT_ERR; }
3283:./FW/ff.c     **** #endif
3284:./FW/ff.c     ****         cfs->fs_type = 0;               /* Clear old fs object */
3285:./FW/ff.c     ****     }
3286:./FW/ff.c     **** 
3287:./FW/ff.c     ****     if (fs) {
3288:./FW/ff.c     ****         fs->fs_type = 0;                /* Clear new fs object */
3289:./FW/ff.c     **** #if _FS_REENTRANT                       /* Create sync object for the new volume */
3290:./FW/ff.c     ****         if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) { return FR_INT_ERR; }
3291:./FW/ff.c     **** #endif
3292:./FW/ff.c     ****     }
3293:./FW/ff.c     ****     FatFs[vol] = fs;                    /* Register new fs object */
3294:./FW/ff.c     **** 
3295:./FW/ff.c     ****     if (!fs || opt != 1) { return FR_OK; }  /* Do not mount now, it will be mounted later */
3296:./FW/ff.c     **** 
3297:./FW/ff.c     ****     res = find_volume(&path, &fs, 0);   /* Force mounted the volume */
3298:./FW/ff.c     ****     LEAVE_FF(fs, res);
3299:./FW/ff.c     **** }
3300:./FW/ff.c     **** 
3301:./FW/ff.c     **** 
3302:./FW/ff.c     **** 
3303:./FW/ff.c     **** 
3304:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3305:./FW/ff.c     **** /* Open or Create a File                                                 */
3306:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3307:./FW/ff.c     **** 
3308:./FW/ff.c     **** FRESULT f_open (
3309:./FW/ff.c     ****     FIL* fp,            /* Pointer to the blank file object */
3310:./FW/ff.c     ****     const TCHAR* path,  /* Pointer to the file name */
3311:./FW/ff.c     ****     BYTE mode           /* Access mode and file open mode flags */
3312:./FW/ff.c     **** ) {
3313:./FW/ff.c     ****     FRESULT res;
3314:./FW/ff.c     ****     DIR dj;
3315:./FW/ff.c     ****     FATFS *fs;
3316:./FW/ff.c     **** #if !_FS_READONLY
3317:./FW/ff.c     ****     DWORD dw, cl, bcs, clst, sc;
3318:./FW/ff.c     ****     FSIZE_t ofs;
3319:./FW/ff.c     **** #endif
3320:./FW/ff.c     ****     DEF_NAMBUF
3321:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 92


3322:./FW/ff.c     **** 
3323:./FW/ff.c     ****     if (!fp) { return FR_INVALID_OBJECT; }
3324:./FW/ff.c     **** 
3325:./FW/ff.c     ****     /* Get logical drive */
3326:./FW/ff.c     ****     mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPE
3327:./FW/ff.c     ****     res = find_volume(&path, &fs, mode);
3328:./FW/ff.c     ****     if (res == FR_OK) {
3329:./FW/ff.c     ****         dj.obj.fs = fs;
3330:./FW/ff.c     ****         INIT_NAMBUF(fs);
3331:./FW/ff.c     ****         res = follow_path(&dj, path);   /* Follow the file path */
3332:./FW/ff.c     **** #if !_FS_READONLY   /* R/W configuration */
3333:./FW/ff.c     ****         if (res == FR_OK) {
3334:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {    /* Origin directory itself? */
3335:./FW/ff.c     ****                 res = FR_INVALID_NAME;
3336:./FW/ff.c     ****             }
3337:./FW/ff.c     **** #if _FS_LOCK != 0
3338:./FW/ff.c     ****             else {
3339:./FW/ff.c     ****                 res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3340:./FW/ff.c     ****             }
3341:./FW/ff.c     **** #endif
3342:./FW/ff.c     ****         }
3343:./FW/ff.c     ****         /* Create or Open a file */
3344:./FW/ff.c     ****         if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
3345:./FW/ff.c     ****             if (res != FR_OK) {                 /* No file, create new */
3346:./FW/ff.c     ****                 if (res == FR_NO_FILE) {        /* There is no file to open, create a new entry */
3347:./FW/ff.c     **** #if _FS_LOCK != 0
3348:./FW/ff.c     ****                     res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3349:./FW/ff.c     **** #else
3350:./FW/ff.c     ****                     res = dir_register(&dj);
3351:./FW/ff.c     **** #endif
3352:./FW/ff.c     ****                 }
3353:./FW/ff.c     ****                 mode |= FA_CREATE_ALWAYS;       /* File is created */
3354:./FW/ff.c     ****             } else {                                /* Any object is already existing */
3355:./FW/ff.c     ****                 if (dj.obj.attr & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
3356:./FW/ff.c     ****                     res = FR_DENIED;
3357:./FW/ff.c     ****                 } else {
3358:./FW/ff.c     ****                     if (mode & FA_CREATE_NEW) { res = FR_EXIST; }   /* Cannot create as new file */
3359:./FW/ff.c     ****                 }
3360:./FW/ff.c     ****             }
3361:./FW/ff.c     ****             if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
3362:./FW/ff.c     ****                 dw = GET_FATTIME();
3363:./FW/ff.c     **** #if _FS_EXFAT
3364:./FW/ff.c     ****                 if (fs->fs_type == FS_EXFAT) {
3365:./FW/ff.c     ****                     /* Get current allocation info */
3366:./FW/ff.c     ****                     fp->obj.fs = fs;
3367:./FW/ff.c     ****                     fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
3368:./FW/ff.c     ****                     fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3369:./FW/ff.c     ****                     fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3370:./FW/ff.c     ****                     fp->obj.n_frag = 0;
3371:./FW/ff.c     ****                     /* Initialize directory entry block */
3372:./FW/ff.c     ****                     st_dword(fs->dirbuf + XDIR_CrtTime, dw);    /* Set created time */
3373:./FW/ff.c     ****                     fs->dirbuf[XDIR_CrtTime10] = 0;
3374:./FW/ff.c     ****                     st_dword(fs->dirbuf + XDIR_ModTime, dw);    /* Set modified time */
3375:./FW/ff.c     ****                     fs->dirbuf[XDIR_ModTime10] = 0;
3376:./FW/ff.c     ****                     fs->dirbuf[XDIR_Attr] = AM_ARC;             /* Reset attribute */
3377:./FW/ff.c     ****                     st_dword(fs->dirbuf + XDIR_FstClus, 0);     /* Reset file allocation info */
3378:./FW/ff.c     ****                     st_qword(fs->dirbuf + XDIR_FileSize, 0);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 93


3379:./FW/ff.c     ****                     st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
3380:./FW/ff.c     ****                     fs->dirbuf[XDIR_GenFlags] = 1;
3381:./FW/ff.c     ****                     res = store_xdir(&dj);
3382:./FW/ff.c     ****                     if (res == FR_OK && fp->obj.sclust) {       /* Remove the cluster chain if exis
3383:./FW/ff.c     ****                         res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3384:./FW/ff.c     ****                         fs->last_clst = fp->obj.sclust - 1;     /* Reuse the cluster hole */
3385:./FW/ff.c     ****                     }
3386:./FW/ff.c     ****                 } else
3387:./FW/ff.c     **** #endif
3388:./FW/ff.c     ****                 {
3389:./FW/ff.c     ****                     /* Clean directory info */
3390:./FW/ff.c     ****                     st_dword(dj.dir + DIR_CrtTime, dw); /* Set created time */
3391:./FW/ff.c     ****                     st_dword(dj.dir + DIR_ModTime, dw); /* Set modified time */
3392:./FW/ff.c     ****                     dj.dir[DIR_Attr] = AM_ARC;          /* Reset attribute */
3393:./FW/ff.c     ****                     cl = ld_clust(fs, dj.dir);          /* Get cluster chain */
3394:./FW/ff.c     ****                     st_clust(fs, dj.dir, 0);            /* Reset file allocation info */
3395:./FW/ff.c     ****                     st_dword(dj.dir + DIR_FileSize, 0);
3396:./FW/ff.c     ****                     fs->wflag = 1;
3397:./FW/ff.c     **** 
3398:./FW/ff.c     ****                     if (cl) {                           /* Remove the cluster chain if exist */
3399:./FW/ff.c     ****                         dw = fs->winsect;
3400:./FW/ff.c     ****                         res = remove_chain(&dj.obj, cl, 0);
3401:./FW/ff.c     ****                         if (res == FR_OK) {
3402:./FW/ff.c     ****                             res = move_window(fs, dw);
3403:./FW/ff.c     ****                             fs->last_clst = cl - 1;     /* Reuse the cluster hole */
3404:./FW/ff.c     ****                         }
3405:./FW/ff.c     ****                     }
3406:./FW/ff.c     ****                 }
3407:./FW/ff.c     ****             }
3408:./FW/ff.c     ****         } else {    /* Open an existing file */
3409:./FW/ff.c     ****             if (res == FR_OK) {                 /* Following succeeded */
3410:./FW/ff.c     ****                 if (dj.obj.attr & AM_DIR) {     /* It is a directory */
3411:./FW/ff.c     ****                     res = FR_NO_FILE;
3412:./FW/ff.c     ****                 } else {
3413:./FW/ff.c     ****                     if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
3414:./FW/ff.c     ****                         res = FR_DENIED;
3415:./FW/ff.c     ****                     }
3416:./FW/ff.c     ****                 }
3417:./FW/ff.c     ****             }
3418:./FW/ff.c     ****         }
3419:./FW/ff.c     ****         if (res == FR_OK) {
3420:./FW/ff.c     ****             if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten *
3421:./FW/ff.c     ****             { mode |= FA_MODIFIED; }
3422:./FW/ff.c     ****             fp->dir_sect = fs->winsect;         /* Pointer to the directory entry */
3423:./FW/ff.c     ****             fp->dir_ptr = dj.dir;
3424:./FW/ff.c     **** #if _FS_LOCK != 0
3425:./FW/ff.c     ****             fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3426:./FW/ff.c     ****             if (!fp->obj.lockid) { res = FR_INT_ERR; }
3427:./FW/ff.c     **** #endif
3428:./FW/ff.c     ****         }
3429:./FW/ff.c     **** #else       /* R/O configuration */
3430:./FW/ff.c     ****         if (res == FR_OK) {
3431:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {    /* Origin directory itself? */
3432:./FW/ff.c     ****                 res = FR_INVALID_NAME;
3433:./FW/ff.c     ****             } else {
3434:./FW/ff.c     ****                 if (dj.obj.attr & AM_DIR) {     /* It is a directory */
3435:./FW/ff.c     ****                     res = FR_NO_FILE;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 94


3436:./FW/ff.c     ****                 }
3437:./FW/ff.c     ****             }
3438:./FW/ff.c     ****         }
3439:./FW/ff.c     **** #endif
3440:./FW/ff.c     **** 
3441:./FW/ff.c     ****         if (res == FR_OK) {
3442:./FW/ff.c     **** #if _FS_EXFAT
3443:./FW/ff.c     ****             if (fs->fs_type == FS_EXFAT) {
3444:./FW/ff.c     ****                 fp->obj.c_scl = dj.obj.sclust;                          /* Get containing directory
3445:./FW/ff.c     ****                 fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3446:./FW/ff.c     ****                 fp->obj.c_ofs = dj.blk_ofs;
3447:./FW/ff.c     ****                 fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);   /* Get object allocation in
3448:./FW/ff.c     ****                 fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3449:./FW/ff.c     ****                 fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3450:./FW/ff.c     ****             } else
3451:./FW/ff.c     **** #endif
3452:./FW/ff.c     ****             {
3453:./FW/ff.c     ****                 fp->obj.sclust = ld_clust(fs, dj.dir);                  /* Get object allocation in
3454:./FW/ff.c     ****                 fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
3455:./FW/ff.c     ****             }
3456:./FW/ff.c     **** #if _USE_FASTSEEK
3457:./FW/ff.c     ****             fp->cltbl = 0;          /* Disable fast seek mode */
3458:./FW/ff.c     **** #endif
3459:./FW/ff.c     ****             fp->obj.fs = fs;        /* Validate the file object */
3460:./FW/ff.c     ****             fp->obj.id = fs->id;
3461:./FW/ff.c     ****             fp->flag = mode;        /* Set file access mode */
3462:./FW/ff.c     ****             fp->err = 0;            /* Clear error flag */
3463:./FW/ff.c     ****             fp->sect = 0;           /* Invalidate current data sector */
3464:./FW/ff.c     ****             fp->fptr = 0;           /* Set file pointer top of the file */
3465:./FW/ff.c     **** #if !_FS_READONLY
3466:./FW/ff.c     **** #if !_FS_TINY
3467:./FW/ff.c     ****             mem_set(fp->buf, 0, _MAX_SS);   /* Clear sector buffer */
3468:./FW/ff.c     **** #endif
3469:./FW/ff.c     ****             if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {   /* Seek to end of file if FA_OPEN_A
3470:./FW/ff.c     ****                 fp->fptr = fp->obj.objsize;         /* Offset to seek */
3471:./FW/ff.c     ****                 bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size in byte */
3472:./FW/ff.c     ****                 clst = fp->obj.sclust;              /* Follow the cluster chain */
3473:./FW/ff.c     ****                 for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3474:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
3475:./FW/ff.c     ****                     if (clst <= 1) { res = FR_INT_ERR; }
3476:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { res = FR_DISK_ERR; }
3477:./FW/ff.c     ****                 }
3478:./FW/ff.c     ****                 fp->clust = clst;
3479:./FW/ff.c     ****                 if (res == FR_OK && ofs % SS(fs)) { /* Fill sector buffer if not on the sector boun
3480:./FW/ff.c     ****                     if ((sc = clust2sect(fs, clst)) == 0) {
3481:./FW/ff.c     ****                         res = FR_INT_ERR;
3482:./FW/ff.c     ****                     } else {
3483:./FW/ff.c     ****                         fp->sect = sc + (DWORD)(ofs / SS(fs));
3484:./FW/ff.c     **** #if !_FS_TINY
3485:./FW/ff.c     ****                         if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { res = FR_DISK_ERR
3486:./FW/ff.c     **** #endif
3487:./FW/ff.c     ****                     }
3488:./FW/ff.c     ****                 }
3489:./FW/ff.c     ****             }
3490:./FW/ff.c     **** #endif
3491:./FW/ff.c     ****         }
3492:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 95


3493:./FW/ff.c     ****         FREE_NAMBUF();
3494:./FW/ff.c     ****     }
3495:./FW/ff.c     **** 
3496:./FW/ff.c     ****     if (res != FR_OK) { fp->obj.fs = 0; }   /* Invalidate file object on error */
3497:./FW/ff.c     **** 
3498:./FW/ff.c     ****     LEAVE_FF(fs, res);
3499:./FW/ff.c     **** }
3500:./FW/ff.c     **** 
3501:./FW/ff.c     **** 
3502:./FW/ff.c     **** 
3503:./FW/ff.c     **** 
3504:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3505:./FW/ff.c     **** /* Read File                                                             */
3506:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3507:./FW/ff.c     **** 
3508:./FW/ff.c     **** FRESULT f_read (
3509:./FW/ff.c     ****     FIL* fp,    /* Pointer to the file object */
3510:./FW/ff.c     ****     void* buff, /* Pointer to data buffer */
3511:./FW/ff.c     ****     UINT btr,   /* Number of bytes to read */
3512:./FW/ff.c     ****     UINT* br    /* Pointer to number of bytes read */
3513:./FW/ff.c     **** ) {
3514:./FW/ff.c     ****     FRESULT res;
3515:./FW/ff.c     ****     FATFS *fs;
3516:./FW/ff.c     ****     DWORD clst, sect;
3517:./FW/ff.c     ****     FSIZE_t remain;
3518:./FW/ff.c     ****     UINT rcnt, cc, csect;
3519:./FW/ff.c     ****     BYTE *rbuff = (BYTE*)buff;
3520:./FW/ff.c     **** 
3521:./FW/ff.c     **** 
3522:./FW/ff.c     ****     *br = 0;    /* Clear read byte counter */
3523:./FW/ff.c     ****     res = validate(&fp->obj, &fs);              /* Check validity of the file object */
3524:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
3525:./FW/ff.c     ****     if (!(fp->flag & FA_READ)) { LEAVE_FF(fs, FR_DENIED); } /* Check access mode */
3526:./FW/ff.c     ****     remain = fp->obj.objsize - fp->fptr;
3527:./FW/ff.c     ****     if (btr > remain) { btr = (UINT)remain; }       /* Truncate btr by remaining bytes */
3528:./FW/ff.c     **** 
3529:./FW/ff.c     ****     for ( ;  btr;                               /* Repeat until all data read */
3530:./FW/ff.c     ****             rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
3531:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {           /* On the sector boundary? */
3532:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));    /* Sector offset in the cluster
3533:./FW/ff.c     ****             if (csect == 0) {                   /* On the cluster boundary? */
3534:./FW/ff.c     ****                 if (fp->fptr == 0) {            /* On the top of the file? */
3535:./FW/ff.c     ****                     clst = fp->obj.sclust;      /* Follow cluster chain from the origin */
3536:./FW/ff.c     ****                 } else {                        /* Middle or end of the file */
3537:./FW/ff.c     **** #if _USE_FASTSEEK
3538:./FW/ff.c     ****                     if (fp->cltbl) {
3539:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
3540:./FW/ff.c     ****                     } else
3541:./FW/ff.c     **** #endif
3542:./FW/ff.c     ****                     {
3543:./FW/ff.c     ****                         clst = get_fat(&fp->obj, fp->clust);    /* Follow cluster chain on the FAT 
3544:./FW/ff.c     ****                     }
3545:./FW/ff.c     ****                 }
3546:./FW/ff.c     ****                 if (clst < 2) { ABORT(fs, FR_INT_ERR); }
3547:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
3548:./FW/ff.c     ****                 fp->clust = clst;               /* Update current cluster */
3549:./FW/ff.c     ****             }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 96


3550:./FW/ff.c     ****             sect = clust2sect(fs, fp->clust);   /* Get current sector */
3551:./FW/ff.c     ****             if (!sect) { ABORT(fs, FR_INT_ERR); }
3552:./FW/ff.c     ****             sect += csect;
3553:./FW/ff.c     ****             cc = btr / SS(fs);                  /* When remaining bytes >= sector size, */
3554:./FW/ff.c     ****             if (cc) {                           /* Read maximum contiguous sectors directly */
3555:./FW/ff.c     ****                 if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
3556:./FW/ff.c     ****                     cc = fs->csize - csect;
3557:./FW/ff.c     ****                 }
3558:./FW/ff.c     ****                 if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) { ABORT(fs, FR_DISK_ERR); }
3559:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
3560:./FW/ff.c     **** #if _FS_TINY
3561:./FW/ff.c     ****                 if (fs->wflag && fs->winsect - sect < cc) {
3562:./FW/ff.c     ****                     mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3563:./FW/ff.c     ****                 }
3564:./FW/ff.c     **** #else
3565:./FW/ff.c     ****                 if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
3566:./FW/ff.c     ****                     mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
3567:./FW/ff.c     ****                 }
3568:./FW/ff.c     **** #endif
3569:./FW/ff.c     **** #endif
3570:./FW/ff.c     ****                 rcnt = SS(fs) * cc;             /* Number of bytes transferred */
3571:./FW/ff.c     ****                 continue;
3572:./FW/ff.c     ****             }
3573:./FW/ff.c     **** #if !_FS_TINY
3574:./FW/ff.c     ****             if (fp->sect != sect) {         /* Load data sector if not in cache */
3575:./FW/ff.c     **** #if !_FS_READONLY
3576:./FW/ff.c     ****                 if (fp->flag & FA_DIRTY) {      /* Write-back dirty sector cache */
3577:./FW/ff.c     ****                     if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ER
3578:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
3579:./FW/ff.c     ****                 }
3580:./FW/ff.c     **** #endif
3581:./FW/ff.c     ****                 if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); } /* 
3582:./FW/ff.c     ****             }
3583:./FW/ff.c     **** #endif
3584:./FW/ff.c     ****             fp->sect = sect;
3585:./FW/ff.c     ****         }
3586:./FW/ff.c     ****         rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);    /* Number of bytes left in the sector */
3587:./FW/ff.c     ****         if (rcnt > btr) { rcnt = btr; }                 /* Clip it by btr if needed */
3588:./FW/ff.c     **** #if _FS_TINY
3589:./FW/ff.c     ****         if (move_window(fs, fp->sect) != FR_OK) { ABORT(fs, FR_DISK_ERR); } /* Move sector window *
3590:./FW/ff.c     ****         mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);  /* Extract partial sector */
3591:./FW/ff.c     **** #else
3592:./FW/ff.c     ****         mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);  /* Extract partial sector */
3593:./FW/ff.c     **** #endif
3594:./FW/ff.c     ****     }
3595:./FW/ff.c     **** 
3596:./FW/ff.c     ****     LEAVE_FF(fs, FR_OK);
3597:./FW/ff.c     **** }
3598:./FW/ff.c     **** 
3599:./FW/ff.c     **** 
3600:./FW/ff.c     **** 
3601:./FW/ff.c     **** 
3602:./FW/ff.c     **** #if !_FS_READONLY
3603:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3604:./FW/ff.c     **** /* Write File                                                            */
3605:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3606:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 97


3607:./FW/ff.c     **** FRESULT f_write (
3608:./FW/ff.c     ****     FIL* fp,            /* Pointer to the file object */
3609:./FW/ff.c     ****     const void* buff,   /* Pointer to the data to be written */
3610:./FW/ff.c     ****     UINT btw,           /* Number of bytes to write */
3611:./FW/ff.c     ****     UINT* bw            /* Pointer to number of bytes written */
3612:./FW/ff.c     **** ) {
3613:./FW/ff.c     ****     FRESULT res;
3614:./FW/ff.c     ****     FATFS *fs;
3615:./FW/ff.c     ****     DWORD clst, sect;
3616:./FW/ff.c     ****     UINT wcnt, cc, csect;
3617:./FW/ff.c     ****     const BYTE *wbuff = (const BYTE*)buff;
3618:./FW/ff.c     **** 
3619:./FW/ff.c     **** 
3620:./FW/ff.c     ****     *bw = 0;    /* Clear write byte counter */
3621:./FW/ff.c     ****     res = validate(&fp->obj, &fs);          /* Check validity of the file object */
3622:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
3623:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
3624:./FW/ff.c     **** 
3625:./FW/ff.c     ****     /* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
3626:./FW/ff.c     ****     if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
3627:./FW/ff.c     ****         btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
3628:./FW/ff.c     ****     }
3629:./FW/ff.c     **** 
3630:./FW/ff.c     ****     for ( ;  btw;                           /* Repeat until all data written */
3631:./FW/ff.c     ****             wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->f
3632:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
3633:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);    /* Sector offset in the cluster
3634:./FW/ff.c     ****             if (csect == 0) {               /* On the cluster boundary? */
3635:./FW/ff.c     ****                 if (fp->fptr == 0) {        /* On the top of the file? */
3636:./FW/ff.c     ****                     clst = fp->obj.sclust;  /* Follow from the origin */
3637:./FW/ff.c     ****                     if (clst == 0) {        /* If no cluster is allocated, */
3638:./FW/ff.c     ****                         clst = create_chain(&fp->obj, 0);   /* create a new cluster chain */
3639:./FW/ff.c     ****                     }
3640:./FW/ff.c     ****                 } else {                    /* On the middle or end of the file */
3641:./FW/ff.c     **** #if _USE_FASTSEEK
3642:./FW/ff.c     ****                     if (fp->cltbl) {
3643:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
3644:./FW/ff.c     ****                     } else
3645:./FW/ff.c     **** #endif
3646:./FW/ff.c     ****                     {
3647:./FW/ff.c     ****                         clst = create_chain(&fp->obj, fp->clust);   /* Follow or stretch cluster ch
3648:./FW/ff.c     ****                     }
3649:./FW/ff.c     ****                 }
3650:./FW/ff.c     ****                 if (clst == 0) { break; }       /* Could not allocate a new cluster (disk full) */
3651:./FW/ff.c     ****                 if (clst == 1) { ABORT(fs, FR_INT_ERR); }
3652:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
3653:./FW/ff.c     ****                 fp->clust = clst;           /* Update current cluster */
3654:./FW/ff.c     ****                 if (fp->obj.sclust == 0) { fp->obj.sclust = clst; } /* Set start cluster if the fir
3655:./FW/ff.c     ****             }
3656:./FW/ff.c     **** #if _FS_TINY
3657:./FW/ff.c     ****             if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) { ABORT(fs, FR_DISK_ERR); }   
3658:./FW/ff.c     **** #else
3659:./FW/ff.c     ****             if (fp->flag & FA_DIRTY) {      /* Write-back sector cache */
3660:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
3661:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
3662:./FW/ff.c     ****             }
3663:./FW/ff.c     **** #endif
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 98


3664:./FW/ff.c     ****             sect = clust2sect(fs, fp->clust);   /* Get current sector */
3665:./FW/ff.c     ****             if (!sect) { ABORT(fs, FR_INT_ERR); }
3666:./FW/ff.c     ****             sect += csect;
3667:./FW/ff.c     ****             cc = btw / SS(fs);              /* When remaining bytes >= sector size, */
3668:./FW/ff.c     ****             if (cc) {                       /* Write maximum contiguous sectors directly */
3669:./FW/ff.c     ****                 if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
3670:./FW/ff.c     ****                     cc = fs->csize - csect;
3671:./FW/ff.c     ****                 }
3672:./FW/ff.c     ****                 if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) { ABORT(fs, FR_DISK_ERR); }
3673:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
3674:./FW/ff.c     **** #if _FS_TINY
3675:./FW/ff.c     ****                 if (fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by th
3676:./FW/ff.c     ****                     mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3677:./FW/ff.c     ****                     fs->wflag = 0;
3678:./FW/ff.c     ****                 }
3679:./FW/ff.c     **** #else
3680:./FW/ff.c     ****                 if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the di
3681:./FW/ff.c     ****                     mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
3682:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
3683:./FW/ff.c     ****                 }
3684:./FW/ff.c     **** #endif
3685:./FW/ff.c     **** #endif
3686:./FW/ff.c     ****                 wcnt = SS(fs) * cc;     /* Number of bytes transferred */
3687:./FW/ff.c     ****                 continue;
3688:./FW/ff.c     ****             }
3689:./FW/ff.c     **** #if _FS_TINY
3690:./FW/ff.c     ****             if (fp->fptr >= fp->obj.objsize) {  /* Avoid silly cache filling on the growing edge */
3691:./FW/ff.c     ****                 if (sync_window(fs) != FR_OK) { ABORT(fs, FR_DISK_ERR); }
3692:./FW/ff.c     ****                 fs->winsect = sect;
3693:./FW/ff.c     ****             }
3694:./FW/ff.c     **** #else
3695:./FW/ff.c     ****             if (fp->sect != sect &&         /* Fill sector cache with file data */
3696:./FW/ff.c     ****                     fp->fptr < fp->obj.objsize &&
3697:./FW/ff.c     ****                     disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
3698:./FW/ff.c     ****                 ABORT(fs, FR_DISK_ERR);
3699:./FW/ff.c     ****             }
3700:./FW/ff.c     **** #endif
3701:./FW/ff.c     ****             fp->sect = sect;
3702:./FW/ff.c     ****         }
3703:./FW/ff.c     ****         wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);    /* Number of bytes left in the sector */
3704:./FW/ff.c     ****         if (wcnt > btw) { wcnt = btw; }                 /* Clip it by btw if needed */
3705:./FW/ff.c     **** #if _FS_TINY
3706:./FW/ff.c     ****         if (move_window(fs, fp->sect) != FR_OK) { ABORT(fs, FR_DISK_ERR); } /* Move sector window *
3707:./FW/ff.c     ****         mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);  /* Fit data to the sector */
3708:./FW/ff.c     ****         fs->wflag = 1;
3709:./FW/ff.c     **** #else
3710:./FW/ff.c     ****         mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);  /* Fit data to the sector */
3711:./FW/ff.c     ****         fp->flag |= FA_DIRTY;
3712:./FW/ff.c     **** #endif
3713:./FW/ff.c     ****     }
3714:./FW/ff.c     **** 
3715:./FW/ff.c     ****     fp->flag |= FA_MODIFIED;                /* Set file change flag */
3716:./FW/ff.c     **** 
3717:./FW/ff.c     ****     LEAVE_FF(fs, FR_OK);
3718:./FW/ff.c     **** }
3719:./FW/ff.c     **** 
3720:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 99


3721:./FW/ff.c     **** 
3722:./FW/ff.c     **** 
3723:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3724:./FW/ff.c     **** /* Synchronize the File                                                  */
3725:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3726:./FW/ff.c     **** 
3727:./FW/ff.c     **** FRESULT f_sync (
3728:./FW/ff.c     ****     FIL* fp     /* Pointer to the file object */
3729:./FW/ff.c     **** ) {
3730:./FW/ff.c     ****     FRESULT res;
3731:./FW/ff.c     ****     FATFS *fs;
3732:./FW/ff.c     ****     DWORD tm;
3733:./FW/ff.c     ****     BYTE *dir;
3734:./FW/ff.c     **** #if _FS_EXFAT
3735:./FW/ff.c     ****     DIR dj;
3736:./FW/ff.c     ****     DEF_NAMBUF
3737:./FW/ff.c     **** #endif
3738:./FW/ff.c     **** 
3739:./FW/ff.c     ****     res = validate(&fp->obj, &fs);  /* Check validity of the file object */
3740:./FW/ff.c     ****     if (res == FR_OK) {
3741:./FW/ff.c     ****         if (fp->flag & FA_MODIFIED) {   /* Is there any change to the file? */
3742:./FW/ff.c     **** #if !_FS_TINY
3743:./FW/ff.c     ****             if (fp->flag & FA_DIRTY) {  /* Write-back cached data if needed */
3744:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { LEAVE_FF(fs, FR_DISK_ERR
3745:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
3746:./FW/ff.c     ****             }
3747:./FW/ff.c     **** #endif
3748:./FW/ff.c     ****             /* Update the directory entry */
3749:./FW/ff.c     ****             tm = GET_FATTIME();             /* Modified time */
3750:./FW/ff.c     **** #if _FS_EXFAT
3751:./FW/ff.c     ****             if (fs->fs_type == FS_EXFAT) {
3752:./FW/ff.c     ****                 res = fill_first_frag(&fp->obj);    /* Fill first fragment on the FAT if needed */
3753:./FW/ff.c     ****                 if (res == FR_OK) {
3754:./FW/ff.c     ****                     res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);  /* Fill last fragment o
3755:./FW/ff.c     ****                 }
3756:./FW/ff.c     ****                 if (res == FR_OK) {
3757:./FW/ff.c     ****                     INIT_NAMBUF(fs);
3758:./FW/ff.c     ****                     res = load_obj_dir(&dj, &fp->obj);  /* Load directory entry block */
3759:./FW/ff.c     ****                     if (res == FR_OK) {
3760:./FW/ff.c     ****                         fs->dirbuf[XDIR_Attr] |= AM_ARC;                /* Set archive bit */
3761:./FW/ff.c     ****                         fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;   /* Update file allocation i
3762:./FW/ff.c     ****                         st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3763:./FW/ff.c     ****                         st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3764:./FW/ff.c     ****                         st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3765:./FW/ff.c     ****                         st_dword(fs->dirbuf + XDIR_ModTime, tm);        /* Update modified time */
3766:./FW/ff.c     ****                         fs->dirbuf[XDIR_ModTime10] = 0;
3767:./FW/ff.c     ****                         st_dword(fs->dirbuf + XDIR_AccTime, 0);
3768:./FW/ff.c     ****                         res = store_xdir(&dj);  /* Restore it to the directory */
3769:./FW/ff.c     ****                         if (res == FR_OK) {
3770:./FW/ff.c     ****                             res = sync_fs(fs);
3771:./FW/ff.c     ****                             fp->flag &= (BYTE)~FA_MODIFIED;
3772:./FW/ff.c     ****                         }
3773:./FW/ff.c     ****                     }
3774:./FW/ff.c     ****                     FREE_NAMBUF();
3775:./FW/ff.c     ****                 }
3776:./FW/ff.c     ****             } else
3777:./FW/ff.c     **** #endif
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 100


3778:./FW/ff.c     ****             {
3779:./FW/ff.c     ****                 res = move_window(fs, fp->dir_sect);
3780:./FW/ff.c     ****                 if (res == FR_OK) {
3781:./FW/ff.c     ****                     dir = fp->dir_ptr;
3782:./FW/ff.c     ****                     dir[DIR_Attr] |= AM_ARC;                        /* Set archive bit */
3783:./FW/ff.c     ****                     st_clust(fp->obj.fs, dir, fp->obj.sclust);      /* Update file allocation info 
3784:./FW/ff.c     ****                     st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);   /* Update file size */
3785:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);                /* Update modified time */
3786:./FW/ff.c     ****                     st_word(dir + DIR_LstAccDate, 0);
3787:./FW/ff.c     ****                     fs->wflag = 1;
3788:./FW/ff.c     ****                     res = sync_fs(fs);                  /* Restore it to the directory */
3789:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_MODIFIED;
3790:./FW/ff.c     ****                 }
3791:./FW/ff.c     ****             }
3792:./FW/ff.c     ****         }
3793:./FW/ff.c     ****     }
3794:./FW/ff.c     **** 
3795:./FW/ff.c     ****     LEAVE_FF(fs, res);
3796:./FW/ff.c     **** }
3797:./FW/ff.c     **** 
3798:./FW/ff.c     **** #endif /* !_FS_READONLY */
3799:./FW/ff.c     **** 
3800:./FW/ff.c     **** 
3801:./FW/ff.c     **** 
3802:./FW/ff.c     **** 
3803:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3804:./FW/ff.c     **** /* Close File                                                            */
3805:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3806:./FW/ff.c     **** 
3807:./FW/ff.c     **** FRESULT f_close (
3808:./FW/ff.c     ****     FIL* fp     /* Pointer to the file object to be closed */
3809:./FW/ff.c     **** ) {
3810:./FW/ff.c     ****     FRESULT res;
3811:./FW/ff.c     ****     FATFS *fs;
3812:./FW/ff.c     **** 
3813:./FW/ff.c     **** #if !_FS_READONLY
3814:./FW/ff.c     ****     res = f_sync(fp);                   /* Flush cached data */
3815:./FW/ff.c     ****     if (res == FR_OK)
3816:./FW/ff.c     **** #endif
3817:./FW/ff.c     ****     {
3818:./FW/ff.c     ****         res = validate(&fp->obj, &fs);  /* Lock volume */
3819:./FW/ff.c     ****         if (res == FR_OK) {
3820:./FW/ff.c     **** #if _FS_LOCK != 0
3821:./FW/ff.c     ****             res = dec_lock(fp->obj.lockid); /* Decrement file open counter */
3822:./FW/ff.c     ****             if (res == FR_OK)
3823:./FW/ff.c     **** #endif
3824:./FW/ff.c     ****             {
3825:./FW/ff.c     ****                 fp->obj.fs = 0;         /* Invalidate file object */
3826:./FW/ff.c     ****             }
3827:./FW/ff.c     **** #if _FS_REENTRANT
3828:./FW/ff.c     ****             unlock_fs(fs, FR_OK);       /* Unlock volume */
3829:./FW/ff.c     **** #endif
3830:./FW/ff.c     ****         }
3831:./FW/ff.c     ****     }
3832:./FW/ff.c     ****     return res;
3833:./FW/ff.c     **** }
3834:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 101


3835:./FW/ff.c     **** 
3836:./FW/ff.c     **** 
3837:./FW/ff.c     **** 
3838:./FW/ff.c     **** #if _FS_RPATH >= 1
3839:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3840:./FW/ff.c     **** /* Change Current Directory or Current Drive, Get Current Directory      */
3841:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3842:./FW/ff.c     **** 
3843:./FW/ff.c     **** #if _VOLUMES >= 2
3844:./FW/ff.c     **** FRESULT f_chdrive (
3845:./FW/ff.c     ****     const TCHAR* path       /* Drive number */
3846:./FW/ff.c     **** ) {
3847:./FW/ff.c     ****     int vol;
3848:./FW/ff.c     **** 
3849:./FW/ff.c     **** 
3850:./FW/ff.c     ****     /* Get logical drive number */
3851:./FW/ff.c     ****     vol = get_ldnumber(&path);
3852:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
3853:./FW/ff.c     **** 
3854:./FW/ff.c     ****     CurrVol = (BYTE)vol;    /* Set it as current volume */
3855:./FW/ff.c     **** 
3856:./FW/ff.c     ****     return FR_OK;
3857:./FW/ff.c     **** }
3858:./FW/ff.c     **** #endif
3859:./FW/ff.c     **** 
3860:./FW/ff.c     **** 
3861:./FW/ff.c     **** FRESULT f_chdir (
3862:./FW/ff.c     ****     const TCHAR* path   /* Pointer to the directory path */
3863:./FW/ff.c     **** ) {
3864:./FW/ff.c     ****     FRESULT res;
3865:./FW/ff.c     ****     DIR dj;
3866:./FW/ff.c     ****     FATFS *fs;
3867:./FW/ff.c     ****     DEF_NAMBUF
3868:./FW/ff.c     **** 
3869:./FW/ff.c     ****     /* Get logical drive */
3870:./FW/ff.c     ****     res = find_volume(&path, &fs, 0);
3871:./FW/ff.c     ****     if (res == FR_OK) {
3872:./FW/ff.c     ****         dj.obj.fs = fs;
3873:./FW/ff.c     ****         INIT_NAMBUF(fs);
3874:./FW/ff.c     ****         res = follow_path(&dj, path);       /* Follow the path */
3875:./FW/ff.c     ****         if (res == FR_OK) {                 /* Follow completed */
3876:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {
3877:./FW/ff.c     ****                 fs->cdir = dj.obj.sclust;   /* It is the start directory itself */
3878:./FW/ff.c     **** #if _FS_EXFAT
3879:./FW/ff.c     ****                 if (fs->fs_type == FS_EXFAT) {
3880:./FW/ff.c     ****                     fs->cdc_scl = dj.obj.c_scl;
3881:./FW/ff.c     ****                     fs->cdc_size = dj.obj.c_size;
3882:./FW/ff.c     ****                     fs->cdc_ofs = dj.obj.c_ofs;
3883:./FW/ff.c     ****                 }
3884:./FW/ff.c     **** #endif
3885:./FW/ff.c     ****             } else {
3886:./FW/ff.c     ****                 if (dj.obj.attr & AM_DIR) { /* It is a sub-directory */
3887:./FW/ff.c     **** #if _FS_EXFAT
3888:./FW/ff.c     ****                     if (fs->fs_type == FS_EXFAT) {
3889:./FW/ff.c     ****                         fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);     /* Sub-directory cluste
3890:./FW/ff.c     ****                         fs->cdc_scl = dj.obj.sclust;                        /* Save containing dire
3891:./FW/ff.c     ****                         fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 102


3892:./FW/ff.c     ****                         fs->cdc_ofs = dj.blk_ofs;
3893:./FW/ff.c     ****                     } else
3894:./FW/ff.c     **** #endif
3895:./FW/ff.c     ****                     {
3896:./FW/ff.c     ****                         fs->cdir = ld_clust(fs, dj.dir);                    /* Sub-directory cluste
3897:./FW/ff.c     ****                     }
3898:./FW/ff.c     ****                 } else {
3899:./FW/ff.c     ****                     res = FR_NO_PATH;       /* Reached but a file */
3900:./FW/ff.c     ****                 }
3901:./FW/ff.c     ****             }
3902:./FW/ff.c     ****         }
3903:./FW/ff.c     ****         FREE_NAMBUF();
3904:./FW/ff.c     ****         if (res == FR_NO_FILE) { res = FR_NO_PATH; }
3905:./FW/ff.c     ****     }
3906:./FW/ff.c     **** 
3907:./FW/ff.c     ****     LEAVE_FF(fs, res);
3908:./FW/ff.c     **** }
3909:./FW/ff.c     **** 
3910:./FW/ff.c     **** 
3911:./FW/ff.c     **** #if _FS_RPATH >= 2
3912:./FW/ff.c     **** FRESULT f_getcwd (
3913:./FW/ff.c     ****     TCHAR* buff,    /* Pointer to the directory path */
3914:./FW/ff.c     ****     UINT len        /* Size of path */
3915:./FW/ff.c     **** ) {
3916:./FW/ff.c     ****     FRESULT res;
3917:./FW/ff.c     ****     DIR dj;
3918:./FW/ff.c     ****     FATFS *fs;
3919:./FW/ff.c     ****     UINT i, n;
3920:./FW/ff.c     ****     DWORD ccl;
3921:./FW/ff.c     ****     TCHAR *tp;
3922:./FW/ff.c     ****     FILINFO fno;
3923:./FW/ff.c     ****     DEF_NAMBUF
3924:./FW/ff.c     **** 
3925:./FW/ff.c     **** 
3926:./FW/ff.c     ****     *buff = 0;
3927:./FW/ff.c     ****     /* Get logical drive */
3928:./FW/ff.c     ****     res = find_volume((const TCHAR**)&buff, &fs, 0);    /* Get current volume */
3929:./FW/ff.c     ****     if (res == FR_OK) {
3930:./FW/ff.c     ****         dj.obj.fs = fs;
3931:./FW/ff.c     ****         INIT_NAMBUF(fs);
3932:./FW/ff.c     ****         i = len;            /* Bottom of buffer (directory stack base) */
3933:./FW/ff.c     ****         if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {    /* (Cannot do getcwd on exFAT and returns r
3934:./FW/ff.c     ****             dj.obj.sclust = fs->cdir;               /* Start to follow upper directory from current
3935:./FW/ff.c     ****             while ((ccl = dj.obj.sclust) != 0) {    /* Repeat while current directory is a sub-dire
3936:./FW/ff.c     ****                 res = dir_sdi(&dj, 1 * SZDIRE); /* Get parent directory */
3937:./FW/ff.c     ****                 if (res != FR_OK) { break; }
3938:./FW/ff.c     ****                 res = move_window(fs, dj.sect);
3939:./FW/ff.c     ****                 if (res != FR_OK) { break; }
3940:./FW/ff.c     ****                 dj.obj.sclust = ld_clust(fs, dj.dir);   /* Goto parent directory */
3941:./FW/ff.c     ****                 res = dir_sdi(&dj, 0);
3942:./FW/ff.c     ****                 if (res != FR_OK) { break; }
3943:./FW/ff.c     ****                 do {                            /* Find the entry links to the child directory */
3944:./FW/ff.c     ****                     res = dir_read(&dj, 0);
3945:./FW/ff.c     ****                     if (res != FR_OK) { break; }
3946:./FW/ff.c     ****                     if (ccl == ld_clust(fs, dj.dir)) { break; } /* Found the entry */
3947:./FW/ff.c     ****                     res = dir_next(&dj, 0);
3948:./FW/ff.c     ****                 } while (res == FR_OK);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 103


3949:./FW/ff.c     ****                 if (res == FR_NO_FILE) { res = FR_INT_ERR; }/* It cannot be 'not found'. */
3950:./FW/ff.c     ****                 if (res != FR_OK) { break; }
3951:./FW/ff.c     ****                 get_fileinfo(&dj, &fno);        /* Get the directory name and push it to the buffer
3952:./FW/ff.c     ****                 for (n = 0; fno.fname[n]; n++) ;
3953:./FW/ff.c     ****                 if (i < n + 3) {
3954:./FW/ff.c     ****                     res = FR_NOT_ENOUGH_CORE;
3955:./FW/ff.c     ****                     break;
3956:./FW/ff.c     ****                 }
3957:./FW/ff.c     ****                 while (n) { buff[--i] = fno.fname[--n]; }
3958:./FW/ff.c     ****                 buff[--i] = '/';
3959:./FW/ff.c     ****             }
3960:./FW/ff.c     ****         }
3961:./FW/ff.c     ****         tp = buff;
3962:./FW/ff.c     ****         if (res == FR_OK) {
3963:./FW/ff.c     **** #if _VOLUMES >= 2
3964:./FW/ff.c     ****             *tp++ = '0' + CurrVol;          /* Put drive number */
3965:./FW/ff.c     ****             *tp++ = ':';
3966:./FW/ff.c     **** #endif
3967:./FW/ff.c     ****             if (i == len) {                 /* Root-directory */
3968:./FW/ff.c     ****                 *tp++ = '/';
3969:./FW/ff.c     ****             } else {                        /* Sub-directroy */
3970:./FW/ff.c     ****                 do      /* Add stacked path str */
3971:./FW/ff.c     ****                 { *tp++ = buff[i++]; }
3972:./FW/ff.c     ****                 while (i < len);
3973:./FW/ff.c     ****             }
3974:./FW/ff.c     ****         }
3975:./FW/ff.c     ****         *tp = 0;
3976:./FW/ff.c     ****         FREE_NAMBUF();
3977:./FW/ff.c     ****     }
3978:./FW/ff.c     **** 
3979:./FW/ff.c     ****     LEAVE_FF(fs, res);
3980:./FW/ff.c     **** }
3981:./FW/ff.c     **** 
3982:./FW/ff.c     **** #endif /* _FS_RPATH >= 2 */
3983:./FW/ff.c     **** #endif /* _FS_RPATH >= 1 */
3984:./FW/ff.c     **** 
3985:./FW/ff.c     **** 
3986:./FW/ff.c     **** 
3987:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
3988:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3989:./FW/ff.c     **** /* Seek File R/W Pointer                                                 */
3990:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
3991:./FW/ff.c     **** 
3992:./FW/ff.c     **** FRESULT f_lseek (
3993:./FW/ff.c     ****     FIL* fp,        /* Pointer to the file object */
3994:./FW/ff.c     ****     FSIZE_t ofs     /* File pointer from top of file */
3995:./FW/ff.c     **** ) {
3996:./FW/ff.c     ****     FRESULT res;
3997:./FW/ff.c     ****     FATFS *fs;
3998:./FW/ff.c     ****     DWORD clst, bcs, nsect;
3999:./FW/ff.c     ****     FSIZE_t ifptr;
4000:./FW/ff.c     **** #if _USE_FASTSEEK
4001:./FW/ff.c     ****     DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
4002:./FW/ff.c     **** #endif
4003:./FW/ff.c     **** 
4004:./FW/ff.c     ****     res = validate(&fp->obj, &fs);      /* Check validity of the file object */
4005:./FW/ff.c     ****     if (res == FR_OK) { res = (FRESULT)fp->err; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 104


4006:./FW/ff.c     **** #if _FS_EXFAT && !_FS_READONLY
4007:./FW/ff.c     ****     if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4008:./FW/ff.c     ****         res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);  /* Fill last fragment on the FAT if
4009:./FW/ff.c     ****     }
4010:./FW/ff.c     **** #endif
4011:./FW/ff.c     ****     if (res != FR_OK) { LEAVE_FF(fs, res); }
4012:./FW/ff.c     **** 
4013:./FW/ff.c     **** #if _USE_FASTSEEK
4014:./FW/ff.c     ****     if (fp->cltbl) {    /* Fast seek */
4015:./FW/ff.c     ****         if (ofs == CREATE_LINKMAP) {    /* Create CLMT */
4016:./FW/ff.c     ****             tbl = fp->cltbl;
4017:./FW/ff.c     ****             tlen = *tbl++;
4018:./FW/ff.c     ****             ulen = 2;   /* Given table size and required table size */
4019:./FW/ff.c     ****             cl = fp->obj.sclust;        /* Origin of the chain */
4020:./FW/ff.c     ****             if (cl) {
4021:./FW/ff.c     ****                 do {
4022:./FW/ff.c     ****                     /* Get a fragment */
4023:./FW/ff.c     ****                     tcl = cl;
4024:./FW/ff.c     ****                     ncl = 0;
4025:./FW/ff.c     ****                     ulen += 2;  /* Top, length and used items */
4026:./FW/ff.c     ****                     do {
4027:./FW/ff.c     ****                         pcl = cl;
4028:./FW/ff.c     ****                         ncl++;
4029:./FW/ff.c     ****                         cl = get_fat(&fp->obj, cl);
4030:./FW/ff.c     ****                         if (cl <= 1) { ABORT(fs, FR_INT_ERR); }
4031:./FW/ff.c     ****                         if (cl == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
4032:./FW/ff.c     ****                     } while (cl == pcl + 1);
4033:./FW/ff.c     ****                     if (ulen <= tlen) {     /* Store the length and top of the fragment */
4034:./FW/ff.c     ****                         *tbl++ = ncl;
4035:./FW/ff.c     ****                         *tbl++ = tcl;
4036:./FW/ff.c     ****                     }
4037:./FW/ff.c     ****                 } while (cl < fs->n_fatent);    /* Repeat until end of chain */
4038:./FW/ff.c     ****             }
4039:./FW/ff.c     ****             *fp->cltbl = ulen;  /* Number of items used */
4040:./FW/ff.c     ****             if (ulen <= tlen) {
4041:./FW/ff.c     ****                 *tbl = 0;       /* Terminate table */
4042:./FW/ff.c     ****             } else {
4043:./FW/ff.c     ****                 res = FR_NOT_ENOUGH_CORE;   /* Given table size is smaller than required */
4044:./FW/ff.c     ****             }
4045:./FW/ff.c     ****         } else {                        /* Fast seek */
4046:./FW/ff.c     ****             if (ofs > fp->obj.objsize) { ofs = fp->obj.objsize; }   /* Clip offset at the file size
4047:./FW/ff.c     ****             fp->fptr = ofs;             /* Set file pointer */
4048:./FW/ff.c     ****             if (ofs) {
4049:./FW/ff.c     ****                 fp->clust = clmt_clust(fp, ofs - 1);
4050:./FW/ff.c     ****                 dsc = clust2sect(fs, fp->clust);
4051:./FW/ff.c     ****                 if (!dsc) { ABORT(fs, FR_INT_ERR); }
4052:./FW/ff.c     ****                 dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4053:./FW/ff.c     ****                 if (fp->fptr % SS(fs) && dsc != fp->sect) { /* Refill sector cache if needed */
4054:./FW/ff.c     **** #if !_FS_TINY
4055:./FW/ff.c     **** #if !_FS_READONLY
4056:./FW/ff.c     ****                     if (fp->flag & FA_DIRTY) {      /* Write-back dirty sector cache */
4057:./FW/ff.c     ****                         if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DIS
4058:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
4059:./FW/ff.c     ****                     }
4060:./FW/ff.c     **** #endif
4061:./FW/ff.c     ****                     if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); } 
4062:./FW/ff.c     **** #endif
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 105


4063:./FW/ff.c     ****                     fp->sect = dsc;
4064:./FW/ff.c     ****                 }
4065:./FW/ff.c     ****             }
4066:./FW/ff.c     ****         }
4067:./FW/ff.c     ****     } else
4068:./FW/ff.c     **** #endif
4069:./FW/ff.c     **** 
4070:./FW/ff.c     ****         /* Normal Seek */
4071:./FW/ff.c     ****     {
4072:./FW/ff.c     **** #if _FS_EXFAT
4073:./FW/ff.c     ****         if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) { ofs = 0xFFFFFFFF; }    /* Clip at 4GiB
4074:./FW/ff.c     **** #endif
4075:./FW/ff.c     ****         if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {    /* In read-only
4076:./FW/ff.c     ****             ofs = fp->obj.objsize;
4077:./FW/ff.c     ****         }
4078:./FW/ff.c     ****         ifptr = fp->fptr;
4079:./FW/ff.c     ****         fp->fptr = nsect = 0;
4080:./FW/ff.c     ****         if (ofs) {
4081:./FW/ff.c     ****             bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size (byte) */
4082:./FW/ff.c     ****             if (ifptr > 0 &&
4083:./FW/ff.c     ****                     (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following clust
4084:./FW/ff.c     ****                 fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);   /* start from the current cluster *
4085:./FW/ff.c     ****                 ofs -= fp->fptr;
4086:./FW/ff.c     ****                 clst = fp->clust;
4087:./FW/ff.c     ****             } else {                                    /* When seek to back cluster, */
4088:./FW/ff.c     ****                 clst = fp->obj.sclust;                  /* start from the first cluster */
4089:./FW/ff.c     **** #if !_FS_READONLY
4090:./FW/ff.c     ****                 if (clst == 0) {                        /* If no cluster chain, create a new chain 
4091:./FW/ff.c     ****                     clst = create_chain(&fp->obj, 0);
4092:./FW/ff.c     ****                     if (clst == 1) { ABORT(fs, FR_INT_ERR); }
4093:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
4094:./FW/ff.c     ****                     fp->obj.sclust = clst;
4095:./FW/ff.c     ****                 }
4096:./FW/ff.c     **** #endif
4097:./FW/ff.c     ****                 fp->clust = clst;
4098:./FW/ff.c     ****             }
4099:./FW/ff.c     ****             if (clst != 0) {
4100:./FW/ff.c     ****                 while (ofs > bcs) {                     /* Cluster following loop */
4101:./FW/ff.c     ****                     ofs -= bcs;
4102:./FW/ff.c     ****                     fp->fptr += bcs;
4103:./FW/ff.c     **** #if !_FS_READONLY
4104:./FW/ff.c     ****                     if (fp->flag & FA_WRITE) {          /* Check if in write mode or not */
4105:./FW/ff.c     ****                         if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {  /* No FAT chain object need
4106:./FW/ff.c     ****                             fp->obj.objsize = fp->fptr;
4107:./FW/ff.c     ****                             fp->flag |= FA_MODIFIED;
4108:./FW/ff.c     ****                         }
4109:./FW/ff.c     ****                         clst = create_chain(&fp->obj, clst);    /* Follow chain with forceed stretc
4110:./FW/ff.c     ****                         if (clst == 0) {                /* Clip file size in case of disk full */
4111:./FW/ff.c     ****                             ofs = 0;
4112:./FW/ff.c     ****                             break;
4113:./FW/ff.c     ****                         }
4114:./FW/ff.c     ****                     } else
4115:./FW/ff.c     **** #endif
4116:./FW/ff.c     ****                     {
4117:./FW/ff.c     ****                         clst = get_fat(&fp->obj, clst); /* Follow cluster chain if not in write mod
4118:./FW/ff.c     ****                     }
4119:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 106


4120:./FW/ff.c     ****                     if (clst <= 1 || clst >= fs->n_fatent) { ABORT(fs, FR_INT_ERR); }
4121:./FW/ff.c     ****                     fp->clust = clst;
4122:./FW/ff.c     ****                 }
4123:./FW/ff.c     ****                 fp->fptr += ofs;
4124:./FW/ff.c     ****                 if (ofs % SS(fs)) {
4125:./FW/ff.c     ****                     nsect = clust2sect(fs, clst);   /* Current sector */
4126:./FW/ff.c     ****                     if (!nsect) { ABORT(fs, FR_INT_ERR); }
4127:./FW/ff.c     ****                     nsect += (DWORD)(ofs / SS(fs));
4128:./FW/ff.c     ****                 }
4129:./FW/ff.c     ****             }
4130:./FW/ff.c     ****         }
4131:./FW/ff.c     ****         if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {      /* Set file change flag if the file
4132:./FW/ff.c     ****             fp->obj.objsize = fp->fptr;
4133:./FW/ff.c     ****             fp->flag |= FA_MODIFIED;
4134:./FW/ff.c     ****         }
4135:./FW/ff.c     ****         if (fp->fptr % SS(fs) && nsect != fp->sect) {   /* Fill sector cache if needed */
4136:./FW/ff.c     **** #if !_FS_TINY
4137:./FW/ff.c     **** #if !_FS_READONLY
4138:./FW/ff.c     ****             if (fp->flag & FA_DIRTY) {          /* Write-back dirty sector cache */
4139:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
4140:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
4141:./FW/ff.c     ****             }
4142:./FW/ff.c     **** #endif
4143:./FW/ff.c     ****             if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); }    /* 
4144:./FW/ff.c     **** #endif
4145:./FW/ff.c     ****             fp->sect = nsect;
4146:./FW/ff.c     ****         }
4147:./FW/ff.c     ****     }
4148:./FW/ff.c     **** 
4149:./FW/ff.c     ****     LEAVE_FF(fs, res);
4150:./FW/ff.c     **** }
4151:./FW/ff.c     **** 
4152:./FW/ff.c     **** 
4153:./FW/ff.c     **** 
4154:./FW/ff.c     **** #if _FS_MINIMIZE <= 1
4155:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4156:./FW/ff.c     **** /* Create a Directory Object                                             */
4157:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4158:./FW/ff.c     **** 
4159:./FW/ff.c     **** FRESULT f_opendir (
4160:./FW/ff.c     ****     DIR* dp,            /* Pointer to directory object to create */
4161:./FW/ff.c     ****     const TCHAR* path   /* Pointer to the directory path */
4162:./FW/ff.c     **** ) {
4163:./FW/ff.c     ****     FRESULT res;
4164:./FW/ff.c     ****     FATFS *fs;
4165:./FW/ff.c     ****     _FDID *obj;
4166:./FW/ff.c     ****     DEF_NAMBUF
4167:./FW/ff.c     **** 
4168:./FW/ff.c     **** 
4169:./FW/ff.c     ****     if (!dp) { return FR_INVALID_OBJECT; }
4170:./FW/ff.c     **** 
4171:./FW/ff.c     ****     /* Get logical drive */
4172:./FW/ff.c     ****     obj = &dp->obj;
4173:./FW/ff.c     ****     res = find_volume(&path, &fs, 0);
4174:./FW/ff.c     ****     if (res == FR_OK) {
4175:./FW/ff.c     ****         obj->fs = fs;
4176:./FW/ff.c     ****         INIT_NAMBUF(fs);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 107


4177:./FW/ff.c     ****         res = follow_path(dp, path);            /* Follow the path to the directory */
4178:./FW/ff.c     ****         if (res == FR_OK) {                     /* Follow completed */
4179:./FW/ff.c     ****             if (!(dp->fn[NSFLAG] & NS_NONAME)) {    /* It is not the origin directory itself */
4180:./FW/ff.c     ****                 if (obj->attr & AM_DIR) {       /* This object is a sub-directory */
4181:./FW/ff.c     **** #if _FS_EXFAT
4182:./FW/ff.c     ****                     if (fs->fs_type == FS_EXFAT) {
4183:./FW/ff.c     ****                         obj->c_scl = obj->sclust;                           /* Get containing direc
4184:./FW/ff.c     ****                         obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
4185:./FW/ff.c     ****                         obj->c_ofs = dp->blk_ofs;
4186:./FW/ff.c     ****                         obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);  /* Get object allocatio
4187:./FW/ff.c     ****                         obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4188:./FW/ff.c     ****                         obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
4189:./FW/ff.c     ****                     } else
4190:./FW/ff.c     **** #endif
4191:./FW/ff.c     ****                     {
4192:./FW/ff.c     ****                         obj->sclust = ld_clust(fs, dp->dir);    /* Get object allocation info */
4193:./FW/ff.c     ****                     }
4194:./FW/ff.c     ****                 } else {                        /* This object is a file */
4195:./FW/ff.c     ****                     res = FR_NO_PATH;
4196:./FW/ff.c     ****                 }
4197:./FW/ff.c     ****             }
4198:./FW/ff.c     ****             if (res == FR_OK) {
4199:./FW/ff.c     ****                 obj->id = fs->id;
4200:./FW/ff.c     ****                 res = dir_sdi(dp, 0);           /* Rewind directory */
4201:./FW/ff.c     **** #if _FS_LOCK != 0
4202:./FW/ff.c     ****                 if (res == FR_OK) {
4203:./FW/ff.c     ****                     if (obj->sclust) {
4204:./FW/ff.c     ****                         obj->lockid = inc_lock(dp, 0);  /* Lock the sub directory */
4205:./FW/ff.c     ****                         if (!obj->lockid) { res = FR_TOO_MANY_OPEN_FILES; }
4206:./FW/ff.c     ****                     } else {
4207:./FW/ff.c     ****                         obj->lockid = 0;    /* Root directory need not to be locked */
4208:./FW/ff.c     ****                     }
4209:./FW/ff.c     ****                 }
4210:./FW/ff.c     **** #endif
4211:./FW/ff.c     ****             }
4212:./FW/ff.c     ****         }
4213:./FW/ff.c     ****         FREE_NAMBUF();
4214:./FW/ff.c     ****         if (res == FR_NO_FILE) { res = FR_NO_PATH; }
4215:./FW/ff.c     ****     }
4216:./FW/ff.c     ****     if (res != FR_OK) { obj->fs = 0; }      /* Invalidate the directory object if function faild */
4217:./FW/ff.c     **** 
4218:./FW/ff.c     ****     LEAVE_FF(fs, res);
4219:./FW/ff.c     **** }
4220:./FW/ff.c     **** 
4221:./FW/ff.c     **** 
4222:./FW/ff.c     **** 
4223:./FW/ff.c     **** 
4224:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4225:./FW/ff.c     **** /* Close Directory                                                       */
4226:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4227:./FW/ff.c     **** 
4228:./FW/ff.c     **** FRESULT f_closedir (
4229:./FW/ff.c     ****     DIR *dp     /* Pointer to the directory object to be closed */
4230:./FW/ff.c     **** ) {
4231:./FW/ff.c     ****     FRESULT res;
4232:./FW/ff.c     ****     FATFS *fs;
4233:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 108


4234:./FW/ff.c     **** 
4235:./FW/ff.c     ****     res = validate(&dp->obj, &fs);          /* Check validity of the file object */
4236:./FW/ff.c     ****     if (res == FR_OK) {
4237:./FW/ff.c     **** #if _FS_LOCK != 0
4238:./FW/ff.c     ****         if (dp->obj.lockid) {               /* Decrement sub-directory open counter */
4239:./FW/ff.c     ****             res = dec_lock(dp->obj.lockid);
4240:./FW/ff.c     ****         }
4241:./FW/ff.c     ****         if (res == FR_OK)
4242:./FW/ff.c     **** #endif
4243:./FW/ff.c     ****         {
4244:./FW/ff.c     ****             dp->obj.fs = 0;         /* Invalidate directory object */
4245:./FW/ff.c     ****         }
4246:./FW/ff.c     **** #if _FS_REENTRANT
4247:./FW/ff.c     ****         unlock_fs(fs, FR_OK);       /* Unlock volume */
4248:./FW/ff.c     **** #endif
4249:./FW/ff.c     ****     }
4250:./FW/ff.c     ****     return res;
4251:./FW/ff.c     **** }
4252:./FW/ff.c     **** 
4253:./FW/ff.c     **** 
4254:./FW/ff.c     **** 
4255:./FW/ff.c     **** 
4256:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4257:./FW/ff.c     **** /* Read Directory Entries in Sequence                                    */
4258:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4259:./FW/ff.c     **** 
4260:./FW/ff.c     **** FRESULT f_readdir (
4261:./FW/ff.c     ****     DIR* dp,            /* Pointer to the open directory object */
4262:./FW/ff.c     ****     FILINFO* fno        /* Pointer to file information to return */
4263:./FW/ff.c     **** ) {
4264:./FW/ff.c     ****     FRESULT res;
4265:./FW/ff.c     ****     FATFS *fs;
4266:./FW/ff.c     ****     DEF_NAMBUF
4267:./FW/ff.c     **** 
4268:./FW/ff.c     **** 
4269:./FW/ff.c     ****     res = validate(&dp->obj, &fs);  /* Check validity of the directory object */
4270:./FW/ff.c     ****     if (res == FR_OK) {
4271:./FW/ff.c     ****         if (!fno) {
4272:./FW/ff.c     ****             res = dir_sdi(dp, 0);           /* Rewind the directory object */
4273:./FW/ff.c     ****         } else {
4274:./FW/ff.c     ****             INIT_NAMBUF(fs);
4275:./FW/ff.c     ****             res = dir_read(dp, 0);          /* Read an item */
4276:./FW/ff.c     ****             if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory */
4277:./FW/ff.c     ****             if (res == FR_OK) {             /* A valid entry is found */
4278:./FW/ff.c     ****                 get_fileinfo(dp, fno);      /* Get the object information */
4279:./FW/ff.c     ****                 res = dir_next(dp, 0);      /* Increment index for next */
4280:./FW/ff.c     ****                 if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory now */
4281:./FW/ff.c     ****             }
4282:./FW/ff.c     ****             FREE_NAMBUF();
4283:./FW/ff.c     ****         }
4284:./FW/ff.c     ****     }
4285:./FW/ff.c     ****     LEAVE_FF(fs, res);
4286:./FW/ff.c     **** }
4287:./FW/ff.c     **** 
4288:./FW/ff.c     **** 
4289:./FW/ff.c     **** 
4290:./FW/ff.c     **** #if _USE_FIND
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 109


4291:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4292:./FW/ff.c     **** /* Find Next File                                                        */
4293:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4294:./FW/ff.c     **** 
4295:./FW/ff.c     **** FRESULT f_findnext (
4296:./FW/ff.c     ****     DIR* dp,        /* Pointer to the open directory object */
4297:./FW/ff.c     ****     FILINFO* fno    /* Pointer to the file information structure */
4298:./FW/ff.c     **** ) {
4299:./FW/ff.c     ****     FRESULT res;
4300:./FW/ff.c     **** 
4301:./FW/ff.c     **** 
4302:./FW/ff.c     ****     for (;;) {
4303:./FW/ff.c     ****         res = f_readdir(dp, fno);       /* Get a directory item */
4304:./FW/ff.c     ****         if (res != FR_OK || !fno || !fno->fname[0]) { break; }  /* Terminate if any error or end of
4305:./FW/ff.c     ****         if (pattern_matching(dp->pat, fno->fname, 0, 0)) { break; }     /* Test for the file name *
4306:./FW/ff.c     **** #if _USE_LFN != 0 && _USE_FIND == 2
4307:./FW/ff.c     ****         if (pattern_matching(dp->pat, fno->altname, 0, 0)) { break; }   /* Test for alternative nam
4308:./FW/ff.c     **** #endif
4309:./FW/ff.c     ****     }
4310:./FW/ff.c     ****     return res;
4311:./FW/ff.c     **** }
4312:./FW/ff.c     **** 
4313:./FW/ff.c     **** 
4314:./FW/ff.c     **** 
4315:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4316:./FW/ff.c     **** /* Find First File                                                       */
4317:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4318:./FW/ff.c     **** 
4319:./FW/ff.c     **** FRESULT f_findfirst (
4320:./FW/ff.c     ****     DIR* dp,                /* Pointer to the blank directory object */
4321:./FW/ff.c     ****     FILINFO* fno,           /* Pointer to the file information structure */
4322:./FW/ff.c     ****     const TCHAR* path,      /* Pointer to the directory to open */
4323:./FW/ff.c     ****     const TCHAR* pattern    /* Pointer to the matching pattern */
4324:./FW/ff.c     **** ) {
4325:./FW/ff.c     ****     FRESULT res;
4326:./FW/ff.c     **** 
4327:./FW/ff.c     **** 
4328:./FW/ff.c     ****     dp->pat = pattern;      /* Save pointer to pattern string */
4329:./FW/ff.c     ****     res = f_opendir(dp, path);      /* Open the target directory */
4330:./FW/ff.c     ****     if (res == FR_OK) {
4331:./FW/ff.c     ****         res = f_findnext(dp, fno);  /* Find the first item */
4332:./FW/ff.c     ****     }
4333:./FW/ff.c     ****     return res;
4334:./FW/ff.c     **** }
4335:./FW/ff.c     **** 
4336:./FW/ff.c     **** #endif  /* _USE_FIND */
4337:./FW/ff.c     **** 
4338:./FW/ff.c     **** 
4339:./FW/ff.c     **** 
4340:./FW/ff.c     **** #if _FS_MINIMIZE == 0
4341:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4342:./FW/ff.c     **** /* Get File Status                                                       */
4343:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4344:./FW/ff.c     **** 
4345:./FW/ff.c     **** FRESULT f_stat (
4346:./FW/ff.c     ****     const TCHAR* path,  /* Pointer to the file path */
4347:./FW/ff.c     ****     FILINFO* fno        /* Pointer to file information to return */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 110


4348:./FW/ff.c     **** ) {
4349:./FW/ff.c     ****     FRESULT res;
4350:./FW/ff.c     ****     DIR dj;
4351:./FW/ff.c     ****     DEF_NAMBUF
4352:./FW/ff.c     **** 
4353:./FW/ff.c     **** 
4354:./FW/ff.c     ****     /* Get logical drive */
4355:./FW/ff.c     ****     res = find_volume(&path, &dj.obj.fs, 0);
4356:./FW/ff.c     ****     if (res == FR_OK) {
4357:./FW/ff.c     ****         INIT_NAMBUF(dj.obj.fs);
4358:./FW/ff.c     ****         res = follow_path(&dj, path);   /* Follow the file path */
4359:./FW/ff.c     ****         if (res == FR_OK) {             /* Follow completed */
4360:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {    /* It is origin directory */
4361:./FW/ff.c     ****                 res = FR_INVALID_NAME;
4362:./FW/ff.c     ****             } else {                            /* Found an object */
4363:./FW/ff.c     ****                 if (fno) { get_fileinfo(&dj, fno); }
4364:./FW/ff.c     ****             }
4365:./FW/ff.c     ****         }
4366:./FW/ff.c     ****         FREE_NAMBUF();
4367:./FW/ff.c     ****     }
4368:./FW/ff.c     **** 
4369:./FW/ff.c     ****     LEAVE_FF(dj.obj.fs, res);
4370:./FW/ff.c     **** }
4371:./FW/ff.c     **** 
4372:./FW/ff.c     **** 
4373:./FW/ff.c     **** 
4374:./FW/ff.c     **** #if !_FS_READONLY
4375:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4376:./FW/ff.c     **** /* Get Number of Free Clusters                                           */
4377:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4378:./FW/ff.c     **** 
4379:./FW/ff.c     **** FRESULT f_getfree (
4380:./FW/ff.c     ****     const TCHAR* path,  /* Path name of the logical drive number */
4381:./FW/ff.c     ****     DWORD* nclst,       /* Pointer to a variable to return number of free clusters */
4382:./FW/ff.c     ****     FATFS** fatfs       /* Pointer to return pointer to corresponding file system object */
4383:./FW/ff.c     **** ) {
4384:./FW/ff.c     ****     FRESULT res;
4385:./FW/ff.c     ****     FATFS *fs;
4386:./FW/ff.c     ****     DWORD nfree, clst, sect, stat;
4387:./FW/ff.c     ****     UINT i;
4388:./FW/ff.c     ****     BYTE *p;
4389:./FW/ff.c     ****     _FDID obj;
4390:./FW/ff.c     **** 
4391:./FW/ff.c     **** 
4392:./FW/ff.c     ****     /* Get logical drive */
4393:./FW/ff.c     ****     res = find_volume(&path, &fs, 0);
4394:./FW/ff.c     ****     if (res == FR_OK) {
4395:./FW/ff.c     ****         *fatfs = fs;                /* Return ptr to the fs object */
4396:./FW/ff.c     ****         /* If free_clst is valid, return it without full cluster scan */
4397:./FW/ff.c     ****         if (fs->free_clst <= fs->n_fatent - 2) {
4398:./FW/ff.c     ****             *nclst = fs->free_clst;
4399:./FW/ff.c     ****         } else {
4400:./FW/ff.c     ****             /* Get number of free clusters */
4401:./FW/ff.c     ****             nfree = 0;
4402:./FW/ff.c     ****             if (fs->fs_type == FS_FAT12) {  /* FAT12: Sector unalighed FAT entries */
4403:./FW/ff.c     ****                 clst = 2;
4404:./FW/ff.c     ****                 obj.fs = fs;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 111


4405:./FW/ff.c     ****                 do {
4406:./FW/ff.c     ****                     stat = get_fat(&obj, clst);
4407:./FW/ff.c     ****                     if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
4408:./FW/ff.c     ****                     if (stat == 1) { res = FR_INT_ERR; break; }
4409:./FW/ff.c     ****                     if (stat == 0) { nfree++; }
4410:./FW/ff.c     ****                 } while (++clst < fs->n_fatent);
4411:./FW/ff.c     ****             } else {
4412:./FW/ff.c     **** #if _FS_EXFAT
4413:./FW/ff.c     ****                 if (fs->fs_type == FS_EXFAT) {  /* exFAT: Scan bitmap table */
4414:./FW/ff.c     ****                     BYTE bm;
4415:./FW/ff.c     ****                     UINT b;
4416:./FW/ff.c     **** 
4417:./FW/ff.c     ****                     clst = fs->n_fatent - 2;
4418:./FW/ff.c     ****                     sect = fs->database;
4419:./FW/ff.c     ****                     i = 0;
4420:./FW/ff.c     ****                     do {
4421:./FW/ff.c     ****                         if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) { break; }
4422:./FW/ff.c     ****                         for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4423:./FW/ff.c     ****                             if (!(bm & 1)) { nfree++; }
4424:./FW/ff.c     ****                             bm >>= 1;
4425:./FW/ff.c     ****                         }
4426:./FW/ff.c     ****                         i = (i + 1) % SS(fs);
4427:./FW/ff.c     ****                     } while (clst);
4428:./FW/ff.c     ****                 } else
4429:./FW/ff.c     **** #endif
4430:./FW/ff.c     ****                 {
4431:./FW/ff.c     ****                     /* FAT16/32: Sector alighed FAT entries */
4432:./FW/ff.c     ****                     clst = fs->n_fatent;
4433:./FW/ff.c     ****                     sect = fs->fatbase;
4434:./FW/ff.c     ****                     i = 0;
4435:./FW/ff.c     ****                     p = 0;
4436:./FW/ff.c     ****                     do {
4437:./FW/ff.c     ****                         if (i == 0) {
4438:./FW/ff.c     ****                             res = move_window(fs, sect++);
4439:./FW/ff.c     ****                             if (res != FR_OK) { break; }
4440:./FW/ff.c     ****                             p = fs->win;
4441:./FW/ff.c     ****                             i = SS(fs);
4442:./FW/ff.c     ****                         }
4443:./FW/ff.c     ****                         if (fs->fs_type == FS_FAT16) {
4444:./FW/ff.c     ****                             if (ld_word(p) == 0) { nfree++; }
4445:./FW/ff.c     ****                             p += 2;
4446:./FW/ff.c     ****                             i -= 2;
4447:./FW/ff.c     ****                         } else {
4448:./FW/ff.c     ****                             if ((ld_dword(p) & 0x0FFFFFFF) == 0) { nfree++; }
4449:./FW/ff.c     ****                             p += 4;
4450:./FW/ff.c     ****                             i -= 4;
4451:./FW/ff.c     ****                         }
4452:./FW/ff.c     ****                     } while (--clst);
4453:./FW/ff.c     ****                 }
4454:./FW/ff.c     ****             }
4455:./FW/ff.c     ****             *nclst = nfree;         /* Return the free clusters */
4456:./FW/ff.c     ****             fs->free_clst = nfree;  /* Now free_clst is valid */
4457:./FW/ff.c     ****             fs->fsi_flag |= 1;      /* FSInfo is to be updated */
4458:./FW/ff.c     ****         }
4459:./FW/ff.c     ****     }
4460:./FW/ff.c     **** 
4461:./FW/ff.c     ****     LEAVE_FF(fs, res);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 112


4462:./FW/ff.c     **** }
4463:./FW/ff.c     **** 
4464:./FW/ff.c     **** 
4465:./FW/ff.c     **** 
4466:./FW/ff.c     **** 
4467:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4468:./FW/ff.c     **** /* Truncate File                                                         */
4469:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4470:./FW/ff.c     **** 
4471:./FW/ff.c     **** FRESULT f_truncate (
4472:./FW/ff.c     ****     FIL* fp     /* Pointer to the file object */
4473:./FW/ff.c     **** ) {
4474:./FW/ff.c     ****     FRESULT res;
4475:./FW/ff.c     ****     FATFS *fs;
4476:./FW/ff.c     ****     DWORD ncl;
4477:./FW/ff.c     **** 
4478:./FW/ff.c     **** 
4479:./FW/ff.c     ****     res = validate(&fp->obj, &fs);  /* Check validity of the file object */
4480:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }
4481:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
4482:./FW/ff.c     **** 
4483:./FW/ff.c     ****     if (fp->fptr < fp->obj.objsize) {   /* Process when fptr is not on the eof */
4484:./FW/ff.c     ****         if (fp->fptr == 0) {    /* When set file size to zero, remove entire cluster chain */
4485:./FW/ff.c     ****             res = remove_chain(&fp->obj, fp->obj.sclust, 0);
4486:./FW/ff.c     ****             fp->obj.sclust = 0;
4487:./FW/ff.c     ****         } else {                /* When truncate a part of the file, remove remaining clusters */
4488:./FW/ff.c     ****             ncl = get_fat(&fp->obj, fp->clust);
4489:./FW/ff.c     ****             res = FR_OK;
4490:./FW/ff.c     ****             if (ncl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
4491:./FW/ff.c     ****             if (ncl == 1) { res = FR_INT_ERR; }
4492:./FW/ff.c     ****             if (res == FR_OK && ncl < fs->n_fatent) {
4493:./FW/ff.c     ****                 res = remove_chain(&fp->obj, ncl, fp->clust);
4494:./FW/ff.c     ****             }
4495:./FW/ff.c     ****         }
4496:./FW/ff.c     ****         fp->obj.objsize = fp->fptr; /* Set file size to current R/W point */
4497:./FW/ff.c     ****         fp->flag |= FA_MODIFIED;
4498:./FW/ff.c     **** #if !_FS_TINY
4499:./FW/ff.c     ****         if (res == FR_OK && (fp->flag & FA_DIRTY)) {
4500:./FW/ff.c     ****             if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
4501:./FW/ff.c     ****                 res = FR_DISK_ERR;
4502:./FW/ff.c     ****             } else {
4503:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
4504:./FW/ff.c     ****             }
4505:./FW/ff.c     ****         }
4506:./FW/ff.c     **** #endif
4507:./FW/ff.c     ****         if (res != FR_OK) { ABORT(fs, res); }
4508:./FW/ff.c     ****     }
4509:./FW/ff.c     **** 
4510:./FW/ff.c     ****     LEAVE_FF(fs, res);
4511:./FW/ff.c     **** }
4512:./FW/ff.c     **** 
4513:./FW/ff.c     **** 
4514:./FW/ff.c     **** 
4515:./FW/ff.c     **** 
4516:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4517:./FW/ff.c     **** /* Delete a File/Directory                                               */
4518:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 113


4519:./FW/ff.c     **** 
4520:./FW/ff.c     **** FRESULT f_unlink (
4521:./FW/ff.c     ****     const TCHAR* path       /* Pointer to the file or directory path */
4522:./FW/ff.c     **** ) {
4523:./FW/ff.c     ****     FRESULT res;
4524:./FW/ff.c     ****     DIR dj, sdj;
4525:./FW/ff.c     ****     DWORD dclst = 0;
4526:./FW/ff.c     ****     FATFS *fs;
4527:./FW/ff.c     **** #if _FS_EXFAT
4528:./FW/ff.c     ****     _FDID obj;
4529:./FW/ff.c     **** #endif
4530:./FW/ff.c     ****     DEF_NAMBUF
4531:./FW/ff.c     **** 
4532:./FW/ff.c     **** 
4533:./FW/ff.c     ****     /* Get logical drive */
4534:./FW/ff.c     ****     res = find_volume(&path, &fs, FA_WRITE);
4535:./FW/ff.c     ****     dj.obj.fs = fs;
4536:./FW/ff.c     ****     if (res == FR_OK) {
4537:./FW/ff.c     ****         INIT_NAMBUF(fs);
4538:./FW/ff.c     ****         res = follow_path(&dj, path);       /* Follow the file path */
4539:./FW/ff.c     ****         if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4540:./FW/ff.c     ****             res = FR_INVALID_NAME;          /* Cannot remove dot entry */
4541:./FW/ff.c     ****         }
4542:./FW/ff.c     **** #if _FS_LOCK != 0
4543:./FW/ff.c     ****         if (res == FR_OK) { res = chk_lock(&dj, 2); }   /* Check if it is an open object */
4544:./FW/ff.c     **** #endif
4545:./FW/ff.c     ****         if (res == FR_OK) {                 /* The object is accessible */
4546:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {
4547:./FW/ff.c     ****                 res = FR_INVALID_NAME;      /* Cannot remove the origin directory */
4548:./FW/ff.c     ****             } else {
4549:./FW/ff.c     ****                 if (dj.obj.attr & AM_RDO) {
4550:./FW/ff.c     ****                     res = FR_DENIED;        /* Cannot remove R/O object */
4551:./FW/ff.c     ****                 }
4552:./FW/ff.c     ****             }
4553:./FW/ff.c     ****             if (res == FR_OK) {
4554:./FW/ff.c     **** #if _FS_EXFAT
4555:./FW/ff.c     ****                 obj.fs = fs;
4556:./FW/ff.c     ****                 if (fs->fs_type == FS_EXFAT) {
4557:./FW/ff.c     ****                     obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
4558:./FW/ff.c     ****                     obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4559:./FW/ff.c     ****                     obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
4560:./FW/ff.c     ****                 } else
4561:./FW/ff.c     **** #endif
4562:./FW/ff.c     ****                 {
4563:./FW/ff.c     ****                     dclst = ld_clust(fs, dj.dir);
4564:./FW/ff.c     ****                 }
4565:./FW/ff.c     ****                 if (dj.obj.attr & AM_DIR) {         /* Is it a sub-directory? */
4566:./FW/ff.c     **** #if _FS_RPATH != 0
4567:./FW/ff.c     ****                     if (dclst == fs->cdir) {                /* Is it the current directory? */
4568:./FW/ff.c     ****                         res = FR_DENIED;
4569:./FW/ff.c     ****                     } else
4570:./FW/ff.c     **** #endif
4571:./FW/ff.c     ****                     {
4572:./FW/ff.c     ****                         sdj.obj.fs = fs;                        /* Open the sub-directory */
4573:./FW/ff.c     ****                         sdj.obj.sclust = dclst;
4574:./FW/ff.c     **** #if _FS_EXFAT
4575:./FW/ff.c     ****                         if (fs->fs_type == FS_EXFAT) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 114


4576:./FW/ff.c     ****                             sdj.obj.objsize = obj.objsize;
4577:./FW/ff.c     ****                             sdj.obj.stat = obj.stat;
4578:./FW/ff.c     ****                         }
4579:./FW/ff.c     **** #endif
4580:./FW/ff.c     ****                         res = dir_sdi(&sdj, 0);
4581:./FW/ff.c     ****                         if (res == FR_OK) {
4582:./FW/ff.c     ****                             res = dir_read(&sdj, 0);            /* Read an item */
4583:./FW/ff.c     ****                             if (res == FR_OK) { res = FR_DENIED; }  /* Not empty? */
4584:./FW/ff.c     ****                             if (res == FR_NO_FILE) { res = FR_OK; } /* Empty? */
4585:./FW/ff.c     ****                         }
4586:./FW/ff.c     ****                     }
4587:./FW/ff.c     ****                 }
4588:./FW/ff.c     ****             }
4589:./FW/ff.c     ****             if (res == FR_OK) {
4590:./FW/ff.c     ****                 res = dir_remove(&dj);          /* Remove the directory entry */
4591:./FW/ff.c     ****                 if (res == FR_OK && dclst) {    /* Remove the cluster chain if exist */
4592:./FW/ff.c     **** #if _FS_EXFAT
4593:./FW/ff.c     ****                     res = remove_chain(&obj, dclst, 0);
4594:./FW/ff.c     **** #else
4595:./FW/ff.c     ****                     res = remove_chain(&dj.obj, dclst, 0);
4596:./FW/ff.c     **** #endif
4597:./FW/ff.c     ****                 }
4598:./FW/ff.c     ****                 if (res == FR_OK) { res = sync_fs(fs); }
4599:./FW/ff.c     ****             }
4600:./FW/ff.c     ****         }
4601:./FW/ff.c     ****         FREE_NAMBUF();
4602:./FW/ff.c     ****     }
4603:./FW/ff.c     **** 
4604:./FW/ff.c     ****     LEAVE_FF(fs, res);
4605:./FW/ff.c     **** }
4606:./FW/ff.c     **** 
4607:./FW/ff.c     **** 
4608:./FW/ff.c     **** 
4609:./FW/ff.c     **** 
4610:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4611:./FW/ff.c     **** /* Create a Directory                                                    */
4612:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4613:./FW/ff.c     **** 
4614:./FW/ff.c     **** FRESULT f_mkdir (
4615:./FW/ff.c     ****     const TCHAR* path       /* Pointer to the directory path */
4616:./FW/ff.c     **** ) {
4617:./FW/ff.c     ****     FRESULT res;
4618:./FW/ff.c     ****     DIR dj;
4619:./FW/ff.c     ****     FATFS *fs;
4620:./FW/ff.c     ****     BYTE *dir;
4621:./FW/ff.c     ****     UINT n;
4622:./FW/ff.c     ****     DWORD dsc, dcl, pcl, tm;
4623:./FW/ff.c     ****     DEF_NAMBUF
4624:./FW/ff.c     **** 
4625:./FW/ff.c     **** 
4626:./FW/ff.c     ****     /* Get logical drive */
4627:./FW/ff.c     ****     res = find_volume(&path, &fs, FA_WRITE);
4628:./FW/ff.c     ****     dj.obj.fs = fs;
4629:./FW/ff.c     ****     if (res == FR_OK) {
4630:./FW/ff.c     ****         INIT_NAMBUF(fs);
4631:./FW/ff.c     ****         res = follow_path(&dj, path);           /* Follow the file path */
4632:./FW/ff.c     ****         if (res == FR_OK) { res = FR_EXIST; }       /* Any object with same name is already existin
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 115


4633:./FW/ff.c     ****         if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
4634:./FW/ff.c     ****             res = FR_INVALID_NAME;
4635:./FW/ff.c     ****         }
4636:./FW/ff.c     ****         if (res == FR_NO_FILE) {                /* Can create a new directory */
4637:./FW/ff.c     ****             dcl = create_chain(&dj.obj, 0);     /* Allocate a cluster for the new directory table *
4638:./FW/ff.c     ****             dj.obj.objsize = (DWORD)fs->csize * SS(fs);
4639:./FW/ff.c     ****             res = FR_OK;
4640:./FW/ff.c     ****             if (dcl == 0) { res = FR_DENIED; }      /* No space to allocate a new cluster */
4641:./FW/ff.c     ****             if (dcl == 1) { res = FR_INT_ERR; }
4642:./FW/ff.c     ****             if (dcl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
4643:./FW/ff.c     ****             if (res == FR_OK) { res = sync_window(fs); }    /* Flush FAT */
4644:./FW/ff.c     ****             tm = GET_FATTIME();
4645:./FW/ff.c     ****             if (res == FR_OK) {                 /* Initialize the new directory table */
4646:./FW/ff.c     ****                 dsc = clust2sect(fs, dcl);
4647:./FW/ff.c     ****                 dir = fs->win;
4648:./FW/ff.c     ****                 mem_set(dir, 0, SS(fs));
4649:./FW/ff.c     ****                 if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
4650:./FW/ff.c     ****                     mem_set(dir + DIR_Name, ' ', 11);   /* Create "." entry */
4651:./FW/ff.c     ****                     dir[DIR_Name] = '.';
4652:./FW/ff.c     ****                     dir[DIR_Attr] = AM_DIR;
4653:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);
4654:./FW/ff.c     ****                     st_clust(fs, dir, dcl);
4655:./FW/ff.c     ****                     mem_cpy(dir + SZDIRE, dir, SZDIRE);     /* Create ".." entry */
4656:./FW/ff.c     ****                     dir[SZDIRE + 1] = '.';
4657:./FW/ff.c     ****                     pcl = dj.obj.sclust;
4658:./FW/ff.c     ****                     if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) { pcl = 0; }
4659:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
4660:./FW/ff.c     ****                 }
4661:./FW/ff.c     ****                 for (n = fs->csize; n; n--) {   /* Write dot entries and clear following sectors */
4662:./FW/ff.c     ****                     fs->winsect = dsc++;
4663:./FW/ff.c     ****                     fs->wflag = 1;
4664:./FW/ff.c     ****                     res = sync_window(fs);
4665:./FW/ff.c     ****                     if (res != FR_OK) { break; }
4666:./FW/ff.c     ****                     mem_set(dir, 0, SS(fs));
4667:./FW/ff.c     ****                 }
4668:./FW/ff.c     ****             }
4669:./FW/ff.c     ****             if (res == FR_OK) {
4670:./FW/ff.c     ****                 res = dir_register(&dj);    /* Register the object to the directoy */
4671:./FW/ff.c     ****             }
4672:./FW/ff.c     ****             if (res == FR_OK) {
4673:./FW/ff.c     **** #if _FS_EXFAT
4674:./FW/ff.c     ****                 if (fs->fs_type == FS_EXFAT) {  /* Initialize directory entry block */
4675:./FW/ff.c     ****                     st_dword(fs->dirbuf + XDIR_ModTime, tm);    /* Created time */
4676:./FW/ff.c     ****                     st_dword(fs->dirbuf + XDIR_FstClus, dcl);   /* Table start cluster */
4677:./FW/ff.c     ****                     st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);    /* File size ne
4678:./FW/ff.c     ****                     st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
4679:./FW/ff.c     ****                     fs->dirbuf[XDIR_GenFlags] = 3;              /* Initialize the object flag (cont
4680:./FW/ff.c     ****                     fs->dirbuf[XDIR_Attr] = AM_DIR;             /* Attribute */
4681:./FW/ff.c     ****                     res = store_xdir(&dj);
4682:./FW/ff.c     ****                 } else
4683:./FW/ff.c     **** #endif
4684:./FW/ff.c     ****                 {
4685:./FW/ff.c     ****                     dir = dj.dir;
4686:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);    /* Created time */
4687:./FW/ff.c     ****                     st_clust(fs, dir, dcl);             /* Table start cluster */
4688:./FW/ff.c     ****                     dir[DIR_Attr] = AM_DIR;             /* Attribute */
4689:./FW/ff.c     ****                     fs->wflag = 1;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 116


4690:./FW/ff.c     ****                 }
4691:./FW/ff.c     ****                 if (res == FR_OK) {
4692:./FW/ff.c     ****                     res = sync_fs(fs);
4693:./FW/ff.c     ****                 }
4694:./FW/ff.c     ****             } else {
4695:./FW/ff.c     ****                 remove_chain(&dj.obj, dcl, 0);      /* Could not register, remove cluster chain */
4696:./FW/ff.c     ****             }
4697:./FW/ff.c     ****         }
4698:./FW/ff.c     ****         FREE_NAMBUF();
4699:./FW/ff.c     ****     }
4700:./FW/ff.c     **** 
4701:./FW/ff.c     ****     LEAVE_FF(fs, res);
4702:./FW/ff.c     **** }
4703:./FW/ff.c     **** 
4704:./FW/ff.c     **** 
4705:./FW/ff.c     **** 
4706:./FW/ff.c     **** 
4707:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4708:./FW/ff.c     **** /* Rename a File/Directory                                               */
4709:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4710:./FW/ff.c     **** 
4711:./FW/ff.c     **** FRESULT f_rename (
4712:./FW/ff.c     ****     const TCHAR* path_old,  /* Pointer to the object name to be renamed */
4713:./FW/ff.c     ****     const TCHAR* path_new   /* Pointer to the new name */
4714:./FW/ff.c     **** ) {
4715:./FW/ff.c     ****     FRESULT res;
4716:./FW/ff.c     ****     DIR djo, djn;
4717:./FW/ff.c     ****     FATFS *fs;
4718:./FW/ff.c     ****     BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
4719:./FW/ff.c     ****     DWORD dw;
4720:./FW/ff.c     ****     DEF_NAMBUF
4721:./FW/ff.c     **** 
4722:./FW/ff.c     **** 
4723:./FW/ff.c     ****     get_ldnumber(&path_new);                        /* Snip drive number of new name off */
4724:./FW/ff.c     ****     res = find_volume(&path_old, &fs, FA_WRITE);    /* Get logical drive of the old object */
4725:./FW/ff.c     ****     if (res == FR_OK) {
4726:./FW/ff.c     ****         djo.obj.fs = fs;
4727:./FW/ff.c     ****         INIT_NAMBUF(fs);
4728:./FW/ff.c     ****         res = follow_path(&djo, path_old);      /* Check old object */
4729:./FW/ff.c     ****         if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) { res = FR_INVALID_NAME; } /* 
4730:./FW/ff.c     **** #if _FS_LOCK != 0
4731:./FW/ff.c     ****         if (res == FR_OK) {
4732:./FW/ff.c     ****             res = chk_lock(&djo, 2);
4733:./FW/ff.c     ****         }
4734:./FW/ff.c     **** #endif
4735:./FW/ff.c     ****         if (res == FR_OK) {                     /* Object to be renamed is found */
4736:./FW/ff.c     **** #if _FS_EXFAT
4737:./FW/ff.c     ****             if (fs->fs_type == FS_EXFAT) {  /* At exFAT */
4738:./FW/ff.c     ****                 BYTE nf, nn;
4739:./FW/ff.c     ****                 WORD nh;
4740:./FW/ff.c     **** 
4741:./FW/ff.c     ****                 mem_cpy(buf, fs->dirbuf, SZDIRE * 2);   /* Save 85+C0 entry of old object */
4742:./FW/ff.c     ****                 mem_cpy(&djn, &djo, sizeof djo);
4743:./FW/ff.c     ****                 res = follow_path(&djn, path_new);      /* Make sure if new object name is not in u
4744:./FW/ff.c     ****                 if (res == FR_OK) {                     /* Is new name already in use by any other 
4745:./FW/ff.c     ****                     res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE :
4746:./FW/ff.c     ****                 }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 117


4747:./FW/ff.c     ****                 if (res == FR_NO_FILE) {                /* It is a valid path and no name collision
4748:./FW/ff.c     ****                     res = dir_register(&djn);           /* Register the new entry */
4749:./FW/ff.c     ****                     if (res == FR_OK) {
4750:./FW/ff.c     ****                         nf = fs->dirbuf[XDIR_NumSec];
4751:./FW/ff.c     ****                         nn = fs->dirbuf[XDIR_NumName];
4752:./FW/ff.c     ****                         nh = ld_word(fs->dirbuf + XDIR_NameHash);
4753:./FW/ff.c     ****                         mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
4754:./FW/ff.c     ****                         fs->dirbuf[XDIR_NumSec] = nf;
4755:./FW/ff.c     ****                         fs->dirbuf[XDIR_NumName] = nn;
4756:./FW/ff.c     ****                         st_word(fs->dirbuf + XDIR_NameHash, nh);
4757:./FW/ff.c     ****                         /* Start of critical section where an interruption can cause a cross-link *
4758:./FW/ff.c     ****                         res = store_xdir(&djn);
4759:./FW/ff.c     ****                     }
4760:./FW/ff.c     ****                 }
4761:./FW/ff.c     ****             } else
4762:./FW/ff.c     **** #endif
4763:./FW/ff.c     ****             {
4764:./FW/ff.c     ****                 /* At FAT12/FAT16/FAT32 */
4765:./FW/ff.c     ****                 mem_cpy(buf, djo.dir + DIR_Attr, 21);   /* Save information about the object except
4766:./FW/ff.c     ****                 mem_cpy(&djn, &djo, sizeof (DIR));      /* Duplicate the directory object */
4767:./FW/ff.c     ****                 res = follow_path(&djn, path_new);      /* Make sure if new object name is not in u
4768:./FW/ff.c     ****                 if (res == FR_OK) {                     /* Is new name already in use by any other 
4769:./FW/ff.c     ****                     res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE :
4770:./FW/ff.c     ****                 }
4771:./FW/ff.c     ****                 if (res == FR_NO_FILE) {                /* It is a valid path and no name collision
4772:./FW/ff.c     ****                     res = dir_register(&djn);           /* Register the new entry */
4773:./FW/ff.c     ****                     if (res == FR_OK) {
4774:./FW/ff.c     ****                         dir = djn.dir;                  /* Copy information about object except nam
4775:./FW/ff.c     ****                         mem_cpy(dir + 13, buf + 2, 19);
4776:./FW/ff.c     ****                         dir[DIR_Attr] = buf[0] | AM_ARC;
4777:./FW/ff.c     ****                         fs->wflag = 1;
4778:./FW/ff.c     ****                         if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) { /* Upda
4779:./FW/ff.c     ****                             dw = clust2sect(fs, ld_clust(fs, dir));
4780:./FW/ff.c     ****                             if (!dw) {
4781:./FW/ff.c     ****                                 res = FR_INT_ERR;
4782:./FW/ff.c     ****                             } else {
4783:./FW/ff.c     ****                                 /* Start of critical section where an interruption can cause a cros
4784:./FW/ff.c     ****                                 res = move_window(fs, dw);
4785:./FW/ff.c     ****                                 dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
4786:./FW/ff.c     ****                                 if (res == FR_OK && dir[1] == '.') {
4787:./FW/ff.c     ****                                     st_clust(fs, dir, djn.obj.sclust);
4788:./FW/ff.c     ****                                     fs->wflag = 1;
4789:./FW/ff.c     ****                                 }
4790:./FW/ff.c     ****                             }
4791:./FW/ff.c     ****                         }
4792:./FW/ff.c     ****                     }
4793:./FW/ff.c     ****                 }
4794:./FW/ff.c     ****             }
4795:./FW/ff.c     ****             if (res == FR_OK) {
4796:./FW/ff.c     ****                 res = dir_remove(&djo);     /* Remove old entry */
4797:./FW/ff.c     ****                 if (res == FR_OK) {
4798:./FW/ff.c     ****                     res = sync_fs(fs);
4799:./FW/ff.c     ****                 }
4800:./FW/ff.c     ****             }
4801:./FW/ff.c     ****             /* End of the critical section */
4802:./FW/ff.c     ****         }
4803:./FW/ff.c     ****         FREE_NAMBUF();
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 118


4804:./FW/ff.c     ****     }
4805:./FW/ff.c     **** 
4806:./FW/ff.c     ****     LEAVE_FF(fs, res);
4807:./FW/ff.c     **** }
4808:./FW/ff.c     **** 
4809:./FW/ff.c     **** #endif /* !_FS_READONLY */
4810:./FW/ff.c     **** #endif /* _FS_MINIMIZE == 0 */
4811:./FW/ff.c     **** #endif /* _FS_MINIMIZE <= 1 */
4812:./FW/ff.c     **** #endif /* _FS_MINIMIZE <= 2 */
4813:./FW/ff.c     **** 
4814:./FW/ff.c     **** 
4815:./FW/ff.c     **** 
4816:./FW/ff.c     **** #if _USE_CHMOD && !_FS_READONLY
4817:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4818:./FW/ff.c     **** /* Change Attribute                                                      */
4819:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4820:./FW/ff.c     **** 
4821:./FW/ff.c     **** FRESULT f_chmod (
4822:./FW/ff.c     ****     const TCHAR* path,  /* Pointer to the file path */
4823:./FW/ff.c     ****     BYTE attr,          /* Attribute bits */
4824:./FW/ff.c     ****     BYTE mask           /* Attribute mask to change */
4825:./FW/ff.c     **** ) {
4826:./FW/ff.c     ****     FRESULT res;
4827:./FW/ff.c     ****     DIR dj;
4828:./FW/ff.c     ****     FATFS *fs;
4829:./FW/ff.c     ****     DEF_NAMBUF
4830:./FW/ff.c     **** 
4831:./FW/ff.c     **** 
4832:./FW/ff.c     ****     res = find_volume(&path, &fs, FA_WRITE);    /* Get logical drive */
4833:./FW/ff.c     ****     dj.obj.fs = fs;
4834:./FW/ff.c     ****     if (res == FR_OK) {
4835:./FW/ff.c     ****         INIT_NAMBUF(fs);
4836:./FW/ff.c     ****         res = follow_path(&dj, path);   /* Follow the file path */
4837:./FW/ff.c     ****         if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) { res = FR_INVALID_NAME; }  /* 
4838:./FW/ff.c     ****         if (res == FR_OK) {
4839:./FW/ff.c     ****             mask &= AM_RDO | AM_HID | AM_SYS | AM_ARC;  /* Valid attribute mask */
4840:./FW/ff.c     **** #if _FS_EXFAT
4841:./FW/ff.c     ****             if (fs->fs_type == FS_EXFAT) {
4842:./FW/ff.c     ****                 fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);  /* 
4843:./FW/ff.c     ****                 res = store_xdir(&dj);
4844:./FW/ff.c     ****             } else
4845:./FW/ff.c     **** #endif
4846:./FW/ff.c     ****             {
4847:./FW/ff.c     ****                 dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);    /* Apply at
4848:./FW/ff.c     ****                 fs->wflag = 1;
4849:./FW/ff.c     ****             }
4850:./FW/ff.c     ****             if (res == FR_OK) {
4851:./FW/ff.c     ****                 res = sync_fs(fs);
4852:./FW/ff.c     ****             }
4853:./FW/ff.c     ****         }
4854:./FW/ff.c     ****         FREE_NAMBUF();
4855:./FW/ff.c     ****     }
4856:./FW/ff.c     **** 
4857:./FW/ff.c     ****     LEAVE_FF(fs, res);
4858:./FW/ff.c     **** }
4859:./FW/ff.c     **** 
4860:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 119


4861:./FW/ff.c     **** 
4862:./FW/ff.c     **** 
4863:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4864:./FW/ff.c     **** /* Change Timestamp                                                      */
4865:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4866:./FW/ff.c     **** 
4867:./FW/ff.c     **** FRESULT f_utime (
4868:./FW/ff.c     ****     const TCHAR* path,  /* Pointer to the file/directory name */
4869:./FW/ff.c     ****     const FILINFO* fno  /* Pointer to the time stamp to be set */
4870:./FW/ff.c     **** ) {
4871:./FW/ff.c     ****     FRESULT res;
4872:./FW/ff.c     ****     DIR dj;
4873:./FW/ff.c     ****     FATFS *fs;
4874:./FW/ff.c     ****     DEF_NAMBUF
4875:./FW/ff.c     **** 
4876:./FW/ff.c     **** 
4877:./FW/ff.c     ****     res = find_volume(&path, &fs, FA_WRITE);    /* Get logical drive */
4878:./FW/ff.c     ****     dj.obj.fs = fs;
4879:./FW/ff.c     ****     if (res == FR_OK) {
4880:./FW/ff.c     ****         INIT_NAMBUF(fs);
4881:./FW/ff.c     ****         res = follow_path(&dj, path);   /* Follow the file path */
4882:./FW/ff.c     ****         if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) { res = FR_INVALID_NAME; }  /* 
4883:./FW/ff.c     ****         if (res == FR_OK) {
4884:./FW/ff.c     **** #if _FS_EXFAT
4885:./FW/ff.c     ****             if (fs->fs_type == FS_EXFAT) {
4886:./FW/ff.c     ****                 st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4887:./FW/ff.c     ****                 res = store_xdir(&dj);
4888:./FW/ff.c     ****             } else
4889:./FW/ff.c     **** #endif
4890:./FW/ff.c     ****             {
4891:./FW/ff.c     ****                 st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4892:./FW/ff.c     ****                 fs->wflag = 1;
4893:./FW/ff.c     ****             }
4894:./FW/ff.c     ****             if (res == FR_OK) {
4895:./FW/ff.c     ****                 res = sync_fs(fs);
4896:./FW/ff.c     ****             }
4897:./FW/ff.c     ****         }
4898:./FW/ff.c     ****         FREE_NAMBUF();
4899:./FW/ff.c     ****     }
4900:./FW/ff.c     **** 
4901:./FW/ff.c     ****     LEAVE_FF(fs, res);
4902:./FW/ff.c     **** }
4903:./FW/ff.c     **** 
4904:./FW/ff.c     **** #endif  /* _USE_CHMOD && !_FS_READONLY */
4905:./FW/ff.c     **** 
4906:./FW/ff.c     **** 
4907:./FW/ff.c     **** 
4908:./FW/ff.c     **** #if _USE_LABEL
4909:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4910:./FW/ff.c     **** /* Get Volume Label                                                      */
4911:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
4912:./FW/ff.c     **** 
4913:./FW/ff.c     **** FRESULT f_getlabel (
4914:./FW/ff.c     ****     const TCHAR* path,  /* Path name of the logical drive number */
4915:./FW/ff.c     ****     TCHAR* label,       /* Pointer to a buffer to return the volume label */
4916:./FW/ff.c     ****     DWORD* vsn          /* Pointer to a variable to return the volume serial number */
4917:./FW/ff.c     **** ) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 120


4918:./FW/ff.c     ****     FRESULT res;
4919:./FW/ff.c     ****     DIR dj;
4920:./FW/ff.c     ****     FATFS *fs;
4921:./FW/ff.c     ****     UINT si, di;
4922:./FW/ff.c     **** #if _LFN_UNICODE || _FS_EXFAT
4923:./FW/ff.c     ****     WCHAR w;
4924:./FW/ff.c     **** #endif
4925:./FW/ff.c     **** 
4926:./FW/ff.c     ****     /* Get logical drive */
4927:./FW/ff.c     ****     res = find_volume(&path, &fs, 0);
4928:./FW/ff.c     **** 
4929:./FW/ff.c     ****     /* Get volume label */
4930:./FW/ff.c     ****     if (res == FR_OK && label) {
4931:./FW/ff.c     ****         dj.obj.fs = fs;
4932:./FW/ff.c     ****         dj.obj.sclust = 0;  /* Open root directory */
4933:./FW/ff.c     ****         res = dir_sdi(&dj, 0);
4934:./FW/ff.c     ****         if (res == FR_OK) {
4935:./FW/ff.c     ****             res = dir_read(&dj, 1);         /* Find a volume label entry */
4936:./FW/ff.c     ****             if (res == FR_OK) {
4937:./FW/ff.c     **** #if _FS_EXFAT
4938:./FW/ff.c     ****                 if (fs->fs_type == FS_EXFAT) {
4939:./FW/ff.c     ****                     for (si = di = 0; si < dj.dir[XDIR_NumLabel]; si++) {   /* Extract volume label
4940:./FW/ff.c     ****                         w = ld_word(dj.dir + XDIR_Label + si * 2);
4941:./FW/ff.c     **** #if _LFN_UNICODE
4942:./FW/ff.c     ****                         label[di++] = w;
4943:./FW/ff.c     **** #else
4944:./FW/ff.c     ****                         w = ff_convert(w, 0);   /* Unicode -> OEM */
4945:./FW/ff.c     ****                         if (w == 0) { w = '?'; }    /* Replace wrong character */
4946:./FW/ff.c     ****                         if (_DF1S && w >= 0x100) { label[di++] = (char)(w >> 8); }
4947:./FW/ff.c     ****                         label[di++] = (char)w;
4948:./FW/ff.c     **** #endif
4949:./FW/ff.c     ****                     }
4950:./FW/ff.c     ****                     label[di] = 0;
4951:./FW/ff.c     ****                 } else
4952:./FW/ff.c     **** #endif
4953:./FW/ff.c     ****                 {
4954:./FW/ff.c     ****                     si = di = 0;        /* Extract volume label from AM_VOL entry with code comvers
4955:./FW/ff.c     ****                     do {
4956:./FW/ff.c     **** #if _LFN_UNICODE
4957:./FW/ff.c     ****                         w = (si < 11) ? dj.dir[si++] : ' ';
4958:./FW/ff.c     ****                         if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
4959:./FW/ff.c     ****                             w = w << 8 | dj.dir[si++];
4960:./FW/ff.c     ****                         }
4961:./FW/ff.c     ****                         label[di++] = ff_convert(w, 1); /* OEM -> Unicode */
4962:./FW/ff.c     **** #else
4963:./FW/ff.c     ****                         label[di++] = dj.dir[si++];
4964:./FW/ff.c     **** #endif
4965:./FW/ff.c     ****                     } while (di < 11);
4966:./FW/ff.c     ****                     do {                /* Truncate trailing spaces */
4967:./FW/ff.c     ****                         label[di] = 0;
4968:./FW/ff.c     ****                         if (di == 0) { break; }
4969:./FW/ff.c     ****                     } while (label[--di] == ' ');
4970:./FW/ff.c     ****                 }
4971:./FW/ff.c     ****             }
4972:./FW/ff.c     ****         }
4973:./FW/ff.c     ****         if (res == FR_NO_FILE) {    /* No label entry and return nul string */
4974:./FW/ff.c     ****             label[0] = 0;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 121


4975:./FW/ff.c     ****             res = FR_OK;
4976:./FW/ff.c     ****         }
4977:./FW/ff.c     ****     }
4978:./FW/ff.c     **** 
4979:./FW/ff.c     ****     /* Get volume serial number */
4980:./FW/ff.c     ****     if (res == FR_OK && vsn) {
4981:./FW/ff.c     ****         res = move_window(fs, fs->volbase);
4982:./FW/ff.c     ****         if (res == FR_OK) {
4983:./FW/ff.c     ****             switch (fs->fs_type) {
4984:./FW/ff.c     ****             case FS_EXFAT:
4985:./FW/ff.c     ****                 di = BPB_VolIDEx;
4986:./FW/ff.c     ****                 break;
4987:./FW/ff.c     **** 
4988:./FW/ff.c     ****             case FS_FAT32:
4989:./FW/ff.c     ****                 di = BS_VolID32;
4990:./FW/ff.c     ****                 break;
4991:./FW/ff.c     **** 
4992:./FW/ff.c     ****             default:
4993:./FW/ff.c     ****                 di = BS_VolID;
4994:./FW/ff.c     ****             }
4995:./FW/ff.c     ****             *vsn = ld_dword(fs->win + di);
4996:./FW/ff.c     ****         }
4997:./FW/ff.c     ****     }
4998:./FW/ff.c     **** 
4999:./FW/ff.c     ****     LEAVE_FF(fs, res);
5000:./FW/ff.c     **** }
5001:./FW/ff.c     **** 
5002:./FW/ff.c     **** 
5003:./FW/ff.c     **** 
5004:./FW/ff.c     **** #if !_FS_READONLY
5005:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5006:./FW/ff.c     **** /* Set Volume Label                                                      */
5007:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5008:./FW/ff.c     **** 
5009:./FW/ff.c     **** FRESULT f_setlabel (
5010:./FW/ff.c     ****     const TCHAR* label  /* Pointer to the volume label to set */
5011:./FW/ff.c     **** ) {
5012:./FW/ff.c     ****     FRESULT res;
5013:./FW/ff.c     ****     DIR dj;
5014:./FW/ff.c     ****     FATFS *fs;
5015:./FW/ff.c     ****     BYTE dirvn[22];
5016:./FW/ff.c     ****     UINT i, j, slen;
5017:./FW/ff.c     ****     WCHAR w;
5018:./FW/ff.c     ****     static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";
5019:./FW/ff.c     **** 
5020:./FW/ff.c     **** 
5021:./FW/ff.c     ****     /* Get logical drive */
5022:./FW/ff.c     ****     res = find_volume(&label, &fs, FA_WRITE);
5023:./FW/ff.c     ****     if (res != FR_OK) { LEAVE_FF(fs, res); }
5024:./FW/ff.c     ****     dj.obj.fs = fs;
5025:./FW/ff.c     **** 
5026:./FW/ff.c     ****     /* Get length of given volume label */
5027:./FW/ff.c     ****     for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;  /* Get name length */
5028:./FW/ff.c     **** 
5029:./FW/ff.c     **** #if _FS_EXFAT
5030:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT) {  /* On the exFAT volume */
5031:./FW/ff.c     ****         for (i = j = 0; i < slen; ) {   /* Create volume label in directory form */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 122


5032:./FW/ff.c     ****             w = label[i++];
5033:./FW/ff.c     **** #if !_LFN_UNICODE
5034:./FW/ff.c     ****             if (IsDBCS1(w)) {
5035:./FW/ff.c     ****                 w = (i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5036:./FW/ff.c     ****             }
5037:./FW/ff.c     ****             w = ff_convert(w, 1);
5038:./FW/ff.c     **** #endif
5039:./FW/ff.c     ****             if (w == 0 || chk_chr(badchr, w) || j == 22) {  /* Check validity check validity of the
5040:./FW/ff.c     ****                 LEAVE_FF(fs, FR_INVALID_NAME);
5041:./FW/ff.c     ****             }
5042:./FW/ff.c     ****             st_word(dirvn + j, w);
5043:./FW/ff.c     ****             j += 2;
5044:./FW/ff.c     ****         }
5045:./FW/ff.c     ****         slen = j;
5046:./FW/ff.c     ****     } else
5047:./FW/ff.c     **** #endif
5048:./FW/ff.c     ****     {
5049:./FW/ff.c     ****         /* On the FAT12/16/32 volume */
5050:./FW/ff.c     ****         for ( ; slen && label[slen - 1] == ' '; slen--) ;   /* Remove trailing spaces */
5051:./FW/ff.c     ****         if (slen) {     /* Is there a volume label to be set? */
5052:./FW/ff.c     ****             dirvn[0] = 0;
5053:./FW/ff.c     ****             i = j = 0;  /* Create volume label in directory form */
5054:./FW/ff.c     ****             do {
5055:./FW/ff.c     **** #if _LFN_UNICODE
5056:./FW/ff.c     ****                 w = ff_convert(ff_wtoupper(label[i++]), 0);
5057:./FW/ff.c     **** #else
5058:./FW/ff.c     ****                 w = (BYTE)label[i++];
5059:./FW/ff.c     ****                 if (IsDBCS1(w)) {
5060:./FW/ff.c     ****                     w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5061:./FW/ff.c     ****                 }
5062:./FW/ff.c     **** #if _USE_LFN != 0
5063:./FW/ff.c     ****                 w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
5064:./FW/ff.c     **** #else
5065:./FW/ff.c     ****                 if (IsLower(w)) { w -= 0x20; }          /* To upper ASCII characters */
5066:./FW/ff.c     **** #ifdef _EXCVT
5067:./FW/ff.c     ****                 if (w >= 0x80) { w = ExCvt[w - 0x80]; } /* To upper extended characters (SBCS cfg) 
5068:./FW/ff.c     **** #else
5069:./FW/ff.c     ****                 if (!_DF1S && w >= 0x80) { w = 0; }     /* Reject extended characters (ASCII cfg) *
5070:./FW/ff.c     **** #endif
5071:./FW/ff.c     **** #endif
5072:./FW/ff.c     **** #endif
5073:./FW/ff.c     ****                 if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {  /* Reje
5074:./FW/ff.c     ****                     LEAVE_FF(fs, FR_INVALID_NAME);
5075:./FW/ff.c     ****                 }
5076:./FW/ff.c     ****                 if (w >= 0x100) { dirvn[j++] = (BYTE)(w >> 8); }
5077:./FW/ff.c     ****                 dirvn[j++] = (BYTE)w;
5078:./FW/ff.c     ****             } while (i < slen);
5079:./FW/ff.c     ****             while (j < 11) { dirvn[j++] = ' '; }    /* Fill remaining name field */
5080:./FW/ff.c     ****             if (dirvn[0] == DDEM) { LEAVE_FF(fs, FR_INVALID_NAME); }    /* Reject illegal name (hea
5081:./FW/ff.c     ****         }
5082:./FW/ff.c     ****     }
5083:./FW/ff.c     **** 
5084:./FW/ff.c     ****     /* Set volume label */
5085:./FW/ff.c     ****     dj.obj.sclust = 0;      /* Open root directory */
5086:./FW/ff.c     ****     res = dir_sdi(&dj, 0);
5087:./FW/ff.c     ****     if (res == FR_OK) {
5088:./FW/ff.c     ****         res = dir_read(&dj, 1); /* Get volume label entry */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 123


5089:./FW/ff.c     ****         if (res == FR_OK) {
5090:./FW/ff.c     ****             if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5091:./FW/ff.c     ****                 dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);   /* Change the volume label */
5092:./FW/ff.c     ****                 mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5093:./FW/ff.c     ****             } else {
5094:./FW/ff.c     ****                 if (slen) {
5095:./FW/ff.c     ****                     mem_cpy(dj.dir, dirvn, 11); /* Change the volume label */
5096:./FW/ff.c     ****                 } else {
5097:./FW/ff.c     ****                     dj.dir[DIR_Name] = DDEM;    /* Remove the volume label */
5098:./FW/ff.c     ****                 }
5099:./FW/ff.c     ****             }
5100:./FW/ff.c     ****             fs->wflag = 1;
5101:./FW/ff.c     ****             res = sync_fs(fs);
5102:./FW/ff.c     ****         } else {            /* No volume label entry is found or error */
5103:./FW/ff.c     ****             if (res == FR_NO_FILE) {
5104:./FW/ff.c     ****                 res = FR_OK;
5105:./FW/ff.c     ****                 if (slen) { /* Create a volume label entry */
5106:./FW/ff.c     ****                     res = dir_alloc(&dj, 1);    /* Allocate an entry */
5107:./FW/ff.c     ****                     if (res == FR_OK) {
5108:./FW/ff.c     ****                         mem_set(dj.dir, 0, SZDIRE); /* Clear the entry */
5109:./FW/ff.c     ****                         if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5110:./FW/ff.c     ****                             dj.dir[XDIR_Type] = 0x83;       /* Create 83 entry */
5111:./FW/ff.c     ****                             dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
5112:./FW/ff.c     ****                             mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5113:./FW/ff.c     ****                         } else {
5114:./FW/ff.c     ****                             dj.dir[DIR_Attr] = AM_VOL;      /* Create volume label entry */
5115:./FW/ff.c     ****                             mem_cpy(dj.dir, dirvn, 11);
5116:./FW/ff.c     ****                         }
5117:./FW/ff.c     ****                         fs->wflag = 1;
5118:./FW/ff.c     ****                         res = sync_fs(fs);
5119:./FW/ff.c     ****                     }
5120:./FW/ff.c     ****                 }
5121:./FW/ff.c     ****             }
5122:./FW/ff.c     ****         }
5123:./FW/ff.c     ****     }
5124:./FW/ff.c     **** 
5125:./FW/ff.c     ****     LEAVE_FF(fs, res);
5126:./FW/ff.c     **** }
5127:./FW/ff.c     **** 
5128:./FW/ff.c     **** #endif /* !_FS_READONLY */
5129:./FW/ff.c     **** #endif /* _USE_LABEL */
5130:./FW/ff.c     **** 
5131:./FW/ff.c     **** 
5132:./FW/ff.c     **** 
5133:./FW/ff.c     **** #if _USE_EXPAND && !_FS_READONLY
5134:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5135:./FW/ff.c     **** /* Allocate a Contiguous Blocks to the File                              */
5136:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5137:./FW/ff.c     **** 
5138:./FW/ff.c     **** FRESULT f_expand (
5139:./FW/ff.c     ****     FIL* fp,        /* Pointer to the file object */
5140:./FW/ff.c     ****     FSIZE_t fsz,    /* File size to be expanded to */
5141:./FW/ff.c     ****     BYTE opt        /* Operation mode 0:Find and prepare or 1:Find and allocate */
5142:./FW/ff.c     **** ) {
5143:./FW/ff.c     ****     FRESULT res;
5144:./FW/ff.c     ****     FATFS *fs;
5145:./FW/ff.c     ****     DWORD n, clst, stcl, scl, ncl, tcl, lclst;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 124


5146:./FW/ff.c     **** 
5147:./FW/ff.c     **** 
5148:./FW/ff.c     ****     res = validate(&fp->obj, &fs);      /* Check validity of the file object */
5149:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }
5150:./FW/ff.c     ****     if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }
5151:./FW/ff.c     **** #if _FS_EXFAT
5152:./FW/ff.c     ****     if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) { LEAVE_FF(fs, FR_DENIED); } /* Check if in 
5153:./FW/ff.c     **** #endif
5154:./FW/ff.c     ****     n = (DWORD)fs->csize * SS(fs);  /* Cluster size */
5155:./FW/ff.c     ****     tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0); /* Number of clusters required */
5156:./FW/ff.c     ****     stcl = fs->last_clst;
5157:./FW/ff.c     ****     lclst = 0;
5158:./FW/ff.c     ****     if (stcl < 2 || stcl >= fs->n_fatent) { stcl = 2; }
5159:./FW/ff.c     **** 
5160:./FW/ff.c     **** #if _FS_EXFAT
5161:./FW/ff.c     ****     if (fs->fs_type == FS_EXFAT) {
5162:./FW/ff.c     ****         scl = find_bitmap(fs, stcl, tcl);           /* Find a contiguous cluster block */
5163:./FW/ff.c     ****         if (scl == 0) { res = FR_DENIED; }              /* No contiguous cluster block was found */
5164:./FW/ff.c     ****         if (scl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
5165:./FW/ff.c     ****         if (res == FR_OK) { /* A contiguous free area is found */
5166:./FW/ff.c     ****             if (opt) {      /* Allocate it now */
5167:./FW/ff.c     ****                 res = change_bitmap(fs, scl, tcl, 1);   /* Mark the cluster block 'in use' */
5168:./FW/ff.c     ****                 lclst = scl + tcl - 1;
5169:./FW/ff.c     ****             } else {        /* Set it as suggested point for next allocation */
5170:./FW/ff.c     ****                 lclst = scl - 1;
5171:./FW/ff.c     ****             }
5172:./FW/ff.c     ****         }
5173:./FW/ff.c     ****     } else
5174:./FW/ff.c     **** #endif
5175:./FW/ff.c     ****     {
5176:./FW/ff.c     ****         scl = clst = stcl;
5177:./FW/ff.c     ****         ncl = 0;
5178:./FW/ff.c     ****         for (;;) {  /* Find a contiguous cluster block */
5179:./FW/ff.c     ****             n = get_fat(&fp->obj, clst);
5180:./FW/ff.c     ****             if (++clst >= fs->n_fatent) { clst = 2; }
5181:./FW/ff.c     ****             if (n == 1) { res = FR_INT_ERR; break; }
5182:./FW/ff.c     ****             if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5183:./FW/ff.c     ****             if (n == 0) {   /* Is it a free cluster? */
5184:./FW/ff.c     ****                 if (++ncl == tcl) { break; }    /* Break if a contiguous cluster block is found */
5185:./FW/ff.c     ****             } else {
5186:./FW/ff.c     ****                 scl = clst;
5187:./FW/ff.c     ****                 ncl = 0;        /* Not a free cluster */
5188:./FW/ff.c     ****             }
5189:./FW/ff.c     ****             if (clst == stcl) { res = FR_DENIED; break; }   /* No contiguous cluster? */
5190:./FW/ff.c     ****         }
5191:./FW/ff.c     ****         if (res == FR_OK) { /* A contiguous free area is found */
5192:./FW/ff.c     ****             if (opt) {      /* Allocate it now */
5193:./FW/ff.c     ****                 for (clst = scl, n = tcl; n; clst++, n--) { /* Create a cluster chain on the FAT */
5194:./FW/ff.c     ****                     res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5195:./FW/ff.c     ****                     if (res != FR_OK) { break; }
5196:./FW/ff.c     ****                     lclst = clst;
5197:./FW/ff.c     ****                 }
5198:./FW/ff.c     ****             } else {        /* Set it as suggested point for next allocation */
5199:./FW/ff.c     ****                 lclst = scl - 1;
5200:./FW/ff.c     ****             }
5201:./FW/ff.c     ****         }
5202:./FW/ff.c     ****     }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 125


5203:./FW/ff.c     **** 
5204:./FW/ff.c     ****     if (res == FR_OK) {
5205:./FW/ff.c     ****         fs->last_clst = lclst;      /* Set suggested start cluster to start next */
5206:./FW/ff.c     ****         if (opt) {  /* Is it allocated now? */
5207:./FW/ff.c     ****             fp->obj.sclust = scl;       /* Update object allocation information */
5208:./FW/ff.c     ****             fp->obj.objsize = fsz;
5209:./FW/ff.c     ****             if (_FS_EXFAT) { fp->obj.stat = 2; }    /* Set status 'contiguous chain' */
5210:./FW/ff.c     ****             fp->flag |= FA_MODIFIED;
5211:./FW/ff.c     ****             if (fs->free_clst <= fs->n_fatent - 2) {    /* Update FSINFO */
5212:./FW/ff.c     ****                 fs->free_clst -= tcl;
5213:./FW/ff.c     ****                 fs->fsi_flag |= 1;
5214:./FW/ff.c     ****             }
5215:./FW/ff.c     ****         }
5216:./FW/ff.c     ****     }
5217:./FW/ff.c     **** 
5218:./FW/ff.c     ****     LEAVE_FF(fs, res);
5219:./FW/ff.c     **** }
5220:./FW/ff.c     **** 
5221:./FW/ff.c     **** #endif /* _USE_EXPAND && !_FS_READONLY */
5222:./FW/ff.c     **** 
5223:./FW/ff.c     **** 
5224:./FW/ff.c     **** 
5225:./FW/ff.c     **** #if _USE_FORWARD
5226:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5227:./FW/ff.c     **** /* Forward data to the stream directly                                   */
5228:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5229:./FW/ff.c     **** 
5230:./FW/ff.c     **** FRESULT f_forward (
5231:./FW/ff.c     ****     FIL* fp,                        /* Pointer to the file object */
5232:./FW/ff.c     ****     UINT (*func)(const BYTE*, UINT),    /* Pointer to the streaming function */
5233:./FW/ff.c     ****     UINT btf,                       /* Number of bytes to forward */
5234:./FW/ff.c     ****     UINT* bf                        /* Pointer to number of bytes forwarded */
5235:./FW/ff.c     **** ) {
5236:./FW/ff.c     ****     FRESULT res;
5237:./FW/ff.c     ****     FATFS *fs;
5238:./FW/ff.c     ****     DWORD clst, sect;
5239:./FW/ff.c     ****     FSIZE_t remain;
5240:./FW/ff.c     ****     UINT rcnt, csect;
5241:./FW/ff.c     ****     BYTE *dbuf;
5242:./FW/ff.c     **** 
5243:./FW/ff.c     **** 
5244:./FW/ff.c     ****     *bf = 0;    /* Clear transfer byte counter */
5245:./FW/ff.c     ****     res = validate(&fp->obj, &fs);      /* Check validity of the file object */
5246:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }
5247:./FW/ff.c     ****     if (!(fp->flag & FA_READ)) { LEAVE_FF(fs, FR_DENIED); } /* Check access mode */
5248:./FW/ff.c     **** 
5249:./FW/ff.c     ****     remain = fp->obj.objsize - fp->fptr;
5250:./FW/ff.c     ****     if (btf > remain) { btf = (UINT)remain; }           /* Truncate btf by remaining bytes */
5251:./FW/ff.c     **** 
5252:./FW/ff.c     ****     for ( ;  btf && (*func)(0, 0);                  /* Repeat until all data transferred or stream 
5253:./FW/ff.c     ****             fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5254:./FW/ff.c     ****         csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));    /* Sector offset in the cluster */
5255:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {               /* On the sector boundary? */
5256:./FW/ff.c     ****             if (csect == 0) {                       /* On the cluster boundary? */
5257:./FW/ff.c     ****                 clst = (fp->fptr == 0) ?            /* On the top of the file? */
5258:./FW/ff.c     ****                        fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5259:./FW/ff.c     ****                 if (clst <= 1) { ABORT(fs, FR_INT_ERR); }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 126


5260:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
5261:./FW/ff.c     ****                 fp->clust = clst;                   /* Update current cluster */
5262:./FW/ff.c     ****             }
5263:./FW/ff.c     ****         }
5264:./FW/ff.c     ****         sect = clust2sect(fs, fp->clust);           /* Get current data sector */
5265:./FW/ff.c     ****         if (!sect) { ABORT(fs, FR_INT_ERR); }
5266:./FW/ff.c     ****         sect += csect;
5267:./FW/ff.c     **** #if _FS_TINY
5268:./FW/ff.c     ****         if (move_window(fs, sect) != FR_OK) { ABORT(fs, FR_DISK_ERR); } /* Move sector window to th
5269:./FW/ff.c     ****         dbuf = fs->win;
5270:./FW/ff.c     **** #else
5271:./FW/ff.c     ****         if (fp->sect != sect) {     /* Fill sector cache with file data */
5272:./FW/ff.c     **** #if !_FS_READONLY
5273:./FW/ff.c     ****             if (fp->flag & FA_DIRTY) {      /* Write-back dirty sector cache */
5274:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
5275:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
5276:./FW/ff.c     ****             }
5277:./FW/ff.c     **** #endif
5278:./FW/ff.c     ****             if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); }
5279:./FW/ff.c     ****         }
5280:./FW/ff.c     ****         dbuf = fp->buf;
5281:./FW/ff.c     **** #endif
5282:./FW/ff.c     ****         fp->sect = sect;
5283:./FW/ff.c     ****         rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);    /* Number of bytes left in the sector */
5284:./FW/ff.c     ****         if (rcnt > btf) { rcnt = btf; }                 /* Clip it by btr if needed */
5285:./FW/ff.c     ****         rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt); /* Forward the file data */
5286:./FW/ff.c     ****         if (!rcnt) { ABORT(fs, FR_INT_ERR); }
5287:./FW/ff.c     ****     }
5288:./FW/ff.c     **** 
5289:./FW/ff.c     ****     LEAVE_FF(fs, FR_OK);
5290:./FW/ff.c     **** }
5291:./FW/ff.c     **** #endif /* _USE_FORWARD */
5292:./FW/ff.c     **** 
5293:./FW/ff.c     **** 
5294:./FW/ff.c     **** 
5295:./FW/ff.c     **** #if _USE_MKFS && !_FS_READONLY
5296:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5297:./FW/ff.c     **** /* Create an FAT/exFAT volume                                            */
5298:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5299:./FW/ff.c     **** 
5300:./FW/ff.c     **** FRESULT f_mkfs (
5301:./FW/ff.c     ****     const TCHAR* path,  /* Logical drive number */
5302:./FW/ff.c     ****     BYTE opt,           /* Format option */
5303:./FW/ff.c     ****     DWORD au,           /* Size of allocation unit (cluster) [byte] */
5304:./FW/ff.c     ****     void* work,         /* Pointer to working buffer */
5305:./FW/ff.c     ****     UINT len            /* Size of working buffer */
5306:./FW/ff.c     **** ) {
5307:./FW/ff.c     ****     const UINT n_fats = 1;      /* Number of FATs for FAT12/16/32 volume (1 or 2) */
5308:./FW/ff.c     ****     const UINT n_rootdir = 512; /* Number of root directory entries for FAT12/16 volume */
5309:./FW/ff.c     ****     static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};  /* Cluster size boundary for FAT12/16 v
5310:./FW/ff.c     ****     static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};    /* Cluster size boundary for FAT32 volu
5311:./FW/ff.c     ****     BYTE fmt, sys, *buf, *pte, pdrv, part;
5312:./FW/ff.c     ****     WORD ss;
5313:./FW/ff.c     ****     DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5314:./FW/ff.c     ****     DWORD b_vol, b_fat, b_data;             /* Base LBA for volume, fat, data */
5315:./FW/ff.c     ****     DWORD sz_vol, sz_rsv, sz_fat, sz_dir;   /* Size for volume, fat, dir, data */
5316:./FW/ff.c     ****     UINT i;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 127


5317:./FW/ff.c     ****     int vol;
5318:./FW/ff.c     ****     DSTATUS stat;
5319:./FW/ff.c     **** #if _USE_TRIM || _FS_EXFAT
5320:./FW/ff.c     ****     DWORD tbl[3];
5321:./FW/ff.c     **** #endif
5322:./FW/ff.c     **** 
5323:./FW/ff.c     **** 
5324:./FW/ff.c     ****     /* Check mounted drive and clear work area */
5325:./FW/ff.c     ****     vol = get_ldnumber(&path);                  /* Get target logical drive */
5326:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
5327:./FW/ff.c     ****     if (FatFs[vol]) { FatFs[vol]->fs_type = 0; }    /* Clear the volume */
5328:./FW/ff.c     ****     pdrv = LD2PD(vol);  /* Physical drive */
5329:./FW/ff.c     ****     part = LD2PT(vol);  /* Partition (0:create as new, 1-4:get from partition table) */
5330:./FW/ff.c     **** 
5331:./FW/ff.c     ****     /* Check physical drive status */
5332:./FW/ff.c     ****     stat = disk_initialize(pdrv);
5333:./FW/ff.c     ****     if (stat & STA_NOINIT) { return FR_NOT_READY; }
5334:./FW/ff.c     ****     if (stat & STA_PROTECT) { return FR_WRITE_PROTECTED; }
5335:./FW/ff.c     ****     if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk
5336:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
5337:./FW/ff.c     ****     if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) { return FR_DISK_ERR; }
5338:./FW/ff.c     ****     if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) { return FR_DISK_ERR; }
5339:./FW/ff.c     **** #else
5340:./FW/ff.c     ****     ss = _MAX_SS;
5341:./FW/ff.c     **** #endif
5342:./FW/ff.c     ****     if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) { return FR_INVALID_PARAMETER; }
5343:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
5344:./FW/ff.c     **** 
5345:./FW/ff.c     ****     /* Get working buffer */
5346:./FW/ff.c     ****     buf = (BYTE*)work;      /* Working buffer */
5347:./FW/ff.c     ****     sz_buf = len / ss;      /* Size of working buffer (sector) */
5348:./FW/ff.c     ****     szb_buf = sz_buf * ss;  /* Size of working buffer (byte) */
5349:./FW/ff.c     ****     if (!szb_buf) { return FR_MKFS_ABORTED; }
5350:./FW/ff.c     **** 
5351:./FW/ff.c     ****     /* Determine where the volume to be located (b_vol, sz_vol) */
5352:./FW/ff.c     ****     if (_MULTI_PARTITION && part != 0) {
5353:./FW/ff.c     ****         /* Get partition information from partition table in the MBR */
5354:./FW/ff.c     ****         if (disk_read(pdrv, buf, 0, 1) != RES_OK) { return FR_DISK_ERR; }   /* Load MBR */
5355:./FW/ff.c     ****         if (ld_word(buf + BS_55AA) != 0xAA55) { return FR_MKFS_ABORTED; }   /* Check if MBR is vali
5356:./FW/ff.c     ****         pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5357:./FW/ff.c     ****         if (!pte[PTE_System]) { return FR_MKFS_ABORTED; }   /* No partition? */
5358:./FW/ff.c     ****         b_vol = ld_dword(pte + PTE_StLba);      /* Get volume start sector */
5359:./FW/ff.c     ****         sz_vol = ld_dword(pte + PTE_SizLba);    /* Get volume size */
5360:./FW/ff.c     ****     } else {
5361:./FW/ff.c     ****         /* Create a single-partition in this function */
5362:./FW/ff.c     ****         if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) { return FR_DISK_ERR; }
5363:./FW/ff.c     ****         b_vol = (opt & FM_SFD) ? 0 : 63;        /* Volume start sector */
5364:./FW/ff.c     ****         if (sz_vol < b_vol) { return FR_MKFS_ABORTED; }
5365:./FW/ff.c     ****         sz_vol -= b_vol;                        /* Volume size */
5366:./FW/ff.c     ****     }
5367:./FW/ff.c     ****     if (sz_vol < 128) { return FR_MKFS_ABORTED; }   /* Check if volume size is >=128s */
5368:./FW/ff.c     **** 
5369:./FW/ff.c     ****     /* Pre-determine the FAT type */
5370:./FW/ff.c     ****     do {
5371:./FW/ff.c     ****         if (_FS_EXFAT && (opt & FM_EXFAT)) {    /* exFAT possible? */
5372:./FW/ff.c     ****             if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {    /* exFAT only, 
5373:./FW/ff.c     ****                 fmt = FS_EXFAT;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 128


5374:./FW/ff.c     ****                 break;
5375:./FW/ff.c     ****             }
5376:./FW/ff.c     ****         }
5377:./FW/ff.c     ****         if (au > 128) { return FR_INVALID_PARAMETER; }  /* Too large au for FAT/FAT32 */
5378:./FW/ff.c     ****         if (opt & FM_FAT32) {   /* FAT32 possible? */
5379:./FW/ff.c     ****             if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {    /* FAT32 only or no-FAT? */
5380:./FW/ff.c     ****                 fmt = FS_FAT32;
5381:./FW/ff.c     ****                 break;
5382:./FW/ff.c     ****             }
5383:./FW/ff.c     ****         }
5384:./FW/ff.c     ****         if (!(opt & FM_FAT)) { return FR_INVALID_PARAMETER; }   /* no-FAT? */
5385:./FW/ff.c     ****         fmt = FS_FAT16;
5386:./FW/ff.c     ****     } while (0);
5387:./FW/ff.c     **** 
5388:./FW/ff.c     **** #if _FS_EXFAT
5389:./FW/ff.c     ****     if (fmt == FS_EXFAT) {  /* Create an exFAT volume */
5390:./FW/ff.c     ****         DWORD szb_bit, szb_case, sum, nb, cl;
5391:./FW/ff.c     ****         WCHAR ch, si;
5392:./FW/ff.c     ****         UINT j, st;
5393:./FW/ff.c     ****         BYTE b;
5394:./FW/ff.c     **** 
5395:./FW/ff.c     ****         if (sz_vol < 0x1000) { return FR_MKFS_ABORTED; }    /* Too small volume? */
5396:./FW/ff.c     **** #if _USE_TRIM
5397:./FW/ff.c     ****         tbl[0] = b_vol;
5398:./FW/ff.c     ****         tbl[1] = b_vol + sz_vol - 1;    /* Inform the device the volume area may be erased */
5399:./FW/ff.c     ****         disk_ioctl(pdrv, CTRL_TRIM, tbl);
5400:./FW/ff.c     **** #endif
5401:./FW/ff.c     ****         /* Determine FAT location, data location and number of clusters */
5402:./FW/ff.c     ****         if (!au) {  /* au auto-selection */
5403:./FW/ff.c     ****             au = 8;
5404:./FW/ff.c     ****             if (sz_vol >= 0x80000) { au = 64; }     /* >= 512Ks */
5405:./FW/ff.c     ****             if (sz_vol >= 0x4000000) { au = 256; }  /* >= 64Ms */
5406:./FW/ff.c     ****         }
5407:./FW/ff.c     ****         b_fat = b_vol + 32;                                     /* FAT start at offset 32 */
5408:./FW/ff.c     ****         sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;         /* Number of FAT sectors */
5409:./FW/ff.c     ****         b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1); /* Align data area to the erase blo
5410:./FW/ff.c     ****         if (b_data >= sz_vol / 2) { return FR_MKFS_ABORTED; }       /* Too small volume? */
5411:./FW/ff.c     ****         n_clst = (sz_vol - (b_data - b_vol)) / au;              /* Number of clusters */
5412:./FW/ff.c     ****         if (n_clst < 16) { return FR_MKFS_ABORTED; }                    /* Too few clusters? */
5413:./FW/ff.c     ****         if (n_clst > MAX_EXFAT) { return FR_MKFS_ABORTED; }         /* Too many clusters? */
5414:./FW/ff.c     **** 
5415:./FW/ff.c     ****         szb_bit = (n_clst + 7) / 8;                     /* Size of allocation bitmap */
5416:./FW/ff.c     ****         tbl[0] = (szb_bit + au * ss - 1) / (au * ss);   /* Number of allocation bitmap clusters */
5417:./FW/ff.c     **** 
5418:./FW/ff.c     ****         /* Create a compressed up-case table */
5419:./FW/ff.c     ****         sect = b_data + au * tbl[0];    /* Table start sector */
5420:./FW/ff.c     ****         sum = 0;                        /* Table checksum to be stored in the 82 entry */
5421:./FW/ff.c     ****         st = si = i = j = szb_case = 0;
5422:./FW/ff.c     ****         do {
5423:./FW/ff.c     ****             switch (st) {
5424:./FW/ff.c     ****             case 0:
5425:./FW/ff.c     ****                 ch = ff_wtoupper(si);   /* Get an up-case char */
5426:./FW/ff.c     ****                 if (ch != si) {
5427:./FW/ff.c     ****                     si++;
5428:./FW/ff.c     ****                     break;      /* Store the up-case char if exist */
5429:./FW/ff.c     ****                 }
5430:./FW/ff.c     ****                 for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 129


5431:./FW/ff.c     ****                 if (j >= 128) {
5432:./FW/ff.c     ****                     ch = 0xFFFF;
5433:./FW/ff.c     ****                     st = 2;
5434:./FW/ff.c     ****                     break;  /* Compress the no-case block if run is >= 128 */
5435:./FW/ff.c     ****                 }
5436:./FW/ff.c     ****                 st = 1;         /* Do not compress short run */
5437:./FW/ff.c     ****             /* go to next case */
5438:./FW/ff.c     ****             case 1:
5439:./FW/ff.c     ****                 ch = si++;      /* Fill the short run */
5440:./FW/ff.c     ****                 if (--j == 0) { st = 0; }
5441:./FW/ff.c     ****                 break;
5442:./FW/ff.c     **** 
5443:./FW/ff.c     ****             default:
5444:./FW/ff.c     ****                 ch = (WCHAR)j;
5445:./FW/ff.c     ****                 si += j;    /* Number of chars to skip */
5446:./FW/ff.c     ****                 st = 0;
5447:./FW/ff.c     ****             }
5448:./FW/ff.c     ****             sum = xsum32(buf[i + 0] = (BYTE)ch, sum);       /* Put it into the write buffer */
5449:./FW/ff.c     ****             sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5450:./FW/ff.c     ****             i += 2;
5451:./FW/ff.c     ****             szb_case += 2;
5452:./FW/ff.c     ****             if (!si || i == szb_buf) {      /* Write buffered data when buffer full or end of proce
5453:./FW/ff.c     ****                 n = (i + ss - 1) / ss;
5454:./FW/ff.c     ****                 if (disk_write(pdrv, buf, sect, n) != RES_OK) { return FR_DISK_ERR; }
5455:./FW/ff.c     ****                 sect += n;
5456:./FW/ff.c     ****                 i = 0;
5457:./FW/ff.c     ****             }
5458:./FW/ff.c     ****         } while (si);
5459:./FW/ff.c     ****         tbl[1] = (szb_case + au * ss - 1) / (au * ss);  /* Number of up-case table clusters */
5460:./FW/ff.c     ****         tbl[2] = 1;                                     /* Number of root dir clusters */
5461:./FW/ff.c     **** 
5462:./FW/ff.c     ****         /* Initialize the allocation bitmap */
5463:./FW/ff.c     ****         sect = b_data;
5464:./FW/ff.c     ****         nsect = (szb_bit + ss - 1) / ss;    /* Start of bitmap and number of sectors */
5465:./FW/ff.c     ****         nb = tbl[0] + tbl[1] + tbl[2];                  /* Number of clusters in-use by system */
5466:./FW/ff.c     ****         do {
5467:./FW/ff.c     ****             mem_set(buf, 0, szb_buf);
5468:./FW/ff.c     ****             for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5469:./FW/ff.c     ****             for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5470:./FW/ff.c     ****             n = (nsect > sz_buf) ? sz_buf : nsect;      /* Write the buffered data */
5471:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect, n) != RES_OK) { return FR_DISK_ERR; }
5472:./FW/ff.c     ****             sect += n;
5473:./FW/ff.c     ****             nsect -= n;
5474:./FW/ff.c     ****         } while (nsect);
5475:./FW/ff.c     **** 
5476:./FW/ff.c     ****         /* Initialize the FAT */
5477:./FW/ff.c     ****         sect = b_fat;
5478:./FW/ff.c     ****         nsect = sz_fat; /* Start of FAT and number of FAT sectors */
5479:./FW/ff.c     ****         j = nb = cl = 0;
5480:./FW/ff.c     ****         do {
5481:./FW/ff.c     ****             mem_set(buf, 0, szb_buf);
5482:./FW/ff.c     ****             i = 0;  /* Clear work area and reset write index */
5483:./FW/ff.c     ****             if (cl == 0) {  /* Set entry 0 and 1 */
5484:./FW/ff.c     ****                 st_dword(buf + i, 0xFFFFFFF8);
5485:./FW/ff.c     ****                 i += 4;
5486:./FW/ff.c     ****                 cl++;
5487:./FW/ff.c     ****                 st_dword(buf + i, 0xFFFFFFFF);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 130


5488:./FW/ff.c     ****                 i += 4;
5489:./FW/ff.c     ****                 cl++;
5490:./FW/ff.c     ****             }
5491:./FW/ff.c     ****             do {            /* Create chains of bitmap, up-case and root dir */
5492:./FW/ff.c     ****                 while (nb && i < szb_buf) {         /* Create a chain */
5493:./FW/ff.c     ****                     st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5494:./FW/ff.c     ****                     i += 4;
5495:./FW/ff.c     ****                     cl++;
5496:./FW/ff.c     ****                     nb--;
5497:./FW/ff.c     ****                 }
5498:./FW/ff.c     ****                 if (!nb && j < 3) { nb = tbl[j++]; }    /* Next chain */
5499:./FW/ff.c     ****             } while (nb && i < szb_buf);
5500:./FW/ff.c     ****             n = (nsect > sz_buf) ? sz_buf : nsect;  /* Write the buffered data */
5501:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect, n) != RES_OK) { return FR_DISK_ERR; }
5502:./FW/ff.c     ****             sect += n;
5503:./FW/ff.c     ****             nsect -= n;
5504:./FW/ff.c     ****         } while (nsect);
5505:./FW/ff.c     **** 
5506:./FW/ff.c     ****         /* Initialize the root directory */
5507:./FW/ff.c     ****         mem_set(buf, 0, szb_buf);
5508:./FW/ff.c     ****         buf[SZDIRE * 0 + 0] = 0x83;     /* 83 entry (volume label) */
5509:./FW/ff.c     ****         buf[SZDIRE * 1 + 0] = 0x81;     /* 81 entry (allocation bitmap) */
5510:./FW/ff.c     ****         st_dword(buf + SZDIRE * 1 + 20, 2);
5511:./FW/ff.c     ****         st_dword(buf + SZDIRE * 1 + 24, szb_bit);
5512:./FW/ff.c     ****         buf[SZDIRE * 2 + 0] = 0x82;     /* 82 entry (up-case table) */
5513:./FW/ff.c     ****         st_dword(buf + SZDIRE * 2 + 4, sum);
5514:./FW/ff.c     ****         st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
5515:./FW/ff.c     ****         st_dword(buf + SZDIRE * 2 + 24, szb_case);
5516:./FW/ff.c     ****         sect = b_data + au * (tbl[0] + tbl[1]);
5517:./FW/ff.c     ****         nsect = au; /* Start of the root directory and number of sectors */
5518:./FW/ff.c     ****         do {    /* Fill root directory sectors */
5519:./FW/ff.c     ****             n = (nsect > sz_buf) ? sz_buf : nsect;
5520:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect, n) != RES_OK) { return FR_DISK_ERR; }
5521:./FW/ff.c     ****             mem_set(buf, 0, ss);
5522:./FW/ff.c     ****             sect += n;
5523:./FW/ff.c     ****             nsect -= n;
5524:./FW/ff.c     ****         } while (nsect);
5525:./FW/ff.c     **** 
5526:./FW/ff.c     ****         /* Create two set of the exFAT VBR blocks */
5527:./FW/ff.c     ****         sect = b_vol;
5528:./FW/ff.c     ****         for (n = 0; n < 2; n++) {
5529:./FW/ff.c     ****             /* Main record (+0) */
5530:./FW/ff.c     ****             mem_set(buf, 0, ss);
5531:./FW/ff.c     ****             mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);   /* Boot jump code (x86), OE
5532:./FW/ff.c     ****             st_dword(buf + BPB_VolOfsEx, b_vol);                    /* Volume offset in the physica
5533:./FW/ff.c     ****             st_dword(buf + BPB_TotSecEx, sz_vol);                   /* Volume size [sector] */
5534:./FW/ff.c     ****             st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);            /* FAT offset [sector] */
5535:./FW/ff.c     ****             st_dword(buf + BPB_FatSzEx, sz_fat);                    /* FAT size [sector] */
5536:./FW/ff.c     ****             st_dword(buf + BPB_DataOfsEx, b_data - b_vol);          /* Data offset [sector] */
5537:./FW/ff.c     ****             st_dword(buf + BPB_NumClusEx, n_clst);                  /* Number of clusters */
5538:./FW/ff.c     ****             st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);    /* Root dir cluster # */
5539:./FW/ff.c     ****             st_dword(buf + BPB_VolIDEx, GET_FATTIME());             /* VSN */
5540:./FW/ff.c     ****             st_word(buf + BPB_FSVerEx, 0x100);                      /* File system version (1.00) *
5541:./FW/ff.c     ****             for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ; /* Log2 of 
5542:./FW/ff.c     ****             for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ; /* Log2 of 
5543:./FW/ff.c     ****             buf[BPB_NumFATsEx] = 1;                 /* Number of FATs */
5544:./FW/ff.c     ****             buf[BPB_DrvNumEx] = 0x80;               /* Drive number (for int13) */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 131


5545:./FW/ff.c     ****             st_word(buf + BS_BootCodeEx, 0xFEEB);   /* Boot code (x86) */
5546:./FW/ff.c     ****             st_word(buf + BS_55AA, 0xAA55);         /* Signature (placed here regardless of sector 
5547:./FW/ff.c     ****             for (i = sum = 0; i < ss; i++) {        /* VBR checksum */
5548:./FW/ff.c     ****                 if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) { sum = x
5549:./FW/ff.c     ****             }
5550:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect++, 1) != RES_OK) { return FR_DISK_ERR; }
5551:./FW/ff.c     ****             /* Extended bootstrap record (+1..+8) */
5552:./FW/ff.c     ****             mem_set(buf, 0, ss);
5553:./FW/ff.c     ****             st_word(buf + ss - 2, 0xAA55);  /* Signature (placed at end of sector) */
5554:./FW/ff.c     ****             for (j = 1; j < 9; j++) {
5555:./FW/ff.c     ****                 for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;  /* VBR checksum */
5556:./FW/ff.c     ****                 if (disk_write(pdrv, buf, sect++, 1) != RES_OK) { return FR_DISK_ERR; }
5557:./FW/ff.c     ****             }
5558:./FW/ff.c     ****             /* OEM/Reserved record (+9..+10) */
5559:./FW/ff.c     ****             mem_set(buf, 0, ss);
5560:./FW/ff.c     ****             for ( ; j < 11; j++) {
5561:./FW/ff.c     ****                 for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;  /* VBR checksum */
5562:./FW/ff.c     ****                 if (disk_write(pdrv, buf, sect++, 1) != RES_OK) { return FR_DISK_ERR; }
5563:./FW/ff.c     ****             }
5564:./FW/ff.c     ****             /* Sum record (+11) */
5565:./FW/ff.c     ****             for (i = 0; i < ss; i += 4) { st_dword(buf + i, sum); }     /* Fill with checksum value
5566:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect++, 1) != RES_OK) { return FR_DISK_ERR; }
5567:./FW/ff.c     ****         }
5568:./FW/ff.c     **** 
5569:./FW/ff.c     ****     } else
5570:./FW/ff.c     **** #endif  /* _FS_EXFAT */
5571:./FW/ff.c     ****     {
5572:./FW/ff.c     ****         /* Create an FAT12/16/32 volume */
5573:./FW/ff.c     ****         do {
5574:./FW/ff.c     ****             pau = au;
5575:./FW/ff.c     ****             /* Pre-determine number of clusters and FAT sub-type */
5576:./FW/ff.c     ****             if (fmt == FS_FAT32) {  /* FAT32 volume */
5577:./FW/ff.c     ****                 if (!pau) { /* au auto-selection */
5578:./FW/ff.c     ****                     n = sz_vol / 0x20000;   /* Volume size in unit of 128KS */
5579:./FW/ff.c     ****                     for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;   /* Get from
5580:./FW/ff.c     ****                 }
5581:./FW/ff.c     ****                 n_clst = sz_vol / pau;  /* Number of clusters */
5582:./FW/ff.c     ****                 sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;    /* FAT size [sector] */
5583:./FW/ff.c     ****                 sz_rsv = 32;    /* Number of reserved sectors */
5584:./FW/ff.c     ****                 sz_dir = 0;     /* No static directory */
5585:./FW/ff.c     ****                 if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) { return FR_MKFS_ABORTED; }
5586:./FW/ff.c     ****             } else {                /* FAT12/16 volume */
5587:./FW/ff.c     ****                 if (!pau) { /* au auto-selection */
5588:./FW/ff.c     ****                     n = sz_vol / 0x1000;    /* Volume size in unit of 4KS */
5589:./FW/ff.c     ****                     for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;   /* Get from tab
5590:./FW/ff.c     ****                 }
5591:./FW/ff.c     ****                 n_clst = sz_vol / pau;
5592:./FW/ff.c     ****                 if (n_clst > MAX_FAT12) {
5593:./FW/ff.c     ****                     n = n_clst * 2 + 4;     /* FAT size [byte] */
5594:./FW/ff.c     ****                 } else {
5595:./FW/ff.c     ****                     fmt = FS_FAT12;
5596:./FW/ff.c     ****                     n = (n_clst * 3 + 1) / 2 + 3;   /* FAT size [byte] */
5597:./FW/ff.c     ****                 }
5598:./FW/ff.c     ****                 sz_fat = (n + ss - 1) / ss;     /* FAT size [sector] */
5599:./FW/ff.c     ****                 sz_rsv = 1;                     /* Number of reserved sectors */
5600:./FW/ff.c     ****                 sz_dir = (DWORD)n_rootdir * SZDIRE / ss;    /* Rootdir size [sector] */
5601:./FW/ff.c     ****             }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 132


5602:./FW/ff.c     ****             b_fat = b_vol + sz_rsv;                     /* FAT base */
5603:./FW/ff.c     ****             b_data = b_fat + sz_fat * n_fats + sz_dir;  /* Data base */
5604:./FW/ff.c     **** 
5605:./FW/ff.c     ****             /* Align data base to erase block boundary (for flash memory media) */
5606:./FW/ff.c     ****             n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;   /* Next nearest erase block fro
5607:./FW/ff.c     ****             if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
5608:./FW/ff.c     ****                 sz_rsv += n;
5609:./FW/ff.c     ****                 b_fat += n;
5610:./FW/ff.c     ****             } else {                    /* FAT12/16: Expand FAT size */
5611:./FW/ff.c     ****                 sz_fat += n / n_fats;
5612:./FW/ff.c     ****             }
5613:./FW/ff.c     **** 
5614:./FW/ff.c     ****             /* Determine number of clusters and final check of validity of the FAT sub-type */
5615:./FW/ff.c     ****             if (sz_vol < b_data + pau * 16 - b_vol) { return FR_MKFS_ABORTED; } /* Too small volume
5616:./FW/ff.c     ****             n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5617:./FW/ff.c     ****             if (fmt == FS_FAT32) {
5618:./FW/ff.c     ****                 if (n_clst <= MAX_FAT16) {  /* Too few clusters for FAT32 */
5619:./FW/ff.c     ****                     if (!au && (au = pau / 2) != 0) { continue; }   /* Adjust cluster size and retr
5620:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
5621:./FW/ff.c     ****                 }
5622:./FW/ff.c     ****             }
5623:./FW/ff.c     ****             if (fmt == FS_FAT16) {
5624:./FW/ff.c     ****                 if (n_clst > MAX_FAT16) {   /* Too many clusters for FAT16 */
5625:./FW/ff.c     ****                     if (!au && (pau * 2) <= 64) {
5626:./FW/ff.c     ****                         au = pau * 2;
5627:./FW/ff.c     ****                         continue;       /* Adjust cluster size and retry */
5628:./FW/ff.c     ****                     }
5629:./FW/ff.c     ****                     if ((opt & FM_FAT32)) {
5630:./FW/ff.c     ****                         fmt = FS_FAT32;
5631:./FW/ff.c     ****                         continue;   /* Switch type to FAT32 and retry */
5632:./FW/ff.c     ****                     }
5633:./FW/ff.c     ****                     if (!au && (au = pau * 2) <= 128) { continue; } /* Adjust cluster size and retr
5634:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
5635:./FW/ff.c     ****                 }
5636:./FW/ff.c     ****                 if  (n_clst <= MAX_FAT12) { /* Too few clusters for FAT16 */
5637:./FW/ff.c     ****                     if (!au && (au = pau * 2) <= 128) { continue; } /* Adjust cluster size and retr
5638:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
5639:./FW/ff.c     ****                 }
5640:./FW/ff.c     ****             }
5641:./FW/ff.c     ****             if (fmt == FS_FAT12 && n_clst > MAX_FAT12) { return FR_MKFS_ABORTED; }  /* Too many clu
5642:./FW/ff.c     **** 
5643:./FW/ff.c     ****             /* Ok, it is the valid cluster configuration */
5644:./FW/ff.c     ****             break;
5645:./FW/ff.c     ****         } while (1);
5646:./FW/ff.c     **** 
5647:./FW/ff.c     **** #if _USE_TRIM
5648:./FW/ff.c     ****         tbl[0] = b_vol;
5649:./FW/ff.c     ****         tbl[1] = b_vol + sz_vol - 1;    /* Inform the device the volume area can be erased */
5650:./FW/ff.c     ****         disk_ioctl(pdrv, CTRL_TRIM, tbl);
5651:./FW/ff.c     **** #endif
5652:./FW/ff.c     ****         /* Create FAT VBR */
5653:./FW/ff.c     ****         mem_set(buf, 0, ss);
5654:./FW/ff.c     ****         mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name 
5655:./FW/ff.c     ****         st_word(buf + BPB_BytsPerSec, ss);              /* Sector size [byte] */
5656:./FW/ff.c     ****         buf[BPB_SecPerClus] = (BYTE)pau;                /* Cluster size [sector] */
5657:./FW/ff.c     ****         st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);    /* Size of reserved area */
5658:./FW/ff.c     ****         buf[BPB_NumFATs] = (BYTE)n_fats;                /* Number of FATs */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 133


5659:./FW/ff.c     ****         st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));   /* Number of ro
5660:./FW/ff.c     ****         if (sz_vol < 0x10000) {
5661:./FW/ff.c     ****             st_word(buf + BPB_TotSec16, (WORD)sz_vol);  /* Volume size in 16-bit LBA */
5662:./FW/ff.c     ****         } else {
5663:./FW/ff.c     ****             st_dword(buf + BPB_TotSec32, sz_vol);       /* Volume size in 32-bit LBA */
5664:./FW/ff.c     ****         }
5665:./FW/ff.c     ****         buf[BPB_Media] = 0xF8;                          /* Media descriptor byte */
5666:./FW/ff.c     ****         st_word(buf + BPB_SecPerTrk, 63);               /* Number of sectors per track (for int13) 
5667:./FW/ff.c     ****         st_word(buf + BPB_NumHeads, 255);               /* Number of heads (for int13) */
5668:./FW/ff.c     ****         st_dword(buf + BPB_HiddSec, b_vol);             /* Volume offset in the physical drive [sec
5669:./FW/ff.c     ****         if (fmt == FS_FAT32) {
5670:./FW/ff.c     ****             st_dword(buf + BS_VolID32, GET_FATTIME());  /* VSN */
5671:./FW/ff.c     ****             st_dword(buf + BPB_FATSz32, sz_fat);        /* FAT size [sector] */
5672:./FW/ff.c     ****             st_dword(buf + BPB_RootClus32, 2);          /* Root directory cluster # (2) */
5673:./FW/ff.c     ****             st_word(buf + BPB_FSInfo32, 1);             /* Offset of FSINFO sector (VBR + 1) */
5674:./FW/ff.c     ****             st_word(buf + BPB_BkBootSec32, 6);          /* Offset of backup VBR (VBR + 6) */
5675:./FW/ff.c     ****             buf[BS_DrvNum32] = 0x80;                    /* Drive number (for int13) */
5676:./FW/ff.c     ****             buf[BS_BootSig32] = 0x29;                   /* Extended boot signature */
5677:./FW/ff.c     ****             mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);   /* Volume label, FAT signat
5678:./FW/ff.c     ****         } else {
5679:./FW/ff.c     ****             st_dword(buf + BS_VolID, GET_FATTIME());    /* VSN */
5680:./FW/ff.c     ****             st_word(buf + BPB_FATSz16, (WORD)sz_fat);   /* FAT size [sector] */
5681:./FW/ff.c     ****             buf[BS_DrvNum] = 0x80;                      /* Drive number (for int13) */
5682:./FW/ff.c     ****             buf[BS_BootSig] = 0x29;                     /* Extended boot signature */
5683:./FW/ff.c     ****             mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature 
5684:./FW/ff.c     ****         }
5685:./FW/ff.c     ****         st_word(buf + BS_55AA, 0xAA55);                 /* Signature (offset is fixed here regardle
5686:./FW/ff.c     ****         if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) { return FR_DISK_ERR; }  /* Write it to the 
5687:./FW/ff.c     **** 
5688:./FW/ff.c     ****         /* Create FSINFO record if needed */
5689:./FW/ff.c     ****         if (fmt == FS_FAT32) {
5690:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 6, 1);        /* Write backup VBR (VBR + 6) */
5691:./FW/ff.c     ****             mem_set(buf, 0, ss);
5692:./FW/ff.c     ****             st_dword(buf + FSI_LeadSig, 0x41615252);
5693:./FW/ff.c     ****             st_dword(buf + FSI_StrucSig, 0x61417272);
5694:./FW/ff.c     ****             st_dword(buf + FSI_Free_Count, n_clst - 1); /* Number of free clusters */
5695:./FW/ff.c     ****             st_dword(buf + FSI_Nxt_Free, 2);            /* Last allocated cluster# */
5696:./FW/ff.c     ****             st_word(buf + BS_55AA, 0xAA55);
5697:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 7, 1);        /* Write backup FSINFO (VBR + 7) */
5698:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 1, 1);        /* Write original FSINFO (VBR + 1) */
5699:./FW/ff.c     ****         }
5700:./FW/ff.c     **** 
5701:./FW/ff.c     ****         /* Initialize FAT area */
5702:./FW/ff.c     ****         mem_set(buf, 0, (UINT)szb_buf);
5703:./FW/ff.c     ****         sect = b_fat;       /* FAT start sector */
5704:./FW/ff.c     ****         for (i = 0; i < n_fats; i++) {          /* Initialize FATs each */
5705:./FW/ff.c     ****             if (fmt == FS_FAT32) {
5706:./FW/ff.c     ****                 st_dword(buf + 0, 0xFFFFFFF8);  /* Entry 0 */
5707:./FW/ff.c     ****                 st_dword(buf + 4, 0xFFFFFFFF);  /* Entry 1 */
5708:./FW/ff.c     ****                 st_dword(buf + 8, 0x0FFFFFFF);  /* Entry 2 (root directory) */
5709:./FW/ff.c     ****             } else {
5710:./FW/ff.c     ****                 st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);   /* Entry 0 and 1 */
5711:./FW/ff.c     ****             }
5712:./FW/ff.c     ****             nsect = sz_fat;     /* Number of FAT sectors */
5713:./FW/ff.c     ****             do {    /* Fill FAT sectors */
5714:./FW/ff.c     ****                 n = (nsect > sz_buf) ? sz_buf : nsect;
5715:./FW/ff.c     ****                 if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) { return FR_DISK_ERR; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 134


5716:./FW/ff.c     ****                 mem_set(buf, 0, ss);
5717:./FW/ff.c     ****                 sect += n;
5718:./FW/ff.c     ****                 nsect -= n;
5719:./FW/ff.c     ****             } while (nsect);
5720:./FW/ff.c     ****         }
5721:./FW/ff.c     **** 
5722:./FW/ff.c     ****         /* Initialize root directory (fill with zero) */
5723:./FW/ff.c     ****         nsect = (fmt == FS_FAT32) ? pau : sz_dir;   /* Number of root directory sectors */
5724:./FW/ff.c     ****         do {
5725:./FW/ff.c     ****             n = (nsect > sz_buf) ? sz_buf : nsect;
5726:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) { return FR_DISK_ERR; }
5727:./FW/ff.c     ****             sect += n;
5728:./FW/ff.c     ****             nsect -= n;
5729:./FW/ff.c     ****         } while (nsect);
5730:./FW/ff.c     ****     }
5731:./FW/ff.c     **** 
5732:./FW/ff.c     ****     /* Determine system ID in the partition table */
5733:./FW/ff.c     ****     if (_FS_EXFAT && fmt == FS_EXFAT) {
5734:./FW/ff.c     ****         sys = 0x07;         /* HPFS/NTFS/exFAT */
5735:./FW/ff.c     ****     } else {
5736:./FW/ff.c     ****         if (fmt == FS_FAT32) {
5737:./FW/ff.c     ****             sys = 0x0C;     /* FAT32X */
5738:./FW/ff.c     ****         } else {
5739:./FW/ff.c     ****             if (sz_vol >= 0x10000) {
5740:./FW/ff.c     ****                 sys = 0x06; /* FAT12/16 (>=64KS) */
5741:./FW/ff.c     ****             } else {
5742:./FW/ff.c     ****                 sys = (fmt == FS_FAT16) ? 0x04 : 0x01;  /* FAT16 (<64KS) : FAT12 (<64KS) */
5743:./FW/ff.c     ****             }
5744:./FW/ff.c     ****         }
5745:./FW/ff.c     ****     }
5746:./FW/ff.c     **** 
5747:./FW/ff.c     ****     /* Update partition information */
5748:./FW/ff.c     ****     if (_MULTI_PARTITION && part != 0) {    /* Created in the existing partition */
5749:./FW/ff.c     ****         /* Update system ID in the partition table */
5750:./FW/ff.c     ****         if (disk_read(pdrv, buf, 0, 1) != RES_OK) { return FR_DISK_ERR; }   /* Read the MBR */
5751:./FW/ff.c     ****         buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;        /* Set system ID */
5752:./FW/ff.c     ****         if (disk_write(pdrv, buf, 0, 1) != RES_OK) { return FR_DISK_ERR; }  /* Write it back to the
5753:./FW/ff.c     ****     } else {                                /* Created as a new single partition */
5754:./FW/ff.c     ****         if (!(opt & FM_SFD)) {  /* Create partition table if in FDISK format */
5755:./FW/ff.c     ****             mem_set(buf, 0, ss);
5756:./FW/ff.c     ****             st_word(buf + BS_55AA, 0xAA55);     /* MBR signature */
5757:./FW/ff.c     ****             pte = buf + MBR_Table;              /* Create partition table for single partition in t
5758:./FW/ff.c     ****             pte[PTE_Boot] = 0;                  /* Boot indicator */
5759:./FW/ff.c     ****             pte[PTE_StHead] = 1;                /* Start head */
5760:./FW/ff.c     ****             pte[PTE_StSec] = 1;                 /* Start sector */
5761:./FW/ff.c     ****             pte[PTE_StCyl] = 0;                 /* Start cylinder */
5762:./FW/ff.c     ****             pte[PTE_System] = sys;              /* System type */
5763:./FW/ff.c     ****             n = (b_vol + sz_vol) / (63 * 255);  /* (End CHS may be invalid) */
5764:./FW/ff.c     ****             pte[PTE_EdHead] = 254;              /* End head */
5765:./FW/ff.c     ****             pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);   /* End sector */
5766:./FW/ff.c     ****             pte[PTE_EdCyl] = (BYTE)n;           /* End cylinder */
5767:./FW/ff.c     ****             st_dword(pte + PTE_StLba, b_vol);   /* Start offset in LBA */
5768:./FW/ff.c     ****             st_dword(pte + PTE_SizLba, sz_vol); /* Size in sectors */
5769:./FW/ff.c     ****             if (disk_write(pdrv, buf, 0, 1) != RES_OK) { return FR_DISK_ERR; }  /* Write it to the 
5770:./FW/ff.c     ****         }
5771:./FW/ff.c     ****     }
5772:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 135


5773:./FW/ff.c     ****     if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) { return FR_DISK_ERR; }
5774:./FW/ff.c     **** 
5775:./FW/ff.c     ****     return FR_OK;
5776:./FW/ff.c     **** }
5777:./FW/ff.c     **** 
5778:./FW/ff.c     **** 
5779:./FW/ff.c     **** 
5780:./FW/ff.c     **** #if _MULTI_PARTITION
5781:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5782:./FW/ff.c     **** /* Create partition table on the physical drive                          */
5783:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5784:./FW/ff.c     **** 
5785:./FW/ff.c     **** FRESULT f_fdisk (
5786:./FW/ff.c     ****     BYTE pdrv,          /* Physical drive number */
5787:./FW/ff.c     ****     const DWORD* szt,   /* Pointer to the size table for each partitions */
5788:./FW/ff.c     ****     void* work          /* Pointer to the working buffer */
5789:./FW/ff.c     **** ) {
5790:./FW/ff.c     ****     UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5791:./FW/ff.c     ****     BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5792:./FW/ff.c     ****     DSTATUS stat;
5793:./FW/ff.c     ****     DWORD sz_disk, sz_part, s_part;
5794:./FW/ff.c     **** 
5795:./FW/ff.c     **** 
5796:./FW/ff.c     ****     stat = disk_initialize(pdrv);
5797:./FW/ff.c     ****     if (stat & STA_NOINIT) { return FR_NOT_READY; }
5798:./FW/ff.c     ****     if (stat & STA_PROTECT) { return FR_WRITE_PROTECTED; }
5799:./FW/ff.c     ****     if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) { return FR_DISK_ERR; }
5800:./FW/ff.c     **** 
5801:./FW/ff.c     ****     /* Determine the CHS without any consideration of the drive geometry */
5802:./FW/ff.c     ****     for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5803:./FW/ff.c     ****     if (n == 256) { n--; }
5804:./FW/ff.c     ****     e_hd = n - 1;
5805:./FW/ff.c     ****     sz_cyl = 63 * n;
5806:./FW/ff.c     ****     tot_cyl = sz_disk / sz_cyl;
5807:./FW/ff.c     **** 
5808:./FW/ff.c     ****     /* Create partition table */
5809:./FW/ff.c     ****     mem_set(buf, 0, _MAX_SS);
5810:./FW/ff.c     ****     p = buf + MBR_Table;
5811:./FW/ff.c     ****     b_cyl = 0;
5812:./FW/ff.c     ****     for (i = 0; i < 4; i++, p += SZ_PTE) {
5813:./FW/ff.c     ****         p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl; /* Number of cy
5814:./FW/ff.c     ****         if (!p_cyl) { continue; }
5815:./FW/ff.c     ****         s_part = (DWORD)sz_cyl * b_cyl;
5816:./FW/ff.c     ****         sz_part = (DWORD)sz_cyl * p_cyl;
5817:./FW/ff.c     ****         if (i == 0) {   /* Exclude first track of cylinder 0 */
5818:./FW/ff.c     ****             s_hd = 1;
5819:./FW/ff.c     ****             s_part += 63;
5820:./FW/ff.c     ****             sz_part -= 63;
5821:./FW/ff.c     ****         } else {
5822:./FW/ff.c     ****             s_hd = 0;
5823:./FW/ff.c     ****         }
5824:./FW/ff.c     ****         e_cyl = b_cyl + p_cyl - 1;  /* End cylinder */
5825:./FW/ff.c     ****         if (e_cyl >= tot_cyl) { return FR_INVALID_PARAMETER; }
5826:./FW/ff.c     **** 
5827:./FW/ff.c     ****         /* Set partition table */
5828:./FW/ff.c     ****         p[1] = s_hd;                        /* Start head */
5829:./FW/ff.c     ****         p[2] = (BYTE)((b_cyl >> 2) + 1);    /* Start sector */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 136


5830:./FW/ff.c     ****         p[3] = (BYTE)b_cyl;                 /* Start cylinder */
5831:./FW/ff.c     ****         p[4] = 0x07;                        /* System type (temporary setting) */
5832:./FW/ff.c     ****         p[5] = e_hd;                        /* End head */
5833:./FW/ff.c     ****         p[6] = (BYTE)((e_cyl >> 2) + 63);   /* End sector */
5834:./FW/ff.c     ****         p[7] = (BYTE)e_cyl;                 /* End cylinder */
5835:./FW/ff.c     ****         st_dword(p + 8, s_part);            /* Start sector in LBA */
5836:./FW/ff.c     ****         st_dword(p + 12, sz_part);          /* Number of sectors */
5837:./FW/ff.c     **** 
5838:./FW/ff.c     ****         /* Next partition */
5839:./FW/ff.c     ****         b_cyl += p_cyl;
5840:./FW/ff.c     ****     }
5841:./FW/ff.c     ****     st_word(p, 0xAA55);
5842:./FW/ff.c     **** 
5843:./FW/ff.c     ****     /* Write it to the MBR */
5844:./FW/ff.c     ****     return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR
5845:./FW/ff.c     **** }
5846:./FW/ff.c     **** 
5847:./FW/ff.c     **** #endif /* _MULTI_PARTITION */
5848:./FW/ff.c     **** #endif /* _USE_MKFS && !_FS_READONLY */
5849:./FW/ff.c     **** 
5850:./FW/ff.c     **** 
5851:./FW/ff.c     **** 
5852:./FW/ff.c     **** 
5853:./FW/ff.c     **** #if _USE_STRFUNC
5854:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5855:./FW/ff.c     **** /* Get a string from the file                                            */
5856:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5857:./FW/ff.c     **** 
5858:./FW/ff.c     **** TCHAR* f_gets (
5859:./FW/ff.c     ****     TCHAR* buff,    /* Pointer to the string buffer to read */
5860:./FW/ff.c     ****     int len,        /* Size of string buffer (characters) */
5861:./FW/ff.c     ****     FIL* fp         /* Pointer to the file object */
5862:./FW/ff.c     **** ) {
5863:./FW/ff.c     ****     int n = 0;
5864:./FW/ff.c     ****     TCHAR c, *p = buff;
5865:./FW/ff.c     ****     BYTE s[2];
5866:./FW/ff.c     ****     UINT rc;
5867:./FW/ff.c     **** 
5868:./FW/ff.c     **** 
5869:./FW/ff.c     ****     while (n < len - 1) {   /* Read characters until buffer gets filled */
5870:./FW/ff.c     **** #if _LFN_UNICODE
5871:./FW/ff.c     **** #if _STRF_ENCODE == 3       /* Read a character in UTF-8 */
5872:./FW/ff.c     ****         f_read(fp, s, 1, &rc);
5873:./FW/ff.c     ****         if (rc != 1) { break; }
5874:./FW/ff.c     ****         c = s[0];
5875:./FW/ff.c     ****         if (c >= 0x80) {
5876:./FW/ff.c     ****             if (c < 0xC0) { continue; } /* Skip stray trailer */
5877:./FW/ff.c     ****             if (c < 0xE0) {         /* Two-byte sequence (0x80-0x7FF) */
5878:./FW/ff.c     ****                 f_read(fp, s, 1, &rc);
5879:./FW/ff.c     ****                 if (rc != 1) { break; }
5880:./FW/ff.c     ****                 c = (c & 0x1F) << 6 | (s[0] & 0x3F);
5881:./FW/ff.c     ****                 if (c < 0x80) { c = '?'; }  /* Reject invalid code range */
5882:./FW/ff.c     ****             } else {
5883:./FW/ff.c     ****                 if (c < 0xF0) {     /* Three-byte sequence (0x800-0xFFFF) */
5884:./FW/ff.c     ****                     f_read(fp, s, 2, &rc);
5885:./FW/ff.c     ****                     if (rc != 2) { break; }
5886:./FW/ff.c     ****                     c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 137


5887:./FW/ff.c     ****                     if (c < 0x800) { c = '?'; } /* Reject invalid code range */
5888:./FW/ff.c     ****                 } else {            /* Reject four-byte sequence */
5889:./FW/ff.c     ****                     c = '?';
5890:./FW/ff.c     ****                 }
5891:./FW/ff.c     ****             }
5892:./FW/ff.c     ****         }
5893:./FW/ff.c     **** #elif _STRF_ENCODE == 2     /* Read a character in UTF-16BE */
5894:./FW/ff.c     ****         f_read(fp, s, 2, &rc);
5895:./FW/ff.c     ****         if (rc != 2) { break; }
5896:./FW/ff.c     ****         c = s[1] + (s[0] << 8);
5897:./FW/ff.c     **** #elif _STRF_ENCODE == 1     /* Read a character in UTF-16LE */
5898:./FW/ff.c     ****         f_read(fp, s, 2, &rc);
5899:./FW/ff.c     ****         if (rc != 2) { break; }
5900:./FW/ff.c     ****         c = s[0] + (s[1] << 8);
5901:./FW/ff.c     **** #else                       /* Read a character in ANSI/OEM */
5902:./FW/ff.c     ****         f_read(fp, s, 1, &rc);
5903:./FW/ff.c     ****         if (rc != 1) { break; }
5904:./FW/ff.c     ****         c = s[0];
5905:./FW/ff.c     ****         if (IsDBCS1(c)) {
5906:./FW/ff.c     ****             f_read(fp, s, 1, &rc);
5907:./FW/ff.c     ****             if (rc != 1) { break; }
5908:./FW/ff.c     ****             c = (c << 8) + s[0];
5909:./FW/ff.c     ****         }
5910:./FW/ff.c     ****         c = ff_convert(c, 1);   /* OEM -> Unicode */
5911:./FW/ff.c     ****         if (!c) { c = '?'; }
5912:./FW/ff.c     **** #endif
5913:./FW/ff.c     **** #else                       /* Read a character without conversion */
5914:./FW/ff.c     ****         f_read(fp, s, 1, &rc);
5915:./FW/ff.c     ****         if (rc != 1) { break; }
5916:./FW/ff.c     ****         c = s[0];
5917:./FW/ff.c     **** #endif
5918:./FW/ff.c     ****         if (_USE_STRFUNC == 2 && c == '\r') { continue; }   /* Strip '\r' */
5919:./FW/ff.c     ****         *p++ = c;
5920:./FW/ff.c     ****         n++;
5921:./FW/ff.c     ****         if (c == '\n') { break; }       /* Break on EOL */
5922:./FW/ff.c     ****     }
5923:./FW/ff.c     ****     *p = 0;
5924:./FW/ff.c     ****     return n ? buff : 0;            /* When no data read (eof or error), return with error. */
5925:./FW/ff.c     **** }
5926:./FW/ff.c     **** 
5927:./FW/ff.c     **** 
5928:./FW/ff.c     **** 
5929:./FW/ff.c     **** 
5930:./FW/ff.c     **** #if !_FS_READONLY
5931:./FW/ff.c     **** #include <stdarg.h>
5932:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5933:./FW/ff.c     **** /* Put a character to the file                                           */
5934:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
5935:./FW/ff.c     **** 
5936:./FW/ff.c     **** typedef struct {
5937:./FW/ff.c     ****     FIL *fp;        /* Ptr to the writing file */
5938:./FW/ff.c     ****     int idx, nchr;  /* Write index of buf[] (-1:error), number of chars written */
5939:./FW/ff.c     ****     BYTE buf[64];   /* Write buffer */
5940:./FW/ff.c     **** } putbuff;
5941:./FW/ff.c     **** 
5942:./FW/ff.c     **** 
5943:./FW/ff.c     **** static
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 138


5944:./FW/ff.c     **** void putc_bfd (     /* Buffered write with code conversion */
5945:./FW/ff.c     ****     putbuff* pb,
5946:./FW/ff.c     ****     TCHAR c
5947:./FW/ff.c     **** ) {
5948:./FW/ff.c     ****     UINT bw;
5949:./FW/ff.c     ****     int i;
5950:./FW/ff.c     **** 
5951:./FW/ff.c     **** 
5952:./FW/ff.c     ****     if (_USE_STRFUNC == 2 && c == '\n') {    /* LF -> CRLF conversion */
5953:./FW/ff.c     ****         putc_bfd(pb, '\r');
5954:./FW/ff.c     ****     }
5955:./FW/ff.c     **** 
5956:./FW/ff.c     ****     i = pb->idx;        /* Write index of pb->buf[] */
5957:./FW/ff.c     ****     if (i < 0) { return; }
5958:./FW/ff.c     **** 
5959:./FW/ff.c     **** #if _LFN_UNICODE
5960:./FW/ff.c     **** #if _STRF_ENCODE == 3           /* Write a character in UTF-8 */
5961:./FW/ff.c     ****     if (c < 0x80) {             /* 7-bit */
5962:./FW/ff.c     ****         pb->buf[i++] = (BYTE)c;
5963:./FW/ff.c     ****     } else {
5964:./FW/ff.c     ****         if (c < 0x800) {        /* 11-bit */
5965:./FW/ff.c     ****             pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
5966:./FW/ff.c     ****         } else {                /* 16-bit */
5967:./FW/ff.c     ****             pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
5968:./FW/ff.c     ****             pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
5969:./FW/ff.c     ****         }
5970:./FW/ff.c     ****         pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
5971:./FW/ff.c     ****     }
5972:./FW/ff.c     **** #elif _STRF_ENCODE == 2         /* Write a character in UTF-16BE */
5973:./FW/ff.c     ****     pb->buf[i++] = (BYTE)(c >> 8);
5974:./FW/ff.c     ****     pb->buf[i++] = (BYTE)c;
5975:./FW/ff.c     **** #elif _STRF_ENCODE == 1         /* Write a character in UTF-16LE */
5976:./FW/ff.c     ****     pb->buf[i++] = (BYTE)c;
5977:./FW/ff.c     ****     pb->buf[i++] = (BYTE)(c >> 8);
5978:./FW/ff.c     **** #else                           /* Write a character in ANSI/OEM */
5979:./FW/ff.c     ****     c = ff_convert(c, 0);   /* Unicode -> OEM */
5980:./FW/ff.c     ****     if (!c) { c = '?'; }
5981:./FW/ff.c     ****     if (c >= 0x100)
5982:./FW/ff.c     ****     { pb->buf[i++] = (BYTE)(c >> 8); }
5983:./FW/ff.c     ****     pb->buf[i++] = (BYTE)c;
5984:./FW/ff.c     **** #endif
5985:./FW/ff.c     **** #else                           /* Write a character without conversion */
5986:./FW/ff.c     ****     pb->buf[i++] = (BYTE)c;
5987:./FW/ff.c     **** #endif
5988:./FW/ff.c     **** 
5989:./FW/ff.c     ****     if (i >= (int)(sizeof pb->buf) - 3) {   /* Write buffered characters to the file */
5990:./FW/ff.c     ****         f_write(pb->fp, pb->buf, (UINT)i, &bw);
5991:./FW/ff.c     ****         i = (bw == (UINT)i) ? 0 : -1;
5992:./FW/ff.c     ****     }
5993:./FW/ff.c     ****     pb->idx = i;
5994:./FW/ff.c     ****     pb->nchr++;
5995:./FW/ff.c     **** }
5996:./FW/ff.c     **** 
5997:./FW/ff.c     **** 
5998:./FW/ff.c     **** static
5999:./FW/ff.c     **** int putc_flush (        /* Flush left characters in the buffer */
6000:./FW/ff.c     ****     putbuff* pb
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 139


6001:./FW/ff.c     **** ) {
6002:./FW/ff.c     ****     UINT nw;
6003:./FW/ff.c     **** 
6004:./FW/ff.c     ****     if (   pb->idx >= 0 /* Flush buffered characters to the file */
6005:./FW/ff.c     ****             && f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
6006:./FW/ff.c     ****             && (UINT)pb->idx == nw) { return pb->nchr; }
6007:./FW/ff.c     ****     return EOF;
6008:./FW/ff.c     **** }
6009:./FW/ff.c     **** 
6010:./FW/ff.c     **** 
6011:./FW/ff.c     **** static
6012:./FW/ff.c     **** void putc_init (        /* Initialize write buffer */
6013:./FW/ff.c     ****     putbuff* pb,
6014:./FW/ff.c     ****     FIL* fp
6015:./FW/ff.c     **** ) {
 1733              		.loc 1 6015 3 is_stmt 1 view -0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 0
 1736              		@ frame_needed = 0, uses_anonymous_args = 0
 1737              		@ link register save eliminated.
6016:./FW/ff.c     ****     pb->fp = fp;
 1738              		.loc 1 6016 5 view .LVU525
 1739              		.loc 1 6016 12 is_stmt 0 view .LVU526
 1740 0000 0160     		str	r1, [r0]
6017:./FW/ff.c     ****     pb->nchr = pb->idx = 0;
 1741              		.loc 1 6017 5 is_stmt 1 view .LVU527
 1742              		.loc 1 6017 24 is_stmt 0 view .LVU528
 1743 0002 0023     		movs	r3, #0
 1744 0004 4360     		str	r3, [r0, #4]
 1745              		.loc 1 6017 14 view .LVU529
 1746 0006 8360     		str	r3, [r0, #8]
6018:./FW/ff.c     **** }
 1747              		.loc 1 6018 1 view .LVU530
 1748 0008 7047     		bx	lr
 1749              		.cfi_endproc
 1750              	.LFE997:
 1752              		.section	.text.validate,"ax",%progbits
 1753              		.align	1
 1754              		.syntax unified
 1755              		.thumb
 1756              		.thumb_func
 1757              		.fpu fpv4-sp-d16
 1759              	validate:
 1760              	.LVL186:
 1761              	.LFB976:
3221:./FW/ff.c     ****     FRESULT res = FR_INVALID_OBJECT;
 1762              		.loc 1 3221 3 is_stmt 1 view -0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
3221:./FW/ff.c     ****     FRESULT res = FR_INVALID_OBJECT;
 1766              		.loc 1 3221 3 is_stmt 0 view .LVU532
 1767 0000 38B5     		push	{r3, r4, r5, lr}
 1768              	.LCFI21:
 1769              		.cfi_def_cfa_offset 16
 1770              		.cfi_offset 3, -16
 1771              		.cfi_offset 4, -12
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 140


 1772              		.cfi_offset 5, -8
 1773              		.cfi_offset 14, -4
 1774 0002 0D46     		mov	r5, r1
3222:./FW/ff.c     **** 
 1775              		.loc 1 3222 5 is_stmt 1 view .LVU533
 1776              	.LVL187:
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1777              		.loc 1 3225 5 view .LVU534
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1778              		.loc 1 3225 8 is_stmt 0 view .LVU535
 1779 0004 0446     		mov	r4, r0
 1780 0006 98B1     		cbz	r0, .L161
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1781              		.loc 1 3225 19 discriminator 1 view .LVU536
 1782 0008 0368     		ldr	r3, [r0]
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1783              		.loc 1 3225 13 discriminator 1 view .LVU537
 1784 000a 9BB1     		cbz	r3, .L162
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1785              		.loc 1 3225 34 discriminator 2 view .LVU538
 1786 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1787              		.loc 1 3225 24 discriminator 2 view .LVU539
 1788 000e A2B1     		cbz	r2, .L163
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1789              		.loc 1 3225 50 discriminator 3 view .LVU540
 1790 0010 8188     		ldrh	r1, [r0, #4]
 1791              	.LVL188:
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1792              		.loc 1 3225 65 discriminator 3 view .LVU541
 1793 0012 DA88     		ldrh	r2, [r3, #6]
3225:./FW/ff.c     **** #if _FS_REENTRANT
 1794              		.loc 1 3225 44 discriminator 3 view .LVU542
 1795 0014 9142     		cmp	r1, r2
 1796 0016 03D0     		beq	.L167
3222:./FW/ff.c     **** 
 1797              		.loc 1 3222 13 view .LVU543
 1798 0018 0920     		movs	r0, #9
 1799              	.LVL189:
3242:./FW/ff.c     ****     return res;
 1800              		.loc 1 3242 36 view .LVU544
 1801 001a 0024     		movs	r4, #0
 1802              	.LVL190:
 1803              	.L160:
3242:./FW/ff.c     ****     return res;
 1804              		.loc 1 3242 9 discriminator 4 view .LVU545
 1805 001c 2C60     		str	r4, [r5]
3243:./FW/ff.c     **** }
 1806              		.loc 1 3243 5 is_stmt 1 discriminator 4 view .LVU546
3244:./FW/ff.c     **** 
 1807              		.loc 1 3244 1 is_stmt 0 discriminator 4 view .LVU547
 1808 001e 38BD     		pop	{r3, r4, r5, pc}
 1809              	.LVL191:
 1810              	.L167:
3237:./FW/ff.c     ****             res = FR_OK;
 1811              		.loc 1 3237 9 is_stmt 1 view .LVU548
3237:./FW/ff.c     ****             res = FR_OK;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 141


 1812              		.loc 1 3237 15 is_stmt 0 view .LVU549
 1813 0020 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1814              	.LVL192:
3237:./FW/ff.c     ****             res = FR_OK;
 1815              		.loc 1 3237 15 view .LVU550
 1816 0022 FFF7FEFF 		bl	disk_status
 1817              	.LVL193:
3237:./FW/ff.c     ****             res = FR_OK;
 1818              		.loc 1 3237 12 view .LVU551
 1819 0026 10F00100 		ands	r0, r0, #1
 1820 002a 09D1     		bne	.L165
3238:./FW/ff.c     ****         }
 1821              		.loc 1 3238 13 is_stmt 1 view .LVU552
 1822              	.LVL194:
3242:./FW/ff.c     ****     return res;
 1823              		.loc 1 3242 5 view .LVU553
3242:./FW/ff.c     ****     return res;
 1824              		.loc 1 3242 36 is_stmt 0 view .LVU554
 1825 002c 2468     		ldr	r4, [r4]
 1826              	.LVL195:
3242:./FW/ff.c     ****     return res;
 1827              		.loc 1 3242 36 view .LVU555
 1828 002e F5E7     		b	.L160
 1829              	.LVL196:
 1830              	.L161:
3222:./FW/ff.c     **** 
 1831              		.loc 1 3222 13 view .LVU556
 1832 0030 0920     		movs	r0, #9
 1833              	.LVL197:
3222:./FW/ff.c     **** 
 1834              		.loc 1 3222 13 view .LVU557
 1835 0032 F3E7     		b	.L160
 1836              	.LVL198:
 1837              	.L162:
3242:./FW/ff.c     ****     return res;
 1838              		.loc 1 3242 36 view .LVU558
 1839 0034 1C46     		mov	r4, r3
3222:./FW/ff.c     **** 
 1840              		.loc 1 3222 13 view .LVU559
 1841 0036 0920     		movs	r0, #9
 1842              	.LVL199:
3222:./FW/ff.c     **** 
 1843              		.loc 1 3222 13 view .LVU560
 1844 0038 F0E7     		b	.L160
 1845              	.LVL200:
 1846              	.L163:
3222:./FW/ff.c     **** 
 1847              		.loc 1 3222 13 view .LVU561
 1848 003a 0920     		movs	r0, #9
 1849              	.LVL201:
3242:./FW/ff.c     ****     return res;
 1850              		.loc 1 3242 36 view .LVU562
 1851 003c 0024     		movs	r4, #0
 1852              	.LVL202:
3242:./FW/ff.c     ****     return res;
 1853              		.loc 1 3242 36 view .LVU563
 1854 003e EDE7     		b	.L160
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 142


 1855              	.LVL203:
 1856              	.L165:
3222:./FW/ff.c     **** 
 1857              		.loc 1 3222 13 view .LVU564
 1858 0040 0920     		movs	r0, #9
3242:./FW/ff.c     ****     return res;
 1859              		.loc 1 3242 36 view .LVU565
 1860 0042 0024     		movs	r4, #0
 1861              	.LVL204:
3242:./FW/ff.c     ****     return res;
 1862              		.loc 1 3242 36 view .LVU566
 1863 0044 EAE7     		b	.L160
 1864              		.cfi_endproc
 1865              	.LFE976:
 1867              		.section	.text.sync_window,"ax",%progbits
 1868              		.align	1
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1872              		.fpu fpv4-sp-d16
 1874              	sync_window:
 1875              	.LVL205:
 1876              	.LFB952:
 883:./FW/ff.c     ****     DWORD wsect;
 1877              		.loc 1 883 3 is_stmt 1 view -0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 883:./FW/ff.c     ****     DWORD wsect;
 1881              		.loc 1 883 3 is_stmt 0 view .LVU568
 1882 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1883              	.LCFI22:
 1884              		.cfi_def_cfa_offset 24
 1885              		.cfi_offset 4, -24
 1886              		.cfi_offset 5, -20
 1887              		.cfi_offset 6, -16
 1888              		.cfi_offset 7, -12
 1889              		.cfi_offset 8, -8
 1890              		.cfi_offset 14, -4
 884:./FW/ff.c     ****     UINT nf;
 1891              		.loc 1 884 5 is_stmt 1 view .LVU569
 885:./FW/ff.c     ****     FRESULT res = FR_OK;
 1892              		.loc 1 885 5 view .LVU570
 886:./FW/ff.c     **** 
 1893              		.loc 1 886 5 view .LVU571
 1894              	.LVL206:
 889:./FW/ff.c     ****         wsect = fs->winsect;    /* Current sector number */
 1895              		.loc 1 889 5 view .LVU572
 889:./FW/ff.c     ****         wsect = fs->winsect;    /* Current sector number */
 1896              		.loc 1 889 11 is_stmt 0 view .LVU573
 1897 0004 C578     		ldrb	r5, [r0, #3]	@ zero_extendqisi2
 889:./FW/ff.c     ****         wsect = fs->winsect;    /* Current sector number */
 1898              		.loc 1 889 8 view .LVU574
 1899 0006 15B9     		cbnz	r5, .L174
 1900              	.LVL207:
 1901              	.L169:
 903:./FW/ff.c     **** }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 143


 1902              		.loc 1 903 5 is_stmt 1 view .LVU575
 904:./FW/ff.c     **** #endif
 1903              		.loc 1 904 1 is_stmt 0 view .LVU576
 1904 0008 2846     		mov	r0, r5
 1905 000a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1906              	.LVL208:
 1907              	.L174:
 904:./FW/ff.c     **** #endif
 1908              		.loc 1 904 1 view .LVU577
 1909 000e 0446     		mov	r4, r0
 890:./FW/ff.c     ****         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 1910              		.loc 1 890 9 is_stmt 1 view .LVU578
 890:./FW/ff.c     ****         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 1911              		.loc 1 890 15 is_stmt 0 view .LVU579
 1912 0010 C76A     		ldr	r7, [r0, #44]
 1913              	.LVL209:
 891:./FW/ff.c     ****             res = FR_DISK_ERR;
 1914              		.loc 1 891 9 is_stmt 1 view .LVU580
 891:./FW/ff.c     ****             res = FR_DISK_ERR;
 1915              		.loc 1 891 35 is_stmt 0 view .LVU581
 1916 0012 00F13008 		add	r8, r0, #48
 891:./FW/ff.c     ****             res = FR_DISK_ERR;
 1917              		.loc 1 891 13 view .LVU582
 1918 0016 0123     		movs	r3, #1
 1919 0018 3A46     		mov	r2, r7
 1920 001a 4146     		mov	r1, r8
 1921 001c 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1922              	.LVL210:
 891:./FW/ff.c     ****             res = FR_DISK_ERR;
 1923              		.loc 1 891 13 view .LVU583
 1924 001e FFF7FEFF 		bl	disk_write
 1925              	.LVL211:
 891:./FW/ff.c     ****             res = FR_DISK_ERR;
 1926              		.loc 1 891 12 view .LVU584
 1927 0022 0546     		mov	r5, r0
 1928 0024 98B9     		cbnz	r0, .L172
 894:./FW/ff.c     ****             if (wsect - fs->fatbase < fs->fsize) {      /* Is it in the FAT area? */
 1929              		.loc 1 894 13 is_stmt 1 view .LVU585
 894:./FW/ff.c     ****             if (wsect - fs->fatbase < fs->fsize) {      /* Is it in the FAT area? */
 1930              		.loc 1 894 23 is_stmt 0 view .LVU586
 1931 0026 0023     		movs	r3, #0
 1932 0028 E370     		strb	r3, [r4, #3]
 895:./FW/ff.c     ****                 for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
 1933              		.loc 1 895 13 is_stmt 1 view .LVU587
 895:./FW/ff.c     ****                 for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
 1934              		.loc 1 895 27 is_stmt 0 view .LVU588
 1935 002a 236A     		ldr	r3, [r4, #32]
 895:./FW/ff.c     ****                 for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
 1936              		.loc 1 895 23 view .LVU589
 1937 002c FB1A     		subs	r3, r7, r3
 895:./FW/ff.c     ****                 for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
 1938              		.loc 1 895 41 view .LVU590
 1939 002e A269     		ldr	r2, [r4, #24]
 895:./FW/ff.c     ****                 for (nf = fs->n_fats; nf >= 2; nf--) {  /* Reflect the change to all FAT copies */
 1940              		.loc 1 895 16 view .LVU591
 1941 0030 9342     		cmp	r3, r2
 1942 0032 E9D2     		bcs	.L169
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 144


 896:./FW/ff.c     ****                     wsect += fs->fsize;
 1943              		.loc 1 896 17 is_stmt 1 view .LVU592
 896:./FW/ff.c     ****                     wsect += fs->fsize;
 1944              		.loc 1 896 29 is_stmt 0 view .LVU593
 1945 0034 A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
 1946              	.LVL212:
 1947              	.L170:
 896:./FW/ff.c     ****                     wsect += fs->fsize;
 1948              		.loc 1 896 39 is_stmt 1 discriminator 1 view .LVU594
 896:./FW/ff.c     ****                     wsect += fs->fsize;
 1949              		.loc 1 896 17 is_stmt 0 discriminator 1 view .LVU595
 1950 0036 012E     		cmp	r6, #1
 1951 0038 E6D9     		bls	.L169
 897:./FW/ff.c     ****                     disk_write(fs->drv, fs->win, wsect, 1);
 1952              		.loc 1 897 21 is_stmt 1 discriminator 3 view .LVU596
 897:./FW/ff.c     ****                     disk_write(fs->drv, fs->win, wsect, 1);
 1953              		.loc 1 897 32 is_stmt 0 discriminator 3 view .LVU597
 1954 003a A369     		ldr	r3, [r4, #24]
 897:./FW/ff.c     ****                     disk_write(fs->drv, fs->win, wsect, 1);
 1955              		.loc 1 897 27 discriminator 3 view .LVU598
 1956 003c 1F44     		add	r7, r7, r3
 1957              	.LVL213:
 898:./FW/ff.c     ****                 }
 1958              		.loc 1 898 21 is_stmt 1 discriminator 3 view .LVU599
 1959 003e 0123     		movs	r3, #1
 1960 0040 3A46     		mov	r2, r7
 1961 0042 4146     		mov	r1, r8
 1962 0044 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1963 0046 FFF7FEFF 		bl	disk_write
 1964              	.LVL214:
 896:./FW/ff.c     ****                     wsect += fs->fsize;
 1965              		.loc 1 896 48 discriminator 3 view .LVU600
 896:./FW/ff.c     ****                     wsect += fs->fsize;
 1966              		.loc 1 896 50 is_stmt 0 discriminator 3 view .LVU601
 1967 004a 013E     		subs	r6, r6, #1
 1968              	.LVL215:
 896:./FW/ff.c     ****                     wsect += fs->fsize;
 1969              		.loc 1 896 50 discriminator 3 view .LVU602
 1970 004c F3E7     		b	.L170
 1971              	.LVL216:
 1972              	.L172:
 892:./FW/ff.c     ****         } else {
 1973              		.loc 1 892 17 view .LVU603
 1974 004e 0125     		movs	r5, #1
 1975 0050 DAE7     		b	.L169
 1976              		.cfi_endproc
 1977              	.LFE952:
 1979              		.section	.text.move_window,"ax",%progbits
 1980              		.align	1
 1981              		.syntax unified
 1982              		.thumb
 1983              		.thumb_func
 1984              		.fpu fpv4-sp-d16
 1986              	move_window:
 1987              	.LVL217:
 1988              	.LFB953:
 912:./FW/ff.c     ****     FRESULT res = FR_OK;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 145


 1989              		.loc 1 912 3 is_stmt 1 view -0
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 0
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 912:./FW/ff.c     ****     FRESULT res = FR_OK;
 1993              		.loc 1 912 3 is_stmt 0 view .LVU605
 1994 0000 70B5     		push	{r4, r5, r6, lr}
 1995              	.LCFI23:
 1996              		.cfi_def_cfa_offset 16
 1997              		.cfi_offset 4, -16
 1998              		.cfi_offset 5, -12
 1999              		.cfi_offset 6, -8
 2000              		.cfi_offset 14, -4
 913:./FW/ff.c     **** 
 2001              		.loc 1 913 5 is_stmt 1 view .LVU606
 2002              	.LVL218:
 916:./FW/ff.c     **** #if !_FS_READONLY
 2003              		.loc 1 916 5 view .LVU607
 916:./FW/ff.c     **** #if !_FS_READONLY
 2004              		.loc 1 916 21 is_stmt 0 view .LVU608
 2005 0002 C36A     		ldr	r3, [r0, #44]
 916:./FW/ff.c     **** #if !_FS_READONLY
 2006              		.loc 1 916 8 view .LVU609
 2007 0004 8B42     		cmp	r3, r1
 2008 0006 02D1     		bne	.L181
 913:./FW/ff.c     **** 
 2009              		.loc 1 913 13 view .LVU610
 2010 0008 0026     		movs	r6, #0
 2011              	.LVL219:
 2012              	.L176:
 928:./FW/ff.c     **** }
 2013              		.loc 1 928 5 is_stmt 1 view .LVU611
 929:./FW/ff.c     **** 
 2014              		.loc 1 929 1 is_stmt 0 view .LVU612
 2015 000a 3046     		mov	r0, r6
 2016 000c 70BD     		pop	{r4, r5, r6, pc}
 2017              	.LVL220:
 2018              	.L181:
 929:./FW/ff.c     **** 
 2019              		.loc 1 929 1 view .LVU613
 2020 000e 0446     		mov	r4, r0
 2021 0010 0D46     		mov	r5, r1
 918:./FW/ff.c     **** #endif
 2022              		.loc 1 918 9 is_stmt 1 view .LVU614
 918:./FW/ff.c     **** #endif
 2023              		.loc 1 918 15 is_stmt 0 view .LVU615
 2024 0012 FFF7FEFF 		bl	sync_window
 2025              	.LVL221:
 920:./FW/ff.c     ****             if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 2026              		.loc 1 920 9 is_stmt 1 view .LVU616
 920:./FW/ff.c     ****             if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 2027              		.loc 1 920 12 is_stmt 0 view .LVU617
 2028 0016 0646     		mov	r6, r0
 2029 0018 0028     		cmp	r0, #0
 2030 001a F6D1     		bne	.L176
 921:./FW/ff.c     ****                 sector = 0xFFFFFFFF;    /* Invalidate window if data is not reliable */
 2031              		.loc 1 921 13 is_stmt 1 view .LVU618
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 146


 921:./FW/ff.c     ****                 sector = 0xFFFFFFFF;    /* Invalidate window if data is not reliable */
 2032              		.loc 1 921 17 is_stmt 0 view .LVU619
 2033 001c 0123     		movs	r3, #1
 2034 001e 2A46     		mov	r2, r5
 2035 0020 04F13001 		add	r1, r4, #48
 2036 0024 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2037              	.LVL222:
 921:./FW/ff.c     ****                 sector = 0xFFFFFFFF;    /* Invalidate window if data is not reliable */
 2038              		.loc 1 921 17 view .LVU620
 2039 0026 FFF7FEFF 		bl	disk_read
 2040              	.LVL223:
 921:./FW/ff.c     ****                 sector = 0xFFFFFFFF;    /* Invalidate window if data is not reliable */
 2041              		.loc 1 921 16 view .LVU621
 2042 002a 10B1     		cbz	r0, .L177
 923:./FW/ff.c     ****             }
 2043              		.loc 1 923 21 view .LVU622
 2044 002c 0126     		movs	r6, #1
 922:./FW/ff.c     ****                 res = FR_DISK_ERR;
 2045              		.loc 1 922 24 view .LVU623
 2046 002e 4FF0FF35 		mov	r5, #-1
 2047              	.LVL224:
 2048              	.L177:
 925:./FW/ff.c     ****         }
 2049              		.loc 1 925 13 is_stmt 1 view .LVU624
 925:./FW/ff.c     ****         }
 2050              		.loc 1 925 25 is_stmt 0 view .LVU625
 2051 0032 E562     		str	r5, [r4, #44]
 2052 0034 E9E7     		b	.L176
 2053              		.cfi_endproc
 2054              	.LFE953:
 2056              		.section	.text.check_fs,"ax",%progbits
 2057              		.align	1
 2058              		.syntax unified
 2059              		.thumb
 2060              		.thumb_func
 2061              		.fpu fpv4-sp-d16
 2063              	check_fs:
 2064              	.LVL225:
 2065              	.LFB974:
2973:./FW/ff.c     ****     fs->wflag = 0;
 2066              		.loc 1 2973 3 is_stmt 1 view -0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
2973:./FW/ff.c     ****     fs->wflag = 0;
 2070              		.loc 1 2973 3 is_stmt 0 view .LVU627
 2071 0000 38B5     		push	{r3, r4, r5, lr}
 2072              	.LCFI24:
 2073              		.cfi_def_cfa_offset 16
 2074              		.cfi_offset 3, -16
 2075              		.cfi_offset 4, -12
 2076              		.cfi_offset 5, -8
 2077              		.cfi_offset 14, -4
 2078 0002 0446     		mov	r4, r0
2974:./FW/ff.c     ****     fs->winsect = 0xFFFFFFFF;       /* Invaidate window */
 2079              		.loc 1 2974 5 is_stmt 1 view .LVU628
2974:./FW/ff.c     ****     fs->winsect = 0xFFFFFFFF;       /* Invaidate window */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 147


 2080              		.loc 1 2974 15 is_stmt 0 view .LVU629
 2081 0004 0023     		movs	r3, #0
 2082 0006 C370     		strb	r3, [r0, #3]
2975:./FW/ff.c     ****     if (move_window(fs, sect) != FR_OK) { return 4; }   /* Load boot record */
 2083              		.loc 1 2975 5 is_stmt 1 view .LVU630
2975:./FW/ff.c     ****     if (move_window(fs, sect) != FR_OK) { return 4; }   /* Load boot record */
 2084              		.loc 1 2975 17 is_stmt 0 view .LVU631
 2085 0008 4FF0FF33 		mov	r3, #-1
 2086 000c C362     		str	r3, [r0, #44]
2976:./FW/ff.c     **** 
 2087              		.loc 1 2976 5 is_stmt 1 view .LVU632
2976:./FW/ff.c     **** 
 2088              		.loc 1 2976 9 is_stmt 0 view .LVU633
 2089 000e FFF7FEFF 		bl	move_window
 2090              	.LVL226:
2976:./FW/ff.c     **** 
 2091              		.loc 1 2976 8 view .LVU634
 2092 0012 30BB     		cbnz	r0, .L185
 2093 0014 0546     		mov	r5, r0
2978:./FW/ff.c     **** 
 2094              		.loc 1 2978 5 is_stmt 1 view .LVU635
2978:./FW/ff.c     **** 
 2095              		.loc 1 2978 9 is_stmt 0 view .LVU636
 2096 0016 04F22E20 		addw	r0, r4, #558
 2097 001a FFF7FEFF 		bl	ld_word
 2098              	.LVL227:
2978:./FW/ff.c     **** 
 2099              		.loc 1 2978 8 view .LVU637
 2100 001e 4AF65523 		movw	r3, #43605
 2101 0022 9842     		cmp	r0, r3
 2102 0024 1FD1     		bne	.L186
2980:./FW/ff.c     ****         if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) { return 0; }   /* Check "F
 2103              		.loc 1 2980 5 is_stmt 1 view .LVU638
2980:./FW/ff.c     ****         if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) { return 0; }   /* Check "F
 2104              		.loc 1 2980 16 is_stmt 0 view .LVU639
 2105 0026 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
2980:./FW/ff.c     ****         if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) { return 0; }   /* Check "F
 2106              		.loc 1 2980 8 view .LVU640
 2107 002a E92B     		cmp	r3, #233
 2108 002c 07D0     		beq	.L184
2980:./FW/ff.c     ****         if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) { return 0; }   /* Check "F
 2109              		.loc 1 2980 69 discriminator 1 view .LVU641
 2110 002e 236B     		ldr	r3, [r4, #48]
 2111 0030 03F0FF13 		and	r3, r3, #16711935
2980:./FW/ff.c     ****         if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) { return 0; }   /* Check "F
 2112              		.loc 1 2980 37 discriminator 1 view .LVU642
 2113 0034 0D4A     		ldr	r2, .L189
 2114 0036 9342     		cmp	r3, r2
 2115 0038 01D0     		beq	.L184
2987:./FW/ff.c     **** }
 2116              		.loc 1 2987 12 view .LVU643
 2117 003a 0225     		movs	r5, #2
 2118 003c 14E0     		b	.L183
 2119              	.L184:
2981:./FW/ff.c     ****         if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) { return 0; }            /* Check "F
 2120              		.loc 1 2981 9 is_stmt 1 view .LVU644
2981:./FW/ff.c     ****         if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) { return 0; }            /* Check "F
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 148


 2121              		.loc 1 2981 14 is_stmt 0 view .LVU645
 2122 003e 04F16600 		add	r0, r4, #102
 2123 0042 FFF7FEFF 		bl	ld_dword
 2124              	.LVL228:
2981:./FW/ff.c     ****         if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) { return 0; }            /* Check "F
 2125              		.loc 1 2981 48 view .LVU646
 2126 0046 20F07F40 		bic	r0, r0, #-16777216
2981:./FW/ff.c     ****         if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) { return 0; }            /* Check "F
 2127              		.loc 1 2981 12 view .LVU647
 2128 004a 094B     		ldr	r3, .L189+4
 2129 004c 9842     		cmp	r0, r3
 2130 004e 0BD0     		beq	.L183
2982:./FW/ff.c     ****     }
 2131              		.loc 1 2982 9 is_stmt 1 view .LVU648
2982:./FW/ff.c     ****     }
 2132              		.loc 1 2982 13 is_stmt 0 view .LVU649
 2133 0050 04F18200 		add	r0, r4, #130
 2134 0054 FFF7FEFF 		bl	ld_dword
 2135              	.LVL229:
2982:./FW/ff.c     ****     }
 2136              		.loc 1 2982 12 view .LVU650
 2137 0058 064B     		ldr	r3, .L189+8
 2138 005a 9842     		cmp	r0, r3
 2139 005c 04D0     		beq	.L183
2987:./FW/ff.c     **** }
 2140              		.loc 1 2987 12 view .LVU651
 2141 005e 0225     		movs	r5, #2
 2142 0060 02E0     		b	.L183
 2143              	.L185:
2976:./FW/ff.c     **** 
 2144              		.loc 1 2976 50 view .LVU652
 2145 0062 0425     		movs	r5, #4
 2146 0064 00E0     		b	.L183
 2147              	.L186:
2978:./FW/ff.c     **** 
 2148              		.loc 1 2978 56 view .LVU653
 2149 0066 0325     		movs	r5, #3
 2150              	.L183:
2988:./FW/ff.c     **** 
 2151              		.loc 1 2988 1 view .LVU654
 2152 0068 2846     		mov	r0, r5
 2153 006a 38BD     		pop	{r3, r4, r5, pc}
 2154              	.LVL230:
 2155              	.L190:
2988:./FW/ff.c     **** 
 2156              		.loc 1 2988 1 view .LVU655
 2157              		.align	2
 2158              	.L189:
 2159 006c EB009000 		.word	9437419
 2160 0070 46415400 		.word	5521734
 2161 0074 46415433 		.word	861159750
 2162              		.cfi_endproc
 2163              	.LFE974:
 2165              		.section	.text.find_volume,"ax",%progbits
 2166              		.align	1
 2167              		.syntax unified
 2168              		.thumb
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 149


 2169              		.thumb_func
 2170              		.fpu fpv4-sp-d16
 2172              	find_volume:
 2173              	.LVL231:
 2174              	.LFB975:
3002:./FW/ff.c     ****     BYTE fmt, *pt;
 2175              		.loc 1 3002 3 is_stmt 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 16
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
3002:./FW/ff.c     ****     BYTE fmt, *pt;
 2179              		.loc 1 3002 3 is_stmt 0 view .LVU657
 2180 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2181              	.LCFI25:
 2182              		.cfi_def_cfa_offset 36
 2183              		.cfi_offset 4, -36
 2184              		.cfi_offset 5, -32
 2185              		.cfi_offset 6, -28
 2186              		.cfi_offset 7, -24
 2187              		.cfi_offset 8, -20
 2188              		.cfi_offset 9, -16
 2189              		.cfi_offset 10, -12
 2190              		.cfi_offset 11, -8
 2191              		.cfi_offset 14, -4
 2192 0004 85B0     		sub	sp, sp, #20
 2193              	.LCFI26:
 2194              		.cfi_def_cfa_offset 56
 2195 0006 0D46     		mov	r5, r1
 2196 0008 1646     		mov	r6, r2
3003:./FW/ff.c     ****     int vol;
 2197              		.loc 1 3003 5 is_stmt 1 view .LVU658
3004:./FW/ff.c     ****     DSTATUS stat;
 2198              		.loc 1 3004 5 view .LVU659
3005:./FW/ff.c     ****     DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
 2199              		.loc 1 3005 5 view .LVU660
3006:./FW/ff.c     ****     WORD nrsv;
 2200              		.loc 1 3006 5 view .LVU661
3007:./FW/ff.c     ****     FATFS *fs;
 2201              		.loc 1 3007 5 view .LVU662
3008:./FW/ff.c     ****     UINT i;
 2202              		.loc 1 3008 5 view .LVU663
3009:./FW/ff.c     **** 
 2203              		.loc 1 3009 5 view .LVU664
3013:./FW/ff.c     ****     vol = get_ldnumber(path);
 2204              		.loc 1 3013 5 view .LVU665
3013:./FW/ff.c     ****     vol = get_ldnumber(path);
 2205              		.loc 1 3013 10 is_stmt 0 view .LVU666
 2206 000a 0023     		movs	r3, #0
 2207 000c 0B60     		str	r3, [r1]
3014:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 2208              		.loc 1 3014 5 is_stmt 1 view .LVU667
3014:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 2209              		.loc 1 3014 11 is_stmt 0 view .LVU668
 2210 000e FFF7FEFF 		bl	get_ldnumber
 2211              	.LVL232:
3015:./FW/ff.c     **** 
 2212              		.loc 1 3015 5 is_stmt 1 view .LVU669
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 150


3015:./FW/ff.c     **** 
 2213              		.loc 1 3015 8 is_stmt 0 view .LVU670
 2214 0012 071E     		subs	r7, r0, #0
 2215 0014 C0F24481 		blt	.L209
3018:./FW/ff.c     ****     if (!fs) { return FR_NOT_ENABLED; }     /* Is the file system object available? */
 2216              		.loc 1 3018 5 is_stmt 1 view .LVU671
3018:./FW/ff.c     ****     if (!fs) { return FR_NOT_ENABLED; }     /* Is the file system object available? */
 2217              		.loc 1 3018 8 is_stmt 0 view .LVU672
 2218 0018 B54B     		ldr	r3, .L239
 2219 001a 53F82740 		ldr	r4, [r3, r7, lsl #2]
 2220              	.LVL233:
3019:./FW/ff.c     **** 
 2221              		.loc 1 3019 5 is_stmt 1 view .LVU673
3019:./FW/ff.c     **** 
 2222              		.loc 1 3019 8 is_stmt 0 view .LVU674
 2223 001e 002C     		cmp	r4, #0
 2224 0020 00F04381 		beq	.L210
3021:./FW/ff.c     ****     *rfs = fs;                          /* Return pointer to the file system object */
 2225              		.loc 1 3021 17 is_stmt 1 view .LVU675
3022:./FW/ff.c     **** 
 2226              		.loc 1 3022 5 view .LVU676
3022:./FW/ff.c     **** 
 2227              		.loc 1 3022 10 is_stmt 0 view .LVU677
 2228 0024 2C60     		str	r4, [r5]
3024:./FW/ff.c     ****     if (fs->fs_type) {                  /* If the volume has been mounted */
 2229              		.loc 1 3024 5 is_stmt 1 view .LVU678
3024:./FW/ff.c     ****     if (fs->fs_type) {                  /* If the volume has been mounted */
 2230              		.loc 1 3024 10 is_stmt 0 view .LVU679
 2231 0026 06F0FE06 		and	r6, r6, #254
 2232              	.LVL234:
3025:./FW/ff.c     ****         stat = disk_status(fs->drv);
 2233              		.loc 1 3025 5 is_stmt 1 view .LVU680
3025:./FW/ff.c     ****         stat = disk_status(fs->drv);
 2234              		.loc 1 3025 11 is_stmt 0 view .LVU681
 2235 002a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
3025:./FW/ff.c     ****         stat = disk_status(fs->drv);
 2236              		.loc 1 3025 8 view .LVU682
 2237 002c 73B1     		cbz	r3, .L193
3026:./FW/ff.c     ****         if (!(stat & STA_NOINIT)) {     /* and the physical drive is kept initialized */
 2238              		.loc 1 3026 9 is_stmt 1 view .LVU683
3026:./FW/ff.c     ****         if (!(stat & STA_NOINIT)) {     /* and the physical drive is kept initialized */
 2239              		.loc 1 3026 16 is_stmt 0 view .LVU684
 2240 002e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2241              	.LVL235:
3026:./FW/ff.c     ****         if (!(stat & STA_NOINIT)) {     /* and the physical drive is kept initialized */
 2242              		.loc 1 3026 16 view .LVU685
 2243 0030 FFF7FEFF 		bl	disk_status
 2244              	.LVL236:
3027:./FW/ff.c     ****             if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {    /* Check write protection if ne
 2245              		.loc 1 3027 9 is_stmt 1 view .LVU686
3027:./FW/ff.c     ****             if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {    /* Check write protection if ne
 2246              		.loc 1 3027 12 is_stmt 0 view .LVU687
 2247 0034 10F00105 		ands	r5, r0, #1
 2248              	.LVL237:
3027:./FW/ff.c     ****             if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {    /* Check write protection if ne
 2249              		.loc 1 3027 12 view .LVU688
 2250 0038 08D1     		bne	.L193
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 151


3028:./FW/ff.c     ****                 return FR_WRITE_PROTECTED;
 2251              		.loc 1 3028 13 is_stmt 1 view .LVU689
3028:./FW/ff.c     ****                 return FR_WRITE_PROTECTED;
 2252              		.loc 1 3028 16 is_stmt 0 view .LVU690
 2253 003a 002E     		cmp	r6, #0
 2254 003c 00F03181 		beq	.L192
3028:./FW/ff.c     ****                 return FR_WRITE_PROTECTED;
 2255              		.loc 1 3028 39 discriminator 1 view .LVU691
 2256 0040 10F0040F 		tst	r0, #4
 2257 0044 00F02D81 		beq	.L192
3029:./FW/ff.c     ****             }
 2258              		.loc 1 3029 24 view .LVU692
 2259 0048 0A25     		movs	r5, #10
 2260 004a 2AE1     		b	.L192
 2261              	.LVL238:
 2262              	.L193:
3038:./FW/ff.c     ****     fs->drv = LD2PD(vol);               /* Bind the logical drive and a physical drive */
 2263              		.loc 1 3038 5 is_stmt 1 view .LVU693
3038:./FW/ff.c     ****     fs->drv = LD2PD(vol);               /* Bind the logical drive and a physical drive */
 2264              		.loc 1 3038 17 is_stmt 0 view .LVU694
 2265 004c 0023     		movs	r3, #0
 2266 004e 2370     		strb	r3, [r4]
3039:./FW/ff.c     ****     stat = disk_initialize(fs->drv);    /* Initialize the physical drive */
 2267              		.loc 1 3039 5 is_stmt 1 view .LVU695
3039:./FW/ff.c     ****     stat = disk_initialize(fs->drv);    /* Initialize the physical drive */
 2268              		.loc 1 3039 15 is_stmt 0 view .LVU696
 2269 0050 F8B2     		uxtb	r0, r7
3039:./FW/ff.c     ****     stat = disk_initialize(fs->drv);    /* Initialize the physical drive */
 2270              		.loc 1 3039 13 view .LVU697
 2271 0052 6070     		strb	r0, [r4, #1]
3040:./FW/ff.c     ****     if (stat & STA_NOINIT) {            /* Check if the initialization succeeded */
 2272              		.loc 1 3040 5 is_stmt 1 view .LVU698
3040:./FW/ff.c     ****     if (stat & STA_NOINIT) {            /* Check if the initialization succeeded */
 2273              		.loc 1 3040 12 is_stmt 0 view .LVU699
 2274 0054 FFF7FEFF 		bl	disk_initialize
 2275              	.LVL239:
3041:./FW/ff.c     ****         return FR_NOT_READY;            /* Failed to initialize due to no medium or hard error */
 2276              		.loc 1 3041 5 is_stmt 1 view .LVU700
3041:./FW/ff.c     ****         return FR_NOT_READY;            /* Failed to initialize due to no medium or hard error */
 2277              		.loc 1 3041 8 is_stmt 0 view .LVU701
 2278 0058 10F00105 		ands	r5, r0, #1
 2279 005c 40F02781 		bne	.L212
3044:./FW/ff.c     ****         return FR_WRITE_PROTECTED;
 2280              		.loc 1 3044 5 is_stmt 1 view .LVU702
3044:./FW/ff.c     ****         return FR_WRITE_PROTECTED;
 2281              		.loc 1 3044 8 is_stmt 0 view .LVU703
 2282 0060 1EB1     		cbz	r6, .L194
3044:./FW/ff.c     ****         return FR_WRITE_PROTECTED;
 2283              		.loc 1 3044 31 discriminator 1 view .LVU704
 2284 0062 10F0040F 		tst	r0, #4
 2285 0066 40F02481 		bne	.L213
 2286              	.L194:
3053:./FW/ff.c     ****     fmt = check_fs(fs, bsect);          /* Load sector 0 and check if it is an FAT-VBR as SFD */
 2287              		.loc 1 3053 5 is_stmt 1 view .LVU705
 2288              	.LVL240:
3054:./FW/ff.c     ****     if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) { /* Not an FAT-VBR or forced partition number */
 2289              		.loc 1 3054 5 view .LVU706
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 152


3054:./FW/ff.c     ****     if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) { /* Not an FAT-VBR or forced partition number */
 2290              		.loc 1 3054 11 is_stmt 0 view .LVU707
 2291 006a 0021     		movs	r1, #0
 2292 006c 2046     		mov	r0, r4
 2293              	.LVL241:
3054:./FW/ff.c     ****     if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) { /* Not an FAT-VBR or forced partition number */
 2294              		.loc 1 3054 11 view .LVU708
 2295 006e FFF7FEFF 		bl	check_fs
 2296              	.LVL242:
3055:./FW/ff.c     ****         for (i = 0; i < 4; i++) {       /* Get partition offset */
 2297              		.loc 1 3055 5 is_stmt 1 view .LVU709
3055:./FW/ff.c     ****         for (i = 0; i < 4; i++) {       /* Get partition offset */
 2298              		.loc 1 3055 8 is_stmt 0 view .LVU710
 2299 0072 0228     		cmp	r0, #2
 2300 0074 00F0B680 		beq	.L214
3053:./FW/ff.c     ****     fmt = check_fs(fs, bsect);          /* Load sector 0 and check if it is an FAT-VBR as SFD */
 2301              		.loc 1 3053 11 view .LVU711
 2302 0078 0027     		movs	r7, #0
 2303              	.LVL243:
 2304              	.L196:
3067:./FW/ff.c     ****     if (fmt >= 2) { return FR_NO_FILESYSTEM; }  /* No FAT volume is found */
 2305              		.loc 1 3067 5 is_stmt 1 view .LVU712
3067:./FW/ff.c     ****     if (fmt >= 2) { return FR_NO_FILESYSTEM; }  /* No FAT volume is found */
 2306              		.loc 1 3067 8 is_stmt 0 view .LVU713
 2307 007a 0428     		cmp	r0, #4
 2308 007c 00F01B81 		beq	.L217
3068:./FW/ff.c     **** 
 2309              		.loc 1 3068 5 is_stmt 1 view .LVU714
3068:./FW/ff.c     **** 
 2310              		.loc 1 3068 8 is_stmt 0 view .LVU715
 2311 0080 0128     		cmp	r0, #1
 2312 0082 00F21A81 		bhi	.L218
3120:./FW/ff.c     **** 
 2313              		.loc 1 3120 9 is_stmt 1 view .LVU716
3120:./FW/ff.c     **** 
 2314              		.loc 1 3120 13 is_stmt 0 view .LVU717
 2315 0086 04F13B00 		add	r0, r4, #59
 2316              	.LVL244:
3120:./FW/ff.c     **** 
 2317              		.loc 1 3120 13 view .LVU718
 2318 008a FFF7FEFF 		bl	ld_word
 2319              	.LVL245:
3120:./FW/ff.c     **** 
 2320              		.loc 1 3120 12 view .LVU719
 2321 008e B0F5007F 		cmp	r0, #512
 2322 0092 40F01481 		bne	.L219
3122:./FW/ff.c     ****         if (fasize == 0) { fasize = ld_dword(fs->win + BPB_FATSz32); }
 2323              		.loc 1 3122 9 is_stmt 1 view .LVU720
3122:./FW/ff.c     ****         if (fasize == 0) { fasize = ld_dword(fs->win + BPB_FATSz32); }
 2324              		.loc 1 3122 18 is_stmt 0 view .LVU721
 2325 0096 04F14600 		add	r0, r4, #70
 2326 009a FFF7FEFF 		bl	ld_word
 2327              	.LVL246:
3122:./FW/ff.c     ****         if (fasize == 0) { fasize = ld_dword(fs->win + BPB_FATSz32); }
 2328              		.loc 1 3122 16 view .LVU722
 2329 009e 0646     		mov	r6, r0
 2330              	.LVL247:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 153


3123:./FW/ff.c     ****         fs->fsize = fasize;
 2331              		.loc 1 3123 9 is_stmt 1 view .LVU723
3123:./FW/ff.c     ****         fs->fsize = fasize;
 2332              		.loc 1 3123 12 is_stmt 0 view .LVU724
 2333 00a0 20B9     		cbnz	r0, .L201
3123:./FW/ff.c     ****         fs->fsize = fasize;
 2334              		.loc 1 3123 28 is_stmt 1 discriminator 1 view .LVU725
3123:./FW/ff.c     ****         fs->fsize = fasize;
 2335              		.loc 1 3123 37 is_stmt 0 discriminator 1 view .LVU726
 2336 00a2 04F15400 		add	r0, r4, #84
 2337              	.LVL248:
3123:./FW/ff.c     ****         fs->fsize = fasize;
 2338              		.loc 1 3123 37 discriminator 1 view .LVU727
 2339 00a6 FFF7FEFF 		bl	ld_dword
 2340              	.LVL249:
 2341 00aa 0646     		mov	r6, r0
 2342              	.LVL250:
 2343              	.L201:
3124:./FW/ff.c     **** 
 2344              		.loc 1 3124 9 is_stmt 1 view .LVU728
3124:./FW/ff.c     **** 
 2345              		.loc 1 3124 19 is_stmt 0 view .LVU729
 2346 00ac A661     		str	r6, [r4, #24]
3126:./FW/ff.c     ****         if (fs->n_fats != 1 && fs->n_fats != 2) { return FR_NO_FILESYSTEM; }    /* (Must be 1 or 2)
 2347              		.loc 1 3126 9 is_stmt 1 view .LVU730
3126:./FW/ff.c     ****         if (fs->n_fats != 1 && fs->n_fats != 2) { return FR_NO_FILESYSTEM; }    /* (Must be 1 or 2)
 2348              		.loc 1 3126 29 is_stmt 0 view .LVU731
 2349 00ae 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
3126:./FW/ff.c     ****         if (fs->n_fats != 1 && fs->n_fats != 2) { return FR_NO_FILESYSTEM; }    /* (Must be 1 or 2)
 2350              		.loc 1 3126 20 view .LVU732
 2351 00b2 A270     		strb	r2, [r4, #2]
3127:./FW/ff.c     ****         fasize *= fs->n_fats;                           /* Number of sectors for FAT area */
 2352              		.loc 1 3127 9 is_stmt 1 view .LVU733
3127:./FW/ff.c     ****         fasize *= fs->n_fats;                           /* Number of sectors for FAT area */
 2353              		.loc 1 3127 29 is_stmt 0 view .LVU734
 2354 00b4 531E     		subs	r3, r2, #1
 2355 00b6 DBB2     		uxtb	r3, r3
3127:./FW/ff.c     ****         fasize *= fs->n_fats;                           /* Number of sectors for FAT area */
 2356              		.loc 1 3127 12 view .LVU735
 2357 00b8 012B     		cmp	r3, #1
 2358 00ba 00F20281 		bhi	.L220
3128:./FW/ff.c     **** 
 2359              		.loc 1 3128 9 is_stmt 1 view .LVU736
3128:./FW/ff.c     **** 
 2360              		.loc 1 3128 16 is_stmt 0 view .LVU737
 2361 00be 06FB02F8 		mul	r8, r6, r2
 2362              	.LVL251:
3130:./FW/ff.c     ****         if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) { return FR_NO_FILESYSTEM; }   /* (Mus
 2363              		.loc 1 3130 9 is_stmt 1 view .LVU738
3130:./FW/ff.c     ****         if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) { return FR_NO_FILESYSTEM; }   /* (Mus
 2364              		.loc 1 3130 28 is_stmt 0 view .LVU739
 2365 00c2 94F83D90 		ldrb	r9, [r4, #61]	@ zero_extendqisi2
3130:./FW/ff.c     ****         if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) { return FR_NO_FILESYSTEM; }   /* (Mus
 2366              		.loc 1 3130 19 view .LVU740
 2367 00c6 A4F80A90 		strh	r9, [r4, #10]	@ movhi
3131:./FW/ff.c     **** 
 2368              		.loc 1 3131 9 is_stmt 1 view .LVU741
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 154


3131:./FW/ff.c     **** 
 2369              		.loc 1 3131 12 is_stmt 0 view .LVU742
 2370 00ca B9F1000F 		cmp	r9, #0
 2371 00ce 00F0FA80 		beq	.L221
3131:./FW/ff.c     **** 
 2372              		.loc 1 3131 55 discriminator 2 view .LVU743
 2373 00d2 09F1FF33 		add	r3, r9, #-1
3131:./FW/ff.c     **** 
 2374              		.loc 1 3131 28 discriminator 2 view .LVU744
 2375 00d6 19EA030F 		tst	r9, r3
 2376 00da 40F0F680 		bne	.L222
3133:./FW/ff.c     ****         if (fs->n_rootdir % (SS(fs) / SZDIRE)) { return FR_NO_FILESYSTEM; } /* (Must be sector alig
 2377              		.loc 1 3133 9 is_stmt 1 view .LVU745
3133:./FW/ff.c     ****         if (fs->n_rootdir % (SS(fs) / SZDIRE)) { return FR_NO_FILESYSTEM; } /* (Must be sector alig
 2378              		.loc 1 3133 25 is_stmt 0 view .LVU746
 2379 00de 04F14100 		add	r0, r4, #65
 2380 00e2 FFF7FEFF 		bl	ld_word
 2381              	.LVL252:
 2382 00e6 8246     		mov	r10, r0
3133:./FW/ff.c     ****         if (fs->n_rootdir % (SS(fs) / SZDIRE)) { return FR_NO_FILESYSTEM; } /* (Must be sector alig
 2383              		.loc 1 3133 23 view .LVU747
 2384 00e8 2081     		strh	r0, [r4, #8]	@ movhi
3134:./FW/ff.c     **** 
 2385              		.loc 1 3134 9 is_stmt 1 view .LVU748
3134:./FW/ff.c     **** 
 2386              		.loc 1 3134 12 is_stmt 0 view .LVU749
 2387 00ea 10F00F0F 		tst	r0, #15
 2388 00ee 40F0EE80 		bne	.L223
3136:./FW/ff.c     ****         if (tsect == 0) { tsect = ld_dword(fs->win + BPB_TotSec32); }
 2389              		.loc 1 3136 9 is_stmt 1 view .LVU750
3136:./FW/ff.c     ****         if (tsect == 0) { tsect = ld_dword(fs->win + BPB_TotSec32); }
 2390              		.loc 1 3136 17 is_stmt 0 view .LVU751
 2391 00f2 04F14300 		add	r0, r4, #67
 2392 00f6 FFF7FEFF 		bl	ld_word
 2393              	.LVL253:
3136:./FW/ff.c     ****         if (tsect == 0) { tsect = ld_dword(fs->win + BPB_TotSec32); }
 2394              		.loc 1 3136 15 view .LVU752
 2395 00fa 8346     		mov	fp, r0
 2396              	.LVL254:
3137:./FW/ff.c     **** 
 2397              		.loc 1 3137 9 is_stmt 1 view .LVU753
3137:./FW/ff.c     **** 
 2398              		.loc 1 3137 12 is_stmt 0 view .LVU754
 2399 00fc 20B9     		cbnz	r0, .L202
3137:./FW/ff.c     **** 
 2400              		.loc 1 3137 27 is_stmt 1 discriminator 1 view .LVU755
3137:./FW/ff.c     **** 
 2401              		.loc 1 3137 35 is_stmt 0 discriminator 1 view .LVU756
 2402 00fe 04F15000 		add	r0, r4, #80
 2403              	.LVL255:
3137:./FW/ff.c     **** 
 2404              		.loc 1 3137 35 discriminator 1 view .LVU757
 2405 0102 FFF7FEFF 		bl	ld_dword
 2406              	.LVL256:
 2407 0106 8346     		mov	fp, r0
 2408              	.LVL257:
 2409              	.L202:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 155


3139:./FW/ff.c     ****         if (nrsv == 0) { return FR_NO_FILESYSTEM; }         /* (Must not be 0) */
 2410              		.loc 1 3139 9 is_stmt 1 view .LVU758
3139:./FW/ff.c     ****         if (nrsv == 0) { return FR_NO_FILESYSTEM; }         /* (Must not be 0) */
 2411              		.loc 1 3139 16 is_stmt 0 view .LVU759
 2412 0108 04F13E00 		add	r0, r4, #62
 2413              	.LVL258:
3139:./FW/ff.c     ****         if (nrsv == 0) { return FR_NO_FILESYSTEM; }         /* (Must not be 0) */
 2414              		.loc 1 3139 16 view .LVU760
 2415 010c FFF7FEFF 		bl	ld_word
 2416              	.LVL259:
3140:./FW/ff.c     **** 
 2417              		.loc 1 3140 9 is_stmt 1 view .LVU761
3140:./FW/ff.c     **** 
 2418              		.loc 1 3140 12 is_stmt 0 view .LVU762
 2419 0110 0246     		mov	r2, r0
 2420 0112 0028     		cmp	r0, #0
 2421 0114 00F0DD80 		beq	.L224
3143:./FW/ff.c     ****         if (tsect < sysect) { return FR_NO_FILESYSTEM; }    /* (Invalid volume size) */
 2422              		.loc 1 3143 9 is_stmt 1 view .LVU763
3143:./FW/ff.c     ****         if (tsect < sysect) { return FR_NO_FILESYSTEM; }    /* (Invalid volume size) */
 2423              		.loc 1 3143 23 is_stmt 0 view .LVU764
 2424 0118 00EB0803 		add	r3, r0, r8
3143:./FW/ff.c     ****         if (tsect < sysect) { return FR_NO_FILESYSTEM; }    /* (Invalid volume size) */
 2425              		.loc 1 3143 16 view .LVU765
 2426 011c 03EB1A13 		add	r3, r3, r10, lsr #4
 2427              	.LVL260:
3144:./FW/ff.c     ****         nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
 2428              		.loc 1 3144 9 is_stmt 1 view .LVU766
3144:./FW/ff.c     ****         nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
 2429              		.loc 1 3144 12 is_stmt 0 view .LVU767
 2430 0120 9B45     		cmp	fp, r3
 2431 0122 C0F0D880 		bcc	.L225
3145:./FW/ff.c     ****         if (nclst == 0) { return FR_NO_FILESYSTEM; }        /* (Invalid volume size) */
 2432              		.loc 1 3145 9 is_stmt 1 view .LVU768
3145:./FW/ff.c     ****         if (nclst == 0) { return FR_NO_FILESYSTEM; }        /* (Invalid volume size) */
 2433              		.loc 1 3145 24 is_stmt 0 view .LVU769
 2434 0126 ABEB030B 		sub	fp, fp, r3
 2435              	.LVL261:
3145:./FW/ff.c     ****         if (nclst == 0) { return FR_NO_FILESYSTEM; }        /* (Invalid volume size) */
 2436              		.loc 1 3145 15 view .LVU770
 2437 012a BBFBF9F1 		udiv	r1, fp, r9
 2438              	.LVL262:
3146:./FW/ff.c     ****         fmt = FS_FAT32;
 2439              		.loc 1 3146 9 is_stmt 1 view .LVU771
3146:./FW/ff.c     ****         fmt = FS_FAT32;
 2440              		.loc 1 3146 12 is_stmt 0 view .LVU772
 2441 012e CB45     		cmp	fp, r9
 2442 0130 C0F0D380 		bcc	.L226
3147:./FW/ff.c     ****         if (nclst <= MAX_FAT16) { fmt = FS_FAT16; }
 2443              		.loc 1 3147 9 is_stmt 1 view .LVU773
 2444              	.LVL263:
3148:./FW/ff.c     ****         if (nclst <= MAX_FAT12) { fmt = FS_FAT12; }
 2445              		.loc 1 3148 9 view .LVU774
3148:./FW/ff.c     ****         if (nclst <= MAX_FAT12) { fmt = FS_FAT12; }
 2446              		.loc 1 3148 12 is_stmt 0 view .LVU775
 2447 0134 4FF6F570 		movw	r0, #65525
 2448              	.LVL264:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 156


3148:./FW/ff.c     ****         if (nclst <= MAX_FAT12) { fmt = FS_FAT12; }
 2449              		.loc 1 3148 12 view .LVU776
 2450 0138 8142     		cmp	r1, r0
 2451 013a 6BD9     		bls	.L227
3147:./FW/ff.c     ****         if (nclst <= MAX_FAT16) { fmt = FS_FAT16; }
 2452              		.loc 1 3147 13 view .LVU777
 2453 013c 4FF0030B 		mov	fp, #3
 2454              	.L203:
 2455              	.LVL265:
3149:./FW/ff.c     **** 
 2456              		.loc 1 3149 9 is_stmt 1 view .LVU778
3149:./FW/ff.c     **** 
 2457              		.loc 1 3149 12 is_stmt 0 view .LVU779
 2458 0140 40F6F570 		movw	r0, #4085
 2459 0144 8142     		cmp	r1, r0
 2460 0146 01D8     		bhi	.L204
3149:./FW/ff.c     **** 
 2461              		.loc 1 3149 39 view .LVU780
 2462 0148 4FF0010B 		mov	fp, #1
 2463              	.LVL266:
 2464              	.L204:
3152:./FW/ff.c     ****         fs->volbase = bsect;                            /* Volume start sector */
 2465              		.loc 1 3152 9 is_stmt 1 view .LVU781
3152:./FW/ff.c     ****         fs->volbase = bsect;                            /* Volume start sector */
 2466              		.loc 1 3152 30 is_stmt 0 view .LVU782
 2467 014c 01F10209 		add	r9, r1, #2
3152:./FW/ff.c     ****         fs->volbase = bsect;                            /* Volume start sector */
 2468              		.loc 1 3152 22 view .LVU783
 2469 0150 C4F81490 		str	r9, [r4, #20]
3153:./FW/ff.c     ****         fs->fatbase = bsect + nrsv;                     /* FAT start sector */
 2470              		.loc 1 3153 9 is_stmt 1 view .LVU784
3153:./FW/ff.c     ****         fs->fatbase = bsect + nrsv;                     /* FAT start sector */
 2471              		.loc 1 3153 21 is_stmt 0 view .LVU785
 2472 0154 E761     		str	r7, [r4, #28]
3154:./FW/ff.c     ****         fs->database = bsect + sysect;                  /* Data start sector */
 2473              		.loc 1 3154 9 is_stmt 1 view .LVU786
3154:./FW/ff.c     ****         fs->database = bsect + sysect;                  /* Data start sector */
 2474              		.loc 1 3154 29 is_stmt 0 view .LVU787
 2475 0156 3A44     		add	r2, r2, r7
3154:./FW/ff.c     ****         fs->database = bsect + sysect;                  /* Data start sector */
 2476              		.loc 1 3154 21 view .LVU788
 2477 0158 2262     		str	r2, [r4, #32]
3155:./FW/ff.c     ****         if (fmt == FS_FAT32) {
 2478              		.loc 1 3155 9 is_stmt 1 view .LVU789
3155:./FW/ff.c     ****         if (fmt == FS_FAT32) {
 2479              		.loc 1 3155 30 is_stmt 0 view .LVU790
 2480 015a 3B44     		add	r3, r3, r7
 2481              	.LVL267:
3155:./FW/ff.c     ****         if (fmt == FS_FAT32) {
 2482              		.loc 1 3155 22 view .LVU791
 2483 015c A362     		str	r3, [r4, #40]
3156:./FW/ff.c     ****             if (ld_word(fs->win + BPB_FSVer32) != 0) { return FR_NO_FILESYSTEM; }   /* (Must be FAT
 2484              		.loc 1 3156 9 is_stmt 1 view .LVU792
3156:./FW/ff.c     ****             if (ld_word(fs->win + BPB_FSVer32) != 0) { return FR_NO_FILESYSTEM; }   /* (Must be FAT
 2485              		.loc 1 3156 12 is_stmt 0 view .LVU793
 2486 015e BBF1030F 		cmp	fp, #3
 2487 0162 5AD0     		beq	.L234
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 157


3162:./FW/ff.c     ****             fs->dirbase = fs->fatbase + fasize;         /* Root directory start sector */
 2488              		.loc 1 3162 13 is_stmt 1 view .LVU794
3162:./FW/ff.c     ****             fs->dirbase = fs->fatbase + fasize;         /* Root directory start sector */
 2489              		.loc 1 3162 16 is_stmt 0 view .LVU795
 2490 0164 BAF1000F 		cmp	r10, #0
 2491 0168 00F0BD80 		beq	.L231
3163:./FW/ff.c     ****             szbfat = (fmt == FS_FAT16) ?                /* (Needed FAT size) */
 2492              		.loc 1 3163 13 is_stmt 1 view .LVU796
3163:./FW/ff.c     ****             szbfat = (fmt == FS_FAT16) ?                /* (Needed FAT size) */
 2493              		.loc 1 3163 39 is_stmt 0 view .LVU797
 2494 016c 4244     		add	r2, r2, r8
3163:./FW/ff.c     ****             szbfat = (fmt == FS_FAT16) ?                /* (Needed FAT size) */
 2495              		.loc 1 3163 25 view .LVU798
 2496 016e 6262     		str	r2, [r4, #36]
3164:./FW/ff.c     ****                      fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 2497              		.loc 1 3164 13 is_stmt 1 view .LVU799
3165:./FW/ff.c     ****         }
 2498              		.loc 1 3165 39 is_stmt 0 view .LVU800
 2499 0170 BBF1020F 		cmp	fp, #2
 2500 0174 62D0     		beq	.L235
3165:./FW/ff.c     ****         }
 2501              		.loc 1 3165 54 discriminator 2 view .LVU801
 2502 0176 09EB4903 		add	r3, r9, r9, lsl #1
3165:./FW/ff.c     ****         }
 2503              		.loc 1 3165 78 discriminator 2 view .LVU802
 2504 017a 09F00109 		and	r9, r9, #1
3165:./FW/ff.c     ****         }
 2505              		.loc 1 3165 39 discriminator 2 view .LVU803
 2506 017e 09EB5309 		add	r9, r9, r3, lsr #1
 2507              	.LVL268:
 2508              	.L206:
3167:./FW/ff.c     **** 
 2509              		.loc 1 3167 9 is_stmt 1 view .LVU804
3167:./FW/ff.c     **** 
 2510              		.loc 1 3167 33 is_stmt 0 view .LVU805
 2511 0182 09F2FF19 		addw	r9, r9, #511
 2512              	.LVL269:
3167:./FW/ff.c     **** 
 2513              		.loc 1 3167 12 view .LVU806
 2514 0186 B6EB592F 		cmp	r6, r9, lsr #9
 2515 018a C0F0AE80 		bcc	.L232
3171:./FW/ff.c     ****         fs->fsi_flag = 0x80;
 2516              		.loc 1 3171 9 is_stmt 1 view .LVU807
3171:./FW/ff.c     ****         fs->fsi_flag = 0x80;
 2517              		.loc 1 3171 39 is_stmt 0 view .LVU808
 2518 018e 4FF0FF33 		mov	r3, #-1
 2519 0192 2361     		str	r3, [r4, #16]
3171:./FW/ff.c     ****         fs->fsi_flag = 0x80;
 2520              		.loc 1 3171 23 view .LVU809
 2521 0194 E360     		str	r3, [r4, #12]
3172:./FW/ff.c     **** #if (_FS_NOFSINFO & 3) != 3
 2522              		.loc 1 3172 9 is_stmt 1 view .LVU810
3172:./FW/ff.c     **** #if (_FS_NOFSINFO & 3) != 3
 2523              		.loc 1 3172 22 is_stmt 0 view .LVU811
 2524 0196 8023     		movs	r3, #128
 2525 0198 2371     		strb	r3, [r4, #4]
3174:./FW/ff.c     ****                 && ld_word(fs->win + BPB_FSInfo32) == 1
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 158


 2526              		.loc 1 3174 9 is_stmt 1 view .LVU812
3174:./FW/ff.c     ****                 && ld_word(fs->win + BPB_FSInfo32) == 1
 2527              		.loc 1 3174 12 is_stmt 0 view .LVU813
 2528 019a BBF1030F 		cmp	fp, #3
 2529 019e 50D0     		beq	.L236
 2530              	.L208:
3193:./FW/ff.c     ****     fs->id = ++Fsid;        /* File system mount ID */
 2531              		.loc 1 3193 5 is_stmt 1 view .LVU814
3193:./FW/ff.c     ****     fs->id = ++Fsid;        /* File system mount ID */
 2532              		.loc 1 3193 17 is_stmt 0 view .LVU815
 2533 01a0 84F800B0 		strb	fp, [r4]
3194:./FW/ff.c     **** #if _USE_LFN == 1
 2534              		.loc 1 3194 5 is_stmt 1 view .LVU816
3194:./FW/ff.c     **** #if _USE_LFN == 1
 2535              		.loc 1 3194 14 is_stmt 0 view .LVU817
 2536 01a4 534A     		ldr	r2, .L239+4
 2537 01a6 1388     		ldrh	r3, [r2]
 2538 01a8 0133     		adds	r3, r3, #1
 2539 01aa 9BB2     		uxth	r3, r3
3194:./FW/ff.c     **** #if _USE_LFN == 1
 2540              		.loc 1 3194 12 view .LVU818
 2541 01ac 1380     		strh	r3, [r2]	@ movhi
 2542 01ae E380     		strh	r3, [r4, #6]	@ movhi
3205:./FW/ff.c     **** #endif
 2543              		.loc 1 3205 5 is_stmt 1 view .LVU819
 2544 01b0 2046     		mov	r0, r4
 2545 01b2 FFF7FEFF 		bl	clear_lock
 2546              	.LVL270:
3207:./FW/ff.c     **** }
 2547              		.loc 1 3207 5 view .LVU820
3207:./FW/ff.c     **** }
 2548              		.loc 1 3207 12 is_stmt 0 view .LVU821
 2549 01b6 74E0     		b	.L192
 2550              	.LVL271:
 2551              	.L215:
3058:./FW/ff.c     ****         }
 2552              		.loc 1 3058 63 view .LVU822
 2553 01b8 0020     		movs	r0, #0
 2554              	.LVL272:
 2555              	.L197:
3058:./FW/ff.c     ****         }
 2556              		.loc 1 3058 19 discriminator 4 view .LVU823
 2557 01ba 04AB     		add	r3, sp, #16
 2558 01bc 03EB8603 		add	r3, r3, r6, lsl #2
 2559 01c0 43F8100C 		str	r0, [r3, #-16]
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2560              		.loc 1 3056 28 is_stmt 1 discriminator 4 view .LVU824
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2561              		.loc 1 3056 29 is_stmt 0 discriminator 4 view .LVU825
 2562 01c4 0136     		adds	r6, r6, #1
 2563              	.LVL273:
 2564              	.L195:
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2565              		.loc 1 3056 21 is_stmt 1 discriminator 2 view .LVU826
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2566              		.loc 1 3056 9 is_stmt 0 discriminator 2 view .LVU827
 2567 01c6 032E     		cmp	r6, #3
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 159


 2568 01c8 0ED8     		bhi	.L237
3057:./FW/ff.c     ****             br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 2569              		.loc 1 3057 13 is_stmt 1 view .LVU828
3057:./FW/ff.c     ****             br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 2570              		.loc 1 3057 18 is_stmt 0 view .LVU829
 2571 01ca 04F13000 		add	r0, r4, #48
3057:./FW/ff.c     ****             br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 2572              		.loc 1 3057 43 view .LVU830
 2573 01ce 3301     		lsls	r3, r6, #4
3057:./FW/ff.c     ****             br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 2574              		.loc 1 3057 39 view .LVU831
 2575 01d0 03F5DF73 		add	r3, r3, #446
3057:./FW/ff.c     ****             br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 2576              		.loc 1 3057 16 view .LVU832
 2577 01d4 1844     		add	r0, r0, r3
 2578              	.LVL274:
3058:./FW/ff.c     ****         }
 2579              		.loc 1 3058 13 is_stmt 1 view .LVU833
3058:./FW/ff.c     ****         }
 2580              		.loc 1 3058 23 is_stmt 0 view .LVU834
 2581 01d6 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
3058:./FW/ff.c     ****         }
 2582              		.loc 1 3058 63 view .LVU835
 2583 01d8 002B     		cmp	r3, #0
 2584 01da EDD0     		beq	.L215
3058:./FW/ff.c     ****         }
 2585              		.loc 1 3058 38 discriminator 1 view .LVU836
 2586 01dc 0830     		adds	r0, r0, #8
 2587              	.LVL275:
3058:./FW/ff.c     ****         }
 2588              		.loc 1 3058 38 discriminator 1 view .LVU837
 2589 01de FFF7FEFF 		bl	ld_dword
 2590              	.LVL276:
3058:./FW/ff.c     ****         }
 2591              		.loc 1 3058 38 discriminator 1 view .LVU838
 2592 01e2 EAE7     		b	.L197
 2593              	.LVL277:
 2594              	.L214:
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2595              		.loc 1 3056 16 view .LVU839
 2596 01e4 0026     		movs	r6, #0
 2597              	.LVL278:
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2598              		.loc 1 3056 16 view .LVU840
 2599 01e6 EEE7     		b	.L195
 2600              	.LVL279:
 2601              	.L237:
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2602              		.loc 1 3056 16 view .LVU841
 2603 01e8 0026     		movs	r6, #0
 2604              	.LVL280:
3056:./FW/ff.c     ****             pt = fs->win + (MBR_Table + i * SZ_PTE);
 2605              		.loc 1 3056 16 view .LVU842
 2606 01ea 0AE0     		b	.L200
 2607              	.LVL281:
 2608              	.L238:
3064:./FW/ff.c     ****         } while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 160


 2609              		.loc 1 3064 27 discriminator 1 view .LVU843
 2610 01ec 3946     		mov	r1, r7
 2611 01ee 2046     		mov	r0, r4
 2612 01f0 FFF7FEFF 		bl	check_fs
 2613              	.LVL282:
3065:./FW/ff.c     ****     }
 2614              		.loc 1 3065 17 is_stmt 1 discriminator 1 view .LVU844
3065:./FW/ff.c     ****     }
 2615              		.loc 1 3065 9 is_stmt 0 discriminator 1 view .LVU845
 2616 01f4 0128     		cmp	r0, #1
 2617 01f6 7FF640AF 		bls	.L196
 2618              	.LVL283:
 2619              	.L199:
3065:./FW/ff.c     ****     }
 2620              		.loc 1 3065 46 discriminator 1 view .LVU846
 2621 01fa 0136     		adds	r6, r6, #1
 2622              	.LVL284:
3065:./FW/ff.c     ****     }
 2623              		.loc 1 3065 46 discriminator 1 view .LVU847
 2624 01fc 032E     		cmp	r6, #3
 2625 01fe 3FF63CAF 		bhi	.L196
 2626              	.LVL285:
 2627              	.L200:
3062:./FW/ff.c     ****             bsect = br[i];
 2628              		.loc 1 3062 9 is_stmt 1 view .LVU848
3063:./FW/ff.c     ****             fmt = bsect ? check_fs(fs, bsect) : 3;  /* Check the partition */
 2629              		.loc 1 3063 13 view .LVU849
3063:./FW/ff.c     ****             fmt = bsect ? check_fs(fs, bsect) : 3;  /* Check the partition */
 2630              		.loc 1 3063 19 is_stmt 0 view .LVU850
 2631 0202 04AB     		add	r3, sp, #16
 2632 0204 03EB8603 		add	r3, r3, r6, lsl #2
 2633 0208 53F8107C 		ldr	r7, [r3, #-16]
 2634              	.LVL286:
3064:./FW/ff.c     ****         } while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 2635              		.loc 1 3064 13 is_stmt 1 view .LVU851
3064:./FW/ff.c     ****         } while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 2636              		.loc 1 3064 17 is_stmt 0 view .LVU852
 2637 020c 002F     		cmp	r7, #0
 2638 020e EDD1     		bne	.L238
 2639 0210 0320     		movs	r0, #3
 2640 0212 F2E7     		b	.L199
 2641              	.LVL287:
 2642              	.L227:
3148:./FW/ff.c     ****         if (nclst <= MAX_FAT12) { fmt = FS_FAT12; }
 2643              		.loc 1 3148 39 view .LVU853
 2644 0214 4FF0020B 		mov	fp, #2
 2645 0218 92E7     		b	.L203
 2646              	.LVL288:
 2647              	.L234:
3157:./FW/ff.c     ****             if (fs->n_rootdir) { return FR_NO_FILESYSTEM; } /* (BPB_RootEntCnt must be 0) */
 2648              		.loc 1 3157 13 is_stmt 1 view .LVU854
3157:./FW/ff.c     ****             if (fs->n_rootdir) { return FR_NO_FILESYSTEM; } /* (BPB_RootEntCnt must be 0) */
 2649              		.loc 1 3157 17 is_stmt 0 view .LVU855
 2650 021a 04F15A00 		add	r0, r4, #90
 2651 021e FFF7FEFF 		bl	ld_word
 2652              	.LVL289:
3157:./FW/ff.c     ****             if (fs->n_rootdir) { return FR_NO_FILESYSTEM; } /* (BPB_RootEntCnt must be 0) */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 161


 2653              		.loc 1 3157 16 view .LVU856
 2654 0222 0028     		cmp	r0, #0
 2655 0224 5BD1     		bne	.L229
3158:./FW/ff.c     ****             fs->dirbase = ld_dword(fs->win + BPB_RootClus32);   /* Root directory start cluster */
 2656              		.loc 1 3158 13 is_stmt 1 view .LVU857
3158:./FW/ff.c     ****             fs->dirbase = ld_dword(fs->win + BPB_RootClus32);   /* Root directory start cluster */
 2657              		.loc 1 3158 16 is_stmt 0 view .LVU858
 2658 0226 BAF1000F 		cmp	r10, #0
 2659 022a 5AD1     		bne	.L230
3159:./FW/ff.c     ****             szbfat = fs->n_fatent * 4;                  /* (Needed FAT size) */
 2660              		.loc 1 3159 13 is_stmt 1 view .LVU859
3159:./FW/ff.c     ****             szbfat = fs->n_fatent * 4;                  /* (Needed FAT size) */
 2661              		.loc 1 3159 27 is_stmt 0 view .LVU860
 2662 022c 04F15C00 		add	r0, r4, #92
 2663 0230 FFF7FEFF 		bl	ld_dword
 2664              	.LVL290:
3159:./FW/ff.c     ****             szbfat = fs->n_fatent * 4;                  /* (Needed FAT size) */
 2665              		.loc 1 3159 25 view .LVU861
 2666 0234 6062     		str	r0, [r4, #36]
3160:./FW/ff.c     ****         } else {
 2667              		.loc 1 3160 13 is_stmt 1 view .LVU862
3160:./FW/ff.c     ****         } else {
 2668              		.loc 1 3160 20 is_stmt 0 view .LVU863
 2669 0236 4FEA8909 		lsl	r9, r9, #2
 2670              	.LVL291:
3160:./FW/ff.c     ****         } else {
 2671              		.loc 1 3160 20 view .LVU864
 2672 023a A2E7     		b	.L206
 2673              	.LVL292:
 2674              	.L235:
3165:./FW/ff.c     ****         }
 2675              		.loc 1 3165 39 discriminator 1 view .LVU865
 2676 023c 4FEA4909 		lsl	r9, r9, #1
 2677 0240 9FE7     		b	.L206
 2678              	.LVL293:
 2679              	.L236:
3175:./FW/ff.c     ****                 && move_window(fs, bsect + 1) == FR_OK) {
 2680              		.loc 1 3175 20 view .LVU866
 2681 0242 04F16000 		add	r0, r4, #96
 2682 0246 FFF7FEFF 		bl	ld_word
 2683              	.LVL294:
3175:./FW/ff.c     ****                 && move_window(fs, bsect + 1) == FR_OK) {
 2684              		.loc 1 3175 17 view .LVU867
 2685 024a 0128     		cmp	r0, #1
 2686 024c A8D1     		bne	.L208
3176:./FW/ff.c     ****             fs->fsi_flag = 0;
 2687              		.loc 1 3176 20 view .LVU868
 2688 024e 791C     		adds	r1, r7, #1
 2689 0250 2046     		mov	r0, r4
 2690 0252 FFF7FEFF 		bl	move_window
 2691              	.LVL295:
3176:./FW/ff.c     ****             fs->fsi_flag = 0;
 2692              		.loc 1 3176 17 view .LVU869
 2693 0256 0028     		cmp	r0, #0
 2694 0258 A2D1     		bne	.L208
3177:./FW/ff.c     ****             if (ld_word(fs->win + BS_55AA) == 0xAA55    /* Load FSINFO data if available */
 2695              		.loc 1 3177 13 is_stmt 1 view .LVU870
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 162


3177:./FW/ff.c     ****             if (ld_word(fs->win + BS_55AA) == 0xAA55    /* Load FSINFO data if available */
 2696              		.loc 1 3177 26 is_stmt 0 view .LVU871
 2697 025a 0023     		movs	r3, #0
 2698 025c 2371     		strb	r3, [r4, #4]
3178:./FW/ff.c     ****                     && ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2699              		.loc 1 3178 13 is_stmt 1 view .LVU872
3178:./FW/ff.c     ****                     && ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2700              		.loc 1 3178 17 is_stmt 0 view .LVU873
 2701 025e 04F22E20 		addw	r0, r4, #558
 2702 0262 FFF7FEFF 		bl	ld_word
 2703              	.LVL296:
3178:./FW/ff.c     ****                     && ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2704              		.loc 1 3178 16 view .LVU874
 2705 0266 4AF65523 		movw	r3, #43605
 2706 026a 9842     		cmp	r0, r3
 2707 026c 98D1     		bne	.L208
3179:./FW/ff.c     ****                     && ld_dword(fs->win + FSI_StrucSig) == 0x61417272) {
 2708              		.loc 1 3179 24 view .LVU875
 2709 026e 04F13000 		add	r0, r4, #48
 2710 0272 FFF7FEFF 		bl	ld_dword
 2711              	.LVL297:
3179:./FW/ff.c     ****                     && ld_dword(fs->win + FSI_StrucSig) == 0x61417272) {
 2712              		.loc 1 3179 21 view .LVU876
 2713 0276 204B     		ldr	r3, .L239+8
 2714 0278 9842     		cmp	r0, r3
 2715 027a 91D1     		bne	.L208
3180:./FW/ff.c     **** #if (_FS_NOFSINFO & 1) == 0
 2716              		.loc 1 3180 24 view .LVU877
 2717 027c 04F50570 		add	r0, r4, #532
 2718 0280 FFF7FEFF 		bl	ld_dword
 2719              	.LVL298:
3180:./FW/ff.c     **** #if (_FS_NOFSINFO & 1) == 0
 2720              		.loc 1 3180 21 view .LVU878
 2721 0284 1D4B     		ldr	r3, .L239+12
 2722 0286 9842     		cmp	r0, r3
 2723 0288 8AD1     		bne	.L208
3182:./FW/ff.c     **** #endif
 2724              		.loc 1 3182 17 is_stmt 1 view .LVU879
3182:./FW/ff.c     **** #endif
 2725              		.loc 1 3182 33 is_stmt 0 view .LVU880
 2726 028a 04F50670 		add	r0, r4, #536
 2727 028e FFF7FEFF 		bl	ld_dword
 2728              	.LVL299:
3182:./FW/ff.c     **** #endif
 2729              		.loc 1 3182 31 view .LVU881
 2730 0292 2061     		str	r0, [r4, #16]
3185:./FW/ff.c     **** #endif
 2731              		.loc 1 3185 17 is_stmt 1 view .LVU882
3185:./FW/ff.c     **** #endif
 2732              		.loc 1 3185 33 is_stmt 0 view .LVU883
 2733 0294 04F50770 		add	r0, r4, #540
 2734 0298 FFF7FEFF 		bl	ld_dword
 2735              	.LVL300:
3185:./FW/ff.c     **** #endif
 2736              		.loc 1 3185 31 view .LVU884
 2737 029c E060     		str	r0, [r4, #12]
 2738 029e 7FE7     		b	.L208
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 163


 2739              	.LVL301:
 2740              	.L209:
3015:./FW/ff.c     **** 
 2741              		.loc 1 3015 27 view .LVU885
 2742 02a0 0B25     		movs	r5, #11
 2743              	.LVL302:
 2744              	.L192:
3208:./FW/ff.c     **** 
 2745              		.loc 1 3208 1 view .LVU886
 2746 02a2 2846     		mov	r0, r5
 2747 02a4 05B0     		add	sp, sp, #20
 2748              	.LCFI27:
 2749              		.cfi_remember_state
 2750              		.cfi_def_cfa_offset 36
 2751              		@ sp needed
 2752 02a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2753              	.LVL303:
 2754              	.L210:
 2755              	.LCFI28:
 2756              		.cfi_restore_state
3019:./FW/ff.c     **** 
 2757              		.loc 1 3019 23 view .LVU887
 2758 02aa 0C25     		movs	r5, #12
 2759              	.LVL304:
3019:./FW/ff.c     **** 
 2760              		.loc 1 3019 23 view .LVU888
 2761 02ac F9E7     		b	.L192
 2762              	.LVL305:
 2763              	.L212:
3042:./FW/ff.c     ****     }
 2764              		.loc 1 3042 16 view .LVU889
 2765 02ae 0325     		movs	r5, #3
 2766 02b0 F7E7     		b	.L192
 2767              	.L213:
3045:./FW/ff.c     ****     }
 2768              		.loc 1 3045 16 view .LVU890
 2769 02b2 0A25     		movs	r5, #10
 2770 02b4 F5E7     		b	.L192
 2771              	.LVL306:
 2772              	.L217:
3067:./FW/ff.c     ****     if (fmt >= 2) { return FR_NO_FILESYSTEM; }  /* No FAT volume is found */
 2773              		.loc 1 3067 28 view .LVU891
 2774 02b6 0125     		movs	r5, #1
 2775 02b8 F3E7     		b	.L192
 2776              	.L218:
3068:./FW/ff.c     **** 
 2777              		.loc 1 3068 28 view .LVU892
 2778 02ba 0D25     		movs	r5, #13
 2779 02bc F1E7     		b	.L192
 2780              	.LVL307:
 2781              	.L219:
3120:./FW/ff.c     **** 
 2782              		.loc 1 3120 67 view .LVU893
 2783 02be 0D25     		movs	r5, #13
 2784 02c0 EFE7     		b	.L192
 2785              	.LVL308:
 2786              	.L220:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 164


3127:./FW/ff.c     ****         fasize *= fs->n_fats;                           /* Number of sectors for FAT area */
 2787              		.loc 1 3127 58 view .LVU894
 2788 02c2 0D25     		movs	r5, #13
 2789 02c4 EDE7     		b	.L192
 2790              	.LVL309:
 2791              	.L221:
3131:./FW/ff.c     **** 
 2792              		.loc 1 3131 71 view .LVU895
 2793 02c6 0D25     		movs	r5, #13
 2794 02c8 EBE7     		b	.L192
 2795              	.L222:
 2796 02ca 0D25     		movs	r5, #13
 2797 02cc E9E7     		b	.L192
 2798              	.L223:
3134:./FW/ff.c     **** 
 2799              		.loc 1 3134 57 view .LVU896
 2800 02ce 0D25     		movs	r5, #13
 2801 02d0 E7E7     		b	.L192
 2802              	.LVL310:
 2803              	.L224:
3140:./FW/ff.c     **** 
 2804              		.loc 1 3140 33 view .LVU897
 2805 02d2 0D25     		movs	r5, #13
 2806 02d4 E5E7     		b	.L192
 2807              	.LVL311:
 2808              	.L225:
3144:./FW/ff.c     ****         nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
 2809              		.loc 1 3144 38 view .LVU898
 2810 02d6 0D25     		movs	r5, #13
 2811 02d8 E3E7     		b	.L192
 2812              	.LVL312:
 2813              	.L226:
3146:./FW/ff.c     ****         fmt = FS_FAT32;
 2814              		.loc 1 3146 34 view .LVU899
 2815 02da 0D25     		movs	r5, #13
 2816 02dc E1E7     		b	.L192
 2817              	.LVL313:
 2818              	.L229:
3157:./FW/ff.c     ****             if (fs->n_rootdir) { return FR_NO_FILESYSTEM; } /* (BPB_RootEntCnt must be 0) */
 2819              		.loc 1 3157 63 view .LVU900
 2820 02de 0D25     		movs	r5, #13
 2821 02e0 DFE7     		b	.L192
 2822              	.L230:
3158:./FW/ff.c     ****             fs->dirbase = ld_dword(fs->win + BPB_RootClus32);   /* Root directory start cluster */
 2823              		.loc 1 3158 41 view .LVU901
 2824 02e2 0D25     		movs	r5, #13
 2825 02e4 DDE7     		b	.L192
 2826              	.LVL314:
 2827              	.L231:
3162:./FW/ff.c     ****             fs->dirbase = fs->fatbase + fasize;         /* Root directory start sector */
 2828              		.loc 1 3162 46 view .LVU902
 2829 02e6 0D25     		movs	r5, #13
 2830 02e8 DBE7     		b	.L192
 2831              	.LVL315:
 2832              	.L232:
3167:./FW/ff.c     **** 
 2833              		.loc 1 3167 68 view .LVU903
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 165


 2834 02ea 0D25     		movs	r5, #13
 2835 02ec D9E7     		b	.L192
 2836              	.L240:
 2837 02ee 00BF     		.align	2
 2838              	.L239:
 2839 02f0 00000000 		.word	.LANCHOR2
 2840 02f4 00000000 		.word	.LANCHOR3
 2841 02f8 52526141 		.word	1096897106
 2842 02fc 72724161 		.word	1631679090
 2843              		.cfi_endproc
 2844              	.LFE975:
 2846              		.section	.text.put_fat,"ax",%progbits
 2847              		.align	1
 2848              		.syntax unified
 2849              		.thumb
 2850              		.thumb_func
 2851              		.fpu fpv4-sp-d16
 2853              	put_fat:
 2854              	.LVL316:
 2855              	.LFB957:
1079:./FW/ff.c     ****     UINT bc;
 2856              		.loc 1 1079 3 is_stmt 1 view -0
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 0
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
1079:./FW/ff.c     ****     UINT bc;
 2860              		.loc 1 1079 3 is_stmt 0 view .LVU905
 2861 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2862              	.LCFI29:
 2863              		.cfi_def_cfa_offset 32
 2864              		.cfi_offset 4, -32
 2865              		.cfi_offset 5, -28
 2866              		.cfi_offset 6, -24
 2867              		.cfi_offset 7, -20
 2868              		.cfi_offset 8, -16
 2869              		.cfi_offset 9, -12
 2870              		.cfi_offset 10, -8
 2871              		.cfi_offset 14, -4
1080:./FW/ff.c     ****     BYTE *p;
 2872              		.loc 1 1080 5 is_stmt 1 view .LVU906
1081:./FW/ff.c     ****     FRESULT res = FR_INT_ERR;
 2873              		.loc 1 1081 5 view .LVU907
1082:./FW/ff.c     **** 
 2874              		.loc 1 1082 5 view .LVU908
 2875              	.LVL317:
1084:./FW/ff.c     ****         switch (fs->fs_type) {
 2876              		.loc 1 1084 5 view .LVU909
1084:./FW/ff.c     ****         switch (fs->fs_type) {
 2877              		.loc 1 1084 8 is_stmt 0 view .LVU910
 2878 0004 0129     		cmp	r1, #1
 2879 0006 7ED9     		bls	.L249
 2880 0008 0746     		mov	r7, r0
 2881 000a 0C46     		mov	r4, r1
 2882 000c 1646     		mov	r6, r2
1084:./FW/ff.c     ****         switch (fs->fs_type) {
 2883              		.loc 1 1084 31 discriminator 1 view .LVU911
 2884 000e 4369     		ldr	r3, [r0, #20]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 166


1084:./FW/ff.c     ****         switch (fs->fs_type) {
 2885              		.loc 1 1084 19 discriminator 1 view .LVU912
 2886 0010 8B42     		cmp	r3, r1
 2887 0012 7AD9     		bls	.L250
1085:./FW/ff.c     ****         case FS_FAT12 : /* Bitfield items */
 2888              		.loc 1 1085 9 is_stmt 1 view .LVU913
1085:./FW/ff.c     ****         case FS_FAT12 : /* Bitfield items */
 2889              		.loc 1 1085 19 is_stmt 0 view .LVU914
 2890 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1085:./FW/ff.c     ****         case FS_FAT12 : /* Bitfield items */
 2891              		.loc 1 1085 9 view .LVU915
 2892 0016 022B     		cmp	r3, #2
 2893 0018 45D0     		beq	.L243
 2894 001a 032B     		cmp	r3, #3
 2895 001c 57D0     		beq	.L244
 2896 001e 012B     		cmp	r3, #1
 2897 0020 03D0     		beq	.L253
 2898 0022 0225     		movs	r5, #2
 2899              	.LVL318:
 2900              	.L242:
1122:./FW/ff.c     **** }
 2901              		.loc 1 1122 5 is_stmt 1 view .LVU916
1123:./FW/ff.c     **** 
 2902              		.loc 1 1123 1 is_stmt 0 view .LVU917
 2903 0024 2846     		mov	r0, r5
 2904 0026 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2905              	.LVL319:
 2906              	.L253:
1087:./FW/ff.c     ****             bc += bc / 2;
 2907              		.loc 1 1087 13 is_stmt 1 view .LVU918
1088:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2908              		.loc 1 1088 13 view .LVU919
1088:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2909              		.loc 1 1088 16 is_stmt 0 view .LVU920
 2910 002a 01EB5108 		add	r8, r1, r1, lsr #1
 2911              	.LVL320:
1089:./FW/ff.c     ****             if (res != FR_OK) { break; }
 2912              		.loc 1 1089 13 is_stmt 1 view .LVU921
1089:./FW/ff.c     ****             if (res != FR_OK) { break; }
 2913              		.loc 1 1089 37 is_stmt 0 view .LVU922
 2914 002e 016A     		ldr	r1, [r0, #32]
 2915              	.LVL321:
1089:./FW/ff.c     ****             if (res != FR_OK) { break; }
 2916              		.loc 1 1089 19 view .LVU923
 2917 0030 01EB5821 		add	r1, r1, r8, lsr #9
 2918 0034 FFF7FEFF 		bl	move_window
 2919              	.LVL322:
1090:./FW/ff.c     ****             p = fs->win + bc++ % SS(fs);
 2920              		.loc 1 1090 13 is_stmt 1 view .LVU924
1090:./FW/ff.c     ****             p = fs->win + bc++ % SS(fs);
 2921              		.loc 1 1090 16 is_stmt 0 view .LVU925
 2922 0038 0546     		mov	r5, r0
 2923 003a 0028     		cmp	r0, #0
 2924 003c F2D1     		bne	.L242
1091:./FW/ff.c     ****             *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2925              		.loc 1 1091 13 is_stmt 1 view .LVU926
1091:./FW/ff.c     ****             *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 167


 2926              		.loc 1 1091 17 is_stmt 0 view .LVU927
 2927 003e 07F1300A 		add	r10, r7, #48
1091:./FW/ff.c     ****             *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2928              		.loc 1 1091 32 view .LVU928
 2929 0042 08F10109 		add	r9, r8, #1
 2930              	.LVL323:
1091:./FW/ff.c     ****             *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2931              		.loc 1 1091 32 view .LVU929
 2932 0046 C8F30808 		ubfx	r8, r8, #0, #9
 2933              	.LVL324:
1092:./FW/ff.c     ****             fs->wflag = 1;
 2934              		.loc 1 1092 13 is_stmt 1 view .LVU930
1092:./FW/ff.c     ****             fs->wflag = 1;
 2935              		.loc 1 1092 16 is_stmt 0 view .LVU931
 2936 004a 14F00104 		ands	r4, r4, #1
 2937              	.LVL325:
1092:./FW/ff.c     ****             fs->wflag = 1;
 2938              		.loc 1 1092 16 view .LVU932
 2939 004e 1FD0     		beq	.L245
1092:./FW/ff.c     ****             fs->wflag = 1;
 2940              		.loc 1 1092 33 discriminator 1 view .LVU933
 2941 0050 1AF90830 		ldrsb	r3, [r10, r8]
1092:./FW/ff.c     ****             fs->wflag = 1;
 2942              		.loc 1 1092 36 discriminator 1 view .LVU934
 2943 0054 03F00F03 		and	r3, r3, #15
1092:./FW/ff.c     ****             fs->wflag = 1;
 2944              		.loc 1 1092 57 discriminator 1 view .LVU935
 2945 0058 3201     		lsls	r2, r6, #4
 2946 005a 02F47F62 		and	r2, r2, #4080
1092:./FW/ff.c     ****             fs->wflag = 1;
 2947              		.loc 1 1092 44 discriminator 1 view .LVU936
 2948 005e 1343     		orrs	r3, r3, r2
1092:./FW/ff.c     ****             fs->wflag = 1;
 2949              		.loc 1 1092 16 discriminator 1 view .LVU937
 2950 0060 DBB2     		uxtb	r3, r3
 2951              	.L246:
1092:./FW/ff.c     ****             fs->wflag = 1;
 2952              		.loc 1 1092 16 discriminator 4 view .LVU938
 2953 0062 0AF80830 		strb	r3, [r10, r8]
1093:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2954              		.loc 1 1093 13 is_stmt 1 discriminator 4 view .LVU939
1093:./FW/ff.c     ****             res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2955              		.loc 1 1093 23 is_stmt 0 discriminator 4 view .LVU940
 2956 0066 0123     		movs	r3, #1
 2957 0068 FB70     		strb	r3, [r7, #3]
1094:./FW/ff.c     ****             if (res != FR_OK) { break; }
 2958              		.loc 1 1094 13 is_stmt 1 discriminator 4 view .LVU941
1094:./FW/ff.c     ****             if (res != FR_OK) { break; }
 2959              		.loc 1 1094 37 is_stmt 0 discriminator 4 view .LVU942
 2960 006a 396A     		ldr	r1, [r7, #32]
1094:./FW/ff.c     ****             if (res != FR_OK) { break; }
 2961              		.loc 1 1094 19 discriminator 4 view .LVU943
 2962 006c 01EB5921 		add	r1, r1, r9, lsr #9
 2963 0070 3846     		mov	r0, r7
 2964              	.LVL326:
1094:./FW/ff.c     ****             if (res != FR_OK) { break; }
 2965              		.loc 1 1094 19 discriminator 4 view .LVU944
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 168


 2966 0072 FFF7FEFF 		bl	move_window
 2967              	.LVL327:
1095:./FW/ff.c     ****             p = fs->win + bc % SS(fs);
 2968              		.loc 1 1095 13 is_stmt 1 discriminator 4 view .LVU945
1095:./FW/ff.c     ****             p = fs->win + bc % SS(fs);
 2969              		.loc 1 1095 16 is_stmt 0 discriminator 4 view .LVU946
 2970 0076 0546     		mov	r5, r0
 2971 0078 0028     		cmp	r0, #0
 2972 007a D3D1     		bne	.L242
1096:./FW/ff.c     ****             *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2973              		.loc 1 1096 13 is_stmt 1 view .LVU947
1096:./FW/ff.c     ****             *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2974              		.loc 1 1096 30 is_stmt 0 view .LVU948
 2975 007c C9F30809 		ubfx	r9, r9, #0, #9
 2976              	.LVL328:
1097:./FW/ff.c     ****             fs->wflag = 1;
 2977              		.loc 1 1097 13 is_stmt 1 view .LVU949
1097:./FW/ff.c     ****             fs->wflag = 1;
 2978              		.loc 1 1097 16 is_stmt 0 view .LVU950
 2979 0080 44B1     		cbz	r4, .L247
1097:./FW/ff.c     ****             fs->wflag = 1;
 2980              		.loc 1 1097 16 discriminator 1 view .LVU951
 2981 0082 C6F30712 		ubfx	r2, r6, #4, #8
 2982              	.LVL329:
 2983              	.L248:
1097:./FW/ff.c     ****             fs->wflag = 1;
 2984              		.loc 1 1097 16 discriminator 4 view .LVU952
 2985 0086 0AF80920 		strb	r2, [r10, r9]
1098:./FW/ff.c     ****             break;
 2986              		.loc 1 1098 13 is_stmt 1 discriminator 4 view .LVU953
1098:./FW/ff.c     ****             break;
 2987              		.loc 1 1098 23 is_stmt 0 discriminator 4 view .LVU954
 2988 008a 0123     		movs	r3, #1
 2989 008c FB70     		strb	r3, [r7, #3]
1099:./FW/ff.c     **** 
 2990              		.loc 1 1099 13 is_stmt 1 discriminator 4 view .LVU955
 2991 008e C9E7     		b	.L242
 2992              	.LVL330:
 2993              	.L245:
1092:./FW/ff.c     ****             fs->wflag = 1;
 2994              		.loc 1 1092 16 is_stmt 0 discriminator 2 view .LVU956
 2995 0090 F3B2     		uxtb	r3, r6
 2996 0092 E6E7     		b	.L246
 2997              	.LVL331:
 2998              	.L247:
1097:./FW/ff.c     ****             fs->wflag = 1;
 2999              		.loc 1 1097 52 discriminator 2 view .LVU957
 3000 0094 1AF90920 		ldrsb	r2, [r10, r9]
1097:./FW/ff.c     ****             fs->wflag = 1;
 3001              		.loc 1 1097 55 discriminator 2 view .LVU958
 3002 0098 22F00F02 		bic	r2, r2, #15
1097:./FW/ff.c     ****             fs->wflag = 1;
 3003              		.loc 1 1097 83 discriminator 2 view .LVU959
 3004 009c C6F30326 		ubfx	r6, r6, #8, #4
 3005              	.LVL332:
1097:./FW/ff.c     ****             fs->wflag = 1;
 3006              		.loc 1 1097 63 discriminator 2 view .LVU960
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 169


 3007 00a0 3243     		orrs	r2, r2, r6
1097:./FW/ff.c     ****             fs->wflag = 1;
 3008              		.loc 1 1097 16 discriminator 2 view .LVU961
 3009 00a2 D2B2     		uxtb	r2, r2
 3010 00a4 EFE7     		b	.L248
 3011              	.LVL333:
 3012              	.L243:
1102:./FW/ff.c     ****             if (res != FR_OK) { break; }
 3013              		.loc 1 1102 13 is_stmt 1 view .LVU962
1102:./FW/ff.c     ****             if (res != FR_OK) { break; }
 3014              		.loc 1 1102 37 is_stmt 0 view .LVU963
 3015 00a6 016A     		ldr	r1, [r0, #32]
 3016              	.LVL334:
1102:./FW/ff.c     ****             if (res != FR_OK) { break; }
 3017              		.loc 1 1102 19 view .LVU964
 3018 00a8 01EB1421 		add	r1, r1, r4, lsr #8
 3019 00ac FFF7FEFF 		bl	move_window
 3020              	.LVL335:
1103:./FW/ff.c     ****             st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 3021              		.loc 1 1103 13 is_stmt 1 view .LVU965
1103:./FW/ff.c     ****             st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 3022              		.loc 1 1103 16 is_stmt 0 view .LVU966
 3023 00b0 0546     		mov	r5, r0
 3024 00b2 0028     		cmp	r0, #0
 3025 00b4 B6D1     		bne	.L242
1104:./FW/ff.c     ****             fs->wflag = 1;
 3026              		.loc 1 1104 13 is_stmt 1 view .LVU967
1104:./FW/ff.c     ****             fs->wflag = 1;
 3027              		.loc 1 1104 21 is_stmt 0 view .LVU968
 3028 00b6 07F13000 		add	r0, r7, #48
 3029              	.LVL336:
1104:./FW/ff.c     ****             fs->wflag = 1;
 3030              		.loc 1 1104 36 view .LVU969
 3031 00ba 6400     		lsls	r4, r4, #1
 3032              	.LVL337:
1104:./FW/ff.c     ****             fs->wflag = 1;
 3033              		.loc 1 1104 40 view .LVU970
 3034 00bc 04F4FF74 		and	r4, r4, #510
1104:./FW/ff.c     ****             fs->wflag = 1;
 3035              		.loc 1 1104 13 view .LVU971
 3036 00c0 B1B2     		uxth	r1, r6
 3037 00c2 2044     		add	r0, r0, r4
 3038 00c4 FFF7FEFF 		bl	st_word
 3039              	.LVL338:
1105:./FW/ff.c     ****             break;
 3040              		.loc 1 1105 13 is_stmt 1 view .LVU972
1105:./FW/ff.c     ****             break;
 3041              		.loc 1 1105 23 is_stmt 0 view .LVU973
 3042 00c8 0123     		movs	r3, #1
 3043 00ca FB70     		strb	r3, [r7, #3]
1106:./FW/ff.c     **** 
 3044              		.loc 1 1106 13 is_stmt 1 view .LVU974
 3045 00cc AAE7     		b	.L242
 3046              	.LVL339:
 3047              	.L244:
1112:./FW/ff.c     ****             if (res != FR_OK) { break; }
 3048              		.loc 1 1112 13 view .LVU975
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 170


1112:./FW/ff.c     ****             if (res != FR_OK) { break; }
 3049              		.loc 1 1112 37 is_stmt 0 view .LVU976
 3050 00ce 016A     		ldr	r1, [r0, #32]
 3051              	.LVL340:
1112:./FW/ff.c     ****             if (res != FR_OK) { break; }
 3052              		.loc 1 1112 19 view .LVU977
 3053 00d0 01EBD411 		add	r1, r1, r4, lsr #7
 3054 00d4 FFF7FEFF 		bl	move_window
 3055              	.LVL341:
1113:./FW/ff.c     ****             if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3056              		.loc 1 1113 13 is_stmt 1 view .LVU978
1113:./FW/ff.c     ****             if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3057              		.loc 1 1113 16 is_stmt 0 view .LVU979
 3058 00d8 0546     		mov	r5, r0
 3059 00da 0028     		cmp	r0, #0
 3060 00dc A2D1     		bne	.L242
1114:./FW/ff.c     ****                 val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 3061              		.loc 1 1114 13 is_stmt 1 view .LVU980
1115:./FW/ff.c     ****             }
 3062              		.loc 1 1115 17 view .LVU981
1115:./FW/ff.c     ****             }
 3063              		.loc 1 1115 28 is_stmt 0 view .LVU982
 3064 00de 26F07046 		bic	r6, r6, #-268435456
 3065              	.LVL342:
1115:./FW/ff.c     ****             }
 3066              		.loc 1 1115 54 view .LVU983
 3067 00e2 07F13003 		add	r3, r7, #48
1115:./FW/ff.c     ****             }
 3068              		.loc 1 1115 69 view .LVU984
 3069 00e6 A400     		lsls	r4, r4, #2
 3070              	.LVL343:
1115:./FW/ff.c     ****             }
 3071              		.loc 1 1115 73 view .LVU985
 3072 00e8 04F4FE74 		and	r4, r4, #508
1115:./FW/ff.c     ****             }
 3073              		.loc 1 1115 45 view .LVU986
 3074 00ec 1C44     		add	r4, r4, r3
 3075 00ee 2046     		mov	r0, r4
 3076              	.LVL344:
1115:./FW/ff.c     ****             }
 3077              		.loc 1 1115 45 view .LVU987
 3078 00f0 FFF7FEFF 		bl	ld_dword
 3079              	.LVL345:
1115:./FW/ff.c     ****             }
 3080              		.loc 1 1115 83 view .LVU988
 3081 00f4 00F07041 		and	r1, r0, #-268435456
 3082              	.LVL346:
1117:./FW/ff.c     ****             fs->wflag = 1;
 3083              		.loc 1 1117 13 is_stmt 1 view .LVU989
 3084 00f8 3143     		orrs	r1, r1, r6
 3085              	.LVL347:
1117:./FW/ff.c     ****             fs->wflag = 1;
 3086              		.loc 1 1117 13 is_stmt 0 view .LVU990
 3087 00fa 2046     		mov	r0, r4
 3088 00fc FFF7FEFF 		bl	st_dword
 3089              	.LVL348:
1118:./FW/ff.c     ****             break;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 171


 3090              		.loc 1 1118 13 is_stmt 1 view .LVU991
1118:./FW/ff.c     ****             break;
 3091              		.loc 1 1118 23 is_stmt 0 view .LVU992
 3092 0100 0123     		movs	r3, #1
 3093 0102 FB70     		strb	r3, [r7, #3]
1119:./FW/ff.c     ****         }
 3094              		.loc 1 1119 13 is_stmt 1 view .LVU993
 3095 0104 8EE7     		b	.L242
 3096              	.LVL349:
 3097              	.L249:
1082:./FW/ff.c     **** 
 3098              		.loc 1 1082 13 is_stmt 0 view .LVU994
 3099 0106 0225     		movs	r5, #2
 3100 0108 8CE7     		b	.L242
 3101              	.L250:
1082:./FW/ff.c     **** 
 3102              		.loc 1 1082 13 view .LVU995
 3103 010a 0225     		movs	r5, #2
 3104 010c 8AE7     		b	.L242
 3105              		.cfi_endproc
 3106              	.LFE957:
 3108              		.section	.text.get_fat,"ax",%progbits
 3109              		.align	1
 3110              		.syntax unified
 3111              		.thumb
 3112              		.thumb_func
 3113              		.fpu fpv4-sp-d16
 3115              	get_fat:
 3116              	.LVL350:
 3117              	.LFB956:
 998:./FW/ff.c     ****     UINT wc, bc;
 3118              		.loc 1 998 3 is_stmt 1 view -0
 3119              		.cfi_startproc
 3120              		@ args = 0, pretend = 0, frame = 0
 3121              		@ frame_needed = 0, uses_anonymous_args = 0
 998:./FW/ff.c     ****     UINT wc, bc;
 3122              		.loc 1 998 3 is_stmt 0 view .LVU997
 3123 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3124              	.LCFI30:
 3125              		.cfi_def_cfa_offset 24
 3126              		.cfi_offset 3, -24
 3127              		.cfi_offset 4, -20
 3128              		.cfi_offset 5, -16
 3129              		.cfi_offset 6, -12
 3130              		.cfi_offset 7, -8
 3131              		.cfi_offset 14, -4
 999:./FW/ff.c     ****     DWORD val;
 3132              		.loc 1 999 5 is_stmt 1 view .LVU998
1000:./FW/ff.c     ****     FATFS *fs = obj->fs;
 3133              		.loc 1 1000 5 view .LVU999
1001:./FW/ff.c     **** 
 3134              		.loc 1 1001 5 view .LVU1000
1001:./FW/ff.c     **** 
 3135              		.loc 1 1001 12 is_stmt 0 view .LVU1001
 3136 0002 0568     		ldr	r5, [r0]
 3137              	.LVL351:
1004:./FW/ff.c     ****         val = 1;    /* Internal error */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 172


 3138              		.loc 1 1004 5 is_stmt 1 view .LVU1002
1004:./FW/ff.c     ****         val = 1;    /* Internal error */
 3139              		.loc 1 1004 8 is_stmt 0 view .LVU1003
 3140 0004 0129     		cmp	r1, #1
 3141 0006 56D9     		bls	.L259
 3142 0008 0C46     		mov	r4, r1
1004:./FW/ff.c     ****         val = 1;    /* Internal error */
 3143              		.loc 1 1004 31 discriminator 1 view .LVU1004
 3144 000a 6B69     		ldr	r3, [r5, #20]
1004:./FW/ff.c     ****         val = 1;    /* Internal error */
 3145              		.loc 1 1004 18 discriminator 1 view .LVU1005
 3146 000c 8B42     		cmp	r3, r1
 3147 000e 54D9     		bls	.L260
1008:./FW/ff.c     **** 
 3148              		.loc 1 1008 9 is_stmt 1 view .LVU1006
 3149              	.LVL352:
1010:./FW/ff.c     ****         case FS_FAT12 :
 3150              		.loc 1 1010 9 view .LVU1007
1010:./FW/ff.c     ****         case FS_FAT12 :
 3151              		.loc 1 1010 19 is_stmt 0 view .LVU1008
 3152 0010 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
1010:./FW/ff.c     ****         case FS_FAT12 :
 3153              		.loc 1 1010 9 view .LVU1009
 3154 0012 022B     		cmp	r3, #2
 3155 0014 2DD0     		beq	.L256
 3156 0016 032B     		cmp	r3, #3
 3157 0018 3BD0     		beq	.L257
 3158 001a 012B     		cmp	r3, #1
 3159 001c 01D0     		beq	.L267
 3160 001e 0120     		movs	r0, #1
 3161              	.LVL353:
1010:./FW/ff.c     ****         case FS_FAT12 :
 3162              		.loc 1 1010 9 view .LVU1010
 3163 0020 4AE0     		b	.L254
 3164              	.LVL354:
 3165              	.L267:
1012:./FW/ff.c     ****             bc += bc / 2;
 3166              		.loc 1 1012 13 is_stmt 1 view .LVU1011
1013:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
 3167              		.loc 1 1013 13 view .LVU1012
1013:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
 3168              		.loc 1 1013 16 is_stmt 0 view .LVU1013
 3169 0022 01EB5106 		add	r6, r1, r1, lsr #1
 3170              	.LVL355:
1014:./FW/ff.c     ****             wc = fs->win[bc++ % SS(fs)];
 3171              		.loc 1 1014 13 is_stmt 1 view .LVU1014
1014:./FW/ff.c     ****             wc = fs->win[bc++ % SS(fs)];
 3172              		.loc 1 1014 35 is_stmt 0 view .LVU1015
 3173 0026 296A     		ldr	r1, [r5, #32]
 3174              	.LVL356:
1014:./FW/ff.c     ****             wc = fs->win[bc++ % SS(fs)];
 3175              		.loc 1 1014 17 view .LVU1016
 3176 0028 01EB5621 		add	r1, r1, r6, lsr #9
 3177 002c 2846     		mov	r0, r5
 3178              	.LVL357:
1014:./FW/ff.c     ****             wc = fs->win[bc++ % SS(fs)];
 3179              		.loc 1 1014 17 view .LVU1017
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 173


 3180 002e FFF7FEFF 		bl	move_window
 3181              	.LVL358:
1014:./FW/ff.c     ****             wc = fs->win[bc++ % SS(fs)];
 3182              		.loc 1 1014 16 view .LVU1018
 3183 0032 10B1     		cbz	r0, .L268
1008:./FW/ff.c     **** 
 3184              		.loc 1 1008 13 view .LVU1019
 3185 0034 4FF0FF30 		mov	r0, #-1
 3186 0038 3EE0     		b	.L254
 3187              	.L268:
1015:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
 3188              		.loc 1 1015 13 is_stmt 1 view .LVU1020
1015:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
 3189              		.loc 1 1015 28 is_stmt 0 view .LVU1021
 3190 003a 771C     		adds	r7, r6, #1
 3191              	.LVL359:
1015:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
 3192              		.loc 1 1015 31 view .LVU1022
 3193 003c C6F30806 		ubfx	r6, r6, #0, #9
1015:./FW/ff.c     ****             if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) { break; }
 3194              		.loc 1 1015 25 view .LVU1023
 3195 0040 2E44     		add	r6, r6, r5
 3196 0042 96F83060 		ldrb	r6, [r6, #48]	@ zero_extendqisi2
 3197              	.LVL360:
1016:./FW/ff.c     ****             wc |= fs->win[bc % SS(fs)] << 8;
 3198              		.loc 1 1016 13 is_stmt 1 view .LVU1024
1016:./FW/ff.c     ****             wc |= fs->win[bc % SS(fs)] << 8;
 3199              		.loc 1 1016 35 is_stmt 0 view .LVU1025
 3200 0046 296A     		ldr	r1, [r5, #32]
1016:./FW/ff.c     ****             wc |= fs->win[bc % SS(fs)] << 8;
 3201              		.loc 1 1016 17 view .LVU1026
 3202 0048 01EB5721 		add	r1, r1, r7, lsr #9
 3203 004c 2846     		mov	r0, r5
 3204 004e FFF7FEFF 		bl	move_window
 3205              	.LVL361:
1016:./FW/ff.c     ****             wc |= fs->win[bc % SS(fs)] << 8;
 3206              		.loc 1 1016 16 view .LVU1027
 3207 0052 A0BB     		cbnz	r0, .L263
1017:./FW/ff.c     ****             val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 3208              		.loc 1 1017 13 is_stmt 1 view .LVU1028
1017:./FW/ff.c     ****             val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 3209              		.loc 1 1017 30 is_stmt 0 view .LVU1029
 3210 0054 C7F30807 		ubfx	r7, r7, #0, #9
 3211              	.LVL362:
1017:./FW/ff.c     ****             val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 3212              		.loc 1 1017 26 view .LVU1030
 3213 0058 3D44     		add	r5, r5, r7
 3214              	.LVL363:
1017:./FW/ff.c     ****             val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 3215              		.loc 1 1017 26 view .LVU1031
 3216 005a 95F83000 		ldrb	r0, [r5, #48]	@ zero_extendqisi2
1017:./FW/ff.c     ****             val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 3217              		.loc 1 1017 16 view .LVU1032
 3218 005e 46EA0020 		orr	r0, r6, r0, lsl #8
 3219              	.LVL364:
1018:./FW/ff.c     ****             break;
 3220              		.loc 1 1018 13 is_stmt 1 view .LVU1033
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 174


1018:./FW/ff.c     ****             break;
 3221              		.loc 1 1018 42 is_stmt 0 view .LVU1034
 3222 0062 14F0010F 		tst	r4, #1
 3223 0066 01D0     		beq	.L258
1018:./FW/ff.c     ****             break;
 3224              		.loc 1 1018 42 discriminator 1 view .LVU1035
 3225 0068 0009     		lsrs	r0, r0, #4
 3226              	.LVL365:
1018:./FW/ff.c     ****             break;
 3227              		.loc 1 1018 42 discriminator 1 view .LVU1036
 3228 006a 25E0     		b	.L254
 3229              	.LVL366:
 3230              	.L258:
1018:./FW/ff.c     ****             break;
 3231              		.loc 1 1018 42 discriminator 2 view .LVU1037
 3232 006c C0F30B00 		ubfx	r0, r0, #0, #12
 3233              	.LVL367:
1018:./FW/ff.c     ****             break;
 3234              		.loc 1 1018 42 discriminator 2 view .LVU1038
 3235 0070 22E0     		b	.L254
 3236              	.LVL368:
 3237              	.L256:
1022:./FW/ff.c     ****             val = ld_word(fs->win + clst * 2 % SS(fs));
 3238              		.loc 1 1022 13 is_stmt 1 view .LVU1039
1022:./FW/ff.c     ****             val = ld_word(fs->win + clst * 2 % SS(fs));
 3239              		.loc 1 1022 35 is_stmt 0 view .LVU1040
 3240 0072 296A     		ldr	r1, [r5, #32]
 3241              	.LVL369:
1022:./FW/ff.c     ****             val = ld_word(fs->win + clst * 2 % SS(fs));
 3242              		.loc 1 1022 17 view .LVU1041
 3243 0074 01EB1421 		add	r1, r1, r4, lsr #8
 3244 0078 2846     		mov	r0, r5
 3245              	.LVL370:
1022:./FW/ff.c     ****             val = ld_word(fs->win + clst * 2 % SS(fs));
 3246              		.loc 1 1022 17 view .LVU1042
 3247 007a FFF7FEFF 		bl	move_window
 3248              	.LVL371:
1022:./FW/ff.c     ****             val = ld_word(fs->win + clst * 2 % SS(fs));
 3249              		.loc 1 1022 16 view .LVU1043
 3250 007e 08BB     		cbnz	r0, .L264
1023:./FW/ff.c     ****             break;
 3251              		.loc 1 1023 13 is_stmt 1 view .LVU1044
1023:./FW/ff.c     ****             break;
 3252              		.loc 1 1023 27 is_stmt 0 view .LVU1045
 3253 0080 05F13000 		add	r0, r5, #48
1023:./FW/ff.c     ****             break;
 3254              		.loc 1 1023 42 view .LVU1046
 3255 0084 6400     		lsls	r4, r4, #1
 3256              	.LVL372:
1023:./FW/ff.c     ****             break;
 3257              		.loc 1 1023 46 view .LVU1047
 3258 0086 04F4FF74 		and	r4, r4, #510
1023:./FW/ff.c     ****             break;
 3259              		.loc 1 1023 19 view .LVU1048
 3260 008a 2044     		add	r0, r0, r4
 3261 008c FFF7FEFF 		bl	ld_word
 3262              	.LVL373:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 175


1024:./FW/ff.c     **** 
 3263              		.loc 1 1024 13 is_stmt 1 view .LVU1049
 3264 0090 12E0     		b	.L254
 3265              	.LVL374:
 3266              	.L257:
1027:./FW/ff.c     ****             val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 3267              		.loc 1 1027 13 view .LVU1050
1027:./FW/ff.c     ****             val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 3268              		.loc 1 1027 35 is_stmt 0 view .LVU1051
 3269 0092 296A     		ldr	r1, [r5, #32]
 3270              	.LVL375:
1027:./FW/ff.c     ****             val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 3271              		.loc 1 1027 17 view .LVU1052
 3272 0094 01EBD411 		add	r1, r1, r4, lsr #7
 3273 0098 2846     		mov	r0, r5
 3274              	.LVL376:
1027:./FW/ff.c     ****             val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 3275              		.loc 1 1027 17 view .LVU1053
 3276 009a FFF7FEFF 		bl	move_window
 3277              	.LVL377:
1027:./FW/ff.c     ****             val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 3278              		.loc 1 1027 16 view .LVU1054
 3279 009e A0B9     		cbnz	r0, .L265
1028:./FW/ff.c     ****             break;
 3280              		.loc 1 1028 13 is_stmt 1 view .LVU1055
1028:./FW/ff.c     ****             break;
 3281              		.loc 1 1028 28 is_stmt 0 view .LVU1056
 3282 00a0 05F13000 		add	r0, r5, #48
1028:./FW/ff.c     ****             break;
 3283              		.loc 1 1028 43 view .LVU1057
 3284 00a4 A400     		lsls	r4, r4, #2
 3285              	.LVL378:
1028:./FW/ff.c     ****             break;
 3286              		.loc 1 1028 47 view .LVU1058
 3287 00a6 04F4FE74 		and	r4, r4, #508
1028:./FW/ff.c     ****             break;
 3288              		.loc 1 1028 19 view .LVU1059
 3289 00aa 2044     		add	r0, r0, r4
 3290 00ac FFF7FEFF 		bl	ld_dword
 3291              	.LVL379:
1028:./FW/ff.c     ****             break;
 3292              		.loc 1 1028 17 view .LVU1060
 3293 00b0 20F07040 		bic	r0, r0, #-268435456
 3294              	.LVL380:
1029:./FW/ff.c     **** #if _FS_EXFAT
 3295              		.loc 1 1029 13 is_stmt 1 view .LVU1061
 3296 00b4 00E0     		b	.L254
 3297              	.LVL381:
 3298              	.L259:
1005:./FW/ff.c     **** 
 3299              		.loc 1 1005 13 is_stmt 0 view .LVU1062
 3300 00b6 0120     		movs	r0, #1
 3301              	.LVL382:
 3302              	.L254:
1064:./FW/ff.c     **** 
 3303              		.loc 1 1064 1 view .LVU1063
 3304 00b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 176


 3305              	.LVL383:
 3306              	.L260:
1005:./FW/ff.c     **** 
 3307              		.loc 1 1005 13 view .LVU1064
 3308 00ba 0120     		movs	r0, #1
 3309              	.LVL384:
1005:./FW/ff.c     **** 
 3310              		.loc 1 1005 13 view .LVU1065
 3311 00bc FCE7     		b	.L254
 3312              	.LVL385:
 3313              	.L263:
1008:./FW/ff.c     **** 
 3314              		.loc 1 1008 13 view .LVU1066
 3315 00be 4FF0FF30 		mov	r0, #-1
 3316 00c2 F9E7     		b	.L254
 3317              	.LVL386:
 3318              	.L264:
1008:./FW/ff.c     **** 
 3319              		.loc 1 1008 13 view .LVU1067
 3320 00c4 4FF0FF30 		mov	r0, #-1
 3321 00c8 F6E7     		b	.L254
 3322              	.L265:
1008:./FW/ff.c     **** 
 3323              		.loc 1 1008 13 view .LVU1068
 3324 00ca 4FF0FF30 		mov	r0, #-1
1063:./FW/ff.c     **** }
 3325              		.loc 1 1063 5 is_stmt 1 view .LVU1069
1063:./FW/ff.c     **** }
 3326              		.loc 1 1063 12 is_stmt 0 view .LVU1070
 3327 00ce F3E7     		b	.L254
 3328              		.cfi_endproc
 3329              	.LFE956:
 3331              		.section	.text.dir_sdi,"ax",%progbits
 3332              		.align	1
 3333              		.syntax unified
 3334              		.thumb
 3335              		.thumb_func
 3336              		.fpu fpv4-sp-d16
 3338              	dir_sdi:
 3339              	.LVL387:
 3340              	.LFB961:
1467:./FW/ff.c     ****     DWORD csz, clst;
 3341              		.loc 1 1467 3 is_stmt 1 view -0
 3342              		.cfi_startproc
 3343              		@ args = 0, pretend = 0, frame = 0
 3344              		@ frame_needed = 0, uses_anonymous_args = 0
1467:./FW/ff.c     ****     DWORD csz, clst;
 3345              		.loc 1 1467 3 is_stmt 0 view .LVU1072
 3346 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3347              	.LCFI31:
 3348              		.cfi_def_cfa_offset 24
 3349              		.cfi_offset 4, -24
 3350              		.cfi_offset 5, -20
 3351              		.cfi_offset 6, -16
 3352              		.cfi_offset 7, -12
 3353              		.cfi_offset 8, -8
 3354              		.cfi_offset 14, -4
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 177


1468:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 3355              		.loc 1 1468 5 is_stmt 1 view .LVU1073
1469:./FW/ff.c     **** 
 3356              		.loc 1 1469 5 view .LVU1074
1469:./FW/ff.c     **** 
 3357              		.loc 1 1469 12 is_stmt 0 view .LVU1075
 3358 0004 D0F80080 		ldr	r8, [r0]
 3359              	.LVL388:
1472:./FW/ff.c     ****         return FR_INT_ERR;
 3360              		.loc 1 1472 5 is_stmt 1 view .LVU1076
1472:./FW/ff.c     ****         return FR_INT_ERR;
 3361              		.loc 1 1472 8 is_stmt 0 view .LVU1077
 3362 0008 B1F5001F 		cmp	r1, #2097152
 3363 000c 42D2     		bcs	.L276
 3364 000e 0646     		mov	r6, r0
 3365 0010 0F46     		mov	r7, r1
1472:./FW/ff.c     ****         return FR_INT_ERR;
 3366              		.loc 1 1472 87 discriminator 1 view .LVU1078
 3367 0012 11F01F0F 		tst	r1, #31
 3368 0016 3FD1     		bne	.L277
1475:./FW/ff.c     ****     clst = dp->obj.sclust;      /* Table start cluster (0:root) */
 3369              		.loc 1 1475 5 is_stmt 1 view .LVU1079
1475:./FW/ff.c     ****     clst = dp->obj.sclust;      /* Table start cluster (0:root) */
 3370              		.loc 1 1475 14 is_stmt 0 view .LVU1080
 3371 0018 4161     		str	r1, [r0, #20]
1476:./FW/ff.c     ****     if (clst == 0 && fs->fs_type >= FS_FAT32) { /* Replace cluster# 0 with root cluster# */
 3372              		.loc 1 1476 5 is_stmt 1 view .LVU1081
1476:./FW/ff.c     ****     if (clst == 0 && fs->fs_type >= FS_FAT32) { /* Replace cluster# 0 with root cluster# */
 3373              		.loc 1 1476 10 is_stmt 0 view .LVU1082
 3374 001a 8468     		ldr	r4, [r0, #8]
 3375              	.LVL389:
1477:./FW/ff.c     ****         clst = fs->dirbase;
 3376              		.loc 1 1477 5 is_stmt 1 view .LVU1083
1477:./FW/ff.c     ****         clst = fs->dirbase;
 3377              		.loc 1 1477 8 is_stmt 0 view .LVU1084
 3378 001c 2CB9     		cbnz	r4, .L271
1477:./FW/ff.c     ****         clst = fs->dirbase;
 3379              		.loc 1 1477 24 discriminator 1 view .LVU1085
 3380 001e 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
1477:./FW/ff.c     ****         clst = fs->dirbase;
 3381              		.loc 1 1477 19 discriminator 1 view .LVU1086
 3382 0022 022B     		cmp	r3, #2
 3383 0024 01D9     		bls	.L271
1478:./FW/ff.c     ****         if (_FS_EXFAT) { dp->obj.stat = 0; }    /* exFAT: Root dir has an FAT chain */
 3384              		.loc 1 1478 9 is_stmt 1 view .LVU1087
1478:./FW/ff.c     ****         if (_FS_EXFAT) { dp->obj.stat = 0; }    /* exFAT: Root dir has an FAT chain */
 3385              		.loc 1 1478 14 is_stmt 0 view .LVU1088
 3386 0026 D8F82440 		ldr	r4, [r8, #36]
 3387              	.LVL390:
1479:./FW/ff.c     ****     }
 3388              		.loc 1 1479 9 is_stmt 1 view .LVU1089
 3389              	.L271:
1482:./FW/ff.c     ****         if (ofs / SZDIRE >= fs->n_rootdir)  { return FR_INT_ERR; }  /* Is index out of range? */
 3390              		.loc 1 1482 5 view .LVU1090
1482:./FW/ff.c     ****         if (ofs / SZDIRE >= fs->n_rootdir)  { return FR_INT_ERR; }  /* Is index out of range? */
 3391              		.loc 1 1482 8 is_stmt 0 view .LVU1091
 3392 002a B4B9     		cbnz	r4, .L272
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 178


1483:./FW/ff.c     ****         dp->sect = fs->dirbase;
 3393              		.loc 1 1483 9 is_stmt 1 view .LVU1092
1483:./FW/ff.c     ****         dp->sect = fs->dirbase;
 3394              		.loc 1 1483 31 is_stmt 0 view .LVU1093
 3395 002c B8F80830 		ldrh	r3, [r8, #8]
1483:./FW/ff.c     ****         dp->sect = fs->dirbase;
 3396              		.loc 1 1483 12 view .LVU1094
 3397 0030 B3EB571F 		cmp	r3, r7, lsr #5
 3398 0034 32D9     		bls	.L278
1484:./FW/ff.c     **** 
 3399              		.loc 1 1484 9 is_stmt 1 view .LVU1095
1484:./FW/ff.c     **** 
 3400              		.loc 1 1484 22 is_stmt 0 view .LVU1096
 3401 0036 D8F82430 		ldr	r3, [r8, #36]
1484:./FW/ff.c     **** 
 3402              		.loc 1 1484 18 view .LVU1097
 3403 003a F361     		str	r3, [r6, #28]
 3404              	.LVL391:
 3405              	.L273:
1496:./FW/ff.c     ****     if (!dp->sect) { return FR_INT_ERR; }
 3406              		.loc 1 1496 5 is_stmt 1 view .LVU1098
1496:./FW/ff.c     ****     if (!dp->sect) { return FR_INT_ERR; }
 3407              		.loc 1 1496 15 is_stmt 0 view .LVU1099
 3408 003c B461     		str	r4, [r6, #24]
1497:./FW/ff.c     ****     dp->sect += ofs / SS(fs);           /* Sector# of the directory entry */
 3409              		.loc 1 1497 5 is_stmt 1 view .LVU1100
1497:./FW/ff.c     ****     dp->sect += ofs / SS(fs);           /* Sector# of the directory entry */
 3410              		.loc 1 1497 12 is_stmt 0 view .LVU1101
 3411 003e F369     		ldr	r3, [r6, #28]
1497:./FW/ff.c     ****     dp->sect += ofs / SS(fs);           /* Sector# of the directory entry */
 3412              		.loc 1 1497 8 view .LVU1102
 3413 0040 93B3     		cbz	r3, .L282
1498:./FW/ff.c     ****     dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
 3414              		.loc 1 1498 5 is_stmt 1 view .LVU1103
1498:./FW/ff.c     ****     dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
 3415              		.loc 1 1498 14 is_stmt 0 view .LVU1104
 3416 0042 03EB5723 		add	r3, r3, r7, lsr #9
 3417 0046 F361     		str	r3, [r6, #28]
1499:./FW/ff.c     **** 
 3418              		.loc 1 1499 5 is_stmt 1 view .LVU1105
1499:./FW/ff.c     **** 
 3419              		.loc 1 1499 15 is_stmt 0 view .LVU1106
 3420 0048 08F13003 		add	r3, r8, #48
1499:./FW/ff.c     **** 
 3421              		.loc 1 1499 30 view .LVU1107
 3422 004c C7F30801 		ubfx	r1, r7, #0, #9
1499:./FW/ff.c     **** 
 3423              		.loc 1 1499 23 view .LVU1108
 3424 0050 1944     		add	r1, r1, r3
1499:./FW/ff.c     **** 
 3425              		.loc 1 1499 13 view .LVU1109
 3426 0052 3162     		str	r1, [r6, #32]
1501:./FW/ff.c     **** }
 3427              		.loc 1 1501 5 is_stmt 1 view .LVU1110
1501:./FW/ff.c     **** }
 3428              		.loc 1 1501 12 is_stmt 0 view .LVU1111
 3429 0054 0020     		movs	r0, #0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 179


 3430              	.LVL392:
 3431              	.L270:
1502:./FW/ff.c     **** 
 3432              		.loc 1 1502 1 view .LVU1112
 3433 0056 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3434              	.LVL393:
 3435              	.L272:
1487:./FW/ff.c     ****         while (ofs >= csz) {                /* Follow cluster chain */
 3436              		.loc 1 1487 9 is_stmt 1 view .LVU1113
1487:./FW/ff.c     ****         while (ofs >= csz) {                /* Follow cluster chain */
 3437              		.loc 1 1487 24 is_stmt 0 view .LVU1114
 3438 005a B8F80A50 		ldrh	r5, [r8, #10]
1487:./FW/ff.c     ****         while (ofs >= csz) {                /* Follow cluster chain */
 3439              		.loc 1 1487 13 view .LVU1115
 3440 005e 6D02     		lsls	r5, r5, #9
 3441              	.LVL394:
1488:./FW/ff.c     ****             clst = get_fat(&dp->obj, clst);             /* Get next cluster */
 3442              		.loc 1 1488 9 is_stmt 1 view .LVU1116
1488:./FW/ff.c     ****             clst = get_fat(&dp->obj, clst);             /* Get next cluster */
 3443              		.loc 1 1488 15 is_stmt 0 view .LVU1117
 3444 0060 00E0     		b	.L274
 3445              	.LVL395:
 3446              	.L285:
1492:./FW/ff.c     ****         }
 3447              		.loc 1 1492 13 is_stmt 1 view .LVU1118
1492:./FW/ff.c     ****         }
 3448              		.loc 1 1492 17 is_stmt 0 view .LVU1119
 3449 0062 7F1B     		subs	r7, r7, r5
 3450              	.LVL396:
 3451              	.L274:
1488:./FW/ff.c     ****             clst = get_fat(&dp->obj, clst);             /* Get next cluster */
 3452              		.loc 1 1488 15 is_stmt 1 view .LVU1120
 3453 0064 AF42     		cmp	r7, r5
 3454 0066 0FD3     		bcc	.L284
1489:./FW/ff.c     ****             if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
 3455              		.loc 1 1489 13 view .LVU1121
1489:./FW/ff.c     ****             if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
 3456              		.loc 1 1489 20 is_stmt 0 view .LVU1122
 3457 0068 2146     		mov	r1, r4
 3458 006a 3046     		mov	r0, r6
 3459 006c FFF7FEFF 		bl	get_fat
 3460              	.LVL397:
 3461 0070 0446     		mov	r4, r0
 3462              	.LVL398:
1490:./FW/ff.c     ****             if (clst < 2 || clst >= fs->n_fatent) { return FR_INT_ERR; }    /* Reached to end of ta
 3463              		.loc 1 1490 13 is_stmt 1 view .LVU1123
1490:./FW/ff.c     ****             if (clst < 2 || clst >= fs->n_fatent) { return FR_INT_ERR; }    /* Reached to end of ta
 3464              		.loc 1 1490 16 is_stmt 0 view .LVU1124
 3465 0072 B0F1FF3F 		cmp	r0, #-1
 3466 0076 13D0     		beq	.L279
1491:./FW/ff.c     ****             ofs -= csz;
 3467              		.loc 1 1491 13 is_stmt 1 view .LVU1125
1491:./FW/ff.c     ****             ofs -= csz;
 3468              		.loc 1 1491 16 is_stmt 0 view .LVU1126
 3469 0078 0128     		cmp	r0, #1
 3470 007a 13D9     		bls	.L280
1491:./FW/ff.c     ****             ofs -= csz;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 180


 3471              		.loc 1 1491 39 discriminator 2 view .LVU1127
 3472 007c D8F81430 		ldr	r3, [r8, #20]
1491:./FW/ff.c     ****             ofs -= csz;
 3473              		.loc 1 1491 26 discriminator 2 view .LVU1128
 3474 0080 8342     		cmp	r3, r0
 3475 0082 EED8     		bhi	.L285
1491:./FW/ff.c     ****             ofs -= csz;
 3476              		.loc 1 1491 60 view .LVU1129
 3477 0084 0220     		movs	r0, #2
 3478              	.LVL399:
1491:./FW/ff.c     ****             ofs -= csz;
 3479              		.loc 1 1491 60 view .LVU1130
 3480 0086 E6E7     		b	.L270
 3481              	.L284:
1494:./FW/ff.c     ****     }
 3482              		.loc 1 1494 9 is_stmt 1 view .LVU1131
1494:./FW/ff.c     ****     }
 3483              		.loc 1 1494 20 is_stmt 0 view .LVU1132
 3484 0088 2146     		mov	r1, r4
 3485 008a 4046     		mov	r0, r8
 3486 008c FFF7FEFF 		bl	clust2sect
 3487              	.LVL400:
1494:./FW/ff.c     ****     }
 3488              		.loc 1 1494 18 view .LVU1133
 3489 0090 F061     		str	r0, [r6, #28]
 3490 0092 D3E7     		b	.L273
 3491              	.LVL401:
 3492              	.L276:
1473:./FW/ff.c     ****     }
 3493              		.loc 1 1473 16 view .LVU1134
 3494 0094 0220     		movs	r0, #2
 3495              	.LVL402:
1473:./FW/ff.c     ****     }
 3496              		.loc 1 1473 16 view .LVU1135
 3497 0096 DEE7     		b	.L270
 3498              	.LVL403:
 3499              	.L277:
1473:./FW/ff.c     ****     }
 3500              		.loc 1 1473 16 view .LVU1136
 3501 0098 0220     		movs	r0, #2
 3502              	.LVL404:
1473:./FW/ff.c     ****     }
 3503              		.loc 1 1473 16 view .LVU1137
 3504 009a DCE7     		b	.L270
 3505              	.LVL405:
 3506              	.L278:
1483:./FW/ff.c     ****         dp->sect = fs->dirbase;
 3507              		.loc 1 1483 54 view .LVU1138
 3508 009c 0220     		movs	r0, #2
 3509              	.LVL406:
1483:./FW/ff.c     ****         dp->sect = fs->dirbase;
 3510              		.loc 1 1483 54 view .LVU1139
 3511 009e DAE7     		b	.L270
 3512              	.LVL407:
 3513              	.L279:
1490:./FW/ff.c     ****             if (clst < 2 || clst >= fs->n_fatent) { return FR_INT_ERR; }    /* Reached to end of ta
 3514              		.loc 1 1490 46 view .LVU1140
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 181


 3515 00a0 0120     		movs	r0, #1
 3516              	.LVL408:
1490:./FW/ff.c     ****             if (clst < 2 || clst >= fs->n_fatent) { return FR_INT_ERR; }    /* Reached to end of ta
 3517              		.loc 1 1490 46 view .LVU1141
 3518 00a2 D8E7     		b	.L270
 3519              	.LVL409:
 3520              	.L280:
1491:./FW/ff.c     ****             ofs -= csz;
 3521              		.loc 1 1491 60 view .LVU1142
 3522 00a4 0220     		movs	r0, #2
 3523              	.LVL410:
1491:./FW/ff.c     ****             ofs -= csz;
 3524              		.loc 1 1491 60 view .LVU1143
 3525 00a6 D6E7     		b	.L270
 3526              	.LVL411:
 3527              	.L282:
1497:./FW/ff.c     ****     dp->sect += ofs / SS(fs);           /* Sector# of the directory entry */
 3528              		.loc 1 1497 29 view .LVU1144
 3529 00a8 0220     		movs	r0, #2
 3530 00aa D4E7     		b	.L270
 3531              		.cfi_endproc
 3532              	.LFE961:
 3534              		.section	.text.create_chain,"ax",%progbits
 3535              		.align	1
 3536              		.syntax unified
 3537              		.thumb
 3538              		.thumb_func
 3539              		.fpu fpv4-sp-d16
 3541              	create_chain:
 3542              	.LVL412:
 3543              	.LFB959:
1349:./FW/ff.c     ****     DWORD cs, ncl, scl;
 3544              		.loc 1 1349 3 is_stmt 1 view -0
 3545              		.cfi_startproc
 3546              		@ args = 0, pretend = 0, frame = 0
 3547              		@ frame_needed = 0, uses_anonymous_args = 0
1349:./FW/ff.c     ****     DWORD cs, ncl, scl;
 3548              		.loc 1 1349 3 is_stmt 0 view .LVU1146
 3549 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3550              	.LCFI32:
 3551              		.cfi_def_cfa_offset 24
 3552              		.cfi_offset 4, -24
 3553              		.cfi_offset 5, -20
 3554              		.cfi_offset 6, -16
 3555              		.cfi_offset 7, -12
 3556              		.cfi_offset 8, -8
 3557              		.cfi_offset 14, -4
 3558 0004 0546     		mov	r5, r0
1350:./FW/ff.c     ****     FRESULT res;
 3559              		.loc 1 1350 5 is_stmt 1 view .LVU1147
1351:./FW/ff.c     ****     FATFS *fs = obj->fs;
 3560              		.loc 1 1351 5 view .LVU1148
1352:./FW/ff.c     **** 
 3561              		.loc 1 1352 5 view .LVU1149
1352:./FW/ff.c     **** 
 3562              		.loc 1 1352 12 is_stmt 0 view .LVU1150
 3563 0006 0668     		ldr	r6, [r0]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 182


 3564              	.LVL413:
1355:./FW/ff.c     ****         scl = fs->last_clst;                /* Get suggested cluster to start from */
 3565              		.loc 1 1355 5 is_stmt 1 view .LVU1151
1355:./FW/ff.c     ****         scl = fs->last_clst;                /* Get suggested cluster to start from */
 3566              		.loc 1 1355 8 is_stmt 0 view .LVU1152
 3567 0008 0F46     		mov	r7, r1
 3568 000a 51B9     		cbnz	r1, .L287
1356:./FW/ff.c     ****         if (scl == 0 || scl >= fs->n_fatent) { scl = 1; }
 3569              		.loc 1 1356 9 is_stmt 1 view .LVU1153
1356:./FW/ff.c     ****         if (scl == 0 || scl >= fs->n_fatent) { scl = 1; }
 3570              		.loc 1 1356 13 is_stmt 0 view .LVU1154
 3571 000c D6F80C80 		ldr	r8, [r6, #12]
 3572              	.LVL414:
1357:./FW/ff.c     ****     } else {                /* Stretch current chain */
 3573              		.loc 1 1357 9 is_stmt 1 view .LVU1155
1357:./FW/ff.c     ****     } else {                /* Stretch current chain */
 3574              		.loc 1 1357 12 is_stmt 0 view .LVU1156
 3575 0010 B8F1000F 		cmp	r8, #0
 3576 0014 12D0     		beq	.L296
1357:./FW/ff.c     ****     } else {                /* Stretch current chain */
 3577              		.loc 1 1357 34 discriminator 2 view .LVU1157
 3578 0016 7369     		ldr	r3, [r6, #20]
1357:./FW/ff.c     ****     } else {                /* Stretch current chain */
 3579              		.loc 1 1357 22 discriminator 2 view .LVU1158
 3580 0018 4345     		cmp	r3, r8
 3581 001a 11D8     		bhi	.L288
1357:./FW/ff.c     ****     } else {                /* Stretch current chain */
 3582              		.loc 1 1357 52 view .LVU1159
 3583 001c 4FF00108 		mov	r8, #1
 3584              	.LVL415:
1357:./FW/ff.c     ****     } else {                /* Stretch current chain */
 3585              		.loc 1 1357 52 view .LVU1160
 3586 0020 0EE0     		b	.L288
 3587              	.LVL416:
 3588              	.L287:
1359:./FW/ff.c     ****         if (cs < 2) { return 1; }               /* Invalid FAT value */
 3589              		.loc 1 1359 9 is_stmt 1 view .LVU1161
1359:./FW/ff.c     ****         if (cs < 2) { return 1; }               /* Invalid FAT value */
 3590              		.loc 1 1359 14 is_stmt 0 view .LVU1162
 3591 0022 FFF7FEFF 		bl	get_fat
 3592              	.LVL417:
1359:./FW/ff.c     ****         if (cs < 2) { return 1; }               /* Invalid FAT value */
 3593              		.loc 1 1359 14 view .LVU1163
 3594 0026 0346     		mov	r3, r0
 3595              	.LVL418:
1360:./FW/ff.c     ****         if (cs == 0xFFFFFFFF) { return cs; }    /* A disk error occurred */
 3596              		.loc 1 1360 9 is_stmt 1 view .LVU1164
1360:./FW/ff.c     ****         if (cs == 0xFFFFFFFF) { return cs; }    /* A disk error occurred */
 3597              		.loc 1 1360 12 is_stmt 0 view .LVU1165
 3598 0028 0128     		cmp	r0, #1
 3599 002a 47D9     		bls	.L298
1361:./FW/ff.c     ****         if (cs < fs->n_fatent) { return cs; }   /* It is already followed by next cluster */
 3600              		.loc 1 1361 9 is_stmt 1 view .LVU1166
1361:./FW/ff.c     ****         if (cs < fs->n_fatent) { return cs; }   /* It is already followed by next cluster */
 3601              		.loc 1 1361 12 is_stmt 0 view .LVU1167
 3602 002c B0F1FF3F 		cmp	r0, #-1
 3603 0030 49D0     		beq	.L286
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 183


1362:./FW/ff.c     ****         scl = clst;
 3604              		.loc 1 1362 9 is_stmt 1 view .LVU1168
1362:./FW/ff.c     ****         scl = clst;
 3605              		.loc 1 1362 20 is_stmt 0 view .LVU1169
 3606 0032 7269     		ldr	r2, [r6, #20]
1362:./FW/ff.c     ****         scl = clst;
 3607              		.loc 1 1362 12 view .LVU1170
 3608 0034 8242     		cmp	r2, r0
 3609 0036 46D8     		bhi	.L286
1363:./FW/ff.c     ****     }
 3610              		.loc 1 1363 13 view .LVU1171
 3611 0038 B846     		mov	r8, r7
 3612 003a 01E0     		b	.L288
 3613              	.LVL419:
 3614              	.L296:
1357:./FW/ff.c     ****     } else {                /* Stretch current chain */
 3615              		.loc 1 1357 52 view .LVU1172
 3616 003c 4FF00108 		mov	r8, #1
 3617              	.LVL420:
 3618              	.L288:
1394:./FW/ff.c     ****         for (;;) {
 3619              		.loc 1 1394 9 is_stmt 1 view .LVU1173
1394:./FW/ff.c     ****         for (;;) {
 3620              		.loc 1 1394 13 is_stmt 0 view .LVU1174
 3621 0040 4446     		mov	r4, r8
 3622 0042 0CE0     		b	.L292
 3623              	.LVL421:
 3624              	.L290:
1401:./FW/ff.c     ****             if (cs == 0) { break; }             /* Found a free cluster */
 3625              		.loc 1 1401 13 is_stmt 1 view .LVU1175
1401:./FW/ff.c     ****             if (cs == 0) { break; }             /* Found a free cluster */
 3626              		.loc 1 1401 18 is_stmt 0 view .LVU1176
 3627 0044 2146     		mov	r1, r4
 3628 0046 2846     		mov	r0, r5
 3629 0048 FFF7FEFF 		bl	get_fat
 3630              	.LVL422:
1402:./FW/ff.c     ****             if (cs == 1 || cs == 0xFFFFFFFF) { return cs; } /* An error occurred */
 3631              		.loc 1 1402 13 is_stmt 1 view .LVU1177
1402:./FW/ff.c     ****             if (cs == 1 || cs == 0xFFFFFFFF) { return cs; } /* An error occurred */
 3632              		.loc 1 1402 16 is_stmt 0 view .LVU1178
 3633 004c 0346     		mov	r3, r0
 3634 004e 78B1     		cbz	r0, .L291
1403:./FW/ff.c     ****             if (ncl == scl) { return 0; }       /* No free cluster */
 3635              		.loc 1 1403 13 is_stmt 1 view .LVU1179
1403:./FW/ff.c     ****             if (ncl == scl) { return 0; }       /* No free cluster */
 3636              		.loc 1 1403 16 is_stmt 0 view .LVU1180
 3637 0050 0128     		cmp	r0, #1
 3638 0052 38D0     		beq	.L286
1403:./FW/ff.c     ****             if (ncl == scl) { return 0; }       /* No free cluster */
 3639              		.loc 1 1403 25 discriminator 2 view .LVU1181
 3640 0054 B0F1FF3F 		cmp	r0, #-1
 3641 0058 35D0     		beq	.L286
1404:./FW/ff.c     ****         }
 3642              		.loc 1 1404 13 is_stmt 1 view .LVU1182
1404:./FW/ff.c     ****         }
 3643              		.loc 1 1404 16 is_stmt 0 view .LVU1183
 3644 005a 4445     		cmp	r4, r8
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 184


 3645 005c 32D0     		beq	.L303
 3646              	.LVL423:
 3647              	.L292:
1395:./FW/ff.c     ****             ncl++;                          /* Next cluster */
 3648              		.loc 1 1395 9 is_stmt 1 view .LVU1184
1396:./FW/ff.c     ****             if (ncl >= fs->n_fatent) {      /* Check wrap-around */
 3649              		.loc 1 1396 13 view .LVU1185
1396:./FW/ff.c     ****             if (ncl >= fs->n_fatent) {      /* Check wrap-around */
 3650              		.loc 1 1396 16 is_stmt 0 view .LVU1186
 3651 005e 0134     		adds	r4, r4, #1
 3652              	.LVL424:
1397:./FW/ff.c     ****                 ncl = 2;
 3653              		.loc 1 1397 13 is_stmt 1 view .LVU1187
1397:./FW/ff.c     ****                 ncl = 2;
 3654              		.loc 1 1397 26 is_stmt 0 view .LVU1188
 3655 0060 7369     		ldr	r3, [r6, #20]
1397:./FW/ff.c     ****                 ncl = 2;
 3656              		.loc 1 1397 16 view .LVU1189
 3657 0062 A342     		cmp	r3, r4
 3658 0064 EED8     		bhi	.L290
1398:./FW/ff.c     ****                 if (ncl > scl) { return 0; }    /* No free cluster */
 3659              		.loc 1 1398 17 is_stmt 1 view .LVU1190
 3660              	.LVL425:
1399:./FW/ff.c     ****             }
 3661              		.loc 1 1399 17 view .LVU1191
1399:./FW/ff.c     ****             }
 3662              		.loc 1 1399 20 is_stmt 0 view .LVU1192
 3663 0066 B8F1010F 		cmp	r8, #1
 3664 006a 29D9     		bls	.L299
1398:./FW/ff.c     ****                 if (ncl > scl) { return 0; }    /* No free cluster */
 3665              		.loc 1 1398 21 view .LVU1193
 3666 006c 0224     		movs	r4, #2
 3667 006e E9E7     		b	.L290
 3668              	.LVL426:
 3669              	.L291:
1406:./FW/ff.c     ****         if (res == FR_OK && clst != 0) {
 3670              		.loc 1 1406 9 is_stmt 1 view .LVU1194
1406:./FW/ff.c     ****         if (res == FR_OK && clst != 0) {
 3671              		.loc 1 1406 15 is_stmt 0 view .LVU1195
 3672 0070 4FF0FF32 		mov	r2, #-1
 3673 0074 2146     		mov	r1, r4
 3674 0076 3046     		mov	r0, r6
 3675              	.LVL427:
1406:./FW/ff.c     ****         if (res == FR_OK && clst != 0) {
 3676              		.loc 1 1406 15 view .LVU1196
 3677 0078 FFF7FEFF 		bl	put_fat
 3678              	.LVL428:
1407:./FW/ff.c     ****             res = put_fat(fs, clst, ncl);   /* Link it from the previous one if needed */
 3679              		.loc 1 1407 9 is_stmt 1 view .LVU1197
1407:./FW/ff.c     ****             res = put_fat(fs, clst, ncl);   /* Link it from the previous one if needed */
 3680              		.loc 1 1407 12 is_stmt 0 view .LVU1198
 3681 007c 0346     		mov	r3, r0
 3682 007e 00B9     		cbnz	r0, .L293
1407:./FW/ff.c     ****             res = put_fat(fs, clst, ncl);   /* Link it from the previous one if needed */
 3683              		.loc 1 1407 26 discriminator 1 view .LVU1199
 3684 0080 77B9     		cbnz	r7, .L304
 3685              	.LVL429:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 185


 3686              	.L293:
1412:./FW/ff.c     ****         fs->last_clst = ncl;
 3687              		.loc 1 1412 5 is_stmt 1 view .LVU1200
1412:./FW/ff.c     ****         fs->last_clst = ncl;
 3688              		.loc 1 1412 8 is_stmt 0 view .LVU1201
 3689 0082 A3B9     		cbnz	r3, .L294
1413:./FW/ff.c     ****         if (fs->free_clst <= fs->n_fatent - 2) { fs->free_clst--; }
 3690              		.loc 1 1413 9 is_stmt 1 view .LVU1202
1413:./FW/ff.c     ****         if (fs->free_clst <= fs->n_fatent - 2) { fs->free_clst--; }
 3691              		.loc 1 1413 23 is_stmt 0 view .LVU1203
 3692 0084 F460     		str	r4, [r6, #12]
1414:./FW/ff.c     ****         fs->fsi_flag |= 1;
 3693              		.loc 1 1414 9 is_stmt 1 view .LVU1204
1414:./FW/ff.c     ****         fs->fsi_flag |= 1;
 3694              		.loc 1 1414 15 is_stmt 0 view .LVU1205
 3695 0086 3269     		ldr	r2, [r6, #16]
1414:./FW/ff.c     ****         fs->fsi_flag |= 1;
 3696              		.loc 1 1414 32 view .LVU1206
 3697 0088 7369     		ldr	r3, [r6, #20]
 3698              	.LVL430:
1414:./FW/ff.c     ****         fs->fsi_flag |= 1;
 3699              		.loc 1 1414 43 view .LVU1207
 3700 008a 023B     		subs	r3, r3, #2
1414:./FW/ff.c     ****         fs->fsi_flag |= 1;
 3701              		.loc 1 1414 12 view .LVU1208
 3702 008c 9A42     		cmp	r2, r3
 3703 008e 01D8     		bhi	.L295
1414:./FW/ff.c     ****         fs->fsi_flag |= 1;
 3704              		.loc 1 1414 50 is_stmt 1 discriminator 1 view .LVU1209
1414:./FW/ff.c     ****         fs->fsi_flag |= 1;
 3705              		.loc 1 1414 63 is_stmt 0 discriminator 1 view .LVU1210
 3706 0090 013A     		subs	r2, r2, #1
 3707 0092 3261     		str	r2, [r6, #16]
 3708              	.L295:
1415:./FW/ff.c     ****     } else {
 3709              		.loc 1 1415 9 is_stmt 1 view .LVU1211
1415:./FW/ff.c     ****     } else {
 3710              		.loc 1 1415 22 is_stmt 0 view .LVU1212
 3711 0094 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 3712 0096 43F00103 		orr	r3, r3, #1
 3713 009a 3371     		strb	r3, [r6, #4]
 3714 009c 2346     		mov	r3, r4
 3715 009e 12E0     		b	.L286
 3716              	.LVL431:
 3717              	.L304:
1408:./FW/ff.c     ****         }
 3718              		.loc 1 1408 13 is_stmt 1 view .LVU1213
1408:./FW/ff.c     ****         }
 3719              		.loc 1 1408 19 is_stmt 0 view .LVU1214
 3720 00a0 2246     		mov	r2, r4
 3721 00a2 3946     		mov	r1, r7
 3722 00a4 3046     		mov	r0, r6
 3723              	.LVL432:
1408:./FW/ff.c     ****         }
 3724              		.loc 1 1408 19 view .LVU1215
 3725 00a6 FFF7FEFF 		bl	put_fat
 3726              	.LVL433:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 186


 3727 00aa 0346     		mov	r3, r0
 3728              	.LVL434:
1408:./FW/ff.c     ****         }
 3729              		.loc 1 1408 19 view .LVU1216
 3730 00ac E9E7     		b	.L293
 3731              	.L294:
1417:./FW/ff.c     ****     }
 3732              		.loc 1 1417 9 is_stmt 1 view .LVU1217
1417:./FW/ff.c     ****     }
 3733              		.loc 1 1417 49 is_stmt 0 view .LVU1218
 3734 00ae 012B     		cmp	r3, #1
 3735 00b0 01D0     		beq	.L305
 3736 00b2 0123     		movs	r3, #1
 3737              	.LVL435:
1417:./FW/ff.c     ****     }
 3738              		.loc 1 1417 49 view .LVU1219
 3739 00b4 07E0     		b	.L286
 3740              	.LVL436:
 3741              	.L305:
1417:./FW/ff.c     ****     }
 3742              		.loc 1 1417 49 view .LVU1220
 3743 00b6 4FF0FF33 		mov	r3, #-1
 3744              	.LVL437:
1417:./FW/ff.c     ****     }
 3745              		.loc 1 1417 49 view .LVU1221
 3746 00ba 04E0     		b	.L286
 3747              	.LVL438:
 3748              	.L298:
1360:./FW/ff.c     ****         if (cs == 0xFFFFFFFF) { return cs; }    /* A disk error occurred */
 3749              		.loc 1 1360 30 view .LVU1222
 3750 00bc 0123     		movs	r3, #1
 3751 00be 02E0     		b	.L286
 3752              	.LVL439:
 3753              	.L299:
1399:./FW/ff.c     ****             }
 3754              		.loc 1 1399 41 view .LVU1223
 3755 00c0 0023     		movs	r3, #0
 3756 00c2 00E0     		b	.L286
 3757              	.LVL440:
 3758              	.L303:
1404:./FW/ff.c     ****         }
 3759              		.loc 1 1404 38 view .LVU1224
 3760 00c4 0023     		movs	r3, #0
 3761              	.LVL441:
 3762              	.L286:
1421:./FW/ff.c     **** 
 3763              		.loc 1 1421 1 view .LVU1225
 3764 00c6 1846     		mov	r0, r3
 3765 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
1421:./FW/ff.c     **** 
 3766              		.loc 1 1421 1 view .LVU1226
 3767              		.cfi_endproc
 3768              	.LFE959:
 3770              		.section	.text.remove_chain,"ax",%progbits
 3771              		.align	1
 3772              		.syntax unified
 3773              		.thumb
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 187


 3774              		.thumb_func
 3775              		.fpu fpv4-sp-d16
 3777              	remove_chain:
 3778              	.LVL442:
 3779              	.LFB958:
1271:./FW/ff.c     ****     FRESULT res = FR_OK;
 3780              		.loc 1 1271 3 is_stmt 1 view -0
 3781              		.cfi_startproc
 3782              		@ args = 0, pretend = 0, frame = 0
 3783              		@ frame_needed = 0, uses_anonymous_args = 0
1271:./FW/ff.c     ****     FRESULT res = FR_OK;
 3784              		.loc 1 1271 3 is_stmt 0 view .LVU1228
 3785 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3786              	.LCFI33:
 3787              		.cfi_def_cfa_offset 24
 3788              		.cfi_offset 3, -24
 3789              		.cfi_offset 4, -20
 3790              		.cfi_offset 5, -16
 3791              		.cfi_offset 6, -12
 3792              		.cfi_offset 7, -8
 3793              		.cfi_offset 14, -4
 3794 0002 0C46     		mov	r4, r1
1272:./FW/ff.c     ****     DWORD nxt;
 3795              		.loc 1 1272 5 is_stmt 1 view .LVU1229
 3796              	.LVL443:
1273:./FW/ff.c     ****     FATFS *fs = obj->fs;
 3797              		.loc 1 1273 5 view .LVU1230
1274:./FW/ff.c     **** #if _FS_EXFAT || _USE_TRIM
 3798              		.loc 1 1274 5 view .LVU1231
1274:./FW/ff.c     **** #if _FS_EXFAT || _USE_TRIM
 3799              		.loc 1 1274 12 is_stmt 0 view .LVU1232
 3800 0004 0568     		ldr	r5, [r0]
 3801              	.LVL444:
1282:./FW/ff.c     **** 
 3802              		.loc 1 1282 5 is_stmt 1 view .LVU1233
1282:./FW/ff.c     **** 
 3803              		.loc 1 1282 8 is_stmt 0 view .LVU1234
 3804 0006 0129     		cmp	r1, #1
 3805 0008 2ED9     		bls	.L311
 3806 000a 0646     		mov	r6, r0
 3807 000c 1146     		mov	r1, r2
 3808              	.LVL445:
1282:./FW/ff.c     **** 
 3809              		.loc 1 1282 31 discriminator 2 view .LVU1235
 3810 000e 6B69     		ldr	r3, [r5, #20]
1282:./FW/ff.c     **** 
 3811              		.loc 1 1282 18 discriminator 2 view .LVU1236
 3812 0010 A342     		cmp	r3, r4
 3813 0012 2BD9     		bls	.L312
1285:./FW/ff.c     ****         res = put_fat(fs, pclst, 0xFFFFFFFF);
 3814              		.loc 1 1285 5 is_stmt 1 view .LVU1237
1285:./FW/ff.c     ****         res = put_fat(fs, pclst, 0xFFFFFFFF);
 3815              		.loc 1 1285 8 is_stmt 0 view .LVU1238
 3816 0014 4AB1     		cbz	r2, .L310
1286:./FW/ff.c     ****         if (res != FR_OK) { return res; }
 3817              		.loc 1 1286 9 is_stmt 1 view .LVU1239
1286:./FW/ff.c     ****         if (res != FR_OK) { return res; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 188


 3818              		.loc 1 1286 15 is_stmt 0 view .LVU1240
 3819 0016 4FF0FF32 		mov	r2, #-1
 3820              	.LVL446:
1286:./FW/ff.c     ****         if (res != FR_OK) { return res; }
 3821              		.loc 1 1286 15 view .LVU1241
 3822 001a 2846     		mov	r0, r5
 3823              	.LVL447:
1286:./FW/ff.c     ****         if (res != FR_OK) { return res; }
 3824              		.loc 1 1286 15 view .LVU1242
 3825 001c FFF7FEFF 		bl	put_fat
 3826              	.LVL448:
1287:./FW/ff.c     ****     }
 3827              		.loc 1 1287 9 is_stmt 1 view .LVU1243
1287:./FW/ff.c     ****     }
 3828              		.loc 1 1287 12 is_stmt 0 view .LVU1244
 3829 0020 0746     		mov	r7, r0
 3830 0022 10B1     		cbz	r0, .L310
 3831 0024 23E0     		b	.L307
 3832              	.LVL449:
 3833              	.L309:
1322:./FW/ff.c     ****     } while (clst < fs->n_fatent);  /* Repeat while not the last link */
 3834              		.loc 1 1322 9 is_stmt 1 view .LVU1245
1323:./FW/ff.c     **** 
 3835              		.loc 1 1323 13 view .LVU1246
1323:./FW/ff.c     **** 
 3836              		.loc 1 1323 5 is_stmt 0 view .LVU1247
 3837 0026 A242     		cmp	r2, r4
 3838 0028 21D9     		bls	.L307
 3839              	.LVL450:
 3840              	.L310:
1291:./FW/ff.c     ****         nxt = get_fat(obj, clst);           /* Get cluster status */
 3841              		.loc 1 1291 5 is_stmt 1 view .LVU1248
1292:./FW/ff.c     ****         if (nxt == 0) { break; }                /* Empty cluster? */
 3842              		.loc 1 1292 9 view .LVU1249
 3843 002a 2746     		mov	r7, r4
1292:./FW/ff.c     ****         if (nxt == 0) { break; }                /* Empty cluster? */
 3844              		.loc 1 1292 15 is_stmt 0 view .LVU1250
 3845 002c 2146     		mov	r1, r4
 3846 002e 3046     		mov	r0, r6
 3847 0030 FFF7FEFF 		bl	get_fat
 3848              	.LVL451:
1293:./FW/ff.c     ****         if (nxt == 1) { return FR_INT_ERR; }    /* Internal error? */
 3849              		.loc 1 1293 9 is_stmt 1 view .LVU1251
1293:./FW/ff.c     ****         if (nxt == 1) { return FR_INT_ERR; }    /* Internal error? */
 3850              		.loc 1 1293 12 is_stmt 0 view .LVU1252
 3851 0034 0446     		mov	r4, r0
 3852              	.LVL452:
1293:./FW/ff.c     ****         if (nxt == 1) { return FR_INT_ERR; }    /* Internal error? */
 3853              		.loc 1 1293 12 view .LVU1253
 3854 0036 E0B1     		cbz	r0, .L313
1294:./FW/ff.c     ****         if (nxt == 0xFFFFFFFF) { return FR_DISK_ERR; }  /* Disk error? */
 3855              		.loc 1 1294 9 is_stmt 1 view .LVU1254
1294:./FW/ff.c     ****         if (nxt == 0xFFFFFFFF) { return FR_DISK_ERR; }  /* Disk error? */
 3856              		.loc 1 1294 12 is_stmt 0 view .LVU1255
 3857 0038 0128     		cmp	r0, #1
 3858 003a 1CD0     		beq	.L314
1295:./FW/ff.c     ****         if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 189


 3859              		.loc 1 1295 9 is_stmt 1 view .LVU1256
1295:./FW/ff.c     ****         if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3860              		.loc 1 1295 12 is_stmt 0 view .LVU1257
 3861 003c B0F1FF3F 		cmp	r0, #-1
 3862 0040 1BD0     		beq	.L315
1296:./FW/ff.c     ****             res = put_fat(fs, clst, 0);     /* Mark the cluster 'free' on the FAT */
 3863              		.loc 1 1296 9 is_stmt 1 view .LVU1258
1297:./FW/ff.c     ****             if (res != FR_OK) { return res; }
 3864              		.loc 1 1297 13 view .LVU1259
1297:./FW/ff.c     ****             if (res != FR_OK) { return res; }
 3865              		.loc 1 1297 19 is_stmt 0 view .LVU1260
 3866 0042 0022     		movs	r2, #0
 3867 0044 3946     		mov	r1, r7
 3868 0046 2846     		mov	r0, r5
 3869              	.LVL453:
1297:./FW/ff.c     ****             if (res != FR_OK) { return res; }
 3870              		.loc 1 1297 19 view .LVU1261
 3871 0048 FFF7FEFF 		bl	put_fat
 3872              	.LVL454:
1298:./FW/ff.c     ****         }
 3873              		.loc 1 1298 13 is_stmt 1 view .LVU1262
1298:./FW/ff.c     ****         }
 3874              		.loc 1 1298 16 is_stmt 0 view .LVU1263
 3875 004c 0746     		mov	r7, r0
 3876              	.LVL455:
1298:./FW/ff.c     ****         }
 3877              		.loc 1 1298 16 view .LVU1264
 3878 004e 70B9     		cbnz	r0, .L307
1300:./FW/ff.c     ****             fs->free_clst++;
 3879              		.loc 1 1300 9 is_stmt 1 view .LVU1265
1300:./FW/ff.c     ****             fs->free_clst++;
 3880              		.loc 1 1300 15 is_stmt 0 view .LVU1266
 3881 0050 2B69     		ldr	r3, [r5, #16]
1300:./FW/ff.c     ****             fs->free_clst++;
 3882              		.loc 1 1300 31 view .LVU1267
 3883 0052 6A69     		ldr	r2, [r5, #20]
1300:./FW/ff.c     ****             fs->free_clst++;
 3884              		.loc 1 1300 42 view .LVU1268
 3885 0054 911E     		subs	r1, r2, #2
1300:./FW/ff.c     ****             fs->free_clst++;
 3886              		.loc 1 1300 12 view .LVU1269
 3887 0056 8B42     		cmp	r3, r1
 3888 0058 E5D2     		bcs	.L309
1301:./FW/ff.c     ****             fs->fsi_flag |= 1;
 3889              		.loc 1 1301 13 is_stmt 1 view .LVU1270
1301:./FW/ff.c     ****             fs->fsi_flag |= 1;
 3890              		.loc 1 1301 26 is_stmt 0 view .LVU1271
 3891 005a 0133     		adds	r3, r3, #1
 3892 005c 2B61     		str	r3, [r5, #16]
1302:./FW/ff.c     ****         }
 3893              		.loc 1 1302 13 is_stmt 1 view .LVU1272
1302:./FW/ff.c     ****         }
 3894              		.loc 1 1302 26 is_stmt 0 view .LVU1273
 3895 005e 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 3896 0060 43F00103 		orr	r3, r3, #1
 3897 0064 2B71     		strb	r3, [r5, #4]
 3898 0066 DEE7     		b	.L309
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 190


 3899              	.LVL456:
 3900              	.L311:
1282:./FW/ff.c     **** 
 3901              		.loc 1 1282 52 view .LVU1274
 3902 0068 0227     		movs	r7, #2
 3903 006a 00E0     		b	.L307
 3904              	.LVL457:
 3905              	.L312:
1282:./FW/ff.c     **** 
 3906              		.loc 1 1282 52 view .LVU1275
 3907 006c 0227     		movs	r7, #2
 3908              	.LVL458:
 3909              	.L307:
1337:./FW/ff.c     **** 
 3910              		.loc 1 1337 1 view .LVU1276
 3911 006e 3846     		mov	r0, r7
 3912 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3913              	.LVL459:
 3914              	.L313:
1336:./FW/ff.c     **** }
 3915              		.loc 1 1336 12 view .LVU1277
 3916 0072 0027     		movs	r7, #0
 3917              	.LVL460:
1336:./FW/ff.c     **** }
 3918              		.loc 1 1336 12 view .LVU1278
 3919 0074 FBE7     		b	.L307
 3920              	.LVL461:
 3921              	.L314:
1294:./FW/ff.c     ****         if (nxt == 0xFFFFFFFF) { return FR_DISK_ERR; }  /* Disk error? */
 3922              		.loc 1 1294 32 view .LVU1279
 3923 0076 0227     		movs	r7, #2
 3924              	.LVL462:
1294:./FW/ff.c     ****         if (nxt == 0xFFFFFFFF) { return FR_DISK_ERR; }  /* Disk error? */
 3925              		.loc 1 1294 32 view .LVU1280
 3926 0078 F9E7     		b	.L307
 3927              	.LVL463:
 3928              	.L315:
1295:./FW/ff.c     ****         if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3929              		.loc 1 1295 41 view .LVU1281
 3930 007a 0127     		movs	r7, #1
 3931              	.LVL464:
1295:./FW/ff.c     ****         if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3932              		.loc 1 1295 41 view .LVU1282
 3933 007c F7E7     		b	.L307
 3934              		.cfi_endproc
 3935              	.LFE958:
 3937              		.section	.text.dir_remove,"ax",%progbits
 3938              		.align	1
 3939              		.syntax unified
 3940              		.thumb
 3941              		.thumb_func
 3942              		.fpu fpv4-sp-d16
 3944              	dir_remove:
 3945              	.LVL465:
 3946              	.LFB969:
2385:./FW/ff.c     ****     FRESULT res;
 3947              		.loc 1 2385 3 is_stmt 1 view -0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 191


 3948              		.cfi_startproc
 3949              		@ args = 0, pretend = 0, frame = 0
 3950              		@ frame_needed = 0, uses_anonymous_args = 0
2385:./FW/ff.c     ****     FRESULT res;
 3951              		.loc 1 2385 3 is_stmt 0 view .LVU1284
 3952 0000 38B5     		push	{r3, r4, r5, lr}
 3953              	.LCFI34:
 3954              		.cfi_def_cfa_offset 16
 3955              		.cfi_offset 3, -16
 3956              		.cfi_offset 4, -12
 3957              		.cfi_offset 5, -8
 3958              		.cfi_offset 14, -4
 3959 0002 0446     		mov	r4, r0
2386:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 3960              		.loc 1 2386 5 is_stmt 1 view .LVU1285
2387:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 3961              		.loc 1 2387 5 view .LVU1286
2387:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 3962              		.loc 1 2387 12 is_stmt 0 view .LVU1287
 3963 0004 0568     		ldr	r5, [r0]
 3964              	.LVL466:
2410:./FW/ff.c     ****     if (res == FR_OK) {
 3965              		.loc 1 2410 5 is_stmt 1 view .LVU1288
2410:./FW/ff.c     ****     if (res == FR_OK) {
 3966              		.loc 1 2410 11 is_stmt 0 view .LVU1289
 3967 0006 C169     		ldr	r1, [r0, #28]
 3968 0008 2846     		mov	r0, r5
 3969              	.LVL467:
2410:./FW/ff.c     ****     if (res == FR_OK) {
 3970              		.loc 1 2410 11 view .LVU1290
 3971 000a FFF7FEFF 		bl	move_window
 3972              	.LVL468:
2411:./FW/ff.c     ****         dp->dir[DIR_Name] = DDEM;
 3973              		.loc 1 2411 5 is_stmt 1 view .LVU1291
2411:./FW/ff.c     ****         dp->dir[DIR_Name] = DDEM;
 3974              		.loc 1 2411 8 is_stmt 0 view .LVU1292
 3975 000e 20B9     		cbnz	r0, .L318
2412:./FW/ff.c     ****         fs->wflag = 1;
 3976              		.loc 1 2412 9 is_stmt 1 view .LVU1293
2412:./FW/ff.c     ****         fs->wflag = 1;
 3977              		.loc 1 2412 11 is_stmt 0 view .LVU1294
 3978 0010 236A     		ldr	r3, [r4, #32]
2412:./FW/ff.c     ****         fs->wflag = 1;
 3979              		.loc 1 2412 27 view .LVU1295
 3980 0012 E522     		movs	r2, #229
 3981 0014 1A70     		strb	r2, [r3]
2413:./FW/ff.c     ****     }
 3982              		.loc 1 2413 9 is_stmt 1 view .LVU1296
2413:./FW/ff.c     ****     }
 3983              		.loc 1 2413 19 is_stmt 0 view .LVU1297
 3984 0016 0123     		movs	r3, #1
 3985 0018 EB70     		strb	r3, [r5, #3]
 3986              	.L318:
2417:./FW/ff.c     **** }
 3987              		.loc 1 2417 5 is_stmt 1 view .LVU1298
2418:./FW/ff.c     **** 
 3988              		.loc 1 2418 1 is_stmt 0 view .LVU1299
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 192


 3989 001a 38BD     		pop	{r3, r4, r5, pc}
2418:./FW/ff.c     **** 
 3990              		.loc 1 2418 1 view .LVU1300
 3991              		.cfi_endproc
 3992              	.LFE969:
 3994              		.section	.text.dir_next,"ax",%progbits
 3995              		.align	1
 3996              		.syntax unified
 3997              		.thumb
 3998              		.thumb_func
 3999              		.fpu fpv4-sp-d16
 4001              	dir_next:
 4002              	.LVL469:
 4003              	.LFB962:
1515:./FW/ff.c     ****     DWORD ofs, clst;
 4004              		.loc 1 1515 3 is_stmt 1 view -0
 4005              		.cfi_startproc
 4006              		@ args = 0, pretend = 0, frame = 0
 4007              		@ frame_needed = 0, uses_anonymous_args = 0
1515:./FW/ff.c     ****     DWORD ofs, clst;
 4008              		.loc 1 1515 3 is_stmt 0 view .LVU1302
 4009 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4010              	.LCFI35:
 4011              		.cfi_def_cfa_offset 32
 4012              		.cfi_offset 4, -32
 4013              		.cfi_offset 5, -28
 4014              		.cfi_offset 6, -24
 4015              		.cfi_offset 7, -20
 4016              		.cfi_offset 8, -16
 4017              		.cfi_offset 9, -12
 4018              		.cfi_offset 10, -8
 4019              		.cfi_offset 14, -4
1516:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 4020              		.loc 1 1516 5 is_stmt 1 view .LVU1303
1517:./FW/ff.c     **** #if !_FS_READONLY
 4021              		.loc 1 1517 5 view .LVU1304
1517:./FW/ff.c     **** #if !_FS_READONLY
 4022              		.loc 1 1517 12 is_stmt 0 view .LVU1305
 4023 0004 0668     		ldr	r6, [r0]
 4024              	.LVL470:
1519:./FW/ff.c     **** #endif
 4025              		.loc 1 1519 5 is_stmt 1 view .LVU1306
1522:./FW/ff.c     ****     if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR))
 4026              		.loc 1 1522 5 view .LVU1307
1522:./FW/ff.c     ****     if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR))
 4027              		.loc 1 1522 13 is_stmt 0 view .LVU1308
 4028 0006 4569     		ldr	r5, [r0, #20]
 4029              	.LVL471:
1523:./FW/ff.c     **** 
 4030              		.loc 1 1523 5 is_stmt 1 view .LVU1309
1523:./FW/ff.c     **** 
 4031              		.loc 1 1523 12 is_stmt 0 view .LVU1310
 4032 0008 C369     		ldr	r3, [r0, #28]
1523:./FW/ff.c     **** 
 4033              		.loc 1 1523 8 view .LVU1311
 4034 000a 002B     		cmp	r3, #0
 4035 000c 6CD0     		beq	.L328
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 193


 4036 000e 0446     		mov	r4, r0
 4037 0010 8846     		mov	r8, r1
 4038 0012 2035     		adds	r5, r5, #32
 4039              	.LVL472:
1523:./FW/ff.c     **** 
 4040              		.loc 1 1523 19 discriminator 2 view .LVU1312
 4041 0014 B5F5001F 		cmp	r5, #2097152
 4042 0018 68D2     		bcs	.L329
1525:./FW/ff.c     ****         dp->sect++;             /* Next sector */
 4043              		.loc 1 1525 5 is_stmt 1 view .LVU1313
1525:./FW/ff.c     ****         dp->sect++;             /* Next sector */
 4044              		.loc 1 1525 13 is_stmt 0 view .LVU1314
 4045 001a C5F30807 		ubfx	r7, r5, #0, #9
1525:./FW/ff.c     ****         dp->sect++;             /* Next sector */
 4046              		.loc 1 1525 8 view .LVU1315
 4047 001e 3FB9     		cbnz	r7, .L322
1526:./FW/ff.c     **** 
 4048              		.loc 1 1526 9 is_stmt 1 view .LVU1316
1526:./FW/ff.c     **** 
 4049              		.loc 1 1526 17 is_stmt 0 view .LVU1317
 4050 0020 0133     		adds	r3, r3, #1
 4051 0022 C361     		str	r3, [r0, #28]
1528:./FW/ff.c     ****             if (ofs / SZDIRE >= fs->n_rootdir) {    /* Report EOT if it reached end of static table
 4052              		.loc 1 1528 9 is_stmt 1 view .LVU1318
1528:./FW/ff.c     ****             if (ofs / SZDIRE >= fs->n_rootdir) {    /* Report EOT if it reached end of static table
 4053              		.loc 1 1528 16 is_stmt 0 view .LVU1319
 4054 0024 8169     		ldr	r1, [r0, #24]
 4055              	.LVL473:
1528:./FW/ff.c     ****             if (ofs / SZDIRE >= fs->n_rootdir) {    /* Report EOT if it reached end of static table
 4056              		.loc 1 1528 12 view .LVU1320
 4057 0026 79B9     		cbnz	r1, .L323
1529:./FW/ff.c     ****                 dp->sect = 0;
 4058              		.loc 1 1529 13 is_stmt 1 view .LVU1321
1529:./FW/ff.c     ****                 dp->sect = 0;
 4059              		.loc 1 1529 35 is_stmt 0 view .LVU1322
 4060 0028 3389     		ldrh	r3, [r6, #8]
1529:./FW/ff.c     ****                 dp->sect = 0;
 4061              		.loc 1 1529 16 view .LVU1323
 4062 002a B3EB551F 		cmp	r3, r5, lsr #5
 4063 002e 07D9     		bls	.L338
 4064              	.LVL474:
 4065              	.L322:
1568:./FW/ff.c     ****     dp->dir = fs->win + ofs % SS(fs);   /* Pointer to the entry in the win[] */
 4066              		.loc 1 1568 5 is_stmt 1 view .LVU1324
1568:./FW/ff.c     ****     dp->dir = fs->win + ofs % SS(fs);   /* Pointer to the entry in the win[] */
 4067              		.loc 1 1568 14 is_stmt 0 view .LVU1325
 4068 0030 6561     		str	r5, [r4, #20]
1569:./FW/ff.c     **** 
 4069              		.loc 1 1569 5 is_stmt 1 view .LVU1326
1569:./FW/ff.c     **** 
 4070              		.loc 1 1569 15 is_stmt 0 view .LVU1327
 4071 0032 06F13003 		add	r3, r6, #48
1569:./FW/ff.c     **** 
 4072              		.loc 1 1569 23 view .LVU1328
 4073 0036 3B44     		add	r3, r3, r7
1569:./FW/ff.c     **** 
 4074              		.loc 1 1569 13 view .LVU1329
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 194


 4075 0038 2362     		str	r3, [r4, #32]
1571:./FW/ff.c     **** }
 4076              		.loc 1 1571 5 is_stmt 1 view .LVU1330
1571:./FW/ff.c     **** }
 4077              		.loc 1 1571 12 is_stmt 0 view .LVU1331
 4078 003a 0020     		movs	r0, #0
 4079              	.LVL475:
 4080              	.L321:
1572:./FW/ff.c     **** 
 4081              		.loc 1 1572 1 view .LVU1332
 4082 003c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4083              	.LVL476:
 4084              	.L338:
1530:./FW/ff.c     ****                 return FR_NO_FILE;
 4085              		.loc 1 1530 17 is_stmt 1 view .LVU1333
1530:./FW/ff.c     ****                 return FR_NO_FILE;
 4086              		.loc 1 1530 26 is_stmt 0 view .LVU1334
 4087 0040 0023     		movs	r3, #0
 4088 0042 C361     		str	r3, [r0, #28]
1531:./FW/ff.c     ****             }
 4089              		.loc 1 1531 17 is_stmt 1 view .LVU1335
1531:./FW/ff.c     ****             }
 4090              		.loc 1 1531 24 is_stmt 0 view .LVU1336
 4091 0044 0420     		movs	r0, #4
 4092              	.LVL477:
1531:./FW/ff.c     ****             }
 4093              		.loc 1 1531 24 view .LVU1337
 4094 0046 F9E7     		b	.L321
 4095              	.LVL478:
 4096              	.L323:
1534:./FW/ff.c     ****                 clst = get_fat(&dp->obj, dp->clust);            /* Get next cluster */
 4097              		.loc 1 1534 13 is_stmt 1 view .LVU1338
1534:./FW/ff.c     ****                 clst = get_fat(&dp->obj, dp->clust);            /* Get next cluster */
 4098              		.loc 1 1534 36 is_stmt 0 view .LVU1339
 4099 0048 7389     		ldrh	r3, [r6, #10]
1534:./FW/ff.c     ****                 clst = get_fat(&dp->obj, dp->clust);            /* Get next cluster */
 4100              		.loc 1 1534 44 view .LVU1340
 4101 004a 013B     		subs	r3, r3, #1
1534:./FW/ff.c     ****                 clst = get_fat(&dp->obj, dp->clust);            /* Get next cluster */
 4102              		.loc 1 1534 16 view .LVU1341
 4103 004c 13EA5529 		ands	r9, r3, r5, lsr #9
 4104 0050 EED1     		bne	.L322
1535:./FW/ff.c     ****                 if (clst <= 1) { return FR_INT_ERR; }               /* Internal error */
 4105              		.loc 1 1535 17 is_stmt 1 view .LVU1342
1535:./FW/ff.c     ****                 if (clst <= 1) { return FR_INT_ERR; }               /* Internal error */
 4106              		.loc 1 1535 24 is_stmt 0 view .LVU1343
 4107 0052 FFF7FEFF 		bl	get_fat
 4108              	.LVL479:
1535:./FW/ff.c     ****                 if (clst <= 1) { return FR_INT_ERR; }               /* Internal error */
 4109              		.loc 1 1535 24 view .LVU1344
 4110 0056 8246     		mov	r10, r0
 4111              	.LVL480:
1536:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; }     /* Disk error */
 4112              		.loc 1 1536 17 is_stmt 1 view .LVU1345
1536:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; }     /* Disk error */
 4113              		.loc 1 1536 20 is_stmt 0 view .LVU1346
 4114 0058 0128     		cmp	r0, #1
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 195


 4115 005a 49D9     		bls	.L330
1537:./FW/ff.c     ****                 if (clst >= fs->n_fatent) {                     /* Reached end of dynamic table */
 4116              		.loc 1 1537 17 is_stmt 1 view .LVU1347
1537:./FW/ff.c     ****                 if (clst >= fs->n_fatent) {                     /* Reached end of dynamic table */
 4117              		.loc 1 1537 20 is_stmt 0 view .LVU1348
 4118 005c B0F1FF3F 		cmp	r0, #-1
 4119 0060 48D0     		beq	.L331
1538:./FW/ff.c     **** #if !_FS_READONLY
 4120              		.loc 1 1538 17 is_stmt 1 view .LVU1349
1538:./FW/ff.c     **** #if !_FS_READONLY
 4121              		.loc 1 1538 31 is_stmt 0 view .LVU1350
 4122 0062 7369     		ldr	r3, [r6, #20]
1538:./FW/ff.c     **** #if !_FS_READONLY
 4123              		.loc 1 1538 20 view .LVU1351
 4124 0064 8342     		cmp	r3, r0
 4125 0066 37D8     		bhi	.L324
1540:./FW/ff.c     ****                         dp->sect = 0;
 4126              		.loc 1 1540 21 is_stmt 1 view .LVU1352
1540:./FW/ff.c     ****                         dp->sect = 0;
 4127              		.loc 1 1540 24 is_stmt 0 view .LVU1353
 4128 0068 B8F1000F 		cmp	r8, #0
 4129 006c 11D0     		beq	.L339
1544:./FW/ff.c     ****                     if (clst == 0) { return FR_DENIED; }            /* No free cluster */
 4130              		.loc 1 1544 21 is_stmt 1 view .LVU1354
1544:./FW/ff.c     ****                     if (clst == 0) { return FR_DENIED; }            /* No free cluster */
 4131              		.loc 1 1544 28 is_stmt 0 view .LVU1355
 4132 006e A169     		ldr	r1, [r4, #24]
 4133 0070 2046     		mov	r0, r4
 4134              	.LVL481:
1544:./FW/ff.c     ****                     if (clst == 0) { return FR_DENIED; }            /* No free cluster */
 4135              		.loc 1 1544 28 view .LVU1356
 4136 0072 FFF7FEFF 		bl	create_chain
 4137              	.LVL482:
1545:./FW/ff.c     ****                     if (clst == 1) { return FR_INT_ERR; }           /* Internal error */
 4138              		.loc 1 1545 21 is_stmt 1 view .LVU1357
1545:./FW/ff.c     ****                     if (clst == 1) { return FR_INT_ERR; }           /* Internal error */
 4139              		.loc 1 1545 24 is_stmt 0 view .LVU1358
 4140 0076 8246     		mov	r10, r0
 4141 0078 0028     		cmp	r0, #0
 4142 007a 3DD0     		beq	.L332
1546:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
 4143              		.loc 1 1546 21 is_stmt 1 view .LVU1359
1546:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
 4144              		.loc 1 1546 24 is_stmt 0 view .LVU1360
 4145 007c 0128     		cmp	r0, #1
 4146 007e 3DD0     		beq	.L333
1547:./FW/ff.c     ****                     /* Clean-up the stretched table */
 4147              		.loc 1 1547 21 is_stmt 1 view .LVU1361
1547:./FW/ff.c     ****                     /* Clean-up the stretched table */
 4148              		.loc 1 1547 24 is_stmt 0 view .LVU1362
 4149 0080 B0F1FF3F 		cmp	r0, #-1
 4150 0084 3CD0     		beq	.L334
1549:./FW/ff.c     ****                     if (sync_window(fs) != FR_OK) { return FR_DISK_ERR; }   /* Flush disk access wi
 4151              		.loc 1 1549 21 is_stmt 1 view .LVU1363
1550:./FW/ff.c     ****                     mem_set(fs->win, 0, SS(fs));                /* Clear window buffer */
 4152              		.loc 1 1550 21 view .LVU1364
1550:./FW/ff.c     ****                     mem_set(fs->win, 0, SS(fs));                /* Clear window buffer */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 196


 4153              		.loc 1 1550 25 is_stmt 0 view .LVU1365
 4154 0086 3046     		mov	r0, r6
 4155              	.LVL483:
1550:./FW/ff.c     ****                     mem_set(fs->win, 0, SS(fs));                /* Clear window buffer */
 4156              		.loc 1 1550 25 view .LVU1366
 4157 0088 FFF7FEFF 		bl	sync_window
 4158              	.LVL484:
1550:./FW/ff.c     ****                     mem_set(fs->win, 0, SS(fs));                /* Clear window buffer */
 4159              		.loc 1 1550 24 view .LVU1367
 4160 008c 28B1     		cbz	r0, .L340
1550:./FW/ff.c     ****                     mem_set(fs->win, 0, SS(fs));                /* Clear window buffer */
 4161              		.loc 1 1550 60 view .LVU1368
 4162 008e 0120     		movs	r0, #1
 4163 0090 D4E7     		b	.L321
 4164              	.LVL485:
 4165              	.L339:
1541:./FW/ff.c     ****                         return FR_NO_FILE;
 4166              		.loc 1 1541 25 is_stmt 1 view .LVU1369
1541:./FW/ff.c     ****                         return FR_NO_FILE;
 4167              		.loc 1 1541 34 is_stmt 0 view .LVU1370
 4168 0092 0023     		movs	r3, #0
 4169 0094 E361     		str	r3, [r4, #28]
1542:./FW/ff.c     ****                     }
 4170              		.loc 1 1542 25 is_stmt 1 view .LVU1371
1542:./FW/ff.c     ****                     }
 4171              		.loc 1 1542 32 is_stmt 0 view .LVU1372
 4172 0096 0420     		movs	r0, #4
 4173              	.LVL486:
1542:./FW/ff.c     ****                     }
 4174              		.loc 1 1542 32 view .LVU1373
 4175 0098 D0E7     		b	.L321
 4176              	.L340:
1551:./FW/ff.c     ****                     for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect
 4177              		.loc 1 1551 21 is_stmt 1 view .LVU1374
 4178 009a 4FF40072 		mov	r2, #512
 4179 009e 0021     		movs	r1, #0
 4180 00a0 06F13000 		add	r0, r6, #48
 4181 00a4 FFF7FEFF 		bl	mem_set
 4182              	.LVL487:
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4183              		.loc 1 1552 21 view .LVU1375
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4184              		.loc 1 1552 47 is_stmt 0 view .LVU1376
 4185 00a8 5146     		mov	r1, r10
 4186 00aa 3046     		mov	r0, r6
 4187 00ac FFF7FEFF 		bl	clust2sect
 4188              	.LVL488:
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4189              		.loc 1 1552 45 view .LVU1377
 4190 00b0 F062     		str	r0, [r6, #44]
 4191              	.LVL489:
 4192              	.L326:
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4193              		.loc 1 1552 69 is_stmt 1 discriminator 1 view .LVU1378
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4194              		.loc 1 1552 75 is_stmt 0 discriminator 1 view .LVU1379
 4195 00b2 7389     		ldrh	r3, [r6, #10]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 197


1552:./FW/ff.c     ****                         fs->wflag = 1;
 4196              		.loc 1 1552 21 discriminator 1 view .LVU1380
 4197 00b4 9945     		cmp	r9, r3
 4198 00b6 0BD2     		bcs	.L341
1553:./FW/ff.c     ****                         if (sync_window(fs) != FR_OK) { return FR_DISK_ERR; }
 4199              		.loc 1 1553 25 is_stmt 1 view .LVU1381
1553:./FW/ff.c     ****                         if (sync_window(fs) != FR_OK) { return FR_DISK_ERR; }
 4200              		.loc 1 1553 35 is_stmt 0 view .LVU1382
 4201 00b8 0123     		movs	r3, #1
 4202 00ba F370     		strb	r3, [r6, #3]
1554:./FW/ff.c     ****                     }
 4203              		.loc 1 1554 25 is_stmt 1 view .LVU1383
1554:./FW/ff.c     ****                     }
 4204              		.loc 1 1554 29 is_stmt 0 view .LVU1384
 4205 00bc 3046     		mov	r0, r6
 4206 00be FFF7FEFF 		bl	sync_window
 4207              	.LVL490:
1554:./FW/ff.c     ****                     }
 4208              		.loc 1 1554 28 view .LVU1385
 4209 00c2 F8B9     		cbnz	r0, .L336
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4210              		.loc 1 1552 84 is_stmt 1 discriminator 2 view .LVU1386
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4211              		.loc 1 1552 85 is_stmt 0 discriminator 2 view .LVU1387
 4212 00c4 09F10109 		add	r9, r9, #1
 4213              	.LVL491:
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4214              		.loc 1 1552 91 discriminator 2 view .LVU1388
 4215 00c8 F36A     		ldr	r3, [r6, #44]
1552:./FW/ff.c     ****                         fs->wflag = 1;
 4216              		.loc 1 1552 100 discriminator 2 view .LVU1389
 4217 00ca 0133     		adds	r3, r3, #1
 4218 00cc F362     		str	r3, [r6, #44]
 4219 00ce F0E7     		b	.L326
 4220              	.L341:
1556:./FW/ff.c     **** #else
 4221              		.loc 1 1556 21 is_stmt 1 view .LVU1390
1556:./FW/ff.c     **** #else
 4222              		.loc 1 1556 33 is_stmt 0 view .LVU1391
 4223 00d0 F36A     		ldr	r3, [r6, #44]
 4224 00d2 A3EB0903 		sub	r3, r3, r9
 4225 00d6 F362     		str	r3, [r6, #44]
 4226              	.LVL492:
 4227              	.L324:
1563:./FW/ff.c     ****                 dp->sect = clust2sect(fs, clst);
 4228              		.loc 1 1563 17 is_stmt 1 view .LVU1392
1563:./FW/ff.c     ****                 dp->sect = clust2sect(fs, clst);
 4229              		.loc 1 1563 27 is_stmt 0 view .LVU1393
 4230 00d8 C4F818A0 		str	r10, [r4, #24]
1564:./FW/ff.c     ****             }
 4231              		.loc 1 1564 17 is_stmt 1 view .LVU1394
1564:./FW/ff.c     ****             }
 4232              		.loc 1 1564 28 is_stmt 0 view .LVU1395
 4233 00dc 5146     		mov	r1, r10
 4234 00de 3046     		mov	r0, r6
 4235 00e0 FFF7FEFF 		bl	clust2sect
 4236              	.LVL493:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 198


1564:./FW/ff.c     ****             }
 4237              		.loc 1 1564 26 view .LVU1396
 4238 00e4 E061     		str	r0, [r4, #28]
 4239 00e6 A3E7     		b	.L322
 4240              	.LVL494:
 4241              	.L328:
1523:./FW/ff.c     **** 
 4242              		.loc 1 1523 110 view .LVU1397
 4243 00e8 0420     		movs	r0, #4
 4244              	.LVL495:
1523:./FW/ff.c     **** 
 4245              		.loc 1 1523 110 view .LVU1398
 4246 00ea A7E7     		b	.L321
 4247              	.LVL496:
 4248              	.L329:
1523:./FW/ff.c     **** 
 4249              		.loc 1 1523 110 view .LVU1399
 4250 00ec 0420     		movs	r0, #4
 4251              	.LVL497:
1523:./FW/ff.c     **** 
 4252              		.loc 1 1523 110 view .LVU1400
 4253 00ee A5E7     		b	.L321
 4254              	.LVL498:
 4255              	.L330:
1536:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; }     /* Disk error */
 4256              		.loc 1 1536 41 view .LVU1401
 4257 00f0 0220     		movs	r0, #2
 4258              	.LVL499:
1536:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; }     /* Disk error */
 4259              		.loc 1 1536 41 view .LVU1402
 4260 00f2 A3E7     		b	.L321
 4261              	.LVL500:
 4262              	.L331:
1537:./FW/ff.c     ****                 if (clst >= fs->n_fatent) {                     /* Reached end of dynamic table */
 4263              		.loc 1 1537 50 view .LVU1403
 4264 00f4 0120     		movs	r0, #1
 4265              	.LVL501:
1537:./FW/ff.c     ****                 if (clst >= fs->n_fatent) {                     /* Reached end of dynamic table */
 4266              		.loc 1 1537 50 view .LVU1404
 4267 00f6 A1E7     		b	.L321
 4268              	.LVL502:
 4269              	.L332:
1545:./FW/ff.c     ****                     if (clst == 1) { return FR_INT_ERR; }           /* Internal error */
 4270              		.loc 1 1545 45 view .LVU1405
 4271 00f8 0720     		movs	r0, #7
 4272              	.LVL503:
1545:./FW/ff.c     ****                     if (clst == 1) { return FR_INT_ERR; }           /* Internal error */
 4273              		.loc 1 1545 45 view .LVU1406
 4274 00fa 9FE7     		b	.L321
 4275              	.LVL504:
 4276              	.L333:
1546:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
 4277              		.loc 1 1546 45 view .LVU1407
 4278 00fc 0220     		movs	r0, #2
 4279              	.LVL505:
1546:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { return FR_DISK_ERR; } /* Disk error */
 4280              		.loc 1 1546 45 view .LVU1408
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 199


 4281 00fe 9DE7     		b	.L321
 4282              	.LVL506:
 4283              	.L334:
1547:./FW/ff.c     ****                     /* Clean-up the stretched table */
 4284              		.loc 1 1547 54 view .LVU1409
 4285 0100 0120     		movs	r0, #1
 4286              	.LVL507:
1547:./FW/ff.c     ****                     /* Clean-up the stretched table */
 4287              		.loc 1 1547 54 view .LVU1410
 4288 0102 9BE7     		b	.L321
 4289              	.LVL508:
 4290              	.L336:
1554:./FW/ff.c     ****                     }
 4291              		.loc 1 1554 64 view .LVU1411
 4292 0104 0120     		movs	r0, #1
 4293 0106 99E7     		b	.L321
 4294              		.cfi_endproc
 4295              	.LFE962:
 4297              		.section	.text.dir_find,"ax",%progbits
 4298              		.align	1
 4299              		.syntax unified
 4300              		.thumb
 4301              		.thumb_func
 4302              		.fpu fpv4-sp-d16
 4304              	dir_find:
 4305              	.LVL509:
 4306              	.LFB967:
2197:./FW/ff.c     ****     FRESULT res;
 4307              		.loc 1 2197 3 is_stmt 1 view -0
 4308              		.cfi_startproc
 4309              		@ args = 0, pretend = 0, frame = 0
 4310              		@ frame_needed = 0, uses_anonymous_args = 0
2197:./FW/ff.c     ****     FRESULT res;
 4311              		.loc 1 2197 3 is_stmt 0 view .LVU1413
 4312 0000 70B5     		push	{r4, r5, r6, lr}
 4313              	.LCFI36:
 4314              		.cfi_def_cfa_offset 16
 4315              		.cfi_offset 4, -16
 4316              		.cfi_offset 5, -12
 4317              		.cfi_offset 6, -8
 4318              		.cfi_offset 14, -4
 4319 0002 0446     		mov	r4, r0
2198:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 4320              		.loc 1 2198 5 is_stmt 1 view .LVU1414
2199:./FW/ff.c     ****     BYTE c;
 4321              		.loc 1 2199 5 view .LVU1415
2199:./FW/ff.c     ****     BYTE c;
 4322              		.loc 1 2199 12 is_stmt 0 view .LVU1416
 4323 0004 0668     		ldr	r6, [r0]
 4324              	.LVL510:
2200:./FW/ff.c     **** #if _USE_LFN != 0
 4325              		.loc 1 2200 5 is_stmt 1 view .LVU1417
2205:./FW/ff.c     ****     if (res != FR_OK) { return res; }
 4326              		.loc 1 2205 5 view .LVU1418
2205:./FW/ff.c     ****     if (res != FR_OK) { return res; }
 4327              		.loc 1 2205 11 is_stmt 0 view .LVU1419
 4328 0006 0021     		movs	r1, #0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 200


 4329 0008 FFF7FEFF 		bl	dir_sdi
 4330              	.LVL511:
2206:./FW/ff.c     **** #if _FS_EXFAT
 4331              		.loc 1 2206 5 is_stmt 1 view .LVU1420
2206:./FW/ff.c     **** #if _FS_EXFAT
 4332              		.loc 1 2206 8 is_stmt 0 view .LVU1421
 4333 000c 0546     		mov	r5, r0
 4334 000e 40B1     		cbz	r0, .L345
 4335              	.LVL512:
 4336              	.L343:
2269:./FW/ff.c     **** 
 4337              		.loc 1 2269 1 view .LVU1422
 4338 0010 2846     		mov	r0, r5
 4339 0012 70BD     		pop	{r4, r5, r6, pc}
 4340              	.LVL513:
 4341              	.L344:
2265:./FW/ff.c     ****     } while (res == FR_OK);
 4342              		.loc 1 2265 9 is_stmt 1 view .LVU1423
2265:./FW/ff.c     ****     } while (res == FR_OK);
 4343              		.loc 1 2265 15 is_stmt 0 view .LVU1424
 4344 0014 0021     		movs	r1, #0
 4345 0016 2046     		mov	r0, r4
 4346 0018 FFF7FEFF 		bl	dir_next
 4347              	.LVL514:
2266:./FW/ff.c     **** 
 4348              		.loc 1 2266 13 is_stmt 1 view .LVU1425
2266:./FW/ff.c     **** 
 4349              		.loc 1 2266 5 is_stmt 0 view .LVU1426
 4350 001c 0546     		mov	r5, r0
 4351 001e 0028     		cmp	r0, #0
 4352 0020 F6D1     		bne	.L343
 4353              	.L345:
2232:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4354              		.loc 1 2232 5 is_stmt 1 view .LVU1427
2233:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4355              		.loc 1 2233 9 view .LVU1428
2233:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4356              		.loc 1 2233 15 is_stmt 0 view .LVU1429
 4357 0022 E169     		ldr	r1, [r4, #28]
 4358 0024 3046     		mov	r0, r6
 4359              	.LVL515:
2233:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4360              		.loc 1 2233 15 view .LVU1430
 4361 0026 FFF7FEFF 		bl	move_window
 4362              	.LVL516:
2234:./FW/ff.c     ****         c = dp->dir[DIR_Name];
 4363              		.loc 1 2234 9 is_stmt 1 view .LVU1431
2234:./FW/ff.c     ****         c = dp->dir[DIR_Name];
 4364              		.loc 1 2234 12 is_stmt 0 view .LVU1432
 4365 002a 0546     		mov	r5, r0
 4366 002c 0028     		cmp	r0, #0
 4367 002e EFD1     		bne	.L343
2235:./FW/ff.c     ****         if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
 4368              		.loc 1 2235 9 is_stmt 1 view .LVU1433
2235:./FW/ff.c     ****         if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
 4369              		.loc 1 2235 15 is_stmt 0 view .LVU1434
 4370 0030 206A     		ldr	r0, [r4, #32]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 201


 4371              	.LVL517:
2235:./FW/ff.c     ****         if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
 4372              		.loc 1 2235 11 view .LVU1435
 4373 0032 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 4374              	.LVL518:
2236:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4375              		.loc 1 2236 9 is_stmt 1 view .LVU1436
2236:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4376              		.loc 1 2236 12 is_stmt 0 view .LVU1437
 4377 0034 7BB1     		cbz	r3, .L346
2262:./FW/ff.c     ****         if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) { break; }  /* Is it a 
 4378              		.loc 1 2262 9 is_stmt 1 view .LVU1438
2262:./FW/ff.c     ****         if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) { break; }  /* Is it a 
 4379              		.loc 1 2262 31 is_stmt 0 view .LVU1439
 4380 0036 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 4381              	.LVL519:
2262:./FW/ff.c     ****         if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) { break; }  /* Is it a 
 4382              		.loc 1 2262 42 view .LVU1440
 4383 0038 03F03F03 		and	r3, r3, #63
2262:./FW/ff.c     ****         if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) { break; }  /* Is it a 
 4384              		.loc 1 2262 22 view .LVU1441
 4385 003c A371     		strb	r3, [r4, #6]
 4386              	.LVL520:
2263:./FW/ff.c     **** #endif
 4387              		.loc 1 2263 9 is_stmt 1 view .LVU1442
2263:./FW/ff.c     **** #endif
 4388              		.loc 1 2263 22 is_stmt 0 view .LVU1443
 4389 003e C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
2263:./FW/ff.c     **** #endif
 4390              		.loc 1 2263 12 view .LVU1444
 4391 0040 13F0080F 		tst	r3, #8
 4392 0044 E6D1     		bne	.L344
2263:./FW/ff.c     **** #endif
 4393              		.loc 1 2263 47 discriminator 1 view .LVU1445
 4394 0046 0B22     		movs	r2, #11
 4395 0048 04F12401 		add	r1, r4, #36
 4396 004c FFF7FEFF 		bl	mem_cmp
 4397              	.LVL521:
2263:./FW/ff.c     **** #endif
 4398              		.loc 1 2263 43 discriminator 1 view .LVU1446
 4399 0050 0028     		cmp	r0, #0
 4400 0052 DFD1     		bne	.L344
 4401 0054 DCE7     		b	.L343
 4402              	.LVL522:
 4403              	.L346:
2236:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4404              		.loc 1 2236 27 view .LVU1447
 4405 0056 0425     		movs	r5, #4
 4406 0058 DAE7     		b	.L343
 4407              		.cfi_endproc
 4408              	.LFE967:
 4410              		.section	.text.follow_path,"ax",%progbits
 4411              		.align	1
 4412              		.syntax unified
 4413              		.thumb
 4414              		.thumb_func
 4415              		.fpu fpv4-sp-d16
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 202


 4417              	follow_path:
 4418              	.LVL523:
 4419              	.LFB972:
2818:./FW/ff.c     ****     FRESULT res;
 4420              		.loc 1 2818 3 is_stmt 1 view -0
 4421              		.cfi_startproc
 4422              		@ args = 0, pretend = 0, frame = 8
 4423              		@ frame_needed = 0, uses_anonymous_args = 0
2818:./FW/ff.c     ****     FRESULT res;
 4424              		.loc 1 2818 3 is_stmt 0 view .LVU1449
 4425 0000 30B5     		push	{r4, r5, lr}
 4426              	.LCFI37:
 4427              		.cfi_def_cfa_offset 12
 4428              		.cfi_offset 4, -12
 4429              		.cfi_offset 5, -8
 4430              		.cfi_offset 14, -4
 4431 0002 83B0     		sub	sp, sp, #12
 4432              	.LCFI38:
 4433              		.cfi_def_cfa_offset 24
 4434 0004 0446     		mov	r4, r0
 4435 0006 0191     		str	r1, [sp, #4]
2819:./FW/ff.c     ****     BYTE ns;
 4436              		.loc 1 2819 5 is_stmt 1 view .LVU1450
2820:./FW/ff.c     ****     _FDID *obj = &dp->obj;
 4437              		.loc 1 2820 5 view .LVU1451
2821:./FW/ff.c     ****     FATFS *fs = obj->fs;
 4438              		.loc 1 2821 5 view .LVU1452
 4439              	.LVL524:
2822:./FW/ff.c     **** 
 4440              		.loc 1 2822 5 view .LVU1453
2822:./FW/ff.c     **** 
 4441              		.loc 1 2822 12 is_stmt 0 view .LVU1454
 4442 0008 0568     		ldr	r5, [r0]
 4443              	.LVL525:
2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4444              		.loc 1 2832 9 is_stmt 1 view .LVU1455
2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4445              		.loc 1 2832 15 is_stmt 0 view .LVU1456
 4446 000a 01E0     		b	.L349
 4447              	.L350:
2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4448              		.loc 1 2832 49 is_stmt 1 discriminator 4 view .LVU1457
2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4449              		.loc 1 2832 53 is_stmt 0 discriminator 4 view .LVU1458
 4450 000c 0133     		adds	r3, r3, #1
 4451 000e 0193     		str	r3, [sp, #4]
 4452              	.L349:
2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4453              		.loc 1 2832 15 is_stmt 1 discriminator 1 view .LVU1459
2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4454              		.loc 1 2832 16 is_stmt 0 discriminator 1 view .LVU1460
 4455 0010 019B     		ldr	r3, [sp, #4]
 4456 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4457              		.loc 1 2832 15 discriminator 1 view .LVU1461
 4458 0014 2F2A     		cmp	r2, #47
 4459 0016 F9D0     		beq	.L350
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 203


2832:./FW/ff.c     ****         obj->sclust = 0;                    /* Start from root directory */
 4460              		.loc 1 2832 29 discriminator 3 view .LVU1462
 4461 0018 5C2A     		cmp	r2, #92
 4462 001a F7D0     		beq	.L350
2833:./FW/ff.c     ****     }
 4463              		.loc 1 2833 9 is_stmt 1 view .LVU1463
2833:./FW/ff.c     ****     }
 4464              		.loc 1 2833 21 is_stmt 0 view .LVU1464
 4465 001c 0022     		movs	r2, #0
 4466 001e A260     		str	r2, [r4, #8]
2852:./FW/ff.c     ****         dp->fn[NSFLAG] = NS_NONAME;
 4467              		.loc 1 2852 5 is_stmt 1 view .LVU1465
2852:./FW/ff.c     ****         dp->fn[NSFLAG] = NS_NONAME;
 4468              		.loc 1 2852 15 is_stmt 0 view .LVU1466
 4469 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2852:./FW/ff.c     ****         dp->fn[NSFLAG] = NS_NONAME;
 4470              		.loc 1 2852 8 view .LVU1467
 4471 0022 1F2B     		cmp	r3, #31
 4472 0024 1BD8     		bhi	.L351
2853:./FW/ff.c     ****         res = dir_sdi(dp, 0);
 4473              		.loc 1 2853 9 is_stmt 1 view .LVU1468
2853:./FW/ff.c     ****         res = dir_sdi(dp, 0);
 4474              		.loc 1 2853 24 is_stmt 0 view .LVU1469
 4475 0026 8023     		movs	r3, #128
 4476 0028 84F82F30 		strb	r3, [r4, #47]
2854:./FW/ff.c     **** 
 4477              		.loc 1 2854 9 is_stmt 1 view .LVU1470
2854:./FW/ff.c     **** 
 4478              		.loc 1 2854 15 is_stmt 0 view .LVU1471
 4479 002c 1146     		mov	r1, r2
 4480              	.LVL526:
2854:./FW/ff.c     **** 
 4481              		.loc 1 2854 15 view .LVU1472
 4482 002e 2046     		mov	r0, r4
 4483              	.LVL527:
2854:./FW/ff.c     **** 
 4484              		.loc 1 2854 15 view .LVU1473
 4485 0030 FFF7FEFF 		bl	dir_sdi
 4486              	.LVL528:
 4487 0034 0346     		mov	r3, r0
 4488              	.LVL529:
 4489              	.L352:
2896:./FW/ff.c     **** }
 4490              		.loc 1 2896 5 is_stmt 1 view .LVU1474
2897:./FW/ff.c     **** 
 4491              		.loc 1 2897 1 is_stmt 0 view .LVU1475
 4492 0036 1846     		mov	r0, r3
 4493 0038 03B0     		add	sp, sp, #12
 4494              	.LCFI39:
 4495              		.cfi_remember_state
 4496              		.cfi_def_cfa_offset 12
 4497              		@ sp needed
 4498 003a 30BD     		pop	{r4, r5, pc}
 4499              	.LVL530:
 4500              	.L357:
 4501              	.LCFI40:
 4502              		.cfi_restore_state
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 204


2863:./FW/ff.c     ****                     if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exist, stay there */
 4503              		.loc 1 2863 17 is_stmt 1 view .LVU1476
2863:./FW/ff.c     ****                     if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exist, stay there */
 4504              		.loc 1 2863 20 is_stmt 0 view .LVU1477
 4505 003c 0428     		cmp	r0, #4
 4506 003e FAD1     		bne	.L352
2864:./FW/ff.c     ****                         if (!(ns & NS_LAST)) { continue; }  /* Continue to follow if not last segme
 4507              		.loc 1 2864 21 is_stmt 1 view .LVU1478
2869:./FW/ff.c     ****                     }
 4508              		.loc 1 2869 25 view .LVU1479
2869:./FW/ff.c     ****                     }
 4509              		.loc 1 2869 28 is_stmt 0 view .LVU1480
 4510 0040 12F0040F 		tst	r2, #4
 4511 0044 F7D1     		bne	.L352
2869:./FW/ff.c     ****                     }
 4512              		.loc 1 2869 52 view .LVU1481
 4513 0046 0523     		movs	r3, #5
 4514 0048 F5E7     		b	.L352
 4515              	.L358:
2891:./FW/ff.c     ****             }
 4516              		.loc 1 2891 17 is_stmt 1 view .LVU1482
2891:./FW/ff.c     ****             }
 4517              		.loc 1 2891 44 is_stmt 0 view .LVU1483
 4518 004a 05F13001 		add	r1, r5, #48
2891:./FW/ff.c     ****             }
 4519              		.loc 1 2891 56 view .LVU1484
 4520 004e 6369     		ldr	r3, [r4, #20]
2891:./FW/ff.c     ****             }
 4521              		.loc 1 2891 63 view .LVU1485
 4522 0050 C3F30803 		ubfx	r3, r3, #0, #9
2891:./FW/ff.c     ****             }
 4523              		.loc 1 2891 31 view .LVU1486
 4524 0054 1944     		add	r1, r1, r3
 4525 0056 2846     		mov	r0, r5
 4526              	.LVL531:
2891:./FW/ff.c     ****             }
 4527              		.loc 1 2891 31 view .LVU1487
 4528 0058 FFF7FEFF 		bl	ld_clust
 4529              	.LVL532:
2891:./FW/ff.c     ****             }
 4530              		.loc 1 2891 29 view .LVU1488
 4531 005c A060     		str	r0, [r4, #8]
2857:./FW/ff.c     ****             res = create_name(dp, &path);   /* Get a segment name of the path */
 4532              		.loc 1 2857 15 is_stmt 1 view .LVU1489
 4533              	.L351:
2857:./FW/ff.c     ****             res = create_name(dp, &path);   /* Get a segment name of the path */
 4534              		.loc 1 2857 9 view .LVU1490
2858:./FW/ff.c     ****             if (res != FR_OK) { break; }
 4535              		.loc 1 2858 13 view .LVU1491
2858:./FW/ff.c     ****             if (res != FR_OK) { break; }
 4536              		.loc 1 2858 19 is_stmt 0 view .LVU1492
 4537 005e 01A9     		add	r1, sp, #4
 4538 0060 2046     		mov	r0, r4
 4539 0062 FFF7FEFF 		bl	create_name
 4540              	.LVL533:
2859:./FW/ff.c     ****             res = dir_find(dp);             /* Find an object with the segment name */
 4541              		.loc 1 2859 13 is_stmt 1 view .LVU1493
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 205


2859:./FW/ff.c     ****             res = dir_find(dp);             /* Find an object with the segment name */
 4542              		.loc 1 2859 16 is_stmt 0 view .LVU1494
 4543 0066 0346     		mov	r3, r0
 4544 0068 0028     		cmp	r0, #0
 4545 006a E4D1     		bne	.L352
2860:./FW/ff.c     ****             ns = dp->fn[NSFLAG];
 4546              		.loc 1 2860 13 is_stmt 1 view .LVU1495
2860:./FW/ff.c     ****             ns = dp->fn[NSFLAG];
 4547              		.loc 1 2860 19 is_stmt 0 view .LVU1496
 4548 006c 2046     		mov	r0, r4
 4549              	.LVL534:
2860:./FW/ff.c     ****             ns = dp->fn[NSFLAG];
 4550              		.loc 1 2860 19 view .LVU1497
 4551 006e FFF7FEFF 		bl	dir_find
 4552              	.LVL535:
2861:./FW/ff.c     ****             if (res != FR_OK) {             /* Failed to find the object */
 4553              		.loc 1 2861 13 is_stmt 1 view .LVU1498
2861:./FW/ff.c     ****             if (res != FR_OK) {             /* Failed to find the object */
 4554              		.loc 1 2861 16 is_stmt 0 view .LVU1499
 4555 0072 94F82F20 		ldrb	r2, [r4, #47]	@ zero_extendqisi2
 4556              	.LVL536:
2862:./FW/ff.c     ****                 if (res == FR_NO_FILE) {    /* Object is not found */
 4557              		.loc 1 2862 13 is_stmt 1 view .LVU1500
2862:./FW/ff.c     ****                 if (res == FR_NO_FILE) {    /* Object is not found */
 4558              		.loc 1 2862 16 is_stmt 0 view .LVU1501
 4559 0076 0346     		mov	r3, r0
 4560 0078 0028     		cmp	r0, #0
 4561 007a DFD1     		bne	.L357
2874:./FW/ff.c     ****             /* Get into the sub-directory */
 4562              		.loc 1 2874 13 is_stmt 1 view .LVU1502
2874:./FW/ff.c     ****             /* Get into the sub-directory */
 4563              		.loc 1 2874 16 is_stmt 0 view .LVU1503
 4564 007c 12F0040F 		tst	r2, #4
 4565 0080 D9D1     		bne	.L352
2876:./FW/ff.c     ****                 res = FR_NO_PATH;
 4566              		.loc 1 2876 13 is_stmt 1 view .LVU1504
2876:./FW/ff.c     ****                 res = FR_NO_PATH;
 4567              		.loc 1 2876 22 is_stmt 0 view .LVU1505
 4568 0082 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
2876:./FW/ff.c     ****                 res = FR_NO_PATH;
 4569              		.loc 1 2876 16 view .LVU1506
 4570 0084 13F0100F 		tst	r3, #16
 4571 0088 DFD1     		bne	.L358
2877:./FW/ff.c     ****                 break;
 4572              		.loc 1 2877 21 view .LVU1507
 4573 008a 0523     		movs	r3, #5
 4574 008c D3E7     		b	.L352
 4575              		.cfi_endproc
 4576              	.LFE972:
 4578              		.section	.text.dir_alloc,"ax",%progbits
 4579              		.align	1
 4580              		.syntax unified
 4581              		.thumb
 4582              		.thumb_func
 4583              		.fpu fpv4-sp-d16
 4585              	dir_alloc:
 4586              	.LVL537:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 206


 4587              	.LFB963:
1586:./FW/ff.c     ****     FRESULT res;
 4588              		.loc 1 1586 3 is_stmt 1 view -0
 4589              		.cfi_startproc
 4590              		@ args = 0, pretend = 0, frame = 0
 4591              		@ frame_needed = 0, uses_anonymous_args = 0
1586:./FW/ff.c     ****     FRESULT res;
 4592              		.loc 1 1586 3 is_stmt 0 view .LVU1509
 4593 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4594              	.LCFI41:
 4595              		.cfi_def_cfa_offset 24
 4596              		.cfi_offset 3, -24
 4597              		.cfi_offset 4, -20
 4598              		.cfi_offset 5, -16
 4599              		.cfi_offset 6, -12
 4600              		.cfi_offset 7, -8
 4601              		.cfi_offset 14, -4
 4602 0002 0446     		mov	r4, r0
 4603 0004 0E46     		mov	r6, r1
1587:./FW/ff.c     ****     UINT n;
 4604              		.loc 1 1587 5 is_stmt 1 view .LVU1510
1588:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 4605              		.loc 1 1588 5 view .LVU1511
1589:./FW/ff.c     **** 
 4606              		.loc 1 1589 5 view .LVU1512
1589:./FW/ff.c     **** 
 4607              		.loc 1 1589 12 is_stmt 0 view .LVU1513
 4608 0006 0768     		ldr	r7, [r0]
 4609              	.LVL538:
1592:./FW/ff.c     ****     if (res == FR_OK) {
 4610              		.loc 1 1592 5 is_stmt 1 view .LVU1514
1592:./FW/ff.c     ****     if (res == FR_OK) {
 4611              		.loc 1 1592 11 is_stmt 0 view .LVU1515
 4612 0008 0021     		movs	r1, #0
 4613              	.LVL539:
1592:./FW/ff.c     ****     if (res == FR_OK) {
 4614              		.loc 1 1592 11 view .LVU1516
 4615 000a FFF7FEFF 		bl	dir_sdi
 4616              	.LVL540:
1593:./FW/ff.c     ****         n = 0;
 4617              		.loc 1 1593 5 is_stmt 1 view .LVU1517
1593:./FW/ff.c     ****         n = 0;
 4618              		.loc 1 1593 8 is_stmt 0 view .LVU1518
 4619 000e 0246     		mov	r2, r0
 4620 0010 C0B9     		cbnz	r0, .L360
1594:./FW/ff.c     ****         do {
 4621              		.loc 1 1594 11 view .LVU1519
 4622 0012 0025     		movs	r5, #0
 4623 0014 08E0     		b	.L363
 4624              	.LVL541:
 4625              	.L361:
1603:./FW/ff.c     ****             } else {
 4626              		.loc 1 1603 17 is_stmt 1 view .LVU1520
1603:./FW/ff.c     ****             } else {
 4627              		.loc 1 1603 20 is_stmt 0 view .LVU1521
 4628 0016 0135     		adds	r5, r5, #1
 4629              	.LVL542:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 207


1603:./FW/ff.c     ****             } else {
 4630              		.loc 1 1603 20 view .LVU1522
 4631 0018 B542     		cmp	r5, r6
 4632 001a 13D0     		beq	.L360
 4633              	.LVL543:
 4634              	.L362:
1607:./FW/ff.c     ****         }
 4635              		.loc 1 1607 13 is_stmt 1 view .LVU1523
1607:./FW/ff.c     ****         }
 4636              		.loc 1 1607 19 is_stmt 0 view .LVU1524
 4637 001c 0121     		movs	r1, #1
 4638 001e 2046     		mov	r0, r4
 4639              	.LVL544:
1607:./FW/ff.c     ****         }
 4640              		.loc 1 1607 19 view .LVU1525
 4641 0020 FFF7FEFF 		bl	dir_next
 4642              	.LVL545:
1609:./FW/ff.c     ****     }
 4643              		.loc 1 1609 15 is_stmt 1 view .LVU1526
1609:./FW/ff.c     ****     }
 4644              		.loc 1 1609 9 is_stmt 0 view .LVU1527
 4645 0024 0246     		mov	r2, r0
 4646 0026 68B9     		cbnz	r0, .L360
 4647              	.LVL546:
 4648              	.L363:
1595:./FW/ff.c     ****             res = move_window(fs, dp->sect);
 4649              		.loc 1 1595 9 is_stmt 1 view .LVU1528
1596:./FW/ff.c     ****             if (res != FR_OK) { break; }
 4650              		.loc 1 1596 13 view .LVU1529
1596:./FW/ff.c     ****             if (res != FR_OK) { break; }
 4651              		.loc 1 1596 19 is_stmt 0 view .LVU1530
 4652 0028 E169     		ldr	r1, [r4, #28]
 4653 002a 3846     		mov	r0, r7
 4654              	.LVL547:
1596:./FW/ff.c     ****             if (res != FR_OK) { break; }
 4655              		.loc 1 1596 19 view .LVU1531
 4656 002c FFF7FEFF 		bl	move_window
 4657              	.LVL548:
1597:./FW/ff.c     **** #if _FS_EXFAT
 4658              		.loc 1 1597 13 is_stmt 1 view .LVU1532
1597:./FW/ff.c     **** #if _FS_EXFAT
 4659              		.loc 1 1597 16 is_stmt 0 view .LVU1533
 4660 0030 0246     		mov	r2, r0
 4661 0032 38B9     		cbnz	r0, .L360
1601:./FW/ff.c     **** #endif
 4662              		.loc 1 1601 13 is_stmt 1 view .LVU1534
1601:./FW/ff.c     **** #endif
 4663              		.loc 1 1601 19 is_stmt 0 view .LVU1535
 4664 0034 236A     		ldr	r3, [r4, #32]
1601:./FW/ff.c     **** #endif
 4665              		.loc 1 1601 24 view .LVU1536
 4666 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1601:./FW/ff.c     **** #endif
 4667              		.loc 1 1601 16 view .LVU1537
 4668 0038 E52B     		cmp	r3, #229
 4669 003a ECD0     		beq	.L361
1601:./FW/ff.c     **** #endif
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 208


 4670              		.loc 1 1601 43 discriminator 1 view .LVU1538
 4671 003c 002B     		cmp	r3, #0
 4672 003e EAD0     		beq	.L361
1605:./FW/ff.c     ****             }
 4673              		.loc 1 1605 19 view .LVU1539
 4674 0040 0025     		movs	r5, #0
 4675              	.LVL549:
1605:./FW/ff.c     ****             }
 4676              		.loc 1 1605 19 view .LVU1540
 4677 0042 EBE7     		b	.L362
 4678              	.L360:
 4679              	.LVL550:
1612:./FW/ff.c     ****     return res;
 4680              		.loc 1 1612 5 is_stmt 1 view .LVU1541
1612:./FW/ff.c     ****     return res;
 4681              		.loc 1 1612 8 is_stmt 0 view .LVU1542
 4682 0044 042A     		cmp	r2, #4
 4683 0046 01D0     		beq	.L368
 4684              	.LVL551:
 4685              	.L364:
1613:./FW/ff.c     **** }
 4686              		.loc 1 1613 5 is_stmt 1 view .LVU1543
1614:./FW/ff.c     **** 
 4687              		.loc 1 1614 1 is_stmt 0 view .LVU1544
 4688 0048 1046     		mov	r0, r2
 4689 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4690              	.LVL552:
 4691              	.L368:
1612:./FW/ff.c     ****     return res;
 4692              		.loc 1 1612 34 view .LVU1545
 4693 004c 0722     		movs	r2, #7
 4694              	.LVL553:
1612:./FW/ff.c     ****     return res;
 4695              		.loc 1 1612 34 view .LVU1546
 4696 004e FBE7     		b	.L364
 4697              		.cfi_endproc
 4698              	.LFE963:
 4700              		.section	.text.dir_register,"ax",%progbits
 4701              		.align	1
 4702              		.syntax unified
 4703              		.thumb
 4704              		.thumb_func
 4705              		.fpu fpv4-sp-d16
 4707              	dir_register:
 4708              	.LVL554:
 4709              	.LFB968:
2282:./FW/ff.c     ****     FRESULT res;
 4710              		.loc 1 2282 3 is_stmt 1 view -0
 4711              		.cfi_startproc
 4712              		@ args = 0, pretend = 0, frame = 0
 4713              		@ frame_needed = 0, uses_anonymous_args = 0
2282:./FW/ff.c     ****     FRESULT res;
 4714              		.loc 1 2282 3 is_stmt 0 view .LVU1548
 4715 0000 70B5     		push	{r4, r5, r6, lr}
 4716              	.LCFI42:
 4717              		.cfi_def_cfa_offset 16
 4718              		.cfi_offset 4, -16
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 209


 4719              		.cfi_offset 5, -12
 4720              		.cfi_offset 6, -8
 4721              		.cfi_offset 14, -4
 4722 0002 0446     		mov	r4, r0
2283:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 4723              		.loc 1 2283 5 is_stmt 1 view .LVU1549
2284:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4724              		.loc 1 2284 5 view .LVU1550
2284:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4725              		.loc 1 2284 12 is_stmt 0 view .LVU1551
 4726 0004 0668     		ldr	r6, [r0]
 4727              	.LVL555:
2353:./FW/ff.c     **** 
 4728              		.loc 1 2353 5 is_stmt 1 view .LVU1552
2353:./FW/ff.c     **** 
 4729              		.loc 1 2353 11 is_stmt 0 view .LVU1553
 4730 0006 0121     		movs	r1, #1
 4731 0008 FFF7FEFF 		bl	dir_alloc
 4732              	.LVL556:
2358:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4733              		.loc 1 2358 5 is_stmt 1 view .LVU1554
2358:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4734              		.loc 1 2358 8 is_stmt 0 view .LVU1555
 4735 000c 0546     		mov	r5, r0
 4736 000e 08B1     		cbz	r0, .L372
 4737              	.LVL557:
 4738              	.L370:
2370:./FW/ff.c     **** }
 4739              		.loc 1 2370 5 is_stmt 1 view .LVU1556
2371:./FW/ff.c     **** 
 4740              		.loc 1 2371 1 is_stmt 0 view .LVU1557
 4741 0010 2846     		mov	r0, r5
 4742 0012 70BD     		pop	{r4, r5, r6, pc}
 4743              	.LVL558:
 4744              	.L372:
2359:./FW/ff.c     ****         if (res == FR_OK) {
 4745              		.loc 1 2359 9 is_stmt 1 view .LVU1558
2359:./FW/ff.c     ****         if (res == FR_OK) {
 4746              		.loc 1 2359 15 is_stmt 0 view .LVU1559
 4747 0014 E169     		ldr	r1, [r4, #28]
 4748 0016 3046     		mov	r0, r6
 4749              	.LVL559:
2359:./FW/ff.c     ****         if (res == FR_OK) {
 4750              		.loc 1 2359 15 view .LVU1560
 4751 0018 FFF7FEFF 		bl	move_window
 4752              	.LVL560:
2360:./FW/ff.c     ****             mem_set(dp->dir, 0, SZDIRE);    /* Clean the entry */
 4753              		.loc 1 2360 9 is_stmt 1 view .LVU1561
2360:./FW/ff.c     ****             mem_set(dp->dir, 0, SZDIRE);    /* Clean the entry */
 4754              		.loc 1 2360 12 is_stmt 0 view .LVU1562
 4755 001c 0546     		mov	r5, r0
 4756 001e 0028     		cmp	r0, #0
 4757 0020 F6D1     		bne	.L370
2361:./FW/ff.c     ****             mem_cpy(dp->dir + DIR_Name, dp->fn, 11);    /* Put SFN */
 4758              		.loc 1 2361 13 is_stmt 1 view .LVU1563
 4759 0022 2022     		movs	r2, #32
 4760 0024 0021     		movs	r1, #0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 210


 4761 0026 206A     		ldr	r0, [r4, #32]
 4762              	.LVL561:
2361:./FW/ff.c     ****             mem_cpy(dp->dir + DIR_Name, dp->fn, 11);    /* Put SFN */
 4763              		.loc 1 2361 13 is_stmt 0 view .LVU1564
 4764 0028 FFF7FEFF 		bl	mem_set
 4765              	.LVL562:
2362:./FW/ff.c     **** #if _USE_LFN != 0
 4766              		.loc 1 2362 13 is_stmt 1 view .LVU1565
 4767 002c 0B22     		movs	r2, #11
 4768 002e 04F12401 		add	r1, r4, #36
 4769 0032 206A     		ldr	r0, [r4, #32]
 4770 0034 FFF7FEFF 		bl	mem_cpy
 4771              	.LVL563:
2366:./FW/ff.c     ****         }
 4772              		.loc 1 2366 13 view .LVU1566
2366:./FW/ff.c     ****         }
 4773              		.loc 1 2366 23 is_stmt 0 view .LVU1567
 4774 0038 0123     		movs	r3, #1
 4775 003a F370     		strb	r3, [r6, #3]
 4776 003c E8E7     		b	.L370
 4777              		.cfi_endproc
 4778              	.LFE968:
 4780              		.section	.text.dir_read,"ax",%progbits
 4781              		.align	1
 4782              		.syntax unified
 4783              		.thumb
 4784              		.thumb_func
 4785              		.fpu fpv4-sp-d16
 4787              	dir_read:
 4788              	.LVL564:
 4789              	.LFB966:
2117:./FW/ff.c     ****     FRESULT res = FR_NO_FILE;
 4790              		.loc 1 2117 3 is_stmt 1 view -0
 4791              		.cfi_startproc
 4792              		@ args = 0, pretend = 0, frame = 0
 4793              		@ frame_needed = 0, uses_anonymous_args = 0
2117:./FW/ff.c     ****     FRESULT res = FR_NO_FILE;
 4794              		.loc 1 2117 3 is_stmt 0 view .LVU1569
 4795 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4796              	.LCFI43:
 4797              		.cfi_def_cfa_offset 24
 4798              		.cfi_offset 3, -24
 4799              		.cfi_offset 4, -20
 4800              		.cfi_offset 5, -16
 4801              		.cfi_offset 6, -12
 4802              		.cfi_offset 7, -8
 4803              		.cfi_offset 14, -4
 4804 0002 0446     		mov	r4, r0
 4805 0004 0E46     		mov	r6, r1
2118:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 4806              		.loc 1 2118 5 is_stmt 1 view .LVU1570
 4807              	.LVL565:
2119:./FW/ff.c     ****     BYTE a, c;
 4808              		.loc 1 2119 5 view .LVU1571
2119:./FW/ff.c     ****     BYTE a, c;
 4809              		.loc 1 2119 12 is_stmt 0 view .LVU1572
 4810 0006 0568     		ldr	r5, [r0]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 211


 4811              	.LVL566:
2120:./FW/ff.c     **** #if _USE_LFN != 0
 4812              		.loc 1 2120 5 is_stmt 1 view .LVU1573
2125:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4813              		.loc 1 2125 5 view .LVU1574
2118:./FW/ff.c     ****     FATFS *fs = dp->obj.fs;
 4814              		.loc 1 2118 13 is_stmt 0 view .LVU1575
 4815 0008 0427     		movs	r7, #4
2125:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4816              		.loc 1 2125 11 view .LVU1576
 4817 000a 05E0     		b	.L374
 4818              	.LVL567:
 4819              	.L376:
2178:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4820              		.loc 1 2178 9 is_stmt 1 view .LVU1577
2178:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4821              		.loc 1 2178 15 is_stmt 0 view .LVU1578
 4822 000c 0021     		movs	r1, #0
 4823 000e 2046     		mov	r0, r4
 4824              	.LVL568:
2178:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4825              		.loc 1 2178 15 view .LVU1579
 4826 0010 FFF7FEFF 		bl	dir_next
 4827              	.LVL569:
2179:./FW/ff.c     ****     }
 4828              		.loc 1 2179 9 is_stmt 1 view .LVU1580
2179:./FW/ff.c     ****     }
 4829              		.loc 1 2179 12 is_stmt 0 view .LVU1581
 4830 0014 0746     		mov	r7, r0
 4831 0016 E8B9     		cbnz	r0, .L375
 4832              	.LVL570:
 4833              	.L374:
2125:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4834              		.loc 1 2125 11 is_stmt 1 view .LVU1582
2125:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4835              		.loc 1 2125 14 is_stmt 0 view .LVU1583
 4836 0018 E169     		ldr	r1, [r4, #28]
2125:./FW/ff.c     ****         res = move_window(fs, dp->sect);
 4837              		.loc 1 2125 11 view .LVU1584
 4838 001a D9B1     		cbz	r1, .L375
2126:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4839              		.loc 1 2126 9 is_stmt 1 view .LVU1585
2126:./FW/ff.c     ****         if (res != FR_OK) { break; }
 4840              		.loc 1 2126 15 is_stmt 0 view .LVU1586
 4841 001c 2846     		mov	r0, r5
 4842 001e FFF7FEFF 		bl	move_window
 4843              	.LVL571:
2127:./FW/ff.c     ****         c = dp->dir[DIR_Name];  /* Test for the entry type */
 4844              		.loc 1 2127 9 is_stmt 1 view .LVU1587
2127:./FW/ff.c     ****         c = dp->dir[DIR_Name];  /* Test for the entry type */
 4845              		.loc 1 2127 12 is_stmt 0 view .LVU1588
 4846 0022 0746     		mov	r7, r0
 4847 0024 B0B9     		cbnz	r0, .L375
2128:./FW/ff.c     ****         if (c == 0) {
 4848              		.loc 1 2128 9 is_stmt 1 view .LVU1589
2128:./FW/ff.c     ****         if (c == 0) {
 4849              		.loc 1 2128 15 is_stmt 0 view .LVU1590
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 212


 4850 0026 236A     		ldr	r3, [r4, #32]
2128:./FW/ff.c     ****         if (c == 0) {
 4851              		.loc 1 2128 11 view .LVU1591
 4852 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4853              	.LVL572:
2129:./FW/ff.c     ****             res = FR_NO_FILE;
 4854              		.loc 1 2129 9 is_stmt 1 view .LVU1592
2129:./FW/ff.c     ****             res = FR_NO_FILE;
 4855              		.loc 1 2129 12 is_stmt 0 view .LVU1593
 4856 002a 92B1     		cbz	r2, .L379
2151:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4857              		.loc 1 2151 13 is_stmt 1 view .LVU1594
2151:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4858              		.loc 1 2151 39 is_stmt 0 view .LVU1595
 4859 002c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
2151:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4860              		.loc 1 2151 30 view .LVU1596
 4861 002e 03F03F03 		and	r3, r3, #63
 4862              	.LVL573:
2151:./FW/ff.c     **** #if _USE_LFN != 0   /* LFN configuration */
 4863              		.loc 1 2151 26 view .LVU1597
 4864 0032 A371     		strb	r3, [r4, #6]
2173:./FW/ff.c     ****                 break;
 4865              		.loc 1 2173 13 is_stmt 1 view .LVU1598
2173:./FW/ff.c     ****                 break;
 4866              		.loc 1 2173 16 is_stmt 0 view .LVU1599
 4867 0034 E52A     		cmp	r2, #229
 4868 0036 E9D0     		beq	.L376
2173:./FW/ff.c     ****                 break;
 4869              		.loc 1 2173 27 discriminator 1 view .LVU1600
 4870 0038 2E2A     		cmp	r2, #46
 4871 003a E7D0     		beq	.L376
2173:./FW/ff.c     ****                 break;
 4872              		.loc 1 2173 39 discriminator 2 view .LVU1601
 4873 003c 0F2B     		cmp	r3, #15
 4874 003e E5D0     		beq	.L376
2173:./FW/ff.c     ****                 break;
 4875              		.loc 1 2173 66 discriminator 3 view .LVU1602
 4876 0040 23F02003 		bic	r3, r3, #32
 4877              	.LVL574:
2173:./FW/ff.c     ****                 break;
 4878              		.loc 1 2173 57 discriminator 3 view .LVU1603
 4879 0044 082B     		cmp	r3, #8
 4880 0046 14BF     		ite	ne
 4881 0048 0023     		movne	r3, #0
 4882 004a 0123     		moveq	r3, #1
2173:./FW/ff.c     ****                 break;
 4883              		.loc 1 2173 54 discriminator 3 view .LVU1604
 4884 004c B342     		cmp	r3, r6
 4885 004e DDD1     		bne	.L376
 4886 0050 00E0     		b	.L375
 4887              	.LVL575:
 4888              	.L379:
2130:./FW/ff.c     ****             break; /* Reached to end of the directory */
 4889              		.loc 1 2130 17 view .LVU1605
 4890 0052 0427     		movs	r7, #4
 4891              	.LVL576:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 213


 4892              	.L375:
2182:./FW/ff.c     ****     return res;
 4893              		.loc 1 2182 5 is_stmt 1 view .LVU1606
2182:./FW/ff.c     ****     return res;
 4894              		.loc 1 2182 8 is_stmt 0 view .LVU1607
 4895 0054 0FB1     		cbz	r7, .L378
2182:./FW/ff.c     ****     return res;
 4896              		.loc 1 2182 25 is_stmt 1 discriminator 1 view .LVU1608
2182:./FW/ff.c     ****     return res;
 4897              		.loc 1 2182 34 is_stmt 0 discriminator 1 view .LVU1609
 4898 0056 0023     		movs	r3, #0
 4899 0058 E361     		str	r3, [r4, #28]
 4900              	.L378:
2183:./FW/ff.c     **** }
 4901              		.loc 1 2183 5 is_stmt 1 view .LVU1610
2184:./FW/ff.c     **** 
 4902              		.loc 1 2184 1 is_stmt 0 view .LVU1611
 4903 005a 3846     		mov	r0, r7
 4904 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
2184:./FW/ff.c     **** 
 4905              		.loc 1 2184 1 view .LVU1612
 4906              		.cfi_endproc
 4907              	.LFE966:
 4909              		.section	.text.sync_fs,"ax",%progbits
 4910              		.align	1
 4911              		.syntax unified
 4912              		.thumb
 4913              		.thumb_func
 4914              		.fpu fpv4-sp-d16
 4916              	sync_fs:
 4917              	.LVL577:
 4918              	.LFB954:
 942:./FW/ff.c     ****     FRESULT res;
 4919              		.loc 1 942 3 is_stmt 1 view -0
 4920              		.cfi_startproc
 4921              		@ args = 0, pretend = 0, frame = 0
 4922              		@ frame_needed = 0, uses_anonymous_args = 0
 942:./FW/ff.c     ****     FRESULT res;
 4923              		.loc 1 942 3 is_stmt 0 view .LVU1614
 4924 0000 70B5     		push	{r4, r5, r6, lr}
 4925              	.LCFI44:
 4926              		.cfi_def_cfa_offset 16
 4927              		.cfi_offset 4, -16
 4928              		.cfi_offset 5, -12
 4929              		.cfi_offset 6, -8
 4930              		.cfi_offset 14, -4
 4931 0002 0446     		mov	r4, r0
 943:./FW/ff.c     **** 
 4932              		.loc 1 943 5 is_stmt 1 view .LVU1615
 946:./FW/ff.c     ****     if (res == FR_OK) {
 4933              		.loc 1 946 5 view .LVU1616
 946:./FW/ff.c     ****     if (res == FR_OK) {
 4934              		.loc 1 946 11 is_stmt 0 view .LVU1617
 4935 0004 FFF7FEFF 		bl	sync_window
 4936              	.LVL578:
 947:./FW/ff.c     ****         /* Update FSInfo sector if needed */
 4937              		.loc 1 947 5 is_stmt 1 view .LVU1618
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 214


 947:./FW/ff.c     ****         /* Update FSInfo sector if needed */
 4938              		.loc 1 947 8 is_stmt 0 view .LVU1619
 4939 0008 0546     		mov	r5, r0
 4940 000a 48B9     		cbnz	r0, .L382
 949:./FW/ff.c     ****             /* Create FSInfo structure */
 4941              		.loc 1 949 9 is_stmt 1 view .LVU1620
 949:./FW/ff.c     ****             /* Create FSInfo structure */
 4942              		.loc 1 949 15 is_stmt 0 view .LVU1621
 4943 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 949:./FW/ff.c     ****             /* Create FSInfo structure */
 4944              		.loc 1 949 12 view .LVU1622
 4945 000e 032B     		cmp	r3, #3
 4946 0010 08D0     		beq	.L386
 4947              	.LVL579:
 4948              	.L383:
 963:./FW/ff.c     ****     }
 4949              		.loc 1 963 9 is_stmt 1 view .LVU1623
 963:./FW/ff.c     ****     }
 4950              		.loc 1 963 13 is_stmt 0 view .LVU1624
 4951 0012 0022     		movs	r2, #0
 4952 0014 1146     		mov	r1, r2
 4953 0016 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 4954 0018 FFF7FEFF 		bl	disk_ioctl
 4955              	.LVL580:
 963:./FW/ff.c     ****     }
 4956              		.loc 1 963 12 view .LVU1625
 4957 001c 00B1     		cbz	r0, .L382
 963:./FW/ff.c     ****     }
 4958              		.loc 1 963 64 view .LVU1626
 4959 001e 0125     		movs	r5, #1
 4960              	.L382:
 4961              	.LVL581:
 966:./FW/ff.c     **** }
 4962              		.loc 1 966 5 is_stmt 1 view .LVU1627
 967:./FW/ff.c     **** 
 4963              		.loc 1 967 1 is_stmt 0 view .LVU1628
 4964 0020 2846     		mov	r0, r5
 4965 0022 70BD     		pop	{r4, r5, r6, pc}
 4966              	.LVL582:
 4967              	.L386:
 949:./FW/ff.c     ****             /* Create FSInfo structure */
 4968              		.loc 1 949 42 discriminator 1 view .LVU1629
 4969 0024 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 949:./FW/ff.c     ****             /* Create FSInfo structure */
 4970              		.loc 1 949 37 discriminator 1 view .LVU1630
 4971 0026 012B     		cmp	r3, #1
 4972 0028 F3D1     		bne	.L383
 951:./FW/ff.c     ****             st_word(fs->win + BS_55AA, 0xAA55);
 4973              		.loc 1 951 13 is_stmt 1 view .LVU1631
 951:./FW/ff.c     ****             st_word(fs->win + BS_55AA, 0xAA55);
 4974              		.loc 1 951 23 is_stmt 0 view .LVU1632
 4975 002a 04F13006 		add	r6, r4, #48
 951:./FW/ff.c     ****             st_word(fs->win + BS_55AA, 0xAA55);
 4976              		.loc 1 951 13 view .LVU1633
 4977 002e 4FF40072 		mov	r2, #512
 4978 0032 0021     		movs	r1, #0
 4979 0034 3046     		mov	r0, r6
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 215


 4980              	.LVL583:
 951:./FW/ff.c     ****             st_word(fs->win + BS_55AA, 0xAA55);
 4981              		.loc 1 951 13 view .LVU1634
 4982 0036 FFF7FEFF 		bl	mem_set
 4983              	.LVL584:
 952:./FW/ff.c     ****             st_dword(fs->win + FSI_LeadSig, 0x41615252);
 4984              		.loc 1 952 13 is_stmt 1 view .LVU1635
 4985 003a 4AF65521 		movw	r1, #43605
 4986 003e 04F22E20 		addw	r0, r4, #558
 4987 0042 FFF7FEFF 		bl	st_word
 4988              	.LVL585:
 953:./FW/ff.c     ****             st_dword(fs->win + FSI_StrucSig, 0x61417272);
 4989              		.loc 1 953 13 view .LVU1636
 4990 0046 0F49     		ldr	r1, .L387
 4991 0048 3046     		mov	r0, r6
 4992 004a FFF7FEFF 		bl	st_dword
 4993              	.LVL586:
 954:./FW/ff.c     ****             st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 4994              		.loc 1 954 13 view .LVU1637
 4995 004e 0E49     		ldr	r1, .L387+4
 4996 0050 04F50570 		add	r0, r4, #532
 4997 0054 FFF7FEFF 		bl	st_dword
 4998              	.LVL587:
 955:./FW/ff.c     ****             st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 4999              		.loc 1 955 13 view .LVU1638
 5000 0058 2169     		ldr	r1, [r4, #16]
 5001 005a 04F50670 		add	r0, r4, #536
 5002 005e FFF7FEFF 		bl	st_dword
 5003              	.LVL588:
 956:./FW/ff.c     ****             /* Write it into the FSInfo sector */
 5004              		.loc 1 956 13 view .LVU1639
 5005 0062 E168     		ldr	r1, [r4, #12]
 5006 0064 04F50770 		add	r0, r4, #540
 5007 0068 FFF7FEFF 		bl	st_dword
 5008              	.LVL589:
 958:./FW/ff.c     ****             disk_write(fs->drv, fs->win, fs->winsect, 1);
 5009              		.loc 1 958 13 view .LVU1640
 958:./FW/ff.c     ****             disk_write(fs->drv, fs->win, fs->winsect, 1);
 5010              		.loc 1 958 29 is_stmt 0 view .LVU1641
 5011 006c E269     		ldr	r2, [r4, #28]
 958:./FW/ff.c     ****             disk_write(fs->drv, fs->win, fs->winsect, 1);
 5012              		.loc 1 958 39 view .LVU1642
 5013 006e 0132     		adds	r2, r2, #1
 958:./FW/ff.c     ****             disk_write(fs->drv, fs->win, fs->winsect, 1);
 5014              		.loc 1 958 25 view .LVU1643
 5015 0070 E262     		str	r2, [r4, #44]
 959:./FW/ff.c     ****             fs->fsi_flag = 0;
 5016              		.loc 1 959 13 is_stmt 1 view .LVU1644
 5017 0072 0123     		movs	r3, #1
 5018 0074 3146     		mov	r1, r6
 5019 0076 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 5020 0078 FFF7FEFF 		bl	disk_write
 5021              	.LVL590:
 960:./FW/ff.c     ****         }
 5022              		.loc 1 960 13 view .LVU1645
 960:./FW/ff.c     ****         }
 5023              		.loc 1 960 26 is_stmt 0 view .LVU1646
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 216


 5024 007c 0023     		movs	r3, #0
 5025 007e 2371     		strb	r3, [r4, #4]
 5026 0080 C7E7     		b	.L383
 5027              	.L388:
 5028 0082 00BF     		.align	2
 5029              	.L387:
 5030 0084 52526141 		.word	1096897106
 5031 0088 72724161 		.word	1631679090
 5032              		.cfi_endproc
 5033              	.LFE954:
 5035              		.section	.text.f_mount,"ax",%progbits
 5036              		.align	1
 5037              		.global	f_mount
 5038              		.syntax unified
 5039              		.thumb
 5040              		.thumb_func
 5041              		.fpu fpv4-sp-d16
 5043              	f_mount:
 5044              	.LVL591:
 5045              	.LFB977:
3265:./FW/ff.c     ****     FATFS *cfs;
 5046              		.loc 1 3265 3 is_stmt 1 view -0
 5047              		.cfi_startproc
 5048              		@ args = 0, pretend = 0, frame = 16
 5049              		@ frame_needed = 0, uses_anonymous_args = 0
3265:./FW/ff.c     ****     FATFS *cfs;
 5050              		.loc 1 3265 3 is_stmt 0 view .LVU1648
 5051 0000 70B5     		push	{r4, r5, r6, lr}
 5052              	.LCFI45:
 5053              		.cfi_def_cfa_offset 16
 5054              		.cfi_offset 4, -16
 5055              		.cfi_offset 5, -12
 5056              		.cfi_offset 6, -8
 5057              		.cfi_offset 14, -4
 5058 0002 84B0     		sub	sp, sp, #16
 5059              	.LCFI46:
 5060              		.cfi_def_cfa_offset 32
 5061 0004 0190     		str	r0, [sp, #4]
 5062 0006 0091     		str	r1, [sp]
 5063 0008 1646     		mov	r6, r2
3266:./FW/ff.c     ****     int vol;
 5064              		.loc 1 3266 5 is_stmt 1 view .LVU1649
3267:./FW/ff.c     ****     FRESULT res;
 5065              		.loc 1 3267 5 view .LVU1650
3268:./FW/ff.c     ****     const TCHAR *rp = path;
 5066              		.loc 1 3268 5 view .LVU1651
3269:./FW/ff.c     **** 
 5067              		.loc 1 3269 5 view .LVU1652
3269:./FW/ff.c     **** 
 5068              		.loc 1 3269 18 is_stmt 0 view .LVU1653
 5069 000a 0391     		str	r1, [sp, #12]
3273:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 5070              		.loc 1 3273 5 is_stmt 1 view .LVU1654
3273:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 5071              		.loc 1 3273 11 is_stmt 0 view .LVU1655
 5072 000c 03A8     		add	r0, sp, #12
 5073              	.LVL592:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 217


3273:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 5074              		.loc 1 3273 11 view .LVU1656
 5075 000e FFF7FEFF 		bl	get_ldnumber
 5076              	.LVL593:
3274:./FW/ff.c     ****     cfs = FatFs[vol];                   /* Pointer to fs object */
 5077              		.loc 1 3274 5 is_stmt 1 view .LVU1657
3274:./FW/ff.c     ****     cfs = FatFs[vol];                   /* Pointer to fs object */
 5078              		.loc 1 3274 8 is_stmt 0 view .LVU1658
 5079 0012 041E     		subs	r4, r0, #0
 5080 0014 1CDB     		blt	.L393
3275:./FW/ff.c     **** 
 5081              		.loc 1 3275 5 is_stmt 1 view .LVU1659
3275:./FW/ff.c     **** 
 5082              		.loc 1 3275 9 is_stmt 0 view .LVU1660
 5083 0016 104B     		ldr	r3, .L398
 5084 0018 53F82450 		ldr	r5, [r3, r4, lsl #2]
 5085              	.LVL594:
3277:./FW/ff.c     **** #if _FS_LOCK != 0
 5086              		.loc 1 3277 5 is_stmt 1 view .LVU1661
3277:./FW/ff.c     **** #if _FS_LOCK != 0
 5087              		.loc 1 3277 8 is_stmt 0 view .LVU1662
 5088 001c 25B1     		cbz	r5, .L391
3279:./FW/ff.c     **** #endif
 5089              		.loc 1 3279 9 is_stmt 1 view .LVU1663
 5090 001e 2846     		mov	r0, r5
 5091              	.LVL595:
3279:./FW/ff.c     **** #endif
 5092              		.loc 1 3279 9 is_stmt 0 view .LVU1664
 5093 0020 FFF7FEFF 		bl	clear_lock
 5094              	.LVL596:
3284:./FW/ff.c     ****     }
 5095              		.loc 1 3284 9 is_stmt 1 view .LVU1665
3284:./FW/ff.c     ****     }
 5096              		.loc 1 3284 22 is_stmt 0 view .LVU1666
 5097 0024 0023     		movs	r3, #0
 5098 0026 2B70     		strb	r3, [r5]
 5099              	.L391:
3287:./FW/ff.c     ****         fs->fs_type = 0;                /* Clear new fs object */
 5100              		.loc 1 3287 5 is_stmt 1 view .LVU1667
3287:./FW/ff.c     ****         fs->fs_type = 0;                /* Clear new fs object */
 5101              		.loc 1 3287 9 is_stmt 0 view .LVU1668
 5102 0028 019B     		ldr	r3, [sp, #4]
3287:./FW/ff.c     ****         fs->fs_type = 0;                /* Clear new fs object */
 5103              		.loc 1 3287 8 view .LVU1669
 5104 002a 0BB1     		cbz	r3, .L392
3288:./FW/ff.c     **** #if _FS_REENTRANT                       /* Create sync object for the new volume */
 5105              		.loc 1 3288 9 is_stmt 1 view .LVU1670
3288:./FW/ff.c     **** #if _FS_REENTRANT                       /* Create sync object for the new volume */
 5106              		.loc 1 3288 21 is_stmt 0 view .LVU1671
 5107 002c 0022     		movs	r2, #0
 5108 002e 1A70     		strb	r2, [r3]
 5109              	.L392:
3293:./FW/ff.c     **** 
 5110              		.loc 1 3293 5 is_stmt 1 view .LVU1672
3293:./FW/ff.c     **** 
 5111              		.loc 1 3293 16 is_stmt 0 view .LVU1673
 5112 0030 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 218


 5113 0032 094A     		ldr	r2, .L398
 5114 0034 42F82430 		str	r3, [r2, r4, lsl #2]
3295:./FW/ff.c     **** 
 5115              		.loc 1 3295 5 is_stmt 1 view .LVU1674
3295:./FW/ff.c     **** 
 5116              		.loc 1 3295 8 is_stmt 0 view .LVU1675
 5117 0038 63B1     		cbz	r3, .L394
3295:./FW/ff.c     **** 
 5118              		.loc 1 3295 13 discriminator 2 view .LVU1676
 5119 003a 012E     		cmp	r6, #1
 5120 003c 02D0     		beq	.L397
3295:./FW/ff.c     **** 
 5121              		.loc 1 3295 35 view .LVU1677
 5122 003e 0020     		movs	r0, #0
 5123              	.LVL597:
 5124              	.L390:
3299:./FW/ff.c     **** 
 5125              		.loc 1 3299 1 view .LVU1678
 5126 0040 04B0     		add	sp, sp, #16
 5127              	.LCFI47:
 5128              		.cfi_remember_state
 5129              		.cfi_def_cfa_offset 16
 5130              		@ sp needed
 5131 0042 70BD     		pop	{r4, r5, r6, pc}
 5132              	.LVL598:
 5133              	.L397:
 5134              	.LCFI48:
 5135              		.cfi_restore_state
3297:./FW/ff.c     ****     LEAVE_FF(fs, res);
 5136              		.loc 1 3297 5 is_stmt 1 view .LVU1679
3297:./FW/ff.c     ****     LEAVE_FF(fs, res);
 5137              		.loc 1 3297 11 is_stmt 0 view .LVU1680
 5138 0044 0022     		movs	r2, #0
 5139 0046 01A9     		add	r1, sp, #4
 5140 0048 6846     		mov	r0, sp
 5141 004a FFF7FEFF 		bl	find_volume
 5142              	.LVL599:
3298:./FW/ff.c     **** }
 5143              		.loc 1 3298 5 is_stmt 1 view .LVU1681
 5144 004e F7E7     		b	.L390
 5145              	.LVL600:
 5146              	.L393:
3274:./FW/ff.c     ****     cfs = FatFs[vol];                   /* Pointer to fs object */
 5147              		.loc 1 3274 27 is_stmt 0 view .LVU1682
 5148 0050 0B20     		movs	r0, #11
 5149              	.LVL601:
3274:./FW/ff.c     ****     cfs = FatFs[vol];                   /* Pointer to fs object */
 5150              		.loc 1 3274 27 view .LVU1683
 5151 0052 F5E7     		b	.L390
 5152              	.LVL602:
 5153              	.L394:
3295:./FW/ff.c     **** 
 5154              		.loc 1 3295 35 view .LVU1684
 5155 0054 0020     		movs	r0, #0
 5156 0056 F3E7     		b	.L390
 5157              	.L399:
 5158              		.align	2
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 219


 5159              	.L398:
 5160 0058 00000000 		.word	.LANCHOR2
 5161              		.cfi_endproc
 5162              	.LFE977:
 5164              		.section	.text.f_open,"ax",%progbits
 5165              		.align	1
 5166              		.global	f_open
 5167              		.syntax unified
 5168              		.thumb
 5169              		.thumb_func
 5170              		.fpu fpv4-sp-d16
 5172              	f_open:
 5173              	.LVL603:
 5174              	.LFB978:
3312:./FW/ff.c     ****     FRESULT res;
 5175              		.loc 1 3312 3 is_stmt 1 view -0
 5176              		.cfi_startproc
 5177              		@ args = 0, pretend = 0, frame = 64
 5178              		@ frame_needed = 0, uses_anonymous_args = 0
3312:./FW/ff.c     ****     FRESULT res;
 5179              		.loc 1 3312 3 is_stmt 0 view .LVU1686
 5180 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 5181              	.LCFI49:
 5182              		.cfi_def_cfa_offset 28
 5183              		.cfi_offset 4, -28
 5184              		.cfi_offset 5, -24
 5185              		.cfi_offset 6, -20
 5186              		.cfi_offset 7, -16
 5187              		.cfi_offset 8, -12
 5188              		.cfi_offset 9, -8
 5189              		.cfi_offset 14, -4
 5190 0004 91B0     		sub	sp, sp, #68
 5191              	.LCFI50:
 5192              		.cfi_def_cfa_offset 96
 5193 0006 0191     		str	r1, [sp, #4]
3313:./FW/ff.c     ****     DIR dj;
 5194              		.loc 1 3313 5 is_stmt 1 view .LVU1687
3314:./FW/ff.c     ****     FATFS *fs;
 5195              		.loc 1 3314 5 view .LVU1688
3315:./FW/ff.c     **** #if !_FS_READONLY
 5196              		.loc 1 3315 5 view .LVU1689
3317:./FW/ff.c     ****     FSIZE_t ofs;
 5197              		.loc 1 3317 5 view .LVU1690
3318:./FW/ff.c     **** #endif
 5198              		.loc 1 3318 5 view .LVU1691
3323:./FW/ff.c     **** 
 5199              		.loc 1 3323 5 view .LVU1692
3323:./FW/ff.c     **** 
 5200              		.loc 1 3323 8 is_stmt 0 view .LVU1693
 5201 0008 0028     		cmp	r0, #0
 5202 000a 00F00A81 		beq	.L417
 5203 000e 1546     		mov	r5, r2
 5204 0010 0646     		mov	r6, r0
3326:./FW/ff.c     ****     res = find_volume(&path, &fs, mode);
 5205              		.loc 1 3326 5 is_stmt 1 view .LVU1694
3326:./FW/ff.c     ****     res = find_volume(&path, &fs, mode);
 5206              		.loc 1 3326 10 is_stmt 0 view .LVU1695
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 220


 5207 0012 02F03F07 		and	r7, r2, #63
 5208              	.LVL604:
3327:./FW/ff.c     ****     if (res == FR_OK) {
 5209              		.loc 1 3327 5 is_stmt 1 view .LVU1696
3327:./FW/ff.c     ****     if (res == FR_OK) {
 5210              		.loc 1 3327 11 is_stmt 0 view .LVU1697
 5211 0016 3A46     		mov	r2, r7
 5212 0018 03A9     		add	r1, sp, #12
 5213              	.LVL605:
3327:./FW/ff.c     ****     if (res == FR_OK) {
 5214              		.loc 1 3327 11 view .LVU1698
 5215 001a 01A8     		add	r0, sp, #4
 5216              	.LVL606:
3327:./FW/ff.c     ****     if (res == FR_OK) {
 5217              		.loc 1 3327 11 view .LVU1699
 5218 001c FFF7FEFF 		bl	find_volume
 5219              	.LVL607:
3328:./FW/ff.c     ****         dj.obj.fs = fs;
 5220              		.loc 1 3328 5 is_stmt 1 view .LVU1700
3328:./FW/ff.c     ****         dj.obj.fs = fs;
 5221              		.loc 1 3328 8 is_stmt 0 view .LVU1701
 5222 0020 0446     		mov	r4, r0
 5223 0022 30B1     		cbz	r0, .L430
 5224              	.LVL608:
 5225              	.L402:
3493:./FW/ff.c     ****     }
 5226              		.loc 1 3493 22 is_stmt 1 view .LVU1702
3496:./FW/ff.c     **** 
 5227              		.loc 1 3496 5 view .LVU1703
3496:./FW/ff.c     **** 
 5228              		.loc 1 3496 8 is_stmt 0 view .LVU1704
 5229 0024 0CB1     		cbz	r4, .L401
 5230              	.LVL609:
 5231              	.L416:
3496:./FW/ff.c     **** 
 5232              		.loc 1 3496 25 is_stmt 1 discriminator 1 view .LVU1705
3496:./FW/ff.c     **** 
 5233              		.loc 1 3496 36 is_stmt 0 discriminator 1 view .LVU1706
 5234 0026 0023     		movs	r3, #0
 5235 0028 3360     		str	r3, [r6]
 5236              	.LVL610:
 5237              	.L401:
3499:./FW/ff.c     **** 
 5238              		.loc 1 3499 1 view .LVU1707
 5239 002a 2046     		mov	r0, r4
 5240 002c 11B0     		add	sp, sp, #68
 5241              	.LCFI51:
 5242              		.cfi_remember_state
 5243              		.cfi_def_cfa_offset 28
 5244              		@ sp needed
 5245 002e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5246              	.LVL611:
 5247              	.L430:
 5248              	.LCFI52:
 5249              		.cfi_restore_state
3329:./FW/ff.c     ****         INIT_NAMBUF(fs);
 5250              		.loc 1 3329 9 is_stmt 1 view .LVU1708
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 221


3329:./FW/ff.c     ****         INIT_NAMBUF(fs);
 5251              		.loc 1 3329 19 is_stmt 0 view .LVU1709
 5252 0032 039B     		ldr	r3, [sp, #12]
 5253 0034 0493     		str	r3, [sp, #16]
3330:./FW/ff.c     ****         res = follow_path(&dj, path);   /* Follow the file path */
 5254              		.loc 1 3330 24 is_stmt 1 view .LVU1710
3331:./FW/ff.c     **** #if !_FS_READONLY   /* R/W configuration */
 5255              		.loc 1 3331 9 view .LVU1711
3331:./FW/ff.c     **** #if !_FS_READONLY   /* R/W configuration */
 5256              		.loc 1 3331 15 is_stmt 0 view .LVU1712
 5257 0036 0199     		ldr	r1, [sp, #4]
 5258 0038 04A8     		add	r0, sp, #16
 5259              	.LVL612:
3331:./FW/ff.c     **** #if !_FS_READONLY   /* R/W configuration */
 5260              		.loc 1 3331 15 view .LVU1713
 5261 003a FFF7FEFF 		bl	follow_path
 5262              	.LVL613:
3333:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {    /* Origin directory itself? */
 5263              		.loc 1 3333 9 is_stmt 1 view .LVU1714
3333:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {    /* Origin directory itself? */
 5264              		.loc 1 3333 12 is_stmt 0 view .LVU1715
 5265 003e 0446     		mov	r4, r0
 5266 0040 60B9     		cbnz	r0, .L403
3334:./FW/ff.c     ****                 res = FR_INVALID_NAME;
 5267              		.loc 1 3334 13 is_stmt 1 view .LVU1716
3334:./FW/ff.c     ****                 res = FR_INVALID_NAME;
 5268              		.loc 1 3334 17 is_stmt 0 view .LVU1717
 5269 0042 9DF93F30 		ldrsb	r3, [sp, #63]
3334:./FW/ff.c     ****                 res = FR_INVALID_NAME;
 5270              		.loc 1 3334 16 view .LVU1718
 5271 0046 002B     		cmp	r3, #0
 5272 0048 50DB     		blt	.L418
3339:./FW/ff.c     ****             }
 5273              		.loc 1 3339 17 is_stmt 1 view .LVU1719
3339:./FW/ff.c     ****             }
 5274              		.loc 1 3339 23 is_stmt 0 view .LVU1720
 5275 004a 37F00103 		bics	r3, r7, #1
 5276 004e 14BF     		ite	ne
 5277 0050 0121     		movne	r1, #1
 5278 0052 0021     		moveq	r1, #0
 5279 0054 04A8     		add	r0, sp, #16
 5280              	.LVL614:
3339:./FW/ff.c     ****             }
 5281              		.loc 1 3339 23 view .LVU1721
 5282 0056 FFF7FEFF 		bl	chk_lock
 5283              	.LVL615:
 5284 005a 0446     		mov	r4, r0
 5285              	.LVL616:
 5286              	.L403:
3344:./FW/ff.c     ****             if (res != FR_OK) {                 /* No file, create new */
 5287              		.loc 1 3344 9 is_stmt 1 view .LVU1722
3344:./FW/ff.c     ****             if (res != FR_OK) {                 /* No file, create new */
 5288              		.loc 1 3344 12 is_stmt 0 view .LVU1723
 5289 005c 15F01C0F 		tst	r5, #28
 5290 0060 5AD0     		beq	.L404
3345:./FW/ff.c     ****                 if (res == FR_NO_FILE) {        /* There is no file to open, create a new entry */
 5291              		.loc 1 3345 13 is_stmt 1 view .LVU1724
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 222


3345:./FW/ff.c     ****                 if (res == FR_NO_FILE) {        /* There is no file to open, create a new entry */
 5292              		.loc 1 3345 16 is_stmt 0 view .LVU1725
 5293 0062 002C     		cmp	r4, #0
 5294 0064 4ED0     		beq	.L405
3346:./FW/ff.c     **** #if _FS_LOCK != 0
 5295              		.loc 1 3346 17 is_stmt 1 view .LVU1726
3346:./FW/ff.c     **** #if _FS_LOCK != 0
 5296              		.loc 1 3346 20 is_stmt 0 view .LVU1727
 5297 0066 042C     		cmp	r4, #4
 5298 0068 42D0     		beq	.L431
 5299              	.LVL617:
 5300              	.L406:
3353:./FW/ff.c     ****             } else {                                /* Any object is already existing */
 5301              		.loc 1 3353 17 is_stmt 1 view .LVU1728
3353:./FW/ff.c     ****             } else {                                /* Any object is already existing */
 5302              		.loc 1 3353 22 is_stmt 0 view .LVU1729
 5303 006a 47F00807 		orr	r7, r7, #8
 5304              	.LVL618:
 5305              	.L407:
3361:./FW/ff.c     ****                 dw = GET_FATTIME();
 5306              		.loc 1 3361 13 is_stmt 1 view .LVU1730
3361:./FW/ff.c     ****                 dw = GET_FATTIME();
 5307              		.loc 1 3361 16 is_stmt 0 view .LVU1731
 5308 006e 002C     		cmp	r4, #0
 5309 0070 61D1     		bne	.L408
3361:./FW/ff.c     ****                 dw = GET_FATTIME();
 5310              		.loc 1 3361 30 discriminator 1 view .LVU1732
 5311 0072 17F0080F 		tst	r7, #8
 5312 0076 5ED0     		beq	.L408
3362:./FW/ff.c     **** #if _FS_EXFAT
 5313              		.loc 1 3362 17 is_stmt 1 view .LVU1733
3362:./FW/ff.c     **** #if _FS_EXFAT
 5314              		.loc 1 3362 22 is_stmt 0 view .LVU1734
 5315 0078 FFF7FEFF 		bl	get_fattime
 5316              	.LVL619:
 5317 007c 0546     		mov	r5, r0
 5318              	.LVL620:
3390:./FW/ff.c     ****                     st_dword(dj.dir + DIR_ModTime, dw); /* Set modified time */
 5319              		.loc 1 3390 21 is_stmt 1 view .LVU1735
 5320 007e 0146     		mov	r1, r0
 5321 0080 0C98     		ldr	r0, [sp, #48]
 5322              	.LVL621:
3390:./FW/ff.c     ****                     st_dword(dj.dir + DIR_ModTime, dw); /* Set modified time */
 5323              		.loc 1 3390 21 is_stmt 0 view .LVU1736
 5324 0082 0E30     		adds	r0, r0, #14
 5325 0084 FFF7FEFF 		bl	st_dword
 5326              	.LVL622:
3391:./FW/ff.c     ****                     dj.dir[DIR_Attr] = AM_ARC;          /* Reset attribute */
 5327              		.loc 1 3391 21 is_stmt 1 view .LVU1737
 5328 0088 2946     		mov	r1, r5
 5329 008a 0C98     		ldr	r0, [sp, #48]
 5330 008c 1630     		adds	r0, r0, #22
 5331 008e FFF7FEFF 		bl	st_dword
 5332              	.LVL623:
3392:./FW/ff.c     ****                     cl = ld_clust(fs, dj.dir);          /* Get cluster chain */
 5333              		.loc 1 3392 21 view .LVU1738
3392:./FW/ff.c     ****                     cl = ld_clust(fs, dj.dir);          /* Get cluster chain */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 223


 5334              		.loc 1 3392 38 is_stmt 0 view .LVU1739
 5335 0092 0C9B     		ldr	r3, [sp, #48]
 5336 0094 2022     		movs	r2, #32
 5337 0096 DA72     		strb	r2, [r3, #11]
3393:./FW/ff.c     ****                     st_clust(fs, dj.dir, 0);            /* Reset file allocation info */
 5338              		.loc 1 3393 21 is_stmt 1 view .LVU1740
3393:./FW/ff.c     ****                     st_clust(fs, dj.dir, 0);            /* Reset file allocation info */
 5339              		.loc 1 3393 26 is_stmt 0 view .LVU1741
 5340 0098 DDF80C80 		ldr	r8, [sp, #12]
3393:./FW/ff.c     ****                     st_clust(fs, dj.dir, 0);            /* Reset file allocation info */
 5341              		.loc 1 3393 41 view .LVU1742
 5342 009c DDF83090 		ldr	r9, [sp, #48]
3393:./FW/ff.c     ****                     st_clust(fs, dj.dir, 0);            /* Reset file allocation info */
 5343              		.loc 1 3393 26 view .LVU1743
 5344 00a0 4946     		mov	r1, r9
 5345 00a2 4046     		mov	r0, r8
 5346 00a4 FFF7FEFF 		bl	ld_clust
 5347              	.LVL624:
 5348 00a8 0546     		mov	r5, r0
 5349              	.LVL625:
3394:./FW/ff.c     ****                     st_dword(dj.dir + DIR_FileSize, 0);
 5350              		.loc 1 3394 21 is_stmt 1 view .LVU1744
 5351 00aa 0022     		movs	r2, #0
 5352 00ac 4946     		mov	r1, r9
 5353 00ae 4046     		mov	r0, r8
 5354              	.LVL626:
3394:./FW/ff.c     ****                     st_dword(dj.dir + DIR_FileSize, 0);
 5355              		.loc 1 3394 21 is_stmt 0 view .LVU1745
 5356 00b0 FFF7FEFF 		bl	st_clust
 5357              	.LVL627:
3395:./FW/ff.c     ****                     fs->wflag = 1;
 5358              		.loc 1 3395 21 is_stmt 1 view .LVU1746
 5359 00b4 0021     		movs	r1, #0
 5360 00b6 0C98     		ldr	r0, [sp, #48]
 5361 00b8 1C30     		adds	r0, r0, #28
 5362 00ba FFF7FEFF 		bl	st_dword
 5363              	.LVL628:
3396:./FW/ff.c     **** 
 5364              		.loc 1 3396 21 view .LVU1747
3396:./FW/ff.c     **** 
 5365              		.loc 1 3396 31 is_stmt 0 view .LVU1748
 5366 00be 039B     		ldr	r3, [sp, #12]
 5367 00c0 0122     		movs	r2, #1
 5368 00c2 DA70     		strb	r2, [r3, #3]
3398:./FW/ff.c     ****                         dw = fs->winsect;
 5369              		.loc 1 3398 21 is_stmt 1 view .LVU1749
3398:./FW/ff.c     ****                         dw = fs->winsect;
 5370              		.loc 1 3398 24 is_stmt 0 view .LVU1750
 5371 00c4 BDB3     		cbz	r5, .L408
3399:./FW/ff.c     ****                         res = remove_chain(&dj.obj, cl, 0);
 5372              		.loc 1 3399 25 is_stmt 1 view .LVU1751
3399:./FW/ff.c     ****                         res = remove_chain(&dj.obj, cl, 0);
 5373              		.loc 1 3399 32 is_stmt 0 view .LVU1752
 5374 00c6 039B     		ldr	r3, [sp, #12]
3399:./FW/ff.c     ****                         res = remove_chain(&dj.obj, cl, 0);
 5375              		.loc 1 3399 28 view .LVU1753
 5376 00c8 D3F82C80 		ldr	r8, [r3, #44]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 224


 5377              	.LVL629:
3400:./FW/ff.c     ****                         if (res == FR_OK) {
 5378              		.loc 1 3400 25 is_stmt 1 view .LVU1754
3400:./FW/ff.c     ****                         if (res == FR_OK) {
 5379              		.loc 1 3400 31 is_stmt 0 view .LVU1755
 5380 00cc 0022     		movs	r2, #0
 5381 00ce 2946     		mov	r1, r5
 5382 00d0 04A8     		add	r0, sp, #16
 5383 00d2 FFF7FEFF 		bl	remove_chain
 5384              	.LVL630:
3401:./FW/ff.c     ****                             res = move_window(fs, dw);
 5385              		.loc 1 3401 25 is_stmt 1 view .LVU1756
3401:./FW/ff.c     ****                             res = move_window(fs, dw);
 5386              		.loc 1 3401 28 is_stmt 0 view .LVU1757
 5387 00d6 0446     		mov	r4, r0
 5388 00d8 68BB     		cbnz	r0, .L408
3402:./FW/ff.c     ****                             fs->last_clst = cl - 1;     /* Reuse the cluster hole */
 5389              		.loc 1 3402 29 is_stmt 1 view .LVU1758
3402:./FW/ff.c     ****                             fs->last_clst = cl - 1;     /* Reuse the cluster hole */
 5390              		.loc 1 3402 35 is_stmt 0 view .LVU1759
 5391 00da 4146     		mov	r1, r8
 5392 00dc 0398     		ldr	r0, [sp, #12]
 5393              	.LVL631:
3402:./FW/ff.c     ****                             fs->last_clst = cl - 1;     /* Reuse the cluster hole */
 5394              		.loc 1 3402 35 view .LVU1760
 5395 00de FFF7FEFF 		bl	move_window
 5396              	.LVL632:
 5397 00e2 0446     		mov	r4, r0
 5398              	.LVL633:
3403:./FW/ff.c     ****                         }
 5399              		.loc 1 3403 29 is_stmt 1 view .LVU1761
3403:./FW/ff.c     ****                         }
 5400              		.loc 1 3403 48 is_stmt 0 view .LVU1762
 5401 00e4 013D     		subs	r5, r5, #1
 5402              	.LVL634:
3403:./FW/ff.c     ****                         }
 5403              		.loc 1 3403 43 view .LVU1763
 5404 00e6 039B     		ldr	r3, [sp, #12]
 5405 00e8 DD60     		str	r5, [r3, #12]
 5406 00ea 24E0     		b	.L408
 5407              	.LVL635:
 5408              	.L418:
3335:./FW/ff.c     ****             }
 5409              		.loc 1 3335 21 view .LVU1764
 5410 00ec 0624     		movs	r4, #6
 5411 00ee B5E7     		b	.L403
 5412              	.LVL636:
 5413              	.L431:
3348:./FW/ff.c     **** #else
 5414              		.loc 1 3348 21 is_stmt 1 view .LVU1765
3348:./FW/ff.c     **** #else
 5415              		.loc 1 3348 27 is_stmt 0 view .LVU1766
 5416 00f0 FFF7FEFF 		bl	enq_lock
 5417              	.LVL637:
3348:./FW/ff.c     **** #else
 5418              		.loc 1 3348 58 view .LVU1767
 5419 00f4 08B9     		cbnz	r0, .L432
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 225


 5420 00f6 1224     		movs	r4, #18
 5421              	.LVL638:
3348:./FW/ff.c     **** #else
 5422              		.loc 1 3348 58 view .LVU1768
 5423 00f8 B7E7     		b	.L406
 5424              	.LVL639:
 5425              	.L432:
3348:./FW/ff.c     **** #else
 5426              		.loc 1 3348 40 discriminator 1 view .LVU1769
 5427 00fa 04A8     		add	r0, sp, #16
 5428 00fc FFF7FEFF 		bl	dir_register
 5429              	.LVL640:
 5430 0100 0446     		mov	r4, r0
 5431              	.LVL641:
3348:./FW/ff.c     **** #else
 5432              		.loc 1 3348 40 discriminator 1 view .LVU1770
 5433 0102 B2E7     		b	.L406
 5434              	.LVL642:
 5435              	.L405:
3355:./FW/ff.c     ****                     res = FR_DENIED;
 5436              		.loc 1 3355 17 is_stmt 1 view .LVU1771
3355:./FW/ff.c     ****                     res = FR_DENIED;
 5437              		.loc 1 3355 27 is_stmt 0 view .LVU1772
 5438 0104 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
3355:./FW/ff.c     ****                     res = FR_DENIED;
 5439              		.loc 1 3355 20 view .LVU1773
 5440 0108 13F0110F 		tst	r3, #17
 5441 010c 12D1     		bne	.L420
3358:./FW/ff.c     ****                 }
 5442              		.loc 1 3358 21 is_stmt 1 view .LVU1774
3358:./FW/ff.c     ****                 }
 5443              		.loc 1 3358 24 is_stmt 0 view .LVU1775
 5444 010e 15F0040F 		tst	r5, #4
 5445 0112 ACD0     		beq	.L407
3358:./FW/ff.c     ****                 }
 5446              		.loc 1 3358 53 view .LVU1776
 5447 0114 0824     		movs	r4, #8
 5448              	.LVL643:
3358:./FW/ff.c     ****                 }
 5449              		.loc 1 3358 53 view .LVU1777
 5450 0116 0EE0     		b	.L408
 5451              	.LVL644:
 5452              	.L404:
3409:./FW/ff.c     ****                 if (dj.obj.attr & AM_DIR) {     /* It is a directory */
 5453              		.loc 1 3409 13 is_stmt 1 view .LVU1778
3409:./FW/ff.c     ****                 if (dj.obj.attr & AM_DIR) {     /* It is a directory */
 5454              		.loc 1 3409 16 is_stmt 0 view .LVU1779
 5455 0118 6CB9     		cbnz	r4, .L408
3410:./FW/ff.c     ****                     res = FR_NO_FILE;
 5456              		.loc 1 3410 17 is_stmt 1 view .LVU1780
3410:./FW/ff.c     ****                     res = FR_NO_FILE;
 5457              		.loc 1 3410 27 is_stmt 0 view .LVU1781
 5458 011a 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
3410:./FW/ff.c     ****                     res = FR_NO_FILE;
 5459              		.loc 1 3410 20 view .LVU1782
 5460 011e 13F0100F 		tst	r3, #16
 5461 0122 4CD1     		bne	.L422
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 226


3413:./FW/ff.c     ****                         res = FR_DENIED;
 5462              		.loc 1 3413 21 is_stmt 1 view .LVU1783
3413:./FW/ff.c     ****                         res = FR_DENIED;
 5463              		.loc 1 3413 24 is_stmt 0 view .LVU1784
 5464 0124 15F0020F 		tst	r5, #2
 5465 0128 05D0     		beq	.L408
3413:./FW/ff.c     ****                         res = FR_DENIED;
 5466              		.loc 1 3413 43 discriminator 1 view .LVU1785
 5467 012a 13F0010F 		tst	r3, #1
 5468 012e 02D0     		beq	.L408
3414:./FW/ff.c     ****                     }
 5469              		.loc 1 3414 29 view .LVU1786
 5470 0130 0724     		movs	r4, #7
 5471              	.LVL645:
3414:./FW/ff.c     ****                     }
 5472              		.loc 1 3414 29 view .LVU1787
 5473 0132 16E0     		b	.L409
 5474              	.LVL646:
 5475              	.L420:
3356:./FW/ff.c     ****                 } else {
 5476              		.loc 1 3356 25 view .LVU1788
 5477 0134 0724     		movs	r4, #7
 5478              	.LVL647:
 5479              	.L408:
3419:./FW/ff.c     ****             if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten *
 5480              		.loc 1 3419 9 is_stmt 1 view .LVU1789
3419:./FW/ff.c     ****             if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten *
 5481              		.loc 1 3419 12 is_stmt 0 view .LVU1790
 5482 0136 A4B9     		cbnz	r4, .L409
3420:./FW/ff.c     ****             { mode |= FA_MODIFIED; }
 5483              		.loc 1 3420 13 is_stmt 1 view .LVU1791
3420:./FW/ff.c     ****             { mode |= FA_MODIFIED; }
 5484              		.loc 1 3420 16 is_stmt 0 view .LVU1792
 5485 0138 17F0080F 		tst	r7, #8
 5486 013c 01D0     		beq	.L410
3421:./FW/ff.c     ****             fp->dir_sect = fs->winsect;         /* Pointer to the directory entry */
 5487              		.loc 1 3421 15 is_stmt 1 view .LVU1793
3421:./FW/ff.c     ****             fp->dir_sect = fs->winsect;         /* Pointer to the directory entry */
 5488              		.loc 1 3421 20 is_stmt 0 view .LVU1794
 5489 013e 47F04007 		orr	r7, r7, #64
 5490              	.LVL648:
 5491              	.L410:
3422:./FW/ff.c     ****             fp->dir_ptr = dj.dir;
 5492              		.loc 1 3422 13 is_stmt 1 view .LVU1795
3422:./FW/ff.c     ****             fp->dir_ptr = dj.dir;
 5493              		.loc 1 3422 30 is_stmt 0 view .LVU1796
 5494 0142 039B     		ldr	r3, [sp, #12]
 5495 0144 DB6A     		ldr	r3, [r3, #44]
3422:./FW/ff.c     ****             fp->dir_ptr = dj.dir;
 5496              		.loc 1 3422 26 view .LVU1797
 5497 0146 7362     		str	r3, [r6, #36]
3423:./FW/ff.c     **** #if _FS_LOCK != 0
 5498              		.loc 1 3423 13 is_stmt 1 view .LVU1798
3423:./FW/ff.c     **** #if _FS_LOCK != 0
 5499              		.loc 1 3423 29 is_stmt 0 view .LVU1799
 5500 0148 0C9B     		ldr	r3, [sp, #48]
3423:./FW/ff.c     **** #if _FS_LOCK != 0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 227


 5501              		.loc 1 3423 25 view .LVU1800
 5502 014a B362     		str	r3, [r6, #40]
3425:./FW/ff.c     ****             if (!fp->obj.lockid) { res = FR_INT_ERR; }
 5503              		.loc 1 3425 13 is_stmt 1 view .LVU1801
3425:./FW/ff.c     ****             if (!fp->obj.lockid) { res = FR_INT_ERR; }
 5504              		.loc 1 3425 30 is_stmt 0 view .LVU1802
 5505 014c 37F00103 		bics	r3, r7, #1
 5506 0150 14BF     		ite	ne
 5507 0152 0121     		movne	r1, #1
 5508 0154 0021     		moveq	r1, #0
 5509 0156 04A8     		add	r0, sp, #16
 5510 0158 FFF7FEFF 		bl	inc_lock
 5511              	.LVL649:
3425:./FW/ff.c     ****             if (!fp->obj.lockid) { res = FR_INT_ERR; }
 5512              		.loc 1 3425 28 view .LVU1803
 5513 015c 3061     		str	r0, [r6, #16]
3426:./FW/ff.c     **** #endif
 5514              		.loc 1 3426 13 is_stmt 1 view .LVU1804
3426:./FW/ff.c     **** #endif
 5515              		.loc 1 3426 16 is_stmt 0 view .LVU1805
 5516 015e 0028     		cmp	r0, #0
 5517 0160 5DD0     		beq	.L424
 5518              	.LVL650:
 5519              	.L409:
3441:./FW/ff.c     **** #if _FS_EXFAT
 5520              		.loc 1 3441 9 is_stmt 1 view .LVU1806
3441:./FW/ff.c     **** #if _FS_EXFAT
 5521              		.loc 1 3441 12 is_stmt 0 view .LVU1807
 5522 0162 002C     		cmp	r4, #0
 5523 0164 7FF45EAF 		bne	.L402
3453:./FW/ff.c     ****                 fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 5524              		.loc 1 3453 17 is_stmt 1 view .LVU1808
3453:./FW/ff.c     ****                 fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 5525              		.loc 1 3453 34 is_stmt 0 view .LVU1809
 5526 0168 039D     		ldr	r5, [sp, #12]
3453:./FW/ff.c     ****                 fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 5527              		.loc 1 3453 49 view .LVU1810
 5528 016a DDF83080 		ldr	r8, [sp, #48]
3453:./FW/ff.c     ****                 fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 5529              		.loc 1 3453 34 view .LVU1811
 5530 016e 4146     		mov	r1, r8
 5531 0170 2846     		mov	r0, r5
 5532 0172 FFF7FEFF 		bl	ld_clust
 5533              	.LVL651:
3453:./FW/ff.c     ****                 fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 5534              		.loc 1 3453 32 view .LVU1812
 5535 0176 B060     		str	r0, [r6, #8]
3454:./FW/ff.c     ****             }
 5536              		.loc 1 3454 17 is_stmt 1 view .LVU1813
3454:./FW/ff.c     ****             }
 5537              		.loc 1 3454 35 is_stmt 0 view .LVU1814
 5538 0178 08F11C00 		add	r0, r8, #28
 5539 017c FFF7FEFF 		bl	ld_dword
 5540              	.LVL652:
3454:./FW/ff.c     ****             }
 5541              		.loc 1 3454 33 view .LVU1815
 5542 0180 F060     		str	r0, [r6, #12]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 228


3457:./FW/ff.c     **** #endif
 5543              		.loc 1 3457 13 is_stmt 1 view .LVU1816
3457:./FW/ff.c     **** #endif
 5544              		.loc 1 3457 23 is_stmt 0 view .LVU1817
 5545 0182 0021     		movs	r1, #0
 5546 0184 F162     		str	r1, [r6, #44]
3459:./FW/ff.c     ****             fp->obj.id = fs->id;
 5547              		.loc 1 3459 13 is_stmt 1 view .LVU1818
3459:./FW/ff.c     ****             fp->obj.id = fs->id;
 5548              		.loc 1 3459 24 is_stmt 0 view .LVU1819
 5549 0186 3560     		str	r5, [r6]
3460:./FW/ff.c     ****             fp->flag = mode;        /* Set file access mode */
 5550              		.loc 1 3460 13 is_stmt 1 view .LVU1820
3460:./FW/ff.c     ****             fp->flag = mode;        /* Set file access mode */
 5551              		.loc 1 3460 28 is_stmt 0 view .LVU1821
 5552 0188 EB88     		ldrh	r3, [r5, #6]
3460:./FW/ff.c     ****             fp->flag = mode;        /* Set file access mode */
 5553              		.loc 1 3460 24 view .LVU1822
 5554 018a B380     		strh	r3, [r6, #4]	@ movhi
3461:./FW/ff.c     ****             fp->err = 0;            /* Clear error flag */
 5555              		.loc 1 3461 13 is_stmt 1 view .LVU1823
3461:./FW/ff.c     ****             fp->err = 0;            /* Clear error flag */
 5556              		.loc 1 3461 22 is_stmt 0 view .LVU1824
 5557 018c 3775     		strb	r7, [r6, #20]
3462:./FW/ff.c     ****             fp->sect = 0;           /* Invalidate current data sector */
 5558              		.loc 1 3462 13 is_stmt 1 view .LVU1825
3462:./FW/ff.c     ****             fp->sect = 0;           /* Invalidate current data sector */
 5559              		.loc 1 3462 21 is_stmt 0 view .LVU1826
 5560 018e 7175     		strb	r1, [r6, #21]
3463:./FW/ff.c     ****             fp->fptr = 0;           /* Set file pointer top of the file */
 5561              		.loc 1 3463 13 is_stmt 1 view .LVU1827
3463:./FW/ff.c     ****             fp->fptr = 0;           /* Set file pointer top of the file */
 5562              		.loc 1 3463 22 is_stmt 0 view .LVU1828
 5563 0190 3162     		str	r1, [r6, #32]
3464:./FW/ff.c     **** #if !_FS_READONLY
 5564              		.loc 1 3464 13 is_stmt 1 view .LVU1829
3464:./FW/ff.c     **** #if !_FS_READONLY
 5565              		.loc 1 3464 22 is_stmt 0 view .LVU1830
 5566 0192 B161     		str	r1, [r6, #24]
3467:./FW/ff.c     **** #endif
 5567              		.loc 1 3467 13 is_stmt 1 view .LVU1831
3467:./FW/ff.c     **** #endif
 5568              		.loc 1 3467 23 is_stmt 0 view .LVU1832
 5569 0194 06F13008 		add	r8, r6, #48
3467:./FW/ff.c     **** #endif
 5570              		.loc 1 3467 13 view .LVU1833
 5571 0198 4FF40072 		mov	r2, #512
 5572 019c 4046     		mov	r0, r8
 5573 019e FFF7FEFF 		bl	mem_set
 5574              	.LVL653:
3469:./FW/ff.c     ****                 fp->fptr = fp->obj.objsize;         /* Offset to seek */
 5575              		.loc 1 3469 13 is_stmt 1 view .LVU1834
3469:./FW/ff.c     ****                 fp->fptr = fp->obj.objsize;         /* Offset to seek */
 5576              		.loc 1 3469 16 is_stmt 0 view .LVU1835
 5577 01a2 17F0200F 		tst	r7, #32
 5578 01a6 3FF43DAF 		beq	.L402
3469:./FW/ff.c     ****                 fp->fptr = fp->obj.objsize;         /* Offset to seek */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 229


 5579              		.loc 1 3469 47 discriminator 1 view .LVU1836
 5580 01aa F568     		ldr	r5, [r6, #12]
3469:./FW/ff.c     ****                 fp->fptr = fp->obj.objsize;         /* Offset to seek */
 5581              		.loc 1 3469 37 discriminator 1 view .LVU1837
 5582 01ac 002D     		cmp	r5, #0
 5583 01ae 3FF439AF 		beq	.L402
3470:./FW/ff.c     ****                 bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size in byte */
 5584              		.loc 1 3470 17 is_stmt 1 view .LVU1838
3470:./FW/ff.c     ****                 bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size in byte */
 5585              		.loc 1 3470 26 is_stmt 0 view .LVU1839
 5586 01b2 B561     		str	r5, [r6, #24]
3471:./FW/ff.c     ****                 clst = fp->obj.sclust;              /* Follow the cluster chain */
 5587              		.loc 1 3471 17 is_stmt 1 view .LVU1840
3471:./FW/ff.c     ****                 clst = fp->obj.sclust;              /* Follow the cluster chain */
 5588              		.loc 1 3471 32 is_stmt 0 view .LVU1841
 5589 01b4 039B     		ldr	r3, [sp, #12]
 5590 01b6 5F89     		ldrh	r7, [r3, #10]
 5591              	.LVL654:
3471:./FW/ff.c     ****                 clst = fp->obj.sclust;              /* Follow the cluster chain */
 5592              		.loc 1 3471 21 view .LVU1842
 5593 01b8 7F02     		lsls	r7, r7, #9
 5594              	.LVL655:
3472:./FW/ff.c     ****                 for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 5595              		.loc 1 3472 17 is_stmt 1 view .LVU1843
3472:./FW/ff.c     ****                 for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 5596              		.loc 1 3472 22 is_stmt 0 view .LVU1844
 5597 01ba B168     		ldr	r1, [r6, #8]
 5598              	.LVL656:
3473:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
 5599              		.loc 1 3473 17 is_stmt 1 view .LVU1845
3473:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
 5600              		.loc 1 3473 17 is_stmt 0 view .LVU1846
 5601 01bc 05E0     		b	.L411
 5602              	.LVL657:
 5603              	.L422:
3411:./FW/ff.c     ****                 } else {
 5604              		.loc 1 3411 25 view .LVU1847
 5605 01be 0424     		movs	r4, #4
 5606              	.LVL658:
3411:./FW/ff.c     ****                 } else {
 5607              		.loc 1 3411 25 view .LVU1848
 5608 01c0 CFE7     		b	.L409
 5609              	.LVL659:
 5610              	.L412:
3476:./FW/ff.c     ****                 }
 5611              		.loc 1 3476 21 is_stmt 1 view .LVU1849
3476:./FW/ff.c     ****                 }
 5612              		.loc 1 3476 24 is_stmt 0 view .LVU1850
 5613 01c2 B1F1FF3F 		cmp	r1, #-1
 5614 01c6 0BD0     		beq	.L433
 5615              	.LVL660:
 5616              	.L413:
3473:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
 5617              		.loc 1 3473 72 is_stmt 1 discriminator 2 view .LVU1851
3473:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
 5618              		.loc 1 3473 76 is_stmt 0 discriminator 2 view .LVU1852
 5619 01c8 ED1B     		subs	r5, r5, r7
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 230


 5620              	.LVL661:
 5621              	.L411:
3473:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
 5622              		.loc 1 3473 45 is_stmt 1 discriminator 1 view .LVU1853
3473:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
 5623              		.loc 1 3473 17 is_stmt 0 discriminator 1 view .LVU1854
 5624 01ca 5CB9     		cbnz	r4, .L414
3473:./FW/ff.c     ****                     clst = get_fat(&fp->obj, clst);
 5625              		.loc 1 3473 58 discriminator 3 view .LVU1855
 5626 01cc BD42     		cmp	r5, r7
 5627 01ce 09D9     		bls	.L414
3474:./FW/ff.c     ****                     if (clst <= 1) { res = FR_INT_ERR; }
 5628              		.loc 1 3474 21 is_stmt 1 view .LVU1856
3474:./FW/ff.c     ****                     if (clst <= 1) { res = FR_INT_ERR; }
 5629              		.loc 1 3474 28 is_stmt 0 view .LVU1857
 5630 01d0 3046     		mov	r0, r6
 5631 01d2 FFF7FEFF 		bl	get_fat
 5632              	.LVL662:
3474:./FW/ff.c     ****                     if (clst <= 1) { res = FR_INT_ERR; }
 5633              		.loc 1 3474 28 view .LVU1858
 5634 01d6 0146     		mov	r1, r0
 5635              	.LVL663:
3475:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 5636              		.loc 1 3475 21 is_stmt 1 view .LVU1859
3475:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 5637              		.loc 1 3475 24 is_stmt 0 view .LVU1860
 5638 01d8 0128     		cmp	r0, #1
 5639 01da F2D8     		bhi	.L412
3475:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 5640              		.loc 1 3475 42 view .LVU1861
 5641 01dc 0224     		movs	r4, #2
 5642              	.LVL664:
3475:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 5643              		.loc 1 3475 42 view .LVU1862
 5644 01de F0E7     		b	.L412
 5645              	.LVL665:
 5646              	.L433:
3476:./FW/ff.c     ****                 }
 5647              		.loc 1 3476 51 view .LVU1863
 5648 01e0 0124     		movs	r4, #1
 5649              	.LVL666:
3476:./FW/ff.c     ****                 }
 5650              		.loc 1 3476 51 view .LVU1864
 5651 01e2 F1E7     		b	.L413
 5652              	.LVL667:
 5653              	.L414:
3478:./FW/ff.c     ****                 if (res == FR_OK && ofs % SS(fs)) { /* Fill sector buffer if not on the sector boun
 5654              		.loc 1 3478 17 is_stmt 1 view .LVU1865
3478:./FW/ff.c     ****                 if (res == FR_OK && ofs % SS(fs)) { /* Fill sector buffer if not on the sector boun
 5655              		.loc 1 3478 27 is_stmt 0 view .LVU1866
 5656 01e4 F161     		str	r1, [r6, #28]
3479:./FW/ff.c     ****                     if ((sc = clust2sect(fs, clst)) == 0) {
 5657              		.loc 1 3479 17 is_stmt 1 view .LVU1867
3479:./FW/ff.c     ****                     if ((sc = clust2sect(fs, clst)) == 0) {
 5658              		.loc 1 3479 20 is_stmt 0 view .LVU1868
 5659 01e6 002C     		cmp	r4, #0
 5660 01e8 7FF41CAF 		bne	.L402
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 231


3479:./FW/ff.c     ****                     if ((sc = clust2sect(fs, clst)) == 0) {
 5661              		.loc 1 3479 41 discriminator 1 view .LVU1869
 5662 01ec C5F30803 		ubfx	r3, r5, #0, #9
3479:./FW/ff.c     ****                     if ((sc = clust2sect(fs, clst)) == 0) {
 5663              		.loc 1 3479 34 discriminator 1 view .LVU1870
 5664 01f0 002B     		cmp	r3, #0
 5665 01f2 3FF417AF 		beq	.L402
3480:./FW/ff.c     ****                         res = FR_INT_ERR;
 5666              		.loc 1 3480 21 is_stmt 1 view .LVU1871
3480:./FW/ff.c     ****                         res = FR_INT_ERR;
 5667              		.loc 1 3480 31 is_stmt 0 view .LVU1872
 5668 01f6 039F     		ldr	r7, [sp, #12]
 5669              	.LVL668:
3480:./FW/ff.c     ****                         res = FR_INT_ERR;
 5670              		.loc 1 3480 31 view .LVU1873
 5671 01f8 3846     		mov	r0, r7
 5672 01fa FFF7FEFF 		bl	clust2sect
 5673              	.LVL669:
3480:./FW/ff.c     ****                         res = FR_INT_ERR;
 5674              		.loc 1 3480 24 view .LVU1874
 5675 01fe 08B9     		cbnz	r0, .L434
3481:./FW/ff.c     ****                     } else {
 5676              		.loc 1 3481 29 view .LVU1875
 5677 0200 0224     		movs	r4, #2
 5678              	.LVL670:
3481:./FW/ff.c     ****                     } else {
 5679              		.loc 1 3481 29 view .LVU1876
 5680 0202 10E7     		b	.L416
 5681              	.LVL671:
 5682              	.L434:
3483:./FW/ff.c     **** #if !_FS_TINY
 5683              		.loc 1 3483 25 is_stmt 1 view .LVU1877
3483:./FW/ff.c     **** #if !_FS_TINY
 5684              		.loc 1 3483 39 is_stmt 0 view .LVU1878
 5685 0204 00EB5522 		add	r2, r0, r5, lsr #9
3483:./FW/ff.c     **** #if !_FS_TINY
 5686              		.loc 1 3483 34 view .LVU1879
 5687 0208 3262     		str	r2, [r6, #32]
3485:./FW/ff.c     **** #endif
 5688              		.loc 1 3485 25 is_stmt 1 view .LVU1880
3485:./FW/ff.c     **** #endif
 5689              		.loc 1 3485 29 is_stmt 0 view .LVU1881
 5690 020a 0123     		movs	r3, #1
 5691 020c 4146     		mov	r1, r8
 5692 020e 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 5693              	.LVL672:
3485:./FW/ff.c     **** #endif
 5694              		.loc 1 3485 29 view .LVU1882
 5695 0210 FFF7FEFF 		bl	disk_read
 5696              	.LVL673:
3485:./FW/ff.c     **** #endif
 5697              		.loc 1 3485 28 view .LVU1883
 5698 0214 0028     		cmp	r0, #0
 5699 0216 3FF405AF 		beq	.L402
3485:./FW/ff.c     **** #endif
 5700              		.loc 1 3485 87 view .LVU1884
 5701 021a 0124     		movs	r4, #1
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 232


 5702              	.LVL674:
3485:./FW/ff.c     **** #endif
 5703              		.loc 1 3485 87 view .LVU1885
 5704 021c 03E7     		b	.L416
 5705              	.LVL675:
 5706              	.L424:
3426:./FW/ff.c     **** #endif
 5707              		.loc 1 3426 40 view .LVU1886
 5708 021e 0224     		movs	r4, #2
 5709              	.LVL676:
3426:./FW/ff.c     **** #endif
 5710              		.loc 1 3426 40 view .LVU1887
 5711 0220 00E7     		b	.L402
 5712              	.LVL677:
 5713              	.L417:
3323:./FW/ff.c     **** 
 5714              		.loc 1 3323 23 view .LVU1888
 5715 0222 0924     		movs	r4, #9
 5716 0224 01E7     		b	.L401
 5717              		.cfi_endproc
 5718              	.LFE978:
 5720              		.section	.text.f_read,"ax",%progbits
 5721              		.align	1
 5722              		.global	f_read
 5723              		.syntax unified
 5724              		.thumb
 5725              		.thumb_func
 5726              		.fpu fpv4-sp-d16
 5728              	f_read:
 5729              	.LVL678:
 5730              	.LFB979:
3513:./FW/ff.c     ****     FRESULT res;
 5731              		.loc 1 3513 3 is_stmt 1 view -0
 5732              		.cfi_startproc
 5733              		@ args = 0, pretend = 0, frame = 16
 5734              		@ frame_needed = 0, uses_anonymous_args = 0
3513:./FW/ff.c     ****     FRESULT res;
 5735              		.loc 1 3513 3 is_stmt 0 view .LVU1890
 5736 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5737              	.LCFI53:
 5738              		.cfi_def_cfa_offset 36
 5739              		.cfi_offset 4, -36
 5740              		.cfi_offset 5, -32
 5741              		.cfi_offset 6, -28
 5742              		.cfi_offset 7, -24
 5743              		.cfi_offset 8, -20
 5744              		.cfi_offset 9, -16
 5745              		.cfi_offset 10, -12
 5746              		.cfi_offset 11, -8
 5747              		.cfi_offset 14, -4
 5748 0004 85B0     		sub	sp, sp, #20
 5749              	.LCFI54:
 5750              		.cfi_def_cfa_offset 56
 5751 0006 0446     		mov	r4, r0
 5752 0008 0E46     		mov	r6, r1
 5753 000a 1746     		mov	r7, r2
 5754 000c 9846     		mov	r8, r3
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 233


3514:./FW/ff.c     ****     FATFS *fs;
 5755              		.loc 1 3514 5 is_stmt 1 view .LVU1891
3515:./FW/ff.c     ****     DWORD clst, sect;
 5756              		.loc 1 3515 5 view .LVU1892
3516:./FW/ff.c     ****     FSIZE_t remain;
 5757              		.loc 1 3516 5 view .LVU1893
3517:./FW/ff.c     ****     UINT rcnt, cc, csect;
 5758              		.loc 1 3517 5 view .LVU1894
3518:./FW/ff.c     ****     BYTE *rbuff = (BYTE*)buff;
 5759              		.loc 1 3518 5 view .LVU1895
3519:./FW/ff.c     **** 
 5760              		.loc 1 3519 5 view .LVU1896
 5761              	.LVL679:
3522:./FW/ff.c     ****     res = validate(&fp->obj, &fs);              /* Check validity of the file object */
 5762              		.loc 1 3522 5 view .LVU1897
3522:./FW/ff.c     ****     res = validate(&fp->obj, &fs);              /* Check validity of the file object */
 5763              		.loc 1 3522 9 is_stmt 0 view .LVU1898
 5764 000e 0023     		movs	r3, #0
 5765              	.LVL680:
3522:./FW/ff.c     ****     res = validate(&fp->obj, &fs);              /* Check validity of the file object */
 5766              		.loc 1 3522 9 view .LVU1899
 5767 0010 C8F80030 		str	r3, [r8]
3523:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
 5768              		.loc 1 3523 5 is_stmt 1 view .LVU1900
3523:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
 5769              		.loc 1 3523 11 is_stmt 0 view .LVU1901
 5770 0014 0190     		str	r0, [sp, #4]
 5771 0016 03A9     		add	r1, sp, #12
 5772              	.LVL681:
3523:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
 5773              		.loc 1 3523 11 view .LVU1902
 5774 0018 FFF7FEFF 		bl	validate
 5775              	.LVL682:
3524:./FW/ff.c     ****     if (!(fp->flag & FA_READ)) { LEAVE_FF(fs, FR_DENIED); } /* Check access mode */
 5776              		.loc 1 3524 5 is_stmt 1 view .LVU1903
3524:./FW/ff.c     ****     if (!(fp->flag & FA_READ)) { LEAVE_FF(fs, FR_DENIED); } /* Check access mode */
 5777              		.loc 1 3524 8 is_stmt 0 view .LVU1904
 5778 001c 0090     		str	r0, [sp]
 5779 001e 0028     		cmp	r0, #0
 5780 0020 40F0AE80 		bne	.L438
3524:./FW/ff.c     ****     if (!(fp->flag & FA_READ)) { LEAVE_FF(fs, FR_DENIED); } /* Check access mode */
 5781              		.loc 1 3524 30 discriminator 2 view .LVU1905
 5782 0024 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 5783 0026 0093     		str	r3, [sp]
 5784              	.LVL683:
3524:./FW/ff.c     ****     if (!(fp->flag & FA_READ)) { LEAVE_FF(fs, FR_DENIED); } /* Check access mode */
 5785              		.loc 1 3524 22 discriminator 2 view .LVU1906
 5786 0028 002B     		cmp	r3, #0
 5787 002a 40F0A980 		bne	.L438
3525:./FW/ff.c     ****     remain = fp->obj.objsize - fp->fptr;
 5788              		.loc 1 3525 5 is_stmt 1 view .LVU1907
3525:./FW/ff.c     ****     remain = fp->obj.objsize - fp->fptr;
 5789              		.loc 1 3525 13 is_stmt 0 view .LVU1908
 5790 002e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5791              	.LVL684:
3525:./FW/ff.c     ****     remain = fp->obj.objsize - fp->fptr;
 5792              		.loc 1 3525 8 view .LVU1909
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 234


 5793 0030 13F0010F 		tst	r3, #1
 5794 0034 00F0C380 		beq	.L460
3526:./FW/ff.c     ****     if (btr > remain) { btr = (UINT)remain; }       /* Truncate btr by remaining bytes */
 5795              		.loc 1 3526 5 is_stmt 1 view .LVU1910
3526:./FW/ff.c     ****     if (btr > remain) { btr = (UINT)remain; }       /* Truncate btr by remaining bytes */
 5796              		.loc 1 3526 21 is_stmt 0 view .LVU1911
 5797 0038 E568     		ldr	r5, [r4, #12]
3526:./FW/ff.c     ****     if (btr > remain) { btr = (UINT)remain; }       /* Truncate btr by remaining bytes */
 5798              		.loc 1 3526 34 view .LVU1912
 5799 003a A369     		ldr	r3, [r4, #24]
3526:./FW/ff.c     ****     if (btr > remain) { btr = (UINT)remain; }       /* Truncate btr by remaining bytes */
 5800              		.loc 1 3526 12 view .LVU1913
 5801 003c ED1A     		subs	r5, r5, r3
 5802              	.LVL685:
3527:./FW/ff.c     **** 
 5803              		.loc 1 3527 5 is_stmt 1 view .LVU1914
3527:./FW/ff.c     **** 
 5804              		.loc 1 3527 8 is_stmt 0 view .LVU1915
 5805 003e BD42     		cmp	r5, r7
 5806 0040 62D3     		bcc	.L458
 5807 0042 3D46     		mov	r5, r7
 5808              	.LVL686:
3527:./FW/ff.c     **** 
 5809              		.loc 1 3527 8 view .LVU1916
 5810 0044 60E0     		b	.L458
 5811              	.LVL687:
 5812              	.L443:
3538:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
 5813              		.loc 1 3538 21 is_stmt 1 view .LVU1917
3538:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
 5814              		.loc 1 3538 27 is_stmt 0 view .LVU1918
 5815 0046 E36A     		ldr	r3, [r4, #44]
3538:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
 5816              		.loc 1 3538 24 view .LVU1919
 5817 0048 1BB1     		cbz	r3, .L445
3539:./FW/ff.c     ****                     } else
 5818              		.loc 1 3539 25 is_stmt 1 view .LVU1920
3539:./FW/ff.c     ****                     } else
 5819              		.loc 1 3539 32 is_stmt 0 view .LVU1921
 5820 004a 2046     		mov	r0, r4
 5821 004c FFF7FEFF 		bl	clmt_clust
 5822              	.LVL688:
3539:./FW/ff.c     ****                     } else
 5823              		.loc 1 3539 32 view .LVU1922
 5824 0050 6AE0     		b	.L444
 5825              	.LVL689:
 5826              	.L445:
3543:./FW/ff.c     ****                     }
 5827              		.loc 1 3543 25 is_stmt 1 view .LVU1923
3543:./FW/ff.c     ****                     }
 5828              		.loc 1 3543 32 is_stmt 0 view .LVU1924
 5829 0052 E169     		ldr	r1, [r4, #28]
 5830 0054 0198     		ldr	r0, [sp, #4]
 5831 0056 FFF7FEFF 		bl	get_fat
 5832              	.LVL690:
3543:./FW/ff.c     ****                     }
 5833              		.loc 1 3543 32 view .LVU1925
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 235


 5834 005a 65E0     		b	.L444
 5835              	.L467:
3546:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 5836              		.loc 1 3546 33 is_stmt 1 discriminator 1 view .LVU1926
 5837 005c 4FF0020A 		mov	r10, #2
 5838 0060 84F815A0 		strb	r10, [r4, #21]
3546:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 5839              		.loc 1 3546 33 discriminator 1 view .LVU1927
 5840 0064 CDF800A0 		str	r10, [sp]
 5841              	.LVL691:
3546:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 5842              		.loc 1 3546 33 is_stmt 0 discriminator 1 view .LVU1928
 5843 0068 8AE0     		b	.L438
 5844              	.LVL692:
 5845              	.L468:
3547:./FW/ff.c     ****                 fp->clust = clst;               /* Update current cluster */
 5846              		.loc 1 3547 43 is_stmt 1 discriminator 1 view .LVU1929
 5847 006a 4FF0010A 		mov	r10, #1
 5848 006e 84F815A0 		strb	r10, [r4, #21]
3547:./FW/ff.c     ****                 fp->clust = clst;               /* Update current cluster */
 5849              		.loc 1 3547 43 discriminator 1 view .LVU1930
 5850 0072 CDF800A0 		str	r10, [sp]
 5851              	.LVL693:
3547:./FW/ff.c     ****                 fp->clust = clst;               /* Update current cluster */
 5852              		.loc 1 3547 43 is_stmt 0 discriminator 1 view .LVU1931
 5853 0076 83E0     		b	.L438
 5854              	.LVL694:
 5855              	.L469:
3551:./FW/ff.c     ****             sect += csect;
 5856              		.loc 1 3551 26 is_stmt 1 discriminator 1 view .LVU1932
 5857 0078 4FF0020A 		mov	r10, #2
 5858 007c 84F815A0 		strb	r10, [r4, #21]
3551:./FW/ff.c     ****             sect += csect;
 5859              		.loc 1 3551 26 discriminator 1 view .LVU1933
 5860 0080 CDF800A0 		str	r10, [sp]
 5861              	.LVL695:
3551:./FW/ff.c     ****             sect += csect;
 5862              		.loc 1 3551 26 is_stmt 0 discriminator 1 view .LVU1934
 5863 0084 7CE0     		b	.L438
 5864              	.LVL696:
 5865              	.L451:
3558:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
 5866              		.loc 1 3558 92 is_stmt 1 discriminator 2 view .LVU1935
3565:./FW/ff.c     ****                     mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5867              		.loc 1 3565 17 discriminator 2 view .LVU1936
3565:./FW/ff.c     ****                     mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5868              		.loc 1 3565 21 is_stmt 0 discriminator 2 view .LVU1937
 5869 0086 94F91430 		ldrsb	r3, [r4, #20]
3565:./FW/ff.c     ****                     mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5870              		.loc 1 3565 20 discriminator 2 view .LVU1938
 5871 008a 002B     		cmp	r3, #0
 5872 008c 02DB     		blt	.L464
 5873              	.L452:
3570:./FW/ff.c     ****                 continue;
 5874              		.loc 1 3570 17 is_stmt 1 view .LVU1939
3570:./FW/ff.c     ****                 continue;
 5875              		.loc 1 3570 22 is_stmt 0 view .LVU1940
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 236


 5876 008e 4FEA4A27 		lsl	r7, r10, #9
 5877              	.LVL697:
3571:./FW/ff.c     ****             }
 5878              		.loc 1 3571 17 is_stmt 1 view .LVU1941
 5879 0092 2FE0     		b	.L453
 5880              	.LVL698:
 5881              	.L464:
3565:./FW/ff.c     ****                     mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5882              		.loc 1 3565 48 is_stmt 0 discriminator 1 view .LVU1942
 5883 0094 206A     		ldr	r0, [r4, #32]
3565:./FW/ff.c     ****                     mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5884              		.loc 1 3565 55 discriminator 1 view .LVU1943
 5885 0096 A0EB0900 		sub	r0, r0, r9
3565:./FW/ff.c     ****                     mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5886              		.loc 1 3565 43 discriminator 1 view .LVU1944
 5887 009a 5045     		cmp	r0, r10
 5888 009c F7D2     		bcs	.L452
3566:./FW/ff.c     ****                 }
 5889              		.loc 1 3566 21 is_stmt 1 view .LVU1945
 5890 009e 4FF40072 		mov	r2, #512
 5891 00a2 04F13001 		add	r1, r4, #48
 5892 00a6 06EB4020 		add	r0, r6, r0, lsl #9
 5893 00aa FFF7FEFF 		bl	mem_cpy
 5894              	.LVL699:
 5895 00ae EEE7     		b	.L452
 5896              	.L449:
3574:./FW/ff.c     **** #if !_FS_READONLY
 5897              		.loc 1 3574 13 view .LVU1946
3574:./FW/ff.c     **** #if !_FS_READONLY
 5898              		.loc 1 3574 19 is_stmt 0 view .LVU1947
 5899 00b0 226A     		ldr	r2, [r4, #32]
3574:./FW/ff.c     **** #if !_FS_READONLY
 5900              		.loc 1 3574 16 view .LVU1948
 5901 00b2 4A45     		cmp	r2, r9
 5902 00b4 0DD0     		beq	.L454
3576:./FW/ff.c     ****                     if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ER
 5903              		.loc 1 3576 17 is_stmt 1 view .LVU1949
3576:./FW/ff.c     ****                     if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ER
 5904              		.loc 1 3576 21 is_stmt 0 view .LVU1950
 5905 00b6 94F91430 		ldrsb	r3, [r4, #20]
3576:./FW/ff.c     ****                     if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ER
 5906              		.loc 1 3576 20 view .LVU1951
 5907 00ba 002B     		cmp	r3, #0
 5908 00bc 64DB     		blt	.L465
 5909              	.L455:
3581:./FW/ff.c     ****             }
 5910              		.loc 1 3581 17 is_stmt 1 view .LVU1952
3581:./FW/ff.c     ****             }
 5911              		.loc 1 3581 21 is_stmt 0 view .LVU1953
 5912 00be 0123     		movs	r3, #1
 5913 00c0 4A46     		mov	r2, r9
 5914 00c2 04F13001 		add	r1, r4, #48
 5915 00c6 0398     		ldr	r0, [sp, #12]
 5916 00c8 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5917 00ca FFF7FEFF 		bl	disk_read
 5918              	.LVL700:
3581:./FW/ff.c     ****             }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 237


 5919              		.loc 1 3581 20 view .LVU1954
 5920 00ce 0028     		cmp	r0, #0
 5921 00d0 6ED1     		bne	.L466
 5922              	.L454:
3581:./FW/ff.c     ****             }
 5923              		.loc 1 3581 93 is_stmt 1 discriminator 2 view .LVU1955
3584:./FW/ff.c     ****         }
 5924              		.loc 1 3584 13 discriminator 2 view .LVU1956
3584:./FW/ff.c     ****         }
 5925              		.loc 1 3584 22 is_stmt 0 discriminator 2 view .LVU1957
 5926 00d2 C4F82090 		str	r9, [r4, #32]
 5927              	.LVL701:
 5928              	.L441:
3586:./FW/ff.c     ****         if (rcnt > btr) { rcnt = btr; }                 /* Clip it by btr if needed */
 5929              		.loc 1 3586 9 is_stmt 1 view .LVU1958
3586:./FW/ff.c     ****         if (rcnt > btr) { rcnt = btr; }                 /* Clip it by btr if needed */
 5930              		.loc 1 3586 33 is_stmt 0 view .LVU1959
 5931 00d6 A369     		ldr	r3, [r4, #24]
3586:./FW/ff.c     ****         if (rcnt > btr) { rcnt = btr; }                 /* Clip it by btr if needed */
 5932              		.loc 1 3586 40 view .LVU1960
 5933 00d8 C3F30803 		ubfx	r3, r3, #0, #9
3586:./FW/ff.c     ****         if (rcnt > btr) { rcnt = btr; }                 /* Clip it by btr if needed */
 5934              		.loc 1 3586 14 view .LVU1961
 5935 00dc C3F50077 		rsb	r7, r3, #512
 5936              	.LVL702:
3587:./FW/ff.c     **** #if _FS_TINY
 5937              		.loc 1 3587 9 is_stmt 1 view .LVU1962
3587:./FW/ff.c     **** #if _FS_TINY
 5938              		.loc 1 3587 12 is_stmt 0 view .LVU1963
 5939 00e0 BD42     		cmp	r5, r7
 5940 00e2 00D2     		bcs	.L457
3587:./FW/ff.c     **** #if _FS_TINY
 5941              		.loc 1 3587 32 view .LVU1964
 5942 00e4 2F46     		mov	r7, r5
 5943              	.LVL703:
 5944              	.L457:
3592:./FW/ff.c     **** #endif
 5945              		.loc 1 3592 9 is_stmt 1 view .LVU1965
3592:./FW/ff.c     **** #endif
 5946              		.loc 1 3592 24 is_stmt 0 view .LVU1966
 5947 00e6 04F13001 		add	r1, r4, #48
3592:./FW/ff.c     **** #endif
 5948              		.loc 1 3592 9 view .LVU1967
 5949 00ea 3A46     		mov	r2, r7
 5950 00ec 1944     		add	r1, r1, r3
 5951 00ee 3046     		mov	r0, r6
 5952 00f0 FFF7FEFF 		bl	mem_cpy
 5953              	.LVL704:
 5954              	.L453:
3530:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {           /* On the sector boundary? */
 5955              		.loc 1 3530 13 is_stmt 1 view .LVU1968
3530:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {           /* On the sector boundary? */
 5956              		.loc 1 3530 19 is_stmt 0 view .LVU1969
 5957 00f4 3E44     		add	r6, r6, r7
 5958              	.LVL705:
3530:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {           /* On the sector boundary? */
 5959              		.loc 1 3530 37 view .LVU1970
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 238


 5960 00f6 A369     		ldr	r3, [r4, #24]
 5961 00f8 3B44     		add	r3, r3, r7
 5962 00fa A361     		str	r3, [r4, #24]
3530:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {           /* On the sector boundary? */
 5963              		.loc 1 3530 50 view .LVU1971
 5964 00fc D8F80030 		ldr	r3, [r8]
 5965 0100 3B44     		add	r3, r3, r7
 5966 0102 C8F80030 		str	r3, [r8]
3530:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {           /* On the sector boundary? */
 5967              		.loc 1 3530 63 view .LVU1972
 5968 0106 ED1B     		subs	r5, r5, r7
 5969              	.LVL706:
 5970              	.L458:
3529:./FW/ff.c     ****             rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 5971              		.loc 1 3529 14 is_stmt 1 view .LVU1973
3529:./FW/ff.c     ****             rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 5972              		.loc 1 3529 5 is_stmt 0 view .LVU1974
 5973 0108 002D     		cmp	r5, #0
 5974 010a 39D0     		beq	.L438
3531:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));    /* Sector offset in the cluster
 5975              		.loc 1 3531 9 is_stmt 1 view .LVU1975
3531:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));    /* Sector offset in the cluster
 5976              		.loc 1 3531 15 is_stmt 0 view .LVU1976
 5977 010c A169     		ldr	r1, [r4, #24]
3531:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));    /* Sector offset in the cluster
 5978              		.loc 1 3531 22 view .LVU1977
 5979 010e C1F30803 		ubfx	r3, r1, #0, #9
3531:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));    /* Sector offset in the cluster
 5980              		.loc 1 3531 12 view .LVU1978
 5981 0112 002B     		cmp	r3, #0
 5982 0114 DFD1     		bne	.L441
3532:./FW/ff.c     ****             if (csect == 0) {                   /* On the cluster boundary? */
 5983              		.loc 1 3532 13 is_stmt 1 view .LVU1979
3532:./FW/ff.c     ****             if (csect == 0) {                   /* On the cluster boundary? */
 5984              		.loc 1 3532 51 is_stmt 0 view .LVU1980
 5985 0116 039B     		ldr	r3, [sp, #12]
 5986 0118 5F89     		ldrh	r7, [r3, #10]
3532:./FW/ff.c     ****             if (csect == 0) {                   /* On the cluster boundary? */
 5987              		.loc 1 3532 59 view .LVU1981
 5988 011a 013F     		subs	r7, r7, #1
 5989              	.LVL707:
3533:./FW/ff.c     ****                 if (fp->fptr == 0) {            /* On the top of the file? */
 5990              		.loc 1 3533 13 is_stmt 1 view .LVU1982
3533:./FW/ff.c     ****                 if (fp->fptr == 0) {            /* On the top of the file? */
 5991              		.loc 1 3533 16 is_stmt 0 view .LVU1983
 5992 011c 17EA5127 		ands	r7, r7, r1, lsr #9
 5993              	.LVL708:
3533:./FW/ff.c     ****                 if (fp->fptr == 0) {            /* On the top of the file? */
 5994              		.loc 1 3533 16 view .LVU1984
 5995 0120 08D1     		bne	.L442
3534:./FW/ff.c     ****                     clst = fp->obj.sclust;      /* Follow cluster chain from the origin */
 5996              		.loc 1 3534 17 is_stmt 1 view .LVU1985
3534:./FW/ff.c     ****                     clst = fp->obj.sclust;      /* Follow cluster chain from the origin */
 5997              		.loc 1 3534 20 is_stmt 0 view .LVU1986
 5998 0122 0029     		cmp	r1, #0
 5999 0124 8FD1     		bne	.L443
3535:./FW/ff.c     ****                 } else {                        /* Middle or end of the file */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 239


 6000              		.loc 1 3535 21 is_stmt 1 view .LVU1987
3535:./FW/ff.c     ****                 } else {                        /* Middle or end of the file */
 6001              		.loc 1 3535 26 is_stmt 0 view .LVU1988
 6002 0126 A068     		ldr	r0, [r4, #8]
 6003              	.LVL709:
 6004              	.L444:
3546:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6005              		.loc 1 3546 17 is_stmt 1 view .LVU1989
3546:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6006              		.loc 1 3546 20 is_stmt 0 view .LVU1990
 6007 0128 0128     		cmp	r0, #1
 6008 012a 97D9     		bls	.L467
3546:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6009              		.loc 1 3546 54 is_stmt 1 discriminator 2 view .LVU1991
3547:./FW/ff.c     ****                 fp->clust = clst;               /* Update current cluster */
 6010              		.loc 1 3547 17 discriminator 2 view .LVU1992
3547:./FW/ff.c     ****                 fp->clust = clst;               /* Update current cluster */
 6011              		.loc 1 3547 20 is_stmt 0 discriminator 2 view .LVU1993
 6012 012c B0F1FF3F 		cmp	r0, #-1
 6013 0130 9BD0     		beq	.L468
3547:./FW/ff.c     ****                 fp->clust = clst;               /* Update current cluster */
 6014              		.loc 1 3547 65 is_stmt 1 discriminator 2 view .LVU1994
3548:./FW/ff.c     ****             }
 6015              		.loc 1 3548 17 discriminator 2 view .LVU1995
3548:./FW/ff.c     ****             }
 6016              		.loc 1 3548 27 is_stmt 0 discriminator 2 view .LVU1996
 6017 0132 E061     		str	r0, [r4, #28]
 6018              	.LVL710:
 6019              	.L442:
3550:./FW/ff.c     ****             if (!sect) { ABORT(fs, FR_INT_ERR); }
 6020              		.loc 1 3550 13 is_stmt 1 view .LVU1997
3550:./FW/ff.c     ****             if (!sect) { ABORT(fs, FR_INT_ERR); }
 6021              		.loc 1 3550 20 is_stmt 0 view .LVU1998
 6022 0134 DDF80CB0 		ldr	fp, [sp, #12]
 6023 0138 E169     		ldr	r1, [r4, #28]
 6024 013a 5846     		mov	r0, fp
 6025 013c FFF7FEFF 		bl	clust2sect
 6026              	.LVL711:
3551:./FW/ff.c     ****             sect += csect;
 6027              		.loc 1 3551 13 is_stmt 1 view .LVU1999
3551:./FW/ff.c     ****             sect += csect;
 6028              		.loc 1 3551 16 is_stmt 0 view .LVU2000
 6029 0140 8146     		mov	r9, r0
 6030 0142 0028     		cmp	r0, #0
 6031 0144 98D0     		beq	.L469
3551:./FW/ff.c     ****             sect += csect;
 6032              		.loc 1 3551 47 is_stmt 1 discriminator 2 view .LVU2001
3552:./FW/ff.c     ****             cc = btr / SS(fs);                  /* When remaining bytes >= sector size, */
 6033              		.loc 1 3552 13 discriminator 2 view .LVU2002
3552:./FW/ff.c     ****             cc = btr / SS(fs);                  /* When remaining bytes >= sector size, */
 6034              		.loc 1 3552 18 is_stmt 0 discriminator 2 view .LVU2003
 6035 0146 B944     		add	r9, r9, r7
 6036              	.LVL712:
3553:./FW/ff.c     ****             if (cc) {                           /* Read maximum contiguous sectors directly */
 6037              		.loc 1 3553 13 is_stmt 1 discriminator 2 view .LVU2004
3553:./FW/ff.c     ****             if (cc) {                           /* Read maximum contiguous sectors directly */
 6038              		.loc 1 3553 16 is_stmt 0 discriminator 2 view .LVU2005
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 240


 6039 0148 4FEA552A 		lsr	r10, r5, #9
 6040              	.LVL713:
3554:./FW/ff.c     ****                 if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
 6041              		.loc 1 3554 13 is_stmt 1 discriminator 2 view .LVU2006
3554:./FW/ff.c     ****                 if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
 6042              		.loc 1 3554 16 is_stmt 0 discriminator 2 view .LVU2007
 6043 014c B5F5007F 		cmp	r5, #512
 6044 0150 AED3     		bcc	.L449
3555:./FW/ff.c     ****                     cc = fs->csize - csect;
 6045              		.loc 1 3555 17 is_stmt 1 view .LVU2008
3555:./FW/ff.c     ****                     cc = fs->csize - csect;
 6046              		.loc 1 3555 27 is_stmt 0 view .LVU2009
 6047 0152 07EB0A03 		add	r3, r7, r10
3555:./FW/ff.c     ****                     cc = fs->csize - csect;
 6048              		.loc 1 3555 36 view .LVU2010
 6049 0156 BBF80A20 		ldrh	r2, [fp, #10]
3555:./FW/ff.c     ****                     cc = fs->csize - csect;
 6050              		.loc 1 3555 20 view .LVU2011
 6051 015a 9342     		cmp	r3, r2
 6052 015c 01D9     		bls	.L450
3556:./FW/ff.c     ****                 }
 6053              		.loc 1 3556 21 is_stmt 1 view .LVU2012
3556:./FW/ff.c     ****                 }
 6054              		.loc 1 3556 24 is_stmt 0 view .LVU2013
 6055 015e A2EB070A 		sub	r10, r2, r7
 6056              	.LVL714:
 6057              	.L450:
3558:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
 6058              		.loc 1 3558 17 is_stmt 1 view .LVU2014
3558:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
 6059              		.loc 1 3558 21 is_stmt 0 view .LVU2015
 6060 0162 5346     		mov	r3, r10
 6061 0164 4A46     		mov	r2, r9
 6062 0166 3146     		mov	r1, r6
 6063 0168 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 6064 016c FFF7FEFF 		bl	disk_read
 6065              	.LVL715:
3558:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
 6066              		.loc 1 3558 20 view .LVU2016
 6067 0170 0028     		cmp	r0, #0
 6068 0172 88D0     		beq	.L451
3558:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
 6069              		.loc 1 3558 70 is_stmt 1 discriminator 1 view .LVU2017
 6070 0174 4FF0010A 		mov	r10, #1
 6071              	.LVL716:
3558:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
 6072              		.loc 1 3558 70 is_stmt 0 discriminator 1 view .LVU2018
 6073 0178 84F815A0 		strb	r10, [r4, #21]
3558:./FW/ff.c     **** #if !_FS_READONLY && _FS_MINIMIZE <= 2          /* Replace one of the read sectors with cached data
 6074              		.loc 1 3558 70 is_stmt 1 discriminator 1 view .LVU2019
 6075 017c CDF800A0 		str	r10, [sp]
 6076              	.LVL717:
 6077              	.L438:
3597:./FW/ff.c     **** 
 6078              		.loc 1 3597 1 is_stmt 0 view .LVU2020
 6079 0180 0098     		ldr	r0, [sp]
 6080 0182 05B0     		add	sp, sp, #20
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 241


 6081              	.LCFI55:
 6082              		.cfi_remember_state
 6083              		.cfi_def_cfa_offset 36
 6084              		@ sp needed
 6085 0184 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6086              	.LVL718:
 6087              	.L465:
 6088              	.LCFI56:
 6089              		.cfi_restore_state
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6090              		.loc 1 3577 21 is_stmt 1 view .LVU2021
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6091              		.loc 1 3577 25 is_stmt 0 view .LVU2022
 6092 0188 0123     		movs	r3, #1
 6093 018a 04F13001 		add	r1, r4, #48
 6094 018e 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 6095 0192 FFF7FEFF 		bl	disk_write
 6096              	.LVL719:
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6097              		.loc 1 3577 24 view .LVU2023
 6098 0196 20B9     		cbnz	r0, .L470
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6099              		.loc 1 3577 102 is_stmt 1 discriminator 2 view .LVU2024
3578:./FW/ff.c     ****                 }
 6100              		.loc 1 3578 21 discriminator 2 view .LVU2025
3578:./FW/ff.c     ****                 }
 6101              		.loc 1 3578 30 is_stmt 0 discriminator 2 view .LVU2026
 6102 0198 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6103 019a 03F07F03 		and	r3, r3, #127
 6104 019e 2375     		strb	r3, [r4, #20]
 6105 01a0 8DE7     		b	.L455
 6106              	.L470:
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6107              		.loc 1 3577 80 is_stmt 1 discriminator 1 view .LVU2027
 6108 01a2 4FF0010A 		mov	r10, #1
 6109              	.LVL720:
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6110              		.loc 1 3577 80 is_stmt 0 discriminator 1 view .LVU2028
 6111 01a6 84F815A0 		strb	r10, [r4, #21]
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6112              		.loc 1 3577 80 is_stmt 1 discriminator 1 view .LVU2029
 6113 01aa CDF800A0 		str	r10, [sp]
 6114              	.LVL721:
3577:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6115              		.loc 1 3577 80 is_stmt 0 discriminator 1 view .LVU2030
 6116 01ae E7E7     		b	.L438
 6117              	.LVL722:
 6118              	.L466:
3581:./FW/ff.c     ****             }
 6119              		.loc 1 3581 71 is_stmt 1 discriminator 1 view .LVU2031
 6120 01b0 4FF0010A 		mov	r10, #1
 6121              	.LVL723:
3581:./FW/ff.c     ****             }
 6122              		.loc 1 3581 71 is_stmt 0 discriminator 1 view .LVU2032
 6123 01b4 84F815A0 		strb	r10, [r4, #21]
3581:./FW/ff.c     ****             }
 6124              		.loc 1 3581 71 is_stmt 1 discriminator 1 view .LVU2033
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 242


 6125 01b8 CDF800A0 		str	r10, [sp]
 6126              	.LVL724:
3581:./FW/ff.c     ****             }
 6127              		.loc 1 3581 71 is_stmt 0 discriminator 1 view .LVU2034
 6128 01bc E0E7     		b	.L438
 6129              	.LVL725:
 6130              	.L460:
3525:./FW/ff.c     ****     remain = fp->obj.objsize - fp->fptr;
 6131              		.loc 1 3525 34 view .LVU2035
 6132 01be 0723     		movs	r3, #7
 6133 01c0 0093     		str	r3, [sp]
 6134              	.LVL726:
3525:./FW/ff.c     ****     remain = fp->obj.objsize - fp->fptr;
 6135              		.loc 1 3525 34 view .LVU2036
 6136 01c2 DDE7     		b	.L438
 6137              		.cfi_endproc
 6138              	.LFE979:
 6140              		.section	.text.f_write,"ax",%progbits
 6141              		.align	1
 6142              		.global	f_write
 6143              		.syntax unified
 6144              		.thumb
 6145              		.thumb_func
 6146              		.fpu fpv4-sp-d16
 6148              	f_write:
 6149              	.LVL727:
 6150              	.LFB980:
3612:./FW/ff.c     ****     FRESULT res;
 6151              		.loc 1 3612 3 is_stmt 1 view -0
 6152              		.cfi_startproc
 6153              		@ args = 0, pretend = 0, frame = 16
 6154              		@ frame_needed = 0, uses_anonymous_args = 0
3612:./FW/ff.c     ****     FRESULT res;
 6155              		.loc 1 3612 3 is_stmt 0 view .LVU2038
 6156 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6157              	.LCFI57:
 6158              		.cfi_def_cfa_offset 36
 6159              		.cfi_offset 4, -36
 6160              		.cfi_offset 5, -32
 6161              		.cfi_offset 6, -28
 6162              		.cfi_offset 7, -24
 6163              		.cfi_offset 8, -20
 6164              		.cfi_offset 9, -16
 6165              		.cfi_offset 10, -12
 6166              		.cfi_offset 11, -8
 6167              		.cfi_offset 14, -4
 6168 0004 85B0     		sub	sp, sp, #20
 6169              	.LCFI58:
 6170              		.cfi_def_cfa_offset 56
 6171 0006 0446     		mov	r4, r0
 6172 0008 0E46     		mov	r6, r1
 6173 000a 1546     		mov	r5, r2
 6174 000c 9846     		mov	r8, r3
3613:./FW/ff.c     ****     FATFS *fs;
 6175              		.loc 1 3613 5 is_stmt 1 view .LVU2039
3614:./FW/ff.c     ****     DWORD clst, sect;
 6176              		.loc 1 3614 5 view .LVU2040
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 243


3615:./FW/ff.c     ****     UINT wcnt, cc, csect;
 6177              		.loc 1 3615 5 view .LVU2041
3616:./FW/ff.c     ****     const BYTE *wbuff = (const BYTE*)buff;
 6178              		.loc 1 3616 5 view .LVU2042
3617:./FW/ff.c     **** 
 6179              		.loc 1 3617 5 view .LVU2043
 6180              	.LVL728:
3620:./FW/ff.c     ****     res = validate(&fp->obj, &fs);          /* Check validity of the file object */
 6181              		.loc 1 3620 5 view .LVU2044
3620:./FW/ff.c     ****     res = validate(&fp->obj, &fs);          /* Check validity of the file object */
 6182              		.loc 1 3620 9 is_stmt 0 view .LVU2045
 6183 000e 0023     		movs	r3, #0
 6184              	.LVL729:
3620:./FW/ff.c     ****     res = validate(&fp->obj, &fs);          /* Check validity of the file object */
 6185              		.loc 1 3620 9 view .LVU2046
 6186 0010 C8F80030 		str	r3, [r8]
3621:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
 6187              		.loc 1 3621 5 is_stmt 1 view .LVU2047
3621:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
 6188              		.loc 1 3621 11 is_stmt 0 view .LVU2048
 6189 0014 0190     		str	r0, [sp, #4]
 6190 0016 03A9     		add	r1, sp, #12
 6191              	.LVL730:
3621:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }   /* Check validi
 6192              		.loc 1 3621 11 view .LVU2049
 6193 0018 FFF7FEFF 		bl	validate
 6194              	.LVL731:
3622:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 6195              		.loc 1 3622 5 is_stmt 1 view .LVU2050
3622:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 6196              		.loc 1 3622 8 is_stmt 0 view .LVU2051
 6197 001c 0090     		str	r0, [sp]
 6198 001e 0028     		cmp	r0, #0
 6199 0020 4AD1     		bne	.L474
3622:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 6200              		.loc 1 3622 30 discriminator 2 view .LVU2052
 6201 0022 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 6202 0024 0093     		str	r3, [sp]
 6203              	.LVL732:
3622:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 6204              		.loc 1 3622 22 discriminator 2 view .LVU2053
 6205 0026 002B     		cmp	r3, #0
 6206 0028 46D1     		bne	.L474
3623:./FW/ff.c     **** 
 6207              		.loc 1 3623 5 is_stmt 1 view .LVU2054
3623:./FW/ff.c     **** 
 6208              		.loc 1 3623 13 is_stmt 0 view .LVU2055
 6209 002a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6210              	.LVL733:
3623:./FW/ff.c     **** 
 6211              		.loc 1 3623 8 view .LVU2056
 6212 002c 13F0020F 		tst	r3, #2
 6213 0030 00F0E380 		beq	.L496
3626:./FW/ff.c     ****         btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 6214              		.loc 1 3626 5 is_stmt 1 view .LVU2057
3626:./FW/ff.c     ****         btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 6215              		.loc 1 3626 62 is_stmt 0 view .LVU2058
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 244


 6216 0034 A369     		ldr	r3, [r4, #24]
3626:./FW/ff.c     ****         btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 6217              		.loc 1 3626 8 view .LVU2059
 6218 0036 EB42     		cmn	r3, r5
 6219 0038 C0F0B180 		bcc	.L494
3627:./FW/ff.c     ****     }
 6220              		.loc 1 3627 9 is_stmt 1 view .LVU2060
3627:./FW/ff.c     ****     }
 6221              		.loc 1 3627 13 is_stmt 0 view .LVU2061
 6222 003c DD43     		mvns	r5, r3
 6223              	.LVL734:
3627:./FW/ff.c     ****     }
 6224              		.loc 1 3627 13 view .LVU2062
 6225 003e AEE0     		b	.L494
 6226              	.LVL735:
 6227              	.L478:
3642:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
 6228              		.loc 1 3642 21 is_stmt 1 view .LVU2063
3642:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
 6229              		.loc 1 3642 27 is_stmt 0 view .LVU2064
 6230 0040 E36A     		ldr	r3, [r4, #44]
3642:./FW/ff.c     ****                         clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
 6231              		.loc 1 3642 24 view .LVU2065
 6232 0042 002B     		cmp	r3, #0
 6233 0044 3CD0     		beq	.L480
3643:./FW/ff.c     ****                     } else
 6234              		.loc 1 3643 25 is_stmt 1 view .LVU2066
3643:./FW/ff.c     ****                     } else
 6235              		.loc 1 3643 32 is_stmt 0 view .LVU2067
 6236 0046 2046     		mov	r0, r4
 6237 0048 FFF7FEFF 		bl	clmt_clust
 6238              	.LVL736:
 6239              	.L479:
3650:./FW/ff.c     ****                 if (clst == 1) { ABORT(fs, FR_INT_ERR); }
 6240              		.loc 1 3650 17 is_stmt 1 view .LVU2068
3650:./FW/ff.c     ****                 if (clst == 1) { ABORT(fs, FR_INT_ERR); }
 6241              		.loc 1 3650 20 is_stmt 0 view .LVU2069
 6242 004c 0028     		cmp	r0, #0
 6243 004e 00F0CF80 		beq	.L481
3651:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6244              		.loc 1 3651 17 is_stmt 1 view .LVU2070
3651:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6245              		.loc 1 3651 20 is_stmt 0 view .LVU2071
 6246 0052 0128     		cmp	r0, #1
 6247 0054 39D0     		beq	.L499
3651:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6248              		.loc 1 3651 55 is_stmt 1 discriminator 2 view .LVU2072
3652:./FW/ff.c     ****                 fp->clust = clst;           /* Update current cluster */
 6249              		.loc 1 3652 17 discriminator 2 view .LVU2073
3652:./FW/ff.c     ****                 fp->clust = clst;           /* Update current cluster */
 6250              		.loc 1 3652 20 is_stmt 0 discriminator 2 view .LVU2074
 6251 0056 B0F1FF3F 		cmp	r0, #-1
 6252 005a 3DD0     		beq	.L500
3652:./FW/ff.c     ****                 fp->clust = clst;           /* Update current cluster */
 6253              		.loc 1 3652 65 is_stmt 1 discriminator 2 view .LVU2075
3653:./FW/ff.c     ****                 if (fp->obj.sclust == 0) { fp->obj.sclust = clst; } /* Set start cluster if the fir
 6254              		.loc 1 3653 17 discriminator 2 view .LVU2076
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 245


3653:./FW/ff.c     ****                 if (fp->obj.sclust == 0) { fp->obj.sclust = clst; } /* Set start cluster if the fir
 6255              		.loc 1 3653 27 is_stmt 0 discriminator 2 view .LVU2077
 6256 005c E061     		str	r0, [r4, #28]
3654:./FW/ff.c     ****             }
 6257              		.loc 1 3654 17 is_stmt 1 discriminator 2 view .LVU2078
3654:./FW/ff.c     ****             }
 6258              		.loc 1 3654 28 is_stmt 0 discriminator 2 view .LVU2079
 6259 005e A368     		ldr	r3, [r4, #8]
3654:./FW/ff.c     ****             }
 6260              		.loc 1 3654 20 discriminator 2 view .LVU2080
 6261 0060 03B9     		cbnz	r3, .L477
3654:./FW/ff.c     ****             }
 6262              		.loc 1 3654 44 is_stmt 1 discriminator 1 view .LVU2081
3654:./FW/ff.c     ****             }
 6263              		.loc 1 3654 59 is_stmt 0 discriminator 1 view .LVU2082
 6264 0062 A060     		str	r0, [r4, #8]
 6265              	.LVL737:
 6266              	.L477:
3659:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
 6267              		.loc 1 3659 13 is_stmt 1 view .LVU2083
3659:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
 6268              		.loc 1 3659 17 is_stmt 0 view .LVU2084
 6269 0064 94F91430 		ldrsb	r3, [r4, #20]
3659:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
 6270              		.loc 1 3659 16 view .LVU2085
 6271 0068 002B     		cmp	r3, #0
 6272 006a 3CDB     		blt	.L501
 6273              	.L484:
3664:./FW/ff.c     ****             if (!sect) { ABORT(fs, FR_INT_ERR); }
 6274              		.loc 1 3664 13 is_stmt 1 view .LVU2086
3664:./FW/ff.c     ****             if (!sect) { ABORT(fs, FR_INT_ERR); }
 6275              		.loc 1 3664 20 is_stmt 0 view .LVU2087
 6276 006c DDF80CB0 		ldr	fp, [sp, #12]
 6277 0070 E169     		ldr	r1, [r4, #28]
 6278 0072 5846     		mov	r0, fp
 6279 0074 FFF7FEFF 		bl	clust2sect
 6280              	.LVL738:
3665:./FW/ff.c     ****             sect += csect;
 6281              		.loc 1 3665 13 is_stmt 1 view .LVU2088
3665:./FW/ff.c     ****             sect += csect;
 6282              		.loc 1 3665 16 is_stmt 0 view .LVU2089
 6283 0078 8146     		mov	r9, r0
 6284 007a 0028     		cmp	r0, #0
 6285 007c 48D0     		beq	.L502
3665:./FW/ff.c     ****             sect += csect;
 6286              		.loc 1 3665 47 is_stmt 1 discriminator 2 view .LVU2090
3666:./FW/ff.c     ****             cc = btw / SS(fs);              /* When remaining bytes >= sector size, */
 6287              		.loc 1 3666 13 discriminator 2 view .LVU2091
3666:./FW/ff.c     ****             cc = btw / SS(fs);              /* When remaining bytes >= sector size, */
 6288              		.loc 1 3666 18 is_stmt 0 discriminator 2 view .LVU2092
 6289 007e B944     		add	r9, r9, r7
 6290              	.LVL739:
3667:./FW/ff.c     ****             if (cc) {                       /* Write maximum contiguous sectors directly */
 6291              		.loc 1 3667 13 is_stmt 1 discriminator 2 view .LVU2093
3667:./FW/ff.c     ****             if (cc) {                       /* Write maximum contiguous sectors directly */
 6292              		.loc 1 3667 16 is_stmt 0 discriminator 2 view .LVU2094
 6293 0080 4FEA552A 		lsr	r10, r5, #9
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 246


 6294              	.LVL740:
3668:./FW/ff.c     ****                 if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
 6295              		.loc 1 3668 13 is_stmt 1 discriminator 2 view .LVU2095
3668:./FW/ff.c     ****                 if (csect + cc > fs->csize) {   /* Clip at cluster boundary */
 6296              		.loc 1 3668 16 is_stmt 0 discriminator 2 view .LVU2096
 6297 0084 B5F5007F 		cmp	r5, #512
 6298 0088 5ED3     		bcc	.L487
3669:./FW/ff.c     ****                     cc = fs->csize - csect;
 6299              		.loc 1 3669 17 is_stmt 1 view .LVU2097
3669:./FW/ff.c     ****                     cc = fs->csize - csect;
 6300              		.loc 1 3669 27 is_stmt 0 view .LVU2098
 6301 008a 07EB0A03 		add	r3, r7, r10
3669:./FW/ff.c     ****                     cc = fs->csize - csect;
 6302              		.loc 1 3669 36 view .LVU2099
 6303 008e BBF80A20 		ldrh	r2, [fp, #10]
3669:./FW/ff.c     ****                     cc = fs->csize - csect;
 6304              		.loc 1 3669 20 view .LVU2100
 6305 0092 9342     		cmp	r3, r2
 6306 0094 01D9     		bls	.L488
3670:./FW/ff.c     ****                 }
 6307              		.loc 1 3670 21 is_stmt 1 view .LVU2101
3670:./FW/ff.c     ****                 }
 6308              		.loc 1 3670 24 is_stmt 0 view .LVU2102
 6309 0096 A2EB070A 		sub	r10, r2, r7
 6310              	.LVL741:
 6311              	.L488:
3672:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
 6312              		.loc 1 3672 17 is_stmt 1 view .LVU2103
3672:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
 6313              		.loc 1 3672 21 is_stmt 0 view .LVU2104
 6314 009a 5346     		mov	r3, r10
 6315 009c 4A46     		mov	r2, r9
 6316 009e 3146     		mov	r1, r6
 6317 00a0 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 6318 00a4 FFF7FEFF 		bl	disk_write
 6319              	.LVL742:
3672:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
 6320              		.loc 1 3672 20 view .LVU2105
 6321 00a8 0028     		cmp	r0, #0
 6322 00aa 38D0     		beq	.L489
3672:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
 6323              		.loc 1 3672 71 is_stmt 1 discriminator 1 view .LVU2106
 6324 00ac 4FF0010A 		mov	r10, #1
 6325              	.LVL743:
3672:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
 6326              		.loc 1 3672 71 is_stmt 0 discriminator 1 view .LVU2107
 6327 00b0 84F815A0 		strb	r10, [r4, #21]
3672:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
 6328              		.loc 1 3672 71 is_stmt 1 discriminator 1 view .LVU2108
 6329 00b4 CDF800A0 		str	r10, [sp]
 6330              	.LVL744:
 6331              	.L474:
3718:./FW/ff.c     **** 
 6332              		.loc 1 3718 1 is_stmt 0 view .LVU2109
 6333 00b8 0098     		ldr	r0, [sp]
 6334 00ba 05B0     		add	sp, sp, #20
 6335              	.LCFI59:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 247


 6336              		.cfi_remember_state
 6337              		.cfi_def_cfa_offset 36
 6338              		@ sp needed
 6339 00bc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6340              	.LVL745:
 6341              	.L480:
 6342              	.LCFI60:
 6343              		.cfi_restore_state
3647:./FW/ff.c     ****                     }
 6344              		.loc 1 3647 25 is_stmt 1 view .LVU2110
3647:./FW/ff.c     ****                     }
 6345              		.loc 1 3647 32 is_stmt 0 view .LVU2111
 6346 00c0 E169     		ldr	r1, [r4, #28]
 6347 00c2 0198     		ldr	r0, [sp, #4]
 6348 00c4 FFF7FEFF 		bl	create_chain
 6349              	.LVL746:
3647:./FW/ff.c     ****                     }
 6350              		.loc 1 3647 32 view .LVU2112
 6351 00c8 C0E7     		b	.L479
 6352              	.L499:
3651:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6353              		.loc 1 3651 34 is_stmt 1 discriminator 1 view .LVU2113
 6354 00ca 4FF0020A 		mov	r10, #2
 6355 00ce 84F815A0 		strb	r10, [r4, #21]
3651:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6356              		.loc 1 3651 34 discriminator 1 view .LVU2114
 6357 00d2 CDF800A0 		str	r10, [sp]
 6358              	.LVL747:
3651:./FW/ff.c     ****                 if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 6359              		.loc 1 3651 34 is_stmt 0 discriminator 1 view .LVU2115
 6360 00d6 EFE7     		b	.L474
 6361              	.LVL748:
 6362              	.L500:
3652:./FW/ff.c     ****                 fp->clust = clst;           /* Update current cluster */
 6363              		.loc 1 3652 43 is_stmt 1 discriminator 1 view .LVU2116
 6364 00d8 4FF0010A 		mov	r10, #1
 6365 00dc 84F815A0 		strb	r10, [r4, #21]
3652:./FW/ff.c     ****                 fp->clust = clst;           /* Update current cluster */
 6366              		.loc 1 3652 43 discriminator 1 view .LVU2117
 6367 00e0 CDF800A0 		str	r10, [sp]
 6368              	.LVL749:
3652:./FW/ff.c     ****                 fp->clust = clst;           /* Update current cluster */
 6369              		.loc 1 3652 43 is_stmt 0 discriminator 1 view .LVU2118
 6370 00e4 E8E7     		b	.L474
 6371              	.LVL750:
 6372              	.L501:
3660:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6373              		.loc 1 3660 17 is_stmt 1 view .LVU2119
3660:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6374              		.loc 1 3660 21 is_stmt 0 view .LVU2120
 6375 00e6 0123     		movs	r3, #1
 6376 00e8 226A     		ldr	r2, [r4, #32]
 6377 00ea 04F13001 		add	r1, r4, #48
 6378 00ee 0398     		ldr	r0, [sp, #12]
 6379 00f0 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6380 00f2 FFF7FEFF 		bl	disk_write
 6381              	.LVL751:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 248


3660:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6382              		.loc 1 3660 20 view .LVU2121
 6383 00f6 20B9     		cbnz	r0, .L503
3660:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6384              		.loc 1 3660 98 is_stmt 1 discriminator 2 view .LVU2122
3661:./FW/ff.c     ****             }
 6385              		.loc 1 3661 17 discriminator 2 view .LVU2123
3661:./FW/ff.c     ****             }
 6386              		.loc 1 3661 26 is_stmt 0 discriminator 2 view .LVU2124
 6387 00f8 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6388 00fa 03F07F03 		and	r3, r3, #127
 6389 00fe 2375     		strb	r3, [r4, #20]
 6390 0100 B4E7     		b	.L484
 6391              	.L503:
3660:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6392              		.loc 1 3660 76 is_stmt 1 discriminator 1 view .LVU2125
 6393 0102 4FF0010A 		mov	r10, #1
 6394 0106 84F815A0 		strb	r10, [r4, #21]
3660:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6395              		.loc 1 3660 76 discriminator 1 view .LVU2126
 6396 010a CDF800A0 		str	r10, [sp]
 6397              	.LVL752:
3660:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6398              		.loc 1 3660 76 is_stmt 0 discriminator 1 view .LVU2127
 6399 010e D3E7     		b	.L474
 6400              	.LVL753:
 6401              	.L502:
3665:./FW/ff.c     ****             sect += csect;
 6402              		.loc 1 3665 26 is_stmt 1 discriminator 1 view .LVU2128
 6403 0110 4FF0020A 		mov	r10, #2
 6404 0114 84F815A0 		strb	r10, [r4, #21]
3665:./FW/ff.c     ****             sect += csect;
 6405              		.loc 1 3665 26 discriminator 1 view .LVU2129
 6406 0118 CDF800A0 		str	r10, [sp]
 6407              	.LVL754:
3665:./FW/ff.c     ****             sect += csect;
 6408              		.loc 1 3665 26 is_stmt 0 discriminator 1 view .LVU2130
 6409 011c CCE7     		b	.L474
 6410              	.LVL755:
 6411              	.L489:
3672:./FW/ff.c     **** #if _FS_MINIMIZE <= 2
 6412              		.loc 1 3672 93 is_stmt 1 discriminator 2 view .LVU2131
3680:./FW/ff.c     ****                     mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 6413              		.loc 1 3680 17 discriminator 2 view .LVU2132
3680:./FW/ff.c     ****                     mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 6414              		.loc 1 3680 23 is_stmt 0 discriminator 2 view .LVU2133
 6415 011e 216A     		ldr	r1, [r4, #32]
3680:./FW/ff.c     ****                     mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 6416              		.loc 1 3680 30 discriminator 2 view .LVU2134
 6417 0120 A1EB0901 		sub	r1, r1, r9
3680:./FW/ff.c     ****                     mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 6418              		.loc 1 3680 20 discriminator 2 view .LVU2135
 6419 0124 5145     		cmp	r1, r10
 6420 0126 02D3     		bcc	.L504
 6421              	.L490:
3686:./FW/ff.c     ****                 continue;
 6422              		.loc 1 3686 17 is_stmt 1 view .LVU2136
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 249


3686:./FW/ff.c     ****                 continue;
 6423              		.loc 1 3686 22 is_stmt 0 view .LVU2137
 6424 0128 4FEA4A27 		lsl	r7, r10, #9
 6425              	.LVL756:
3687:./FW/ff.c     ****             }
 6426              		.loc 1 3687 17 is_stmt 1 view .LVU2138
 6427 012c 28E0     		b	.L491
 6428              	.LVL757:
 6429              	.L504:
3681:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_DIRTY;
 6430              		.loc 1 3681 21 view .LVU2139
 6431 012e 4FF40072 		mov	r2, #512
 6432 0132 06EB4121 		add	r1, r6, r1, lsl #9
 6433 0136 04F13000 		add	r0, r4, #48
 6434 013a FFF7FEFF 		bl	mem_cpy
 6435              	.LVL758:
3682:./FW/ff.c     ****                 }
 6436              		.loc 1 3682 21 view .LVU2140
3682:./FW/ff.c     ****                 }
 6437              		.loc 1 3682 30 is_stmt 0 view .LVU2141
 6438 013e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6439 0140 03F07F03 		and	r3, r3, #127
 6440 0144 2375     		strb	r3, [r4, #20]
 6441 0146 EFE7     		b	.L490
 6442              	.L487:
3695:./FW/ff.c     ****                     fp->fptr < fp->obj.objsize &&
 6443              		.loc 1 3695 13 is_stmt 1 view .LVU2142
3695:./FW/ff.c     ****                     fp->fptr < fp->obj.objsize &&
 6444              		.loc 1 3695 19 is_stmt 0 view .LVU2143
 6445 0148 236A     		ldr	r3, [r4, #32]
3695:./FW/ff.c     ****                     fp->fptr < fp->obj.objsize &&
 6446              		.loc 1 3695 16 view .LVU2144
 6447 014a 4B45     		cmp	r3, r9
 6448 014c 03D0     		beq	.L492
3696:./FW/ff.c     ****                     disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 6449              		.loc 1 3696 23 discriminator 1 view .LVU2145
 6450 014e A269     		ldr	r2, [r4, #24]
3696:./FW/ff.c     ****                     disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 6451              		.loc 1 3696 39 discriminator 1 view .LVU2146
 6452 0150 E368     		ldr	r3, [r4, #12]
3695:./FW/ff.c     ****                     fp->fptr < fp->obj.objsize &&
 6453              		.loc 1 3695 34 discriminator 1 view .LVU2147
 6454 0152 9A42     		cmp	r2, r3
 6455 0154 3BD3     		bcc	.L505
 6456              	.L492:
3698:./FW/ff.c     ****             }
 6457              		.loc 1 3698 39 is_stmt 1 view .LVU2148
3701:./FW/ff.c     ****         }
 6458              		.loc 1 3701 13 view .LVU2149
3701:./FW/ff.c     ****         }
 6459              		.loc 1 3701 22 is_stmt 0 view .LVU2150
 6460 0156 C4F82090 		str	r9, [r4, #32]
 6461              	.LVL759:
 6462              	.L476:
3703:./FW/ff.c     ****         if (wcnt > btw) { wcnt = btw; }                 /* Clip it by btw if needed */
 6463              		.loc 1 3703 9 is_stmt 1 view .LVU2151
3703:./FW/ff.c     ****         if (wcnt > btw) { wcnt = btw; }                 /* Clip it by btw if needed */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 250


 6464              		.loc 1 3703 33 is_stmt 0 view .LVU2152
 6465 015a A369     		ldr	r3, [r4, #24]
3703:./FW/ff.c     ****         if (wcnt > btw) { wcnt = btw; }                 /* Clip it by btw if needed */
 6466              		.loc 1 3703 40 view .LVU2153
 6467 015c C3F30803 		ubfx	r3, r3, #0, #9
3703:./FW/ff.c     ****         if (wcnt > btw) { wcnt = btw; }                 /* Clip it by btw if needed */
 6468              		.loc 1 3703 14 view .LVU2154
 6469 0160 C3F50077 		rsb	r7, r3, #512
 6470              	.LVL760:
3704:./FW/ff.c     **** #if _FS_TINY
 6471              		.loc 1 3704 9 is_stmt 1 view .LVU2155
3704:./FW/ff.c     **** #if _FS_TINY
 6472              		.loc 1 3704 12 is_stmt 0 view .LVU2156
 6473 0164 BD42     		cmp	r5, r7
 6474 0166 00D2     		bcs	.L493
3704:./FW/ff.c     **** #if _FS_TINY
 6475              		.loc 1 3704 32 view .LVU2157
 6476 0168 2F46     		mov	r7, r5
 6477              	.LVL761:
 6478              	.L493:
3710:./FW/ff.c     ****         fp->flag |= FA_DIRTY;
 6479              		.loc 1 3710 9 is_stmt 1 view .LVU2158
3710:./FW/ff.c     ****         fp->flag |= FA_DIRTY;
 6480              		.loc 1 3710 17 is_stmt 0 view .LVU2159
 6481 016a 04F13000 		add	r0, r4, #48
3710:./FW/ff.c     ****         fp->flag |= FA_DIRTY;
 6482              		.loc 1 3710 9 view .LVU2160
 6483 016e 3A46     		mov	r2, r7
 6484 0170 3146     		mov	r1, r6
 6485 0172 1844     		add	r0, r0, r3
 6486 0174 FFF7FEFF 		bl	mem_cpy
 6487              	.LVL762:
3711:./FW/ff.c     **** #endif
 6488              		.loc 1 3711 9 is_stmt 1 view .LVU2161
3711:./FW/ff.c     **** #endif
 6489              		.loc 1 3711 18 is_stmt 0 view .LVU2162
 6490 0178 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6491 017a 63F07F03 		orn	r3, r3, #127
 6492 017e 2375     		strb	r3, [r4, #20]
 6493              	.L491:
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6494              		.loc 1 3631 13 is_stmt 1 view .LVU2163
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6495              		.loc 1 3631 19 is_stmt 0 view .LVU2164
 6496 0180 3E44     		add	r6, r6, r7
 6497              	.LVL763:
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6498              		.loc 1 3631 37 view .LVU2165
 6499 0182 A369     		ldr	r3, [r4, #24]
 6500 0184 3B44     		add	r3, r3, r7
 6501 0186 A361     		str	r3, [r4, #24]
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6502              		.loc 1 3631 83 view .LVU2166
 6503 0188 E268     		ldr	r2, [r4, #12]
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6504              		.loc 1 3631 104 view .LVU2167
 6505 018a 9342     		cmp	r3, r2
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 251


 6506 018c 38BF     		it	cc
 6507 018e 1346     		movcc	r3, r2
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6508              		.loc 1 3631 62 view .LVU2168
 6509 0190 E360     		str	r3, [r4, #12]
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6510              		.loc 1 3631 127 view .LVU2169
 6511 0192 D8F80030 		ldr	r3, [r8]
 6512 0196 3B44     		add	r3, r3, r7
 6513 0198 C8F80030 		str	r3, [r8]
3631:./FW/ff.c     ****         if (fp->fptr % SS(fs) == 0) {       /* On the sector boundary? */
 6514              		.loc 1 3631 140 view .LVU2170
 6515 019c ED1B     		subs	r5, r5, r7
 6516              	.LVL764:
 6517              	.L494:
3630:./FW/ff.c     ****             wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->f
 6518              		.loc 1 3630 14 is_stmt 1 view .LVU2171
3630:./FW/ff.c     ****             wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->f
 6519              		.loc 1 3630 5 is_stmt 0 view .LVU2172
 6520 019e 3DB3     		cbz	r5, .L481
3632:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);    /* Sector offset in the cluster
 6521              		.loc 1 3632 9 is_stmt 1 view .LVU2173
3632:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);    /* Sector offset in the cluster
 6522              		.loc 1 3632 15 is_stmt 0 view .LVU2174
 6523 01a0 A169     		ldr	r1, [r4, #24]
3632:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);    /* Sector offset in the cluster
 6524              		.loc 1 3632 22 view .LVU2175
 6525 01a2 C1F30803 		ubfx	r3, r1, #0, #9
3632:./FW/ff.c     ****             csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);    /* Sector offset in the cluster
 6526              		.loc 1 3632 12 view .LVU2176
 6527 01a6 002B     		cmp	r3, #0
 6528 01a8 D7D1     		bne	.L476
3633:./FW/ff.c     ****             if (csect == 0) {               /* On the cluster boundary? */
 6529              		.loc 1 3633 13 is_stmt 1 view .LVU2177
3633:./FW/ff.c     ****             if (csect == 0) {               /* On the cluster boundary? */
 6530              		.loc 1 3633 52 is_stmt 0 view .LVU2178
 6531 01aa 039B     		ldr	r3, [sp, #12]
 6532 01ac 5F89     		ldrh	r7, [r3, #10]
3633:./FW/ff.c     ****             if (csect == 0) {               /* On the cluster boundary? */
 6533              		.loc 1 3633 60 view .LVU2179
 6534 01ae 013F     		subs	r7, r7, #1
 6535              	.LVL765:
3634:./FW/ff.c     ****                 if (fp->fptr == 0) {        /* On the top of the file? */
 6536              		.loc 1 3634 13 is_stmt 1 view .LVU2180
3634:./FW/ff.c     ****                 if (fp->fptr == 0) {        /* On the top of the file? */
 6537              		.loc 1 3634 16 is_stmt 0 view .LVU2181
 6538 01b0 17EA5127 		ands	r7, r7, r1, lsr #9
 6539              	.LVL766:
3634:./FW/ff.c     ****                 if (fp->fptr == 0) {        /* On the top of the file? */
 6540              		.loc 1 3634 16 view .LVU2182
 6541 01b4 7FF456AF 		bne	.L477
3635:./FW/ff.c     ****                     clst = fp->obj.sclust;  /* Follow from the origin */
 6542              		.loc 1 3635 17 is_stmt 1 view .LVU2183
3635:./FW/ff.c     ****                     clst = fp->obj.sclust;  /* Follow from the origin */
 6543              		.loc 1 3635 20 is_stmt 0 view .LVU2184
 6544 01b8 0029     		cmp	r1, #0
 6545 01ba 7FF441AF 		bne	.L478
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 252


3636:./FW/ff.c     ****                     if (clst == 0) {        /* If no cluster is allocated, */
 6546              		.loc 1 3636 21 is_stmt 1 view .LVU2185
3636:./FW/ff.c     ****                     if (clst == 0) {        /* If no cluster is allocated, */
 6547              		.loc 1 3636 26 is_stmt 0 view .LVU2186
 6548 01be A068     		ldr	r0, [r4, #8]
 6549              	.LVL767:
3637:./FW/ff.c     ****                         clst = create_chain(&fp->obj, 0);   /* create a new cluster chain */
 6550              		.loc 1 3637 21 is_stmt 1 view .LVU2187
3637:./FW/ff.c     ****                         clst = create_chain(&fp->obj, 0);   /* create a new cluster chain */
 6551              		.loc 1 3637 24 is_stmt 0 view .LVU2188
 6552 01c0 0028     		cmp	r0, #0
 6553 01c2 7FF443AF 		bne	.L479
3638:./FW/ff.c     ****                     }
 6554              		.loc 1 3638 25 is_stmt 1 view .LVU2189
3638:./FW/ff.c     ****                     }
 6555              		.loc 1 3638 32 is_stmt 0 view .LVU2190
 6556 01c6 0198     		ldr	r0, [sp, #4]
 6557              	.LVL768:
3638:./FW/ff.c     ****                     }
 6558              		.loc 1 3638 32 view .LVU2191
 6559 01c8 FFF7FEFF 		bl	create_chain
 6560              	.LVL769:
3638:./FW/ff.c     ****                     }
 6561              		.loc 1 3638 32 view .LVU2192
 6562 01cc 3EE7     		b	.L479
 6563              	.LVL770:
 6564              	.L505:
3697:./FW/ff.c     ****                 ABORT(fs, FR_DISK_ERR);
 6565              		.loc 1 3697 21 view .LVU2193
 6566 01ce 0123     		movs	r3, #1
 6567 01d0 4A46     		mov	r2, r9
 6568 01d2 04F13001 		add	r1, r4, #48
 6569 01d6 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 6570 01da FFF7FEFF 		bl	disk_read
 6571              	.LVL771:
3696:./FW/ff.c     ****                     disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 6572              		.loc 1 3696 48 view .LVU2194
 6573 01de 0028     		cmp	r0, #0
 6574 01e0 B9D0     		beq	.L492
3698:./FW/ff.c     ****             }
 6575              		.loc 1 3698 17 is_stmt 1 view .LVU2195
 6576 01e2 4FF0010A 		mov	r10, #1
 6577              	.LVL772:
3698:./FW/ff.c     ****             }
 6578              		.loc 1 3698 17 is_stmt 0 view .LVU2196
 6579 01e6 84F815A0 		strb	r10, [r4, #21]
3698:./FW/ff.c     ****             }
 6580              		.loc 1 3698 17 is_stmt 1 view .LVU2197
 6581 01ea CDF800A0 		str	r10, [sp]
 6582              	.LVL773:
3698:./FW/ff.c     ****             }
 6583              		.loc 1 3698 17 is_stmt 0 view .LVU2198
 6584 01ee 63E7     		b	.L474
 6585              	.LVL774:
 6586              	.L481:
3715:./FW/ff.c     **** 
 6587              		.loc 1 3715 5 is_stmt 1 view .LVU2199
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 253


3715:./FW/ff.c     **** 
 6588              		.loc 1 3715 14 is_stmt 0 view .LVU2200
 6589 01f0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6590 01f2 43F04003 		orr	r3, r3, #64
 6591 01f6 2375     		strb	r3, [r4, #20]
3717:./FW/ff.c     **** }
 6592              		.loc 1 3717 5 is_stmt 1 view .LVU2201
 6593 01f8 5EE7     		b	.L474
 6594              	.LVL775:
 6595              	.L496:
3623:./FW/ff.c     **** 
 6596              		.loc 1 3623 35 is_stmt 0 view .LVU2202
 6597 01fa 0723     		movs	r3, #7
 6598 01fc 0093     		str	r3, [sp]
 6599              	.LVL776:
3623:./FW/ff.c     **** 
 6600              		.loc 1 3623 35 view .LVU2203
 6601 01fe 5BE7     		b	.L474
 6602              		.cfi_endproc
 6603              	.LFE980:
 6605              		.section	.text.putc_bfd,"ax",%progbits
 6606              		.align	1
 6607              		.syntax unified
 6608              		.thumb
 6609              		.thumb_func
 6610              		.fpu fpv4-sp-d16
 6612              	putc_bfd:
 6613              	.LVL777:
 6614              	.LFB995:
5947:./FW/ff.c     ****     UINT bw;
 6615              		.loc 1 5947 3 is_stmt 1 view -0
 6616              		.cfi_startproc
 6617              		@ args = 0, pretend = 0, frame = 8
 6618              		@ frame_needed = 0, uses_anonymous_args = 0
5947:./FW/ff.c     ****     UINT bw;
 6619              		.loc 1 5947 3 is_stmt 0 view .LVU2205
 6620 0000 70B5     		push	{r4, r5, r6, lr}
 6621              	.LCFI61:
 6622              		.cfi_def_cfa_offset 16
 6623              		.cfi_offset 4, -16
 6624              		.cfi_offset 5, -12
 6625              		.cfi_offset 6, -8
 6626              		.cfi_offset 14, -4
 6627 0002 82B0     		sub	sp, sp, #8
 6628              	.LCFI62:
 6629              		.cfi_def_cfa_offset 24
 6630 0004 0446     		mov	r4, r0
 6631 0006 0D46     		mov	r5, r1
5948:./FW/ff.c     ****     int i;
 6632              		.loc 1 5948 5 is_stmt 1 view .LVU2206
5949:./FW/ff.c     **** 
 6633              		.loc 1 5949 5 view .LVU2207
5952:./FW/ff.c     ****         putc_bfd(pb, '\r');
 6634              		.loc 1 5952 5 view .LVU2208
5952:./FW/ff.c     ****         putc_bfd(pb, '\r');
 6635              		.loc 1 5952 8 is_stmt 0 view .LVU2209
 6636 0008 0A29     		cmp	r1, #10
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 254


 6637 000a 0DD0     		beq	.L513
 6638              	.LVL778:
 6639              	.L507:
5956:./FW/ff.c     ****     if (i < 0) { return; }
 6640              		.loc 1 5956 5 is_stmt 1 view .LVU2210
5956:./FW/ff.c     ****     if (i < 0) { return; }
 6641              		.loc 1 5956 7 is_stmt 0 view .LVU2211
 6642 000c 6368     		ldr	r3, [r4, #4]
 6643              	.LVL779:
5957:./FW/ff.c     **** 
 6644              		.loc 1 5957 5 is_stmt 1 view .LVU2212
5957:./FW/ff.c     **** 
 6645              		.loc 1 5957 8 is_stmt 0 view .LVU2213
 6646 000e 002B     		cmp	r3, #0
 6647 0010 08DB     		blt	.L506
5986:./FW/ff.c     **** #endif
 6648              		.loc 1 5986 5 is_stmt 1 view .LVU2214
5986:./FW/ff.c     **** #endif
 6649              		.loc 1 5986 14 is_stmt 0 view .LVU2215
 6650 0012 5E1C     		adds	r6, r3, #1
 6651              	.LVL780:
5986:./FW/ff.c     **** #endif
 6652              		.loc 1 5986 18 view .LVU2216
 6653 0014 2344     		add	r3, r3, r4
 6654 0016 1D73     		strb	r5, [r3, #12]
5989:./FW/ff.c     ****         f_write(pb->fp, pb->buf, (UINT)i, &bw);
 6655              		.loc 1 5989 5 is_stmt 1 view .LVU2217
5989:./FW/ff.c     ****         f_write(pb->fp, pb->buf, (UINT)i, &bw);
 6656              		.loc 1 5989 8 is_stmt 0 view .LVU2218
 6657 0018 3C2E     		cmp	r6, #60
 6658 001a 09DC     		bgt	.L514
 6659              	.LVL781:
 6660              	.L510:
5993:./FW/ff.c     ****     pb->nchr++;
 6661              		.loc 1 5993 5 is_stmt 1 view .LVU2219
5993:./FW/ff.c     ****     pb->nchr++;
 6662              		.loc 1 5993 13 is_stmt 0 view .LVU2220
 6663 001c 6660     		str	r6, [r4, #4]
5994:./FW/ff.c     **** }
 6664              		.loc 1 5994 5 is_stmt 1 view .LVU2221
5994:./FW/ff.c     **** }
 6665              		.loc 1 5994 7 is_stmt 0 view .LVU2222
 6666 001e A368     		ldr	r3, [r4, #8]
5994:./FW/ff.c     **** }
 6667              		.loc 1 5994 13 view .LVU2223
 6668 0020 0133     		adds	r3, r3, #1
 6669 0022 A360     		str	r3, [r4, #8]
 6670              	.LVL782:
 6671              	.L506:
5995:./FW/ff.c     **** 
 6672              		.loc 1 5995 1 view .LVU2224
 6673 0024 02B0     		add	sp, sp, #8
 6674              	.LCFI63:
 6675              		.cfi_remember_state
 6676              		.cfi_def_cfa_offset 16
 6677              		@ sp needed
 6678 0026 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 255


 6679              	.LVL783:
 6680              	.L513:
 6681              	.LCFI64:
 6682              		.cfi_restore_state
5953:./FW/ff.c     ****     }
 6683              		.loc 1 5953 9 is_stmt 1 view .LVU2225
 6684 0028 0D21     		movs	r1, #13
 6685              	.LVL784:
5953:./FW/ff.c     ****     }
 6686              		.loc 1 5953 9 is_stmt 0 view .LVU2226
 6687 002a FFF7E9FF 		bl	putc_bfd
 6688              	.LVL785:
5953:./FW/ff.c     ****     }
 6689              		.loc 1 5953 9 view .LVU2227
 6690 002e EDE7     		b	.L507
 6691              	.LVL786:
 6692              	.L514:
5990:./FW/ff.c     ****         i = (bw == (UINT)i) ? 0 : -1;
 6693              		.loc 1 5990 9 is_stmt 1 view .LVU2228
5990:./FW/ff.c     ****         i = (bw == (UINT)i) ? 0 : -1;
 6694              		.loc 1 5990 27 is_stmt 0 view .LVU2229
 6695 0030 2146     		mov	r1, r4
5990:./FW/ff.c     ****         i = (bw == (UINT)i) ? 0 : -1;
 6696              		.loc 1 5990 9 view .LVU2230
 6697 0032 51F80C0B 		ldr	r0, [r1], #12
 6698 0036 01AB     		add	r3, sp, #4
 6699 0038 3246     		mov	r2, r6
 6700 003a FFF7FEFF 		bl	f_write
 6701              	.LVL787:
5991:./FW/ff.c     ****     }
 6702              		.loc 1 5991 9 is_stmt 1 view .LVU2231
5991:./FW/ff.c     ****     }
 6703              		.loc 1 5991 17 is_stmt 0 view .LVU2232
 6704 003e 019B     		ldr	r3, [sp, #4]
5991:./FW/ff.c     ****     }
 6705              		.loc 1 5991 33 view .LVU2233
 6706 0040 9E42     		cmp	r6, r3
 6707 0042 02D0     		beq	.L515
 6708 0044 4FF0FF36 		mov	r6, #-1
 6709              	.LVL788:
5991:./FW/ff.c     ****     }
 6710              		.loc 1 5991 33 view .LVU2234
 6711 0048 E8E7     		b	.L510
 6712              	.LVL789:
 6713              	.L515:
5991:./FW/ff.c     ****     }
 6714              		.loc 1 5991 33 view .LVU2235
 6715 004a 0026     		movs	r6, #0
 6716              	.LVL790:
5991:./FW/ff.c     ****     }
 6717              		.loc 1 5991 33 view .LVU2236
 6718 004c E6E7     		b	.L510
 6719              		.cfi_endproc
 6720              	.LFE995:
 6722              		.section	.text.putc_flush,"ax",%progbits
 6723              		.align	1
 6724              		.syntax unified
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 256


 6725              		.thumb
 6726              		.thumb_func
 6727              		.fpu fpv4-sp-d16
 6729              	putc_flush:
 6730              	.LVL791:
 6731              	.LFB996:
6001:./FW/ff.c     ****     UINT nw;
 6732              		.loc 1 6001 3 is_stmt 1 view -0
 6733              		.cfi_startproc
 6734              		@ args = 0, pretend = 0, frame = 8
 6735              		@ frame_needed = 0, uses_anonymous_args = 0
6002:./FW/ff.c     **** 
 6736              		.loc 1 6002 5 view .LVU2238
6004:./FW/ff.c     ****             && f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 6737              		.loc 1 6004 5 view .LVU2239
6004:./FW/ff.c     ****             && f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 6738              		.loc 1 6004 14 is_stmt 0 view .LVU2240
 6739 0000 4268     		ldr	r2, [r0, #4]
6004:./FW/ff.c     ****             && f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 6740              		.loc 1 6004 8 view .LVU2241
 6741 0002 002A     		cmp	r2, #0
 6742 0004 10DB     		blt	.L518
6001:./FW/ff.c     ****     UINT nw;
 6743              		.loc 1 6001 3 view .LVU2242
 6744 0006 10B5     		push	{r4, lr}
 6745              	.LCFI65:
 6746              		.cfi_def_cfa_offset 8
 6747              		.cfi_offset 4, -8
 6748              		.cfi_offset 14, -4
 6749 0008 82B0     		sub	sp, sp, #8
 6750              	.LCFI66:
 6751              		.cfi_def_cfa_offset 16
 6752 000a 0446     		mov	r4, r0
6005:./FW/ff.c     ****             && (UINT)pb->idx == nw) { return pb->nchr; }
 6753              		.loc 1 6005 34 view .LVU2243
 6754 000c 0146     		mov	r1, r0
6005:./FW/ff.c     ****             && (UINT)pb->idx == nw) { return pb->nchr; }
 6755              		.loc 1 6005 16 view .LVU2244
 6756 000e 51F80C0B 		ldr	r0, [r1], #12
 6757              	.LVL792:
6005:./FW/ff.c     ****             && (UINT)pb->idx == nw) { return pb->nchr; }
 6758              		.loc 1 6005 16 view .LVU2245
 6759 0012 01AB     		add	r3, sp, #4
 6760 0014 FFF7FEFF 		bl	f_write
 6761              	.LVL793:
6005:./FW/ff.c     ****             && (UINT)pb->idx == nw) { return pb->nchr; }
 6762              		.loc 1 6005 13 view .LVU2246
 6763 0018 48B9     		cbnz	r0, .L519
6006:./FW/ff.c     ****     return EOF;
 6764              		.loc 1 6006 24 view .LVU2247
 6765 001a 6268     		ldr	r2, [r4, #4]
6006:./FW/ff.c     ****     return EOF;
 6766              		.loc 1 6006 30 view .LVU2248
 6767 001c 019B     		ldr	r3, [sp, #4]
6006:./FW/ff.c     ****     return EOF;
 6768              		.loc 1 6006 13 view .LVU2249
 6769 001e 9A42     		cmp	r2, r3
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 257


 6770 0020 08D1     		bne	.L520
6006:./FW/ff.c     ****     return EOF;
 6771              		.loc 1 6006 39 is_stmt 1 discriminator 1 view .LVU2250
6006:./FW/ff.c     ****     return EOF;
 6772              		.loc 1 6006 48 is_stmt 0 discriminator 1 view .LVU2251
 6773 0022 A068     		ldr	r0, [r4, #8]
 6774              	.L516:
6008:./FW/ff.c     **** 
 6775              		.loc 1 6008 1 view .LVU2252
 6776 0024 02B0     		add	sp, sp, #8
 6777              	.LCFI67:
 6778              		.cfi_def_cfa_offset 8
 6779              		@ sp needed
 6780 0026 10BD     		pop	{r4, pc}
 6781              	.LVL794:
 6782              	.L518:
 6783              	.LCFI68:
 6784              		.cfi_def_cfa_offset 0
 6785              		.cfi_restore 4
 6786              		.cfi_restore 14
6007:./FW/ff.c     **** }
 6787              		.loc 1 6007 12 view .LVU2253
 6788 0028 4FF0FF30 		mov	r0, #-1
 6789              	.LVL795:
6008:./FW/ff.c     **** 
 6790              		.loc 1 6008 1 view .LVU2254
 6791 002c 7047     		bx	lr
 6792              	.LVL796:
 6793              	.L519:
 6794              	.LCFI69:
 6795              		.cfi_def_cfa_offset 16
 6796              		.cfi_offset 4, -8
 6797              		.cfi_offset 14, -4
6007:./FW/ff.c     **** }
 6798              		.loc 1 6007 12 view .LVU2255
 6799 002e 4FF0FF30 		mov	r0, #-1
 6800 0032 F7E7     		b	.L516
 6801              	.L520:
 6802 0034 4FF0FF30 		mov	r0, #-1
 6803 0038 F4E7     		b	.L516
 6804              		.cfi_endproc
 6805              	.LFE996:
 6807              		.section	.text.f_sync,"ax",%progbits
 6808              		.align	1
 6809              		.global	f_sync
 6810              		.syntax unified
 6811              		.thumb
 6812              		.thumb_func
 6813              		.fpu fpv4-sp-d16
 6815              	f_sync:
 6816              	.LVL797:
 6817              	.LFB981:
3729:./FW/ff.c     ****     FRESULT res;
 6818              		.loc 1 3729 3 is_stmt 1 view -0
 6819              		.cfi_startproc
 6820              		@ args = 0, pretend = 0, frame = 8
 6821              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 258


3729:./FW/ff.c     ****     FRESULT res;
 6822              		.loc 1 3729 3 is_stmt 0 view .LVU2257
 6823 0000 70B5     		push	{r4, r5, r6, lr}
 6824              	.LCFI70:
 6825              		.cfi_def_cfa_offset 16
 6826              		.cfi_offset 4, -16
 6827              		.cfi_offset 5, -12
 6828              		.cfi_offset 6, -8
 6829              		.cfi_offset 14, -4
 6830 0002 82B0     		sub	sp, sp, #8
 6831              	.LCFI71:
 6832              		.cfi_def_cfa_offset 24
 6833 0004 0446     		mov	r4, r0
3730:./FW/ff.c     ****     FATFS *fs;
 6834              		.loc 1 3730 5 is_stmt 1 view .LVU2258
3731:./FW/ff.c     ****     DWORD tm;
 6835              		.loc 1 3731 5 view .LVU2259
3732:./FW/ff.c     ****     BYTE *dir;
 6836              		.loc 1 3732 5 view .LVU2260
3733:./FW/ff.c     **** #if _FS_EXFAT
 6837              		.loc 1 3733 5 view .LVU2261
3739:./FW/ff.c     ****     if (res == FR_OK) {
 6838              		.loc 1 3739 5 view .LVU2262
3739:./FW/ff.c     ****     if (res == FR_OK) {
 6839              		.loc 1 3739 11 is_stmt 0 view .LVU2263
 6840 0006 01A9     		add	r1, sp, #4
 6841 0008 FFF7FEFF 		bl	validate
 6842              	.LVL798:
3740:./FW/ff.c     ****         if (fp->flag & FA_MODIFIED) {   /* Is there any change to the file? */
 6843              		.loc 1 3740 5 is_stmt 1 view .LVU2264
3740:./FW/ff.c     ****         if (fp->flag & FA_MODIFIED) {   /* Is there any change to the file? */
 6844              		.loc 1 3740 8 is_stmt 0 view .LVU2265
 6845 000c 70B9     		cbnz	r0, .L526
3741:./FW/ff.c     **** #if !_FS_TINY
 6846              		.loc 1 3741 9 is_stmt 1 view .LVU2266
3741:./FW/ff.c     **** #if !_FS_TINY
 6847              		.loc 1 3741 15 is_stmt 0 view .LVU2267
 6848 000e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
3741:./FW/ff.c     **** #if !_FS_TINY
 6849              		.loc 1 3741 12 view .LVU2268
 6850 0010 13F0400F 		tst	r3, #64
 6851 0014 0AD0     		beq	.L526
3743:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { LEAVE_FF(fs, FR_DISK_ERR
 6852              		.loc 1 3743 13 is_stmt 1 view .LVU2269
3743:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { LEAVE_FF(fs, FR_DISK_ERR
 6853              		.loc 1 3743 16 is_stmt 0 view .LVU2270
 6854 0016 13F0800F 		tst	r3, #128
 6855 001a 09D1     		bne	.L530
 6856              	.L527:
3749:./FW/ff.c     **** #if _FS_EXFAT
 6857              		.loc 1 3749 13 is_stmt 1 view .LVU2271
3749:./FW/ff.c     **** #if _FS_EXFAT
 6858              		.loc 1 3749 18 is_stmt 0 view .LVU2272
 6859 001c FFF7FEFF 		bl	get_fattime
 6860              	.LVL799:
 6861 0020 0546     		mov	r5, r0
 6862              	.LVL800:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 259


3779:./FW/ff.c     ****                 if (res == FR_OK) {
 6863              		.loc 1 3779 17 is_stmt 1 view .LVU2273
3779:./FW/ff.c     ****                 if (res == FR_OK) {
 6864              		.loc 1 3779 23 is_stmt 0 view .LVU2274
 6865 0022 616A     		ldr	r1, [r4, #36]
 6866 0024 0198     		ldr	r0, [sp, #4]
 6867              	.LVL801:
3779:./FW/ff.c     ****                 if (res == FR_OK) {
 6868              		.loc 1 3779 23 view .LVU2275
 6869 0026 FFF7FEFF 		bl	move_window
 6870              	.LVL802:
3780:./FW/ff.c     ****                     dir = fp->dir_ptr;
 6871              		.loc 1 3780 17 is_stmt 1 view .LVU2276
3780:./FW/ff.c     ****                     dir = fp->dir_ptr;
 6872              		.loc 1 3780 20 is_stmt 0 view .LVU2277
 6873 002a 78B1     		cbz	r0, .L531
 6874              	.LVL803:
 6875              	.L526:
3796:./FW/ff.c     **** 
 6876              		.loc 1 3796 1 view .LVU2278
 6877 002c 02B0     		add	sp, sp, #8
 6878              	.LCFI72:
 6879              		.cfi_remember_state
 6880              		.cfi_def_cfa_offset 16
 6881              		@ sp needed
 6882 002e 70BD     		pop	{r4, r5, r6, pc}
 6883              	.LVL804:
 6884              	.L530:
 6885              	.LCFI73:
 6886              		.cfi_restore_state
3744:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6887              		.loc 1 3744 17 is_stmt 1 view .LVU2279
3744:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6888              		.loc 1 3744 21 is_stmt 0 view .LVU2280
 6889 0030 0123     		movs	r3, #1
 6890 0032 226A     		ldr	r2, [r4, #32]
 6891 0034 04F13001 		add	r1, r4, #48
 6892 0038 0198     		ldr	r0, [sp, #4]
 6893 003a 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6894 003c FFF7FEFF 		bl	disk_write
 6895              	.LVL805:
3744:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6896              		.loc 1 3744 20 view .LVU2281
 6897 0040 40BB     		cbnz	r0, .L528
3745:./FW/ff.c     ****             }
 6898              		.loc 1 3745 17 is_stmt 1 view .LVU2282
3745:./FW/ff.c     ****             }
 6899              		.loc 1 3745 26 is_stmt 0 view .LVU2283
 6900 0042 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6901 0044 03F07F03 		and	r3, r3, #127
 6902 0048 2375     		strb	r3, [r4, #20]
 6903 004a E7E7     		b	.L527
 6904              	.LVL806:
 6905              	.L531:
3781:./FW/ff.c     ****                     dir[DIR_Attr] |= AM_ARC;                        /* Set archive bit */
 6906              		.loc 1 3781 21 is_stmt 1 view .LVU2284
3781:./FW/ff.c     ****                     dir[DIR_Attr] |= AM_ARC;                        /* Set archive bit */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 260


 6907              		.loc 1 3781 25 is_stmt 0 view .LVU2285
 6908 004c A66A     		ldr	r6, [r4, #40]
 6909              	.LVL807:
3782:./FW/ff.c     ****                     st_clust(fp->obj.fs, dir, fp->obj.sclust);      /* Update file allocation info 
 6910              		.loc 1 3782 21 is_stmt 1 view .LVU2286
3782:./FW/ff.c     ****                     st_clust(fp->obj.fs, dir, fp->obj.sclust);      /* Update file allocation info 
 6911              		.loc 1 3782 35 is_stmt 0 view .LVU2287
 6912 004e F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 6913 0050 43F02003 		orr	r3, r3, #32
 6914 0054 F372     		strb	r3, [r6, #11]
3783:./FW/ff.c     ****                     st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);   /* Update file size */
 6915              		.loc 1 3783 21 is_stmt 1 view .LVU2288
 6916 0056 A268     		ldr	r2, [r4, #8]
 6917 0058 3146     		mov	r1, r6
 6918 005a 2068     		ldr	r0, [r4]
 6919              	.LVL808:
3783:./FW/ff.c     ****                     st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);   /* Update file size */
 6920              		.loc 1 3783 21 is_stmt 0 view .LVU2289
 6921 005c FFF7FEFF 		bl	st_clust
 6922              	.LVL809:
3784:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);                /* Update modified time */
 6923              		.loc 1 3784 21 is_stmt 1 view .LVU2290
 6924 0060 E168     		ldr	r1, [r4, #12]
 6925 0062 06F11C00 		add	r0, r6, #28
 6926 0066 FFF7FEFF 		bl	st_dword
 6927              	.LVL810:
3785:./FW/ff.c     ****                     st_word(dir + DIR_LstAccDate, 0);
 6928              		.loc 1 3785 21 view .LVU2291
 6929 006a 2946     		mov	r1, r5
 6930 006c 06F11600 		add	r0, r6, #22
 6931 0070 FFF7FEFF 		bl	st_dword
 6932              	.LVL811:
3786:./FW/ff.c     ****                     fs->wflag = 1;
 6933              		.loc 1 3786 21 view .LVU2292
 6934 0074 0021     		movs	r1, #0
 6935 0076 06F11200 		add	r0, r6, #18
 6936 007a FFF7FEFF 		bl	st_word
 6937              	.LVL812:
3787:./FW/ff.c     ****                     res = sync_fs(fs);                  /* Restore it to the directory */
 6938              		.loc 1 3787 21 view .LVU2293
3787:./FW/ff.c     ****                     res = sync_fs(fs);                  /* Restore it to the directory */
 6939              		.loc 1 3787 31 is_stmt 0 view .LVU2294
 6940 007e 019B     		ldr	r3, [sp, #4]
 6941 0080 0122     		movs	r2, #1
 6942 0082 DA70     		strb	r2, [r3, #3]
3788:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_MODIFIED;
 6943              		.loc 1 3788 21 is_stmt 1 view .LVU2295
3788:./FW/ff.c     ****                     fp->flag &= (BYTE)~FA_MODIFIED;
 6944              		.loc 1 3788 27 is_stmt 0 view .LVU2296
 6945 0084 0198     		ldr	r0, [sp, #4]
 6946 0086 FFF7FEFF 		bl	sync_fs
 6947              	.LVL813:
3789:./FW/ff.c     ****                 }
 6948              		.loc 1 3789 21 is_stmt 1 view .LVU2297
3789:./FW/ff.c     ****                 }
 6949              		.loc 1 3789 30 is_stmt 0 view .LVU2298
 6950 008a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 261


 6951 008c 23F04003 		bic	r3, r3, #64
 6952 0090 2375     		strb	r3, [r4, #20]
 6953 0092 CBE7     		b	.L526
 6954              	.LVL814:
 6955              	.L528:
3744:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 6956              		.loc 1 3744 76 view .LVU2299
 6957 0094 0120     		movs	r0, #1
 6958 0096 C9E7     		b	.L526
 6959              		.cfi_endproc
 6960              	.LFE981:
 6962              		.section	.text.f_close,"ax",%progbits
 6963              		.align	1
 6964              		.global	f_close
 6965              		.syntax unified
 6966              		.thumb
 6967              		.thumb_func
 6968              		.fpu fpv4-sp-d16
 6970              	f_close:
 6971              	.LVL815:
 6972              	.LFB982:
3809:./FW/ff.c     ****     FRESULT res;
 6973              		.loc 1 3809 3 is_stmt 1 view -0
 6974              		.cfi_startproc
 6975              		@ args = 0, pretend = 0, frame = 8
 6976              		@ frame_needed = 0, uses_anonymous_args = 0
3809:./FW/ff.c     ****     FRESULT res;
 6977              		.loc 1 3809 3 is_stmt 0 view .LVU2301
 6978 0000 10B5     		push	{r4, lr}
 6979              	.LCFI74:
 6980              		.cfi_def_cfa_offset 8
 6981              		.cfi_offset 4, -8
 6982              		.cfi_offset 14, -4
 6983 0002 82B0     		sub	sp, sp, #8
 6984              	.LCFI75:
 6985              		.cfi_def_cfa_offset 16
 6986 0004 0446     		mov	r4, r0
3810:./FW/ff.c     ****     FATFS *fs;
 6987              		.loc 1 3810 5 is_stmt 1 view .LVU2302
3811:./FW/ff.c     **** 
 6988              		.loc 1 3811 5 view .LVU2303
3814:./FW/ff.c     ****     if (res == FR_OK)
 6989              		.loc 1 3814 5 view .LVU2304
3814:./FW/ff.c     ****     if (res == FR_OK)
 6990              		.loc 1 3814 11 is_stmt 0 view .LVU2305
 6991 0006 FFF7FEFF 		bl	f_sync
 6992              	.LVL816:
3815:./FW/ff.c     **** #endif
 6993              		.loc 1 3815 5 is_stmt 1 view .LVU2306
3815:./FW/ff.c     **** #endif
 6994              		.loc 1 3815 8 is_stmt 0 view .LVU2307
 6995 000a 08B1     		cbz	r0, .L535
 6996              	.L533:
 6997              	.LVL817:
3832:./FW/ff.c     **** }
 6998              		.loc 1 3832 5 is_stmt 1 view .LVU2308
3833:./FW/ff.c     **** 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 262


 6999              		.loc 1 3833 1 is_stmt 0 view .LVU2309
 7000 000c 02B0     		add	sp, sp, #8
 7001              	.LCFI76:
 7002              		.cfi_remember_state
 7003              		.cfi_def_cfa_offset 8
 7004              		@ sp needed
 7005 000e 10BD     		pop	{r4, pc}
 7006              	.LVL818:
 7007              	.L535:
 7008              	.LCFI77:
 7009              		.cfi_restore_state
3818:./FW/ff.c     ****         if (res == FR_OK) {
 7010              		.loc 1 3818 9 is_stmt 1 view .LVU2310
3818:./FW/ff.c     ****         if (res == FR_OK) {
 7011              		.loc 1 3818 15 is_stmt 0 view .LVU2311
 7012 0010 01A9     		add	r1, sp, #4
 7013 0012 2046     		mov	r0, r4
 7014 0014 FFF7FEFF 		bl	validate
 7015              	.LVL819:
3819:./FW/ff.c     **** #if _FS_LOCK != 0
 7016              		.loc 1 3819 9 is_stmt 1 view .LVU2312
3819:./FW/ff.c     **** #if _FS_LOCK != 0
 7017              		.loc 1 3819 12 is_stmt 0 view .LVU2313
 7018 0018 0028     		cmp	r0, #0
 7019 001a F7D1     		bne	.L533
3821:./FW/ff.c     ****             if (res == FR_OK)
 7020              		.loc 1 3821 13 is_stmt 1 view .LVU2314
3821:./FW/ff.c     ****             if (res == FR_OK)
 7021              		.loc 1 3821 19 is_stmt 0 view .LVU2315
 7022 001c 2069     		ldr	r0, [r4, #16]
 7023              	.LVL820:
3821:./FW/ff.c     ****             if (res == FR_OK)
 7024              		.loc 1 3821 19 view .LVU2316
 7025 001e FFF7FEFF 		bl	dec_lock
 7026              	.LVL821:
3822:./FW/ff.c     **** #endif
 7027              		.loc 1 3822 13 is_stmt 1 view .LVU2317
3822:./FW/ff.c     **** #endif
 7028              		.loc 1 3822 16 is_stmt 0 view .LVU2318
 7029 0022 0028     		cmp	r0, #0
 7030 0024 F2D1     		bne	.L533
3825:./FW/ff.c     ****             }
 7031              		.loc 1 3825 17 is_stmt 1 view .LVU2319
3825:./FW/ff.c     ****             }
 7032              		.loc 1 3825 28 is_stmt 0 view .LVU2320
 7033 0026 2060     		str	r0, [r4]
 7034 0028 F0E7     		b	.L533
 7035              		.cfi_endproc
 7036              	.LFE982:
 7038              		.section	.text.f_lseek,"ax",%progbits
 7039              		.align	1
 7040              		.global	f_lseek
 7041              		.syntax unified
 7042              		.thumb
 7043              		.thumb_func
 7044              		.fpu fpv4-sp-d16
 7046              	f_lseek:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 263


 7047              	.LVL822:
 7048              	.LFB983:
3995:./FW/ff.c     ****     FRESULT res;
 7049              		.loc 1 3995 3 is_stmt 1 view -0
 7050              		.cfi_startproc
 7051              		@ args = 0, pretend = 0, frame = 16
 7052              		@ frame_needed = 0, uses_anonymous_args = 0
3995:./FW/ff.c     ****     FRESULT res;
 7053              		.loc 1 3995 3 is_stmt 0 view .LVU2322
 7054 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7055              	.LCFI78:
 7056              		.cfi_def_cfa_offset 36
 7057              		.cfi_offset 4, -36
 7058              		.cfi_offset 5, -32
 7059              		.cfi_offset 6, -28
 7060              		.cfi_offset 7, -24
 7061              		.cfi_offset 8, -20
 7062              		.cfi_offset 9, -16
 7063              		.cfi_offset 10, -12
 7064              		.cfi_offset 11, -8
 7065              		.cfi_offset 14, -4
 7066 0004 85B0     		sub	sp, sp, #20
 7067              	.LCFI79:
 7068              		.cfi_def_cfa_offset 56
 7069 0006 0446     		mov	r4, r0
 7070 0008 0E46     		mov	r6, r1
3996:./FW/ff.c     ****     FATFS *fs;
 7071              		.loc 1 3996 5 is_stmt 1 view .LVU2323
3997:./FW/ff.c     ****     DWORD clst, bcs, nsect;
 7072              		.loc 1 3997 5 view .LVU2324
3998:./FW/ff.c     ****     FSIZE_t ifptr;
 7073              		.loc 1 3998 5 view .LVU2325
3999:./FW/ff.c     **** #if _USE_FASTSEEK
 7074              		.loc 1 3999 5 view .LVU2326
4001:./FW/ff.c     **** #endif
 7075              		.loc 1 4001 5 view .LVU2327
4004:./FW/ff.c     ****     if (res == FR_OK) { res = (FRESULT)fp->err; }
 7076              		.loc 1 4004 5 view .LVU2328
4004:./FW/ff.c     ****     if (res == FR_OK) { res = (FRESULT)fp->err; }
 7077              		.loc 1 4004 11 is_stmt 0 view .LVU2329
 7078 000a 0746     		mov	r7, r0
 7079 000c 03A9     		add	r1, sp, #12
 7080              	.LVL823:
4004:./FW/ff.c     ****     if (res == FR_OK) { res = (FRESULT)fp->err; }
 7081              		.loc 1 4004 11 view .LVU2330
 7082 000e FFF7FEFF 		bl	validate
 7083              	.LVL824:
4005:./FW/ff.c     **** #if _FS_EXFAT && !_FS_READONLY
 7084              		.loc 1 4005 5 is_stmt 1 view .LVU2331
4005:./FW/ff.c     **** #if _FS_EXFAT && !_FS_READONLY
 7085              		.loc 1 4005 8 is_stmt 0 view .LVU2332
 7086 0012 0546     		mov	r5, r0
 7087 0014 00B9     		cbnz	r0, .L537
4005:./FW/ff.c     **** #if _FS_EXFAT && !_FS_READONLY
 7088              		.loc 1 4005 25 is_stmt 1 discriminator 1 view .LVU2333
4005:./FW/ff.c     **** #if _FS_EXFAT && !_FS_READONLY
 7089              		.loc 1 4005 29 is_stmt 0 discriminator 1 view .LVU2334
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 264


 7090 0016 657D     		ldrb	r5, [r4, #21]	@ zero_extendqisi2
 7091              	.LVL825:
 7092              	.L537:
4011:./FW/ff.c     **** 
 7093              		.loc 1 4011 5 is_stmt 1 view .LVU2335
4011:./FW/ff.c     **** 
 7094              		.loc 1 4011 8 is_stmt 0 view .LVU2336
 7095 0018 6DB9     		cbnz	r5, .L538
4014:./FW/ff.c     ****         if (ofs == CREATE_LINKMAP) {    /* Create CLMT */
 7096              		.loc 1 4014 5 is_stmt 1 view .LVU2337
4014:./FW/ff.c     ****         if (ofs == CREATE_LINKMAP) {    /* Create CLMT */
 7097              		.loc 1 4014 11 is_stmt 0 view .LVU2338
 7098 001a E36A     		ldr	r3, [r4, #44]
4014:./FW/ff.c     ****         if (ofs == CREATE_LINKMAP) {    /* Create CLMT */
 7099              		.loc 1 4014 8 view .LVU2339
 7100 001c 002B     		cmp	r3, #0
 7101 001e 00F08E80 		beq	.L539
4015:./FW/ff.c     ****             tbl = fp->cltbl;
 7102              		.loc 1 4015 9 is_stmt 1 view .LVU2340
4015:./FW/ff.c     ****             tbl = fp->cltbl;
 7103              		.loc 1 4015 12 is_stmt 0 view .LVU2341
 7104 0022 B6F1FF3F 		cmp	r6, #-1
 7105 0026 0AD0     		beq	.L579
4046:./FW/ff.c     ****             fp->fptr = ofs;             /* Set file pointer */
 7106              		.loc 1 4046 13 is_stmt 1 view .LVU2342
4046:./FW/ff.c     ****             fp->fptr = ofs;             /* Set file pointer */
 7107              		.loc 1 4046 30 is_stmt 0 view .LVU2343
 7108 0028 E768     		ldr	r7, [r4, #12]
4046:./FW/ff.c     ****             fp->fptr = ofs;             /* Set file pointer */
 7109              		.loc 1 4046 16 view .LVU2344
 7110 002a B742     		cmp	r7, r6
 7111 002c 00D3     		bcc	.L547
 7112 002e 3746     		mov	r7, r6
 7113              	.L547:
 7114              	.LVL826:
4047:./FW/ff.c     ****             if (ofs) {
 7115              		.loc 1 4047 13 is_stmt 1 view .LVU2345
4047:./FW/ff.c     ****             if (ofs) {
 7116              		.loc 1 4047 22 is_stmt 0 view .LVU2346
 7117 0030 A761     		str	r7, [r4, #24]
4048:./FW/ff.c     ****                 fp->clust = clmt_clust(fp, ofs - 1);
 7118              		.loc 1 4048 13 is_stmt 1 view .LVU2347
4048:./FW/ff.c     ****                 fp->clust = clmt_clust(fp, ofs - 1);
 7119              		.loc 1 4048 16 is_stmt 0 view .LVU2348
 7120 0032 002F     		cmp	r7, #0
 7121 0034 44D1     		bne	.L580
 7122              	.LVL827:
 7123              	.L538:
4150:./FW/ff.c     **** 
 7124              		.loc 1 4150 1 view .LVU2349
 7125 0036 2846     		mov	r0, r5
 7126 0038 05B0     		add	sp, sp, #20
 7127              	.LCFI80:
 7128              		.cfi_remember_state
 7129              		.cfi_def_cfa_offset 36
 7130              		@ sp needed
 7131 003a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 265


 7132              	.LVL828:
 7133              	.L579:
 7134              	.LCFI81:
 7135              		.cfi_restore_state
4016:./FW/ff.c     ****             tlen = *tbl++;
 7136              		.loc 1 4016 13 is_stmt 1 view .LVU2350
4017:./FW/ff.c     ****             ulen = 2;   /* Given table size and required table size */
 7137              		.loc 1 4017 13 view .LVU2351
4017:./FW/ff.c     ****             ulen = 2;   /* Given table size and required table size */
 7138              		.loc 1 4017 24 is_stmt 0 view .LVU2352
 7139 003e 9946     		mov	r9, r3
 7140              	.LVL829:
4017:./FW/ff.c     ****             ulen = 2;   /* Given table size and required table size */
 7141              		.loc 1 4017 18 view .LVU2353
 7142 0040 59F8043B 		ldr	r3, [r9], #4
 7143              	.LVL830:
4017:./FW/ff.c     ****             ulen = 2;   /* Given table size and required table size */
 7144              		.loc 1 4017 18 view .LVU2354
 7145 0044 0193     		str	r3, [sp, #4]
 7146              	.LVL831:
4018:./FW/ff.c     ****             cl = fp->obj.sclust;        /* Origin of the chain */
 7147              		.loc 1 4018 13 is_stmt 1 view .LVU2355
4019:./FW/ff.c     ****             if (cl) {
 7148              		.loc 1 4019 13 view .LVU2356
4019:./FW/ff.c     ****             if (cl) {
 7149              		.loc 1 4019 16 is_stmt 0 view .LVU2357
 7150 0046 D4F808B0 		ldr	fp, [r4, #8]
 7151              	.LVL832:
4020:./FW/ff.c     ****                 do {
 7152              		.loc 1 4020 13 is_stmt 1 view .LVU2358
4020:./FW/ff.c     ****                 do {
 7153              		.loc 1 4020 16 is_stmt 0 view .LVU2359
 7154 004a BBF1000F 		cmp	fp, #0
 7155 004e 2AD0     		beq	.L572
4018:./FW/ff.c     ****             cl = fp->obj.sclust;        /* Origin of the chain */
 7156              		.loc 1 4018 18 view .LVU2360
 7157 0050 4FF0020A 		mov	r10, #2
 7158              	.LVL833:
 7159              	.L546:
4021:./FW/ff.c     ****                     /* Get a fragment */
 7160              		.loc 1 4021 17 is_stmt 1 view .LVU2361
4023:./FW/ff.c     ****                     ncl = 0;
 7161              		.loc 1 4023 21 view .LVU2362
4024:./FW/ff.c     ****                     ulen += 2;  /* Top, length and used items */
 7162              		.loc 1 4024 21 view .LVU2363
4025:./FW/ff.c     ****                     do {
 7163              		.loc 1 4025 21 view .LVU2364
4025:./FW/ff.c     ****                     do {
 7164              		.loc 1 4025 26 is_stmt 0 view .LVU2365
 7165 0054 0AF1020A 		add	r10, r10, #2
 7166              	.LVL834:
4025:./FW/ff.c     ****                     do {
 7167              		.loc 1 4025 26 view .LVU2366
 7168 0058 5946     		mov	r1, fp
4024:./FW/ff.c     ****                     ulen += 2;  /* Top, length and used items */
 7169              		.loc 1 4024 25 view .LVU2367
 7170 005a 4FF00008 		mov	r8, #0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 266


 7171              	.LVL835:
 7172              	.L544:
4026:./FW/ff.c     ****                         pcl = cl;
 7173              		.loc 1 4026 21 is_stmt 1 view .LVU2368
4027:./FW/ff.c     ****                         ncl++;
 7174              		.loc 1 4027 25 view .LVU2369
4028:./FW/ff.c     ****                         cl = get_fat(&fp->obj, cl);
 7175              		.loc 1 4028 25 view .LVU2370
4028:./FW/ff.c     ****                         cl = get_fat(&fp->obj, cl);
 7176              		.loc 1 4028 28 is_stmt 0 view .LVU2371
 7177 005e 08F10108 		add	r8, r8, #1
 7178              	.LVL836:
4029:./FW/ff.c     ****                         if (cl <= 1) { ABORT(fs, FR_INT_ERR); }
 7179              		.loc 1 4029 25 is_stmt 1 view .LVU2372
 7180 0062 0E46     		mov	r6, r1
4029:./FW/ff.c     ****                         if (cl <= 1) { ABORT(fs, FR_INT_ERR); }
 7181              		.loc 1 4029 30 is_stmt 0 view .LVU2373
 7182 0064 3846     		mov	r0, r7
 7183 0066 FFF7FEFF 		bl	get_fat
 7184              	.LVL837:
4029:./FW/ff.c     ****                         if (cl <= 1) { ABORT(fs, FR_INT_ERR); }
 7185              		.loc 1 4029 30 view .LVU2374
 7186 006a 0146     		mov	r1, r0
 7187              	.LVL838:
4030:./FW/ff.c     ****                         if (cl == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7188              		.loc 1 4030 25 is_stmt 1 view .LVU2375
4030:./FW/ff.c     ****                         if (cl == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7189              		.loc 1 4030 28 is_stmt 0 view .LVU2376
 7190 006c 0128     		cmp	r0, #1
 7191 006e 14D9     		bls	.L581
4030:./FW/ff.c     ****                         if (cl == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7192              		.loc 1 4030 61 is_stmt 1 discriminator 2 view .LVU2377
4031:./FW/ff.c     ****                     } while (cl == pcl + 1);
 7193              		.loc 1 4031 25 discriminator 2 view .LVU2378
4031:./FW/ff.c     ****                     } while (cl == pcl + 1);
 7194              		.loc 1 4031 28 is_stmt 0 discriminator 2 view .LVU2379
 7195 0070 B0F1FF3F 		cmp	r0, #-1
 7196 0074 14D0     		beq	.L582
4031:./FW/ff.c     ****                     } while (cl == pcl + 1);
 7197              		.loc 1 4031 71 is_stmt 1 discriminator 2 view .LVU2380
4032:./FW/ff.c     ****                     if (ulen <= tlen) {     /* Store the length and top of the fragment */
 7198              		.loc 1 4032 29 discriminator 2 view .LVU2381
4032:./FW/ff.c     ****                     if (ulen <= tlen) {     /* Store the length and top of the fragment */
 7199              		.loc 1 4032 40 is_stmt 0 discriminator 2 view .LVU2382
 7200 0076 0136     		adds	r6, r6, #1
 7201              	.LVL839:
4032:./FW/ff.c     ****                     if (ulen <= tlen) {     /* Store the length and top of the fragment */
 7202              		.loc 1 4032 21 discriminator 2 view .LVU2383
 7203 0078 8642     		cmp	r6, r0
 7204 007a F0D0     		beq	.L544
4033:./FW/ff.c     ****                         *tbl++ = ncl;
 7205              		.loc 1 4033 21 is_stmt 1 view .LVU2384
4033:./FW/ff.c     ****                         *tbl++ = ncl;
 7206              		.loc 1 4033 24 is_stmt 0 view .LVU2385
 7207 007c 019B     		ldr	r3, [sp, #4]
 7208 007e 5345     		cmp	r3, r10
 7209 0080 05D3     		bcc	.L545
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 267


4034:./FW/ff.c     ****                         *tbl++ = tcl;
 7210              		.loc 1 4034 25 is_stmt 1 view .LVU2386
 7211              	.LVL840:
4034:./FW/ff.c     ****                         *tbl++ = tcl;
 7212              		.loc 1 4034 32 is_stmt 0 view .LVU2387
 7213 0082 4B46     		mov	r3, r9
 7214 0084 43F8088B 		str	r8, [r3], #8
4035:./FW/ff.c     ****                     }
 7215              		.loc 1 4035 25 is_stmt 1 view .LVU2388
 7216              	.LVL841:
4035:./FW/ff.c     ****                     }
 7217              		.loc 1 4035 32 is_stmt 0 view .LVU2389
 7218 0088 C9F804B0 		str	fp, [r9, #4]
4035:./FW/ff.c     ****                     }
 7219              		.loc 1 4035 29 view .LVU2390
 7220 008c 9946     		mov	r9, r3
 7221              	.LVL842:
 7222              	.L545:
4037:./FW/ff.c     ****             }
 7223              		.loc 1 4037 25 is_stmt 1 view .LVU2391
4037:./FW/ff.c     ****             }
 7224              		.loc 1 4037 33 is_stmt 0 view .LVU2392
 7225 008e 039B     		ldr	r3, [sp, #12]
 7226 0090 5B69     		ldr	r3, [r3, #20]
4037:./FW/ff.c     ****             }
 7227              		.loc 1 4037 17 view .LVU2393
 7228 0092 8B42     		cmp	r3, r1
 7229 0094 09D9     		bls	.L541
4029:./FW/ff.c     ****                         if (cl <= 1) { ABORT(fs, FR_INT_ERR); }
 7230              		.loc 1 4029 30 view .LVU2394
 7231 0096 8B46     		mov	fp, r1
 7232              	.LVL843:
4029:./FW/ff.c     ****                         if (cl <= 1) { ABORT(fs, FR_INT_ERR); }
 7233              		.loc 1 4029 30 view .LVU2395
 7234 0098 DCE7     		b	.L546
 7235              	.LVL844:
 7236              	.L581:
4030:./FW/ff.c     ****                         if (cl == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7237              		.loc 1 4030 40 is_stmt 1 discriminator 1 view .LVU2396
 7238 009a 0225     		movs	r5, #2
 7239              	.LVL845:
4030:./FW/ff.c     ****                         if (cl == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7240              		.loc 1 4030 40 is_stmt 0 discriminator 1 view .LVU2397
 7241 009c 6575     		strb	r5, [r4, #21]
4030:./FW/ff.c     ****                         if (cl == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7242              		.loc 1 4030 40 is_stmt 1 discriminator 1 view .LVU2398
 7243 009e CAE7     		b	.L538
 7244              	.LVL846:
 7245              	.L582:
4031:./FW/ff.c     ****                     } while (cl == pcl + 1);
 7246              		.loc 1 4031 49 discriminator 1 view .LVU2399
 7247 00a0 0125     		movs	r5, #1
 7248              	.LVL847:
4031:./FW/ff.c     ****                     } while (cl == pcl + 1);
 7249              		.loc 1 4031 49 is_stmt 0 discriminator 1 view .LVU2400
 7250 00a2 6575     		strb	r5, [r4, #21]
4031:./FW/ff.c     ****                     } while (cl == pcl + 1);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 268


 7251              		.loc 1 4031 49 is_stmt 1 discriminator 1 view .LVU2401
 7252 00a4 C7E7     		b	.L538
 7253              	.LVL848:
 7254              	.L572:
4018:./FW/ff.c     ****             cl = fp->obj.sclust;        /* Origin of the chain */
 7255              		.loc 1 4018 18 is_stmt 0 view .LVU2402
 7256 00a6 4FF0020A 		mov	r10, #2
 7257              	.LVL849:
 7258              	.L541:
4039:./FW/ff.c     ****             if (ulen <= tlen) {
 7259              		.loc 1 4039 13 is_stmt 1 view .LVU2403
4039:./FW/ff.c     ****             if (ulen <= tlen) {
 7260              		.loc 1 4039 16 is_stmt 0 view .LVU2404
 7261 00aa E36A     		ldr	r3, [r4, #44]
4039:./FW/ff.c     ****             if (ulen <= tlen) {
 7262              		.loc 1 4039 24 view .LVU2405
 7263 00ac C3F800A0 		str	r10, [r3]
4040:./FW/ff.c     ****                 *tbl = 0;       /* Terminate table */
 7264              		.loc 1 4040 13 is_stmt 1 view .LVU2406
4040:./FW/ff.c     ****                 *tbl = 0;       /* Terminate table */
 7265              		.loc 1 4040 16 is_stmt 0 view .LVU2407
 7266 00b0 019B     		ldr	r3, [sp, #4]
 7267 00b2 9A45     		cmp	r10, r3
 7268 00b4 00F2EE80 		bhi	.L574
4041:./FW/ff.c     ****             } else {
 7269              		.loc 1 4041 17 is_stmt 1 view .LVU2408
4041:./FW/ff.c     ****             } else {
 7270              		.loc 1 4041 22 is_stmt 0 view .LVU2409
 7271 00b8 0023     		movs	r3, #0
 7272 00ba C9F80030 		str	r3, [r9]
 7273 00be BAE7     		b	.L538
 7274              	.LVL850:
 7275              	.L580:
4049:./FW/ff.c     ****                 dsc = clust2sect(fs, fp->clust);
 7276              		.loc 1 4049 17 is_stmt 1 view .LVU2410
4049:./FW/ff.c     ****                 dsc = clust2sect(fs, fp->clust);
 7277              		.loc 1 4049 29 is_stmt 0 view .LVU2411
 7278 00c0 07F1FF38 		add	r8, r7, #-1
 7279 00c4 4146     		mov	r1, r8
 7280 00c6 2046     		mov	r0, r4
 7281 00c8 FFF7FEFF 		bl	clmt_clust
 7282              	.LVL851:
 7283 00cc 0146     		mov	r1, r0
4049:./FW/ff.c     ****                 dsc = clust2sect(fs, fp->clust);
 7284              		.loc 1 4049 27 view .LVU2412
 7285 00ce E061     		str	r0, [r4, #28]
4050:./FW/ff.c     ****                 if (!dsc) { ABORT(fs, FR_INT_ERR); }
 7286              		.loc 1 4050 17 is_stmt 1 view .LVU2413
4050:./FW/ff.c     ****                 if (!dsc) { ABORT(fs, FR_INT_ERR); }
 7287              		.loc 1 4050 23 is_stmt 0 view .LVU2414
 7288 00d0 039E     		ldr	r6, [sp, #12]
 7289 00d2 3046     		mov	r0, r6
 7290 00d4 FFF7FEFF 		bl	clust2sect
 7291              	.LVL852:
4051:./FW/ff.c     ****                 dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 7292              		.loc 1 4051 17 is_stmt 1 view .LVU2415
4051:./FW/ff.c     ****                 dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 269


 7293              		.loc 1 4051 20 is_stmt 0 view .LVU2416
 7294 00d8 E0B1     		cbz	r0, .L583
4051:./FW/ff.c     ****                 dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 7295              		.loc 1 4051 50 is_stmt 1 discriminator 2 view .LVU2417
4052:./FW/ff.c     ****                 if (fp->fptr % SS(fs) && dsc != fp->sect) { /* Refill sector cache if needed */
 7296              		.loc 1 4052 17 discriminator 2 view .LVU2418
4052:./FW/ff.c     ****                 if (fp->fptr % SS(fs) && dsc != fp->sect) { /* Refill sector cache if needed */
 7297              		.loc 1 4052 57 is_stmt 0 discriminator 2 view .LVU2419
 7298 00da 7189     		ldrh	r1, [r6, #10]
4052:./FW/ff.c     ****                 if (fp->fptr % SS(fs) && dsc != fp->sect) { /* Refill sector cache if needed */
 7299              		.loc 1 4052 65 discriminator 2 view .LVU2420
 7300 00dc 0139     		subs	r1, r1, #1
4052:./FW/ff.c     ****                 if (fp->fptr % SS(fs) && dsc != fp->sect) { /* Refill sector cache if needed */
 7301              		.loc 1 4052 52 discriminator 2 view .LVU2421
 7302 00de 01EA5821 		and	r1, r1, r8, lsr #9
4052:./FW/ff.c     ****                 if (fp->fptr % SS(fs) && dsc != fp->sect) { /* Refill sector cache if needed */
 7303              		.loc 1 4052 21 discriminator 2 view .LVU2422
 7304 00e2 01EB0008 		add	r8, r1, r0
 7305              	.LVL853:
4053:./FW/ff.c     **** #if !_FS_TINY
 7306              		.loc 1 4053 17 is_stmt 1 discriminator 2 view .LVU2423
4053:./FW/ff.c     **** #if !_FS_TINY
 7307              		.loc 1 4053 30 is_stmt 0 discriminator 2 view .LVU2424
 7308 00e6 C7F30807 		ubfx	r7, r7, #0, #9
 7309              	.LVL854:
4053:./FW/ff.c     **** #if !_FS_TINY
 7310              		.loc 1 4053 20 discriminator 2 view .LVU2425
 7311 00ea 002F     		cmp	r7, #0
 7312 00ec A3D0     		beq	.L538
4053:./FW/ff.c     **** #if !_FS_TINY
 7313              		.loc 1 4053 51 discriminator 1 view .LVU2426
 7314 00ee 226A     		ldr	r2, [r4, #32]
4053:./FW/ff.c     **** #if !_FS_TINY
 7315              		.loc 1 4053 39 discriminator 1 view .LVU2427
 7316 00f0 4245     		cmp	r2, r8
 7317 00f2 A0D0     		beq	.L538
4056:./FW/ff.c     ****                         if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DIS
 7318              		.loc 1 4056 21 is_stmt 1 view .LVU2428
4056:./FW/ff.c     ****                         if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DIS
 7319              		.loc 1 4056 25 is_stmt 0 view .LVU2429
 7320 00f4 94F91430 		ldrsb	r3, [r4, #20]
4056:./FW/ff.c     ****                         if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DIS
 7321              		.loc 1 4056 24 view .LVU2430
 7322 00f8 002B     		cmp	r3, #0
 7323 00fa 0EDB     		blt	.L584
 7324              	.L549:
4061:./FW/ff.c     **** #endif
 7325              		.loc 1 4061 21 is_stmt 1 view .LVU2431
4061:./FW/ff.c     **** #endif
 7326              		.loc 1 4061 25 is_stmt 0 view .LVU2432
 7327 00fc 0123     		movs	r3, #1
 7328 00fe 4246     		mov	r2, r8
 7329 0100 04F13001 		add	r1, r4, #48
 7330 0104 0398     		ldr	r0, [sp, #12]
 7331 0106 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7332 0108 FFF7FEFF 		bl	disk_read
 7333              	.LVL855:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 270


4061:./FW/ff.c     **** #endif
 7334              		.loc 1 4061 24 view .LVU2433
 7335 010c A0B9     		cbnz	r0, .L585
4061:./FW/ff.c     **** #endif
 7336              		.loc 1 4061 96 is_stmt 1 discriminator 2 view .LVU2434
4063:./FW/ff.c     ****                 }
 7337              		.loc 1 4063 21 discriminator 2 view .LVU2435
4063:./FW/ff.c     ****                 }
 7338              		.loc 1 4063 30 is_stmt 0 discriminator 2 view .LVU2436
 7339 010e C4F82080 		str	r8, [r4, #32]
 7340 0112 90E7     		b	.L538
 7341              	.LVL856:
 7342              	.L583:
4051:./FW/ff.c     ****                 dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 7343              		.loc 1 4051 29 is_stmt 1 discriminator 1 view .LVU2437
 7344 0114 0225     		movs	r5, #2
 7345              	.LVL857:
4051:./FW/ff.c     ****                 dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 7346              		.loc 1 4051 29 is_stmt 0 discriminator 1 view .LVU2438
 7347 0116 6575     		strb	r5, [r4, #21]
4051:./FW/ff.c     ****                 dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 7348              		.loc 1 4051 29 is_stmt 1 discriminator 1 view .LVU2439
 7349 0118 8DE7     		b	.L538
 7350              	.LVL858:
 7351              	.L584:
4057:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
 7352              		.loc 1 4057 25 view .LVU2440
4057:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
 7353              		.loc 1 4057 29 is_stmt 0 view .LVU2441
 7354 011a 0123     		movs	r3, #1
 7355 011c 04F13001 		add	r1, r4, #48
 7356 0120 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 7357 0122 FFF7FEFF 		bl	disk_write
 7358              	.LVL859:
4057:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
 7359              		.loc 1 4057 28 view .LVU2442
 7360 0126 20B9     		cbnz	r0, .L586
4057:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
 7361              		.loc 1 4057 106 is_stmt 1 discriminator 2 view .LVU2443
4058:./FW/ff.c     ****                     }
 7362              		.loc 1 4058 25 discriminator 2 view .LVU2444
4058:./FW/ff.c     ****                     }
 7363              		.loc 1 4058 34 is_stmt 0 discriminator 2 view .LVU2445
 7364 0128 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 7365 012a 03F07F03 		and	r3, r3, #127
 7366 012e 2375     		strb	r3, [r4, #20]
 7367 0130 E4E7     		b	.L549
 7368              	.L586:
4057:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
 7369              		.loc 1 4057 84 is_stmt 1 discriminator 1 view .LVU2446
 7370 0132 0125     		movs	r5, #1
 7371              	.LVL860:
4057:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
 7372              		.loc 1 4057 84 is_stmt 0 discriminator 1 view .LVU2447
 7373 0134 6575     		strb	r5, [r4, #21]
4057:./FW/ff.c     ****                         fp->flag &= (BYTE)~FA_DIRTY;
 7374              		.loc 1 4057 84 is_stmt 1 discriminator 1 view .LVU2448
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 271


 7375 0136 7EE7     		b	.L538
 7376              	.LVL861:
 7377              	.L585:
4061:./FW/ff.c     **** #endif
 7378              		.loc 1 4061 74 discriminator 1 view .LVU2449
 7379 0138 0125     		movs	r5, #1
 7380              	.LVL862:
4061:./FW/ff.c     **** #endif
 7381              		.loc 1 4061 74 is_stmt 0 discriminator 1 view .LVU2450
 7382 013a 6575     		strb	r5, [r4, #21]
4061:./FW/ff.c     **** #endif
 7383              		.loc 1 4061 74 is_stmt 1 discriminator 1 view .LVU2451
 7384 013c 7BE7     		b	.L538
 7385              	.LVL863:
 7386              	.L539:
4075:./FW/ff.c     ****             ofs = fp->obj.objsize;
 7387              		.loc 1 4075 9 view .LVU2452
4075:./FW/ff.c     ****             ofs = fp->obj.objsize;
 7388              		.loc 1 4075 26 is_stmt 0 view .LVU2453
 7389 013e E368     		ldr	r3, [r4, #12]
4075:./FW/ff.c     ****             ofs = fp->obj.objsize;
 7390              		.loc 1 4075 12 view .LVU2454
 7391 0140 B342     		cmp	r3, r6
 7392 0142 04D2     		bcs	.L552
4075:./FW/ff.c     ****             ofs = fp->obj.objsize;
 7393              		.loc 1 4075 59 discriminator 1 view .LVU2455
 7394 0144 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
4075:./FW/ff.c     ****             ofs = fp->obj.objsize;
 7395              		.loc 1 4075 35 discriminator 1 view .LVU2456
 7396 0146 12F0020F 		tst	r2, #2
 7397 014a 00D1     		bne	.L552
4076:./FW/ff.c     ****         }
 7398              		.loc 1 4076 17 view .LVU2457
 7399 014c 1E46     		mov	r6, r3
 7400              	.LVL864:
 7401              	.L552:
4078:./FW/ff.c     ****         fp->fptr = nsect = 0;
 7402              		.loc 1 4078 9 is_stmt 1 view .LVU2458
4078:./FW/ff.c     ****         fp->fptr = nsect = 0;
 7403              		.loc 1 4078 15 is_stmt 0 view .LVU2459
 7404 014e A369     		ldr	r3, [r4, #24]
 7405              	.LVL865:
4079:./FW/ff.c     ****         if (ofs) {
 7406              		.loc 1 4079 9 is_stmt 1 view .LVU2460
4079:./FW/ff.c     ****         if (ofs) {
 7407              		.loc 1 4079 18 is_stmt 0 view .LVU2461
 7408 0150 0022     		movs	r2, #0
 7409 0152 A261     		str	r2, [r4, #24]
4080:./FW/ff.c     ****             bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size (byte) */
 7410              		.loc 1 4080 9 is_stmt 1 view .LVU2462
4080:./FW/ff.c     ****             bcs = (DWORD)fs->csize * SS(fs);    /* Cluster size (byte) */
 7411              		.loc 1 4080 12 is_stmt 0 view .LVU2463
 7412 0154 EEB1     		cbz	r6, .L553
4081:./FW/ff.c     ****             if (ifptr > 0 &&
 7413              		.loc 1 4081 13 is_stmt 1 view .LVU2464
4081:./FW/ff.c     ****             if (ifptr > 0 &&
 7414              		.loc 1 4081 28 is_stmt 0 view .LVU2465
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 272


 7415 0156 039A     		ldr	r2, [sp, #12]
 7416 0158 B2F80A90 		ldrh	r9, [r2, #10]
4081:./FW/ff.c     ****             if (ifptr > 0 &&
 7417              		.loc 1 4081 17 view .LVU2466
 7418 015c 4FEA4929 		lsl	r9, r9, #9
 7419              	.LVL866:
4082:./FW/ff.c     ****                     (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following clust
 7420              		.loc 1 4082 13 is_stmt 1 view .LVU2467
4082:./FW/ff.c     ****                     (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following clust
 7421              		.loc 1 4082 16 is_stmt 0 view .LVU2468
 7422 0160 83B1     		cbz	r3, .L554
4083:./FW/ff.c     ****                 fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);   /* start from the current cluster *
 7423              		.loc 1 4083 26 discriminator 1 view .LVU2469
 7424 0162 721E     		subs	r2, r6, #1
4083:./FW/ff.c     ****                 fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);   /* start from the current cluster *
 7425              		.loc 1 4083 31 discriminator 1 view .LVU2470
 7426 0164 B2FBF9F2 		udiv	r2, r2, r9
4083:./FW/ff.c     ****                 fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);   /* start from the current cluster *
 7427              		.loc 1 4083 47 discriminator 1 view .LVU2471
 7428 0168 013B     		subs	r3, r3, #1
 7429              	.LVL867:
4083:./FW/ff.c     ****                 fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);   /* start from the current cluster *
 7430              		.loc 1 4083 52 discriminator 1 view .LVU2472
 7431 016a B3FBF9F1 		udiv	r1, r3, r9
4082:./FW/ff.c     ****                     (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following clust
 7432              		.loc 1 4082 27 discriminator 1 view .LVU2473
 7433 016e 8A42     		cmp	r2, r1
 7434 0170 08D3     		bcc	.L554
4084:./FW/ff.c     ****                 ofs -= fp->fptr;
 7435              		.loc 1 4084 17 is_stmt 1 view .LVU2474
4084:./FW/ff.c     ****                 ofs -= fp->fptr;
 7436              		.loc 1 4084 42 is_stmt 0 view .LVU2475
 7437 0172 C9F10008 		rsb	r8, r9, #0
4084:./FW/ff.c     ****                 ofs -= fp->fptr;
 7438              		.loc 1 4084 40 view .LVU2476
 7439 0176 03EA0803 		and	r3, r3, r8
 7440              	.LVL868:
4084:./FW/ff.c     ****                 ofs -= fp->fptr;
 7441              		.loc 1 4084 26 view .LVU2477
 7442 017a A361     		str	r3, [r4, #24]
4085:./FW/ff.c     ****                 clst = fp->clust;
 7443              		.loc 1 4085 17 is_stmt 1 view .LVU2478
4085:./FW/ff.c     ****                 clst = fp->clust;
 7444              		.loc 1 4085 21 is_stmt 0 view .LVU2479
 7445 017c A6EB0308 		sub	r8, r6, r3
 7446              	.LVL869:
4086:./FW/ff.c     ****             } else {                                    /* When seek to back cluster, */
 7447              		.loc 1 4086 17 is_stmt 1 view .LVU2480
4086:./FW/ff.c     ****             } else {                                    /* When seek to back cluster, */
 7448              		.loc 1 4086 22 is_stmt 0 view .LVU2481
 7449 0180 E669     		ldr	r6, [r4, #28]
 7450              	.LVL870:
4086:./FW/ff.c     ****             } else {                                    /* When seek to back cluster, */
 7451              		.loc 1 4086 22 view .LVU2482
 7452 0182 04E0     		b	.L555
 7453              	.LVL871:
 7454              	.L554:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 273


4088:./FW/ff.c     **** #if !_FS_READONLY
 7455              		.loc 1 4088 17 is_stmt 1 view .LVU2483
4088:./FW/ff.c     **** #if !_FS_READONLY
 7456              		.loc 1 4088 22 is_stmt 0 view .LVU2484
 7457 0184 A068     		ldr	r0, [r4, #8]
 7458              	.LVL872:
4090:./FW/ff.c     ****                     clst = create_chain(&fp->obj, 0);
 7459              		.loc 1 4090 17 is_stmt 1 view .LVU2485
4090:./FW/ff.c     ****                     clst = create_chain(&fp->obj, 0);
 7460              		.loc 1 4090 20 is_stmt 0 view .LVU2486
 7461 0186 30B3     		cbz	r0, .L587
 7462              	.L556:
4097:./FW/ff.c     ****             }
 7463              		.loc 1 4097 17 is_stmt 1 view .LVU2487
4097:./FW/ff.c     ****             }
 7464              		.loc 1 4097 27 is_stmt 0 view .LVU2488
 7465 0188 E061     		str	r0, [r4, #28]
 7466 018a B046     		mov	r8, r6
 7467 018c 0646     		mov	r6, r0
 7468              	.LVL873:
 7469              	.L555:
4099:./FW/ff.c     ****                 while (ofs > bcs) {                     /* Cluster following loop */
 7470              		.loc 1 4099 13 is_stmt 1 view .LVU2489
4099:./FW/ff.c     ****                 while (ofs > bcs) {                     /* Cluster following loop */
 7471              		.loc 1 4099 16 is_stmt 0 view .LVU2490
 7472 018e 002E     		cmp	r6, #0
 7473 0190 41D1     		bne	.L559
 7474              	.LVL874:
 7475              	.L553:
4131:./FW/ff.c     ****             fp->obj.objsize = fp->fptr;
 7476              		.loc 1 4131 9 is_stmt 1 view .LVU2491
4131:./FW/ff.c     ****             fp->obj.objsize = fp->fptr;
 7477              		.loc 1 4131 32 is_stmt 0 view .LVU2492
 7478 0192 A369     		ldr	r3, [r4, #24]
4131:./FW/ff.c     ****             fp->obj.objsize = fp->fptr;
 7479              		.loc 1 4131 48 view .LVU2493
 7480 0194 E268     		ldr	r2, [r4, #12]
4131:./FW/ff.c     ****             fp->obj.objsize = fp->fptr;
 7481              		.loc 1 4131 12 view .LVU2494
 7482 0196 9342     		cmp	r3, r2
 7483 0198 04D9     		bls	.L568
4132:./FW/ff.c     ****             fp->flag |= FA_MODIFIED;
 7484              		.loc 1 4132 13 is_stmt 1 view .LVU2495
4132:./FW/ff.c     ****             fp->flag |= FA_MODIFIED;
 7485              		.loc 1 4132 29 is_stmt 0 view .LVU2496
 7486 019a E360     		str	r3, [r4, #12]
4133:./FW/ff.c     ****         }
 7487              		.loc 1 4133 13 is_stmt 1 view .LVU2497
4133:./FW/ff.c     ****         }
 7488              		.loc 1 4133 22 is_stmt 0 view .LVU2498
 7489 019c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7490 019e 42F04002 		orr	r2, r2, #64
 7491 01a2 2275     		strb	r2, [r4, #20]
 7492              	.L568:
4135:./FW/ff.c     **** #if !_FS_TINY
 7493              		.loc 1 4135 9 is_stmt 1 view .LVU2499
4135:./FW/ff.c     **** #if !_FS_TINY
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 274


 7494              		.loc 1 4135 22 is_stmt 0 view .LVU2500
 7495 01a4 C3F30803 		ubfx	r3, r3, #0, #9
4135:./FW/ff.c     **** #if !_FS_TINY
 7496              		.loc 1 4135 12 view .LVU2501
 7497 01a8 002B     		cmp	r3, #0
 7498 01aa 3FF444AF 		beq	.L538
4135:./FW/ff.c     **** #if !_FS_TINY
 7499              		.loc 1 4135 45 discriminator 1 view .LVU2502
 7500 01ae 226A     		ldr	r2, [r4, #32]
4135:./FW/ff.c     **** #if !_FS_TINY
 7501              		.loc 1 4135 31 discriminator 1 view .LVU2503
 7502 01b0 B242     		cmp	r2, r6
 7503 01b2 3FF440AF 		beq	.L538
4138:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
 7504              		.loc 1 4138 13 is_stmt 1 view .LVU2504
4138:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
 7505              		.loc 1 4138 17 is_stmt 0 view .LVU2505
 7506 01b6 94F91430 		ldrsb	r3, [r4, #20]
4138:./FW/ff.c     ****                 if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) { ABORT(fs, FR_DISK_ERR); 
 7507              		.loc 1 4138 16 view .LVU2506
 7508 01ba 002B     		cmp	r3, #0
 7509 01bc 57DB     		blt	.L588
 7510              	.L569:
4143:./FW/ff.c     **** #endif
 7511              		.loc 1 4143 13 is_stmt 1 view .LVU2507
4143:./FW/ff.c     **** #endif
 7512              		.loc 1 4143 17 is_stmt 0 view .LVU2508
 7513 01be 0123     		movs	r3, #1
 7514 01c0 3246     		mov	r2, r6
 7515 01c2 04F13001 		add	r1, r4, #48
 7516 01c6 0398     		ldr	r0, [sp, #12]
 7517 01c8 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7518 01ca FFF7FEFF 		bl	disk_read
 7519              	.LVL875:
4143:./FW/ff.c     **** #endif
 7520              		.loc 1 4143 16 view .LVU2509
 7521 01ce 0028     		cmp	r0, #0
 7522 01d0 5DD1     		bne	.L589
4143:./FW/ff.c     **** #endif
 7523              		.loc 1 4143 90 is_stmt 1 discriminator 2 view .LVU2510
4145:./FW/ff.c     ****         }
 7524              		.loc 1 4145 13 discriminator 2 view .LVU2511
4145:./FW/ff.c     ****         }
 7525              		.loc 1 4145 22 is_stmt 0 discriminator 2 view .LVU2512
 7526 01d2 2662     		str	r6, [r4, #32]
 7527 01d4 2FE7     		b	.L538
 7528              	.LVL876:
 7529              	.L587:
4091:./FW/ff.c     ****                     if (clst == 1) { ABORT(fs, FR_INT_ERR); }
 7530              		.loc 1 4091 21 is_stmt 1 view .LVU2513
4091:./FW/ff.c     ****                     if (clst == 1) { ABORT(fs, FR_INT_ERR); }
 7531              		.loc 1 4091 28 is_stmt 0 view .LVU2514
 7532 01d6 0021     		movs	r1, #0
 7533 01d8 2046     		mov	r0, r4
 7534              	.LVL877:
4091:./FW/ff.c     ****                     if (clst == 1) { ABORT(fs, FR_INT_ERR); }
 7535              		.loc 1 4091 28 view .LVU2515
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 275


 7536 01da FFF7FEFF 		bl	create_chain
 7537              	.LVL878:
4092:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7538              		.loc 1 4092 21 is_stmt 1 view .LVU2516
4092:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7539              		.loc 1 4092 24 is_stmt 0 view .LVU2517
 7540 01de 0128     		cmp	r0, #1
 7541 01e0 04D0     		beq	.L590
4092:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7542              		.loc 1 4092 59 is_stmt 1 discriminator 2 view .LVU2518
4093:./FW/ff.c     ****                     fp->obj.sclust = clst;
 7543              		.loc 1 4093 21 discriminator 2 view .LVU2519
4093:./FW/ff.c     ****                     fp->obj.sclust = clst;
 7544              		.loc 1 4093 24 is_stmt 0 discriminator 2 view .LVU2520
 7545 01e2 B0F1FF3F 		cmp	r0, #-1
 7546 01e6 04D0     		beq	.L591
4093:./FW/ff.c     ****                     fp->obj.sclust = clst;
 7547              		.loc 1 4093 69 is_stmt 1 discriminator 2 view .LVU2521
4094:./FW/ff.c     ****                 }
 7548              		.loc 1 4094 21 discriminator 2 view .LVU2522
4094:./FW/ff.c     ****                 }
 7549              		.loc 1 4094 36 is_stmt 0 discriminator 2 view .LVU2523
 7550 01e8 A060     		str	r0, [r4, #8]
 7551 01ea CDE7     		b	.L556
 7552              	.L590:
4092:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7553              		.loc 1 4092 38 is_stmt 1 discriminator 1 view .LVU2524
 7554 01ec 0225     		movs	r5, #2
 7555              	.LVL879:
4092:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7556              		.loc 1 4092 38 is_stmt 0 discriminator 1 view .LVU2525
 7557 01ee 6575     		strb	r5, [r4, #21]
4092:./FW/ff.c     ****                     if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR); }
 7558              		.loc 1 4092 38 is_stmt 1 discriminator 1 view .LVU2526
 7559 01f0 21E7     		b	.L538
 7560              	.LVL880:
 7561              	.L591:
4093:./FW/ff.c     ****                     fp->obj.sclust = clst;
 7562              		.loc 1 4093 47 discriminator 1 view .LVU2527
 7563 01f2 0125     		movs	r5, #1
 7564              	.LVL881:
4093:./FW/ff.c     ****                     fp->obj.sclust = clst;
 7565              		.loc 1 4093 47 is_stmt 0 discriminator 1 view .LVU2528
 7566 01f4 6575     		strb	r5, [r4, #21]
4093:./FW/ff.c     ****                     fp->obj.sclust = clst;
 7567              		.loc 1 4093 47 is_stmt 1 discriminator 1 view .LVU2529
 7568 01f6 1EE7     		b	.L538
 7569              	.LVL882:
 7570              	.L560:
4117:./FW/ff.c     ****                     }
 7571              		.loc 1 4117 25 view .LVU2530
4117:./FW/ff.c     ****                     }
 7572              		.loc 1 4117 32 is_stmt 0 view .LVU2531
 7573 01f8 3146     		mov	r1, r6
 7574 01fa 3846     		mov	r0, r7
 7575 01fc FFF7FEFF 		bl	get_fat
 7576              	.LVL883:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 276


 7577 0200 0646     		mov	r6, r0
 7578              	.LVL884:
 7579              	.L562:
4119:./FW/ff.c     ****                     if (clst <= 1 || clst >= fs->n_fatent) { ABORT(fs, FR_INT_ERR); }
 7580              		.loc 1 4119 21 is_stmt 1 view .LVU2532
4119:./FW/ff.c     ****                     if (clst <= 1 || clst >= fs->n_fatent) { ABORT(fs, FR_INT_ERR); }
 7581              		.loc 1 4119 24 is_stmt 0 view .LVU2533
 7582 0202 B6F1FF3F 		cmp	r6, #-1
 7583 0206 27D0     		beq	.L592
4119:./FW/ff.c     ****                     if (clst <= 1 || clst >= fs->n_fatent) { ABORT(fs, FR_INT_ERR); }
 7584              		.loc 1 4119 69 is_stmt 1 discriminator 2 view .LVU2534
4120:./FW/ff.c     ****                     fp->clust = clst;
 7585              		.loc 1 4120 21 discriminator 2 view .LVU2535
4120:./FW/ff.c     ****                     fp->clust = clst;
 7586              		.loc 1 4120 24 is_stmt 0 discriminator 2 view .LVU2536
 7587 0208 012E     		cmp	r6, #1
 7588 020a 28D9     		bls	.L564
4120:./FW/ff.c     ****                     fp->clust = clst;
 7589              		.loc 1 4120 48 discriminator 2 view .LVU2537
 7590 020c 039B     		ldr	r3, [sp, #12]
 7591 020e 5B69     		ldr	r3, [r3, #20]
4120:./FW/ff.c     ****                     fp->clust = clst;
 7592              		.loc 1 4120 35 discriminator 2 view .LVU2538
 7593 0210 B342     		cmp	r3, r6
 7594 0212 24D9     		bls	.L564
4120:./FW/ff.c     ****                     fp->clust = clst;
 7595              		.loc 1 4120 83 is_stmt 1 discriminator 4 view .LVU2539
4121:./FW/ff.c     ****                 }
 7596              		.loc 1 4121 21 discriminator 4 view .LVU2540
4121:./FW/ff.c     ****                 }
 7597              		.loc 1 4121 31 is_stmt 0 discriminator 4 view .LVU2541
 7598 0214 E661     		str	r6, [r4, #28]
 7599              	.LVL885:
 7600              	.L559:
4100:./FW/ff.c     ****                     ofs -= bcs;
 7601              		.loc 1 4100 23 is_stmt 1 view .LVU2542
 7602 0216 C845     		cmp	r8, r9
 7603 0218 10D9     		bls	.L561
4101:./FW/ff.c     ****                     fp->fptr += bcs;
 7604              		.loc 1 4101 21 view .LVU2543
4101:./FW/ff.c     ****                     fp->fptr += bcs;
 7605              		.loc 1 4101 25 is_stmt 0 view .LVU2544
 7606 021a A8EB0908 		sub	r8, r8, r9
 7607              	.LVL886:
4102:./FW/ff.c     **** #if !_FS_READONLY
 7608              		.loc 1 4102 21 is_stmt 1 view .LVU2545
4102:./FW/ff.c     **** #if !_FS_READONLY
 7609              		.loc 1 4102 30 is_stmt 0 view .LVU2546
 7610 021e A369     		ldr	r3, [r4, #24]
 7611 0220 4B44     		add	r3, r3, r9
 7612 0222 A361     		str	r3, [r4, #24]
4104:./FW/ff.c     ****                         if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {  /* No FAT chain object need
 7613              		.loc 1 4104 21 is_stmt 1 view .LVU2547
4104:./FW/ff.c     ****                         if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {  /* No FAT chain object need
 7614              		.loc 1 4104 27 is_stmt 0 view .LVU2548
 7615 0224 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4104:./FW/ff.c     ****                         if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {  /* No FAT chain object need
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 277


 7616              		.loc 1 4104 24 view .LVU2549
 7617 0226 13F0020F 		tst	r3, #2
 7618 022a E5D0     		beq	.L560
4105:./FW/ff.c     ****                             fp->obj.objsize = fp->fptr;
 7619              		.loc 1 4105 25 is_stmt 1 view .LVU2550
4109:./FW/ff.c     ****                         if (clst == 0) {                /* Clip file size in case of disk full */
 7620              		.loc 1 4109 25 view .LVU2551
4109:./FW/ff.c     ****                         if (clst == 0) {                /* Clip file size in case of disk full */
 7621              		.loc 1 4109 32 is_stmt 0 view .LVU2552
 7622 022c 3146     		mov	r1, r6
 7623 022e 3846     		mov	r0, r7
 7624 0230 FFF7FEFF 		bl	create_chain
 7625              	.LVL887:
4110:./FW/ff.c     ****                             ofs = 0;
 7626              		.loc 1 4110 25 is_stmt 1 view .LVU2553
4110:./FW/ff.c     ****                             ofs = 0;
 7627              		.loc 1 4110 28 is_stmt 0 view .LVU2554
 7628 0234 0646     		mov	r6, r0
 7629 0236 0028     		cmp	r0, #0
 7630 0238 E3D1     		bne	.L562
4111:./FW/ff.c     ****                             break;
 7631              		.loc 1 4111 33 view .LVU2555
 7632 023a 8046     		mov	r8, r0
 7633              	.LVL888:
 7634              	.L561:
4123:./FW/ff.c     ****                 if (ofs % SS(fs)) {
 7635              		.loc 1 4123 17 is_stmt 1 view .LVU2556
4123:./FW/ff.c     ****                 if (ofs % SS(fs)) {
 7636              		.loc 1 4123 26 is_stmt 0 view .LVU2557
 7637 023c A369     		ldr	r3, [r4, #24]
 7638 023e 4344     		add	r3, r3, r8
 7639 0240 A361     		str	r3, [r4, #24]
4124:./FW/ff.c     ****                     nsect = clust2sect(fs, clst);   /* Current sector */
 7640              		.loc 1 4124 17 is_stmt 1 view .LVU2558
4124:./FW/ff.c     ****                     nsect = clust2sect(fs, clst);   /* Current sector */
 7641              		.loc 1 4124 25 is_stmt 0 view .LVU2559
 7642 0242 C8F30803 		ubfx	r3, r8, #0, #9
4124:./FW/ff.c     ****                     nsect = clust2sect(fs, clst);   /* Current sector */
 7643              		.loc 1 4124 20 view .LVU2560
 7644 0246 83B1     		cbz	r3, .L577
4125:./FW/ff.c     ****                     if (!nsect) { ABORT(fs, FR_INT_ERR); }
 7645              		.loc 1 4125 21 is_stmt 1 view .LVU2561
4125:./FW/ff.c     ****                     if (!nsect) { ABORT(fs, FR_INT_ERR); }
 7646              		.loc 1 4125 29 is_stmt 0 view .LVU2562
 7647 0248 3146     		mov	r1, r6
 7648 024a 0398     		ldr	r0, [sp, #12]
 7649 024c FFF7FEFF 		bl	clust2sect
 7650              	.LVL889:
4126:./FW/ff.c     ****                     nsect += (DWORD)(ofs / SS(fs));
 7651              		.loc 1 4126 21 is_stmt 1 view .LVU2563
4126:./FW/ff.c     ****                     nsect += (DWORD)(ofs / SS(fs));
 7652              		.loc 1 4126 24 is_stmt 0 view .LVU2564
 7653 0250 40B1     		cbz	r0, .L593
4126:./FW/ff.c     ****                     nsect += (DWORD)(ofs / SS(fs));
 7654              		.loc 1 4126 56 is_stmt 1 discriminator 2 view .LVU2565
4127:./FW/ff.c     ****                 }
 7655              		.loc 1 4127 21 discriminator 2 view .LVU2566
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 278


4127:./FW/ff.c     ****                 }
 7656              		.loc 1 4127 27 is_stmt 0 discriminator 2 view .LVU2567
 7657 0252 00EB5826 		add	r6, r0, r8, lsr #9
 7658              	.LVL890:
4127:./FW/ff.c     ****                 }
 7659              		.loc 1 4127 27 discriminator 2 view .LVU2568
 7660 0256 9CE7     		b	.L553
 7661              	.LVL891:
 7662              	.L592:
4119:./FW/ff.c     ****                     if (clst <= 1 || clst >= fs->n_fatent) { ABORT(fs, FR_INT_ERR); }
 7663              		.loc 1 4119 47 is_stmt 1 discriminator 1 view .LVU2569
 7664 0258 0125     		movs	r5, #1
 7665              	.LVL892:
4119:./FW/ff.c     ****                     if (clst <= 1 || clst >= fs->n_fatent) { ABORT(fs, FR_INT_ERR); }
 7666              		.loc 1 4119 47 is_stmt 0 discriminator 1 view .LVU2570
 7667 025a 6575     		strb	r5, [r4, #21]
4119:./FW/ff.c     ****                     if (clst <= 1 || clst >= fs->n_fatent) { ABORT(fs, FR_INT_ERR); }
 7668              		.loc 1 4119 47 is_stmt 1 discriminator 1 view .LVU2571
 7669 025c EBE6     		b	.L538
 7670              	.LVL893:
 7671              	.L564:
4120:./FW/ff.c     ****                     fp->clust = clst;
 7672              		.loc 1 4120 62 discriminator 3 view .LVU2572
 7673 025e 0225     		movs	r5, #2
 7674              	.LVL894:
4120:./FW/ff.c     ****                     fp->clust = clst;
 7675              		.loc 1 4120 62 is_stmt 0 discriminator 3 view .LVU2573
 7676 0260 6575     		strb	r5, [r4, #21]
4120:./FW/ff.c     ****                     fp->clust = clst;
 7677              		.loc 1 4120 62 is_stmt 1 discriminator 3 view .LVU2574
 7678 0262 E8E6     		b	.L538
 7679              	.LVL895:
 7680              	.L593:
4126:./FW/ff.c     ****                     nsect += (DWORD)(ofs / SS(fs));
 7681              		.loc 1 4126 35 discriminator 1 view .LVU2575
 7682 0264 0225     		movs	r5, #2
 7683              	.LVL896:
4126:./FW/ff.c     ****                     nsect += (DWORD)(ofs / SS(fs));
 7684              		.loc 1 4126 35 is_stmt 0 discriminator 1 view .LVU2576
 7685 0266 6575     		strb	r5, [r4, #21]
4126:./FW/ff.c     ****                     nsect += (DWORD)(ofs / SS(fs));
 7686              		.loc 1 4126 35 is_stmt 1 discriminator 1 view .LVU2577
 7687 0268 E5E6     		b	.L538
 7688              	.LVL897:
 7689              	.L577:
4079:./FW/ff.c     ****         if (ofs) {
 7690              		.loc 1 4079 26 is_stmt 0 view .LVU2578
 7691 026a 1E46     		mov	r6, r3
 7692              	.LVL898:
4079:./FW/ff.c     ****         if (ofs) {
 7693              		.loc 1 4079 26 view .LVU2579
 7694 026c 91E7     		b	.L553
 7695              	.LVL899:
 7696              	.L588:
4139:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 7697              		.loc 1 4139 17 is_stmt 1 view .LVU2580
4139:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 279


 7698              		.loc 1 4139 21 is_stmt 0 view .LVU2581
 7699 026e 0123     		movs	r3, #1
 7700 0270 04F13001 		add	r1, r4, #48
 7701 0274 0398     		ldr	r0, [sp, #12]
 7702 0276 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7703 0278 FFF7FEFF 		bl	disk_write
 7704              	.LVL900:
4139:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 7705              		.loc 1 4139 20 view .LVU2582
 7706 027c 20B9     		cbnz	r0, .L594
4139:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 7707              		.loc 1 4139 98 is_stmt 1 discriminator 2 view .LVU2583
4140:./FW/ff.c     ****             }
 7708              		.loc 1 4140 17 discriminator 2 view .LVU2584
4140:./FW/ff.c     ****             }
 7709              		.loc 1 4140 26 is_stmt 0 discriminator 2 view .LVU2585
 7710 027e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 7711 0280 03F07F03 		and	r3, r3, #127
 7712 0284 2375     		strb	r3, [r4, #20]
 7713 0286 9AE7     		b	.L569
 7714              	.L594:
4139:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 7715              		.loc 1 4139 76 is_stmt 1 discriminator 1 view .LVU2586
 7716 0288 0125     		movs	r5, #1
 7717              	.LVL901:
4139:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 7718              		.loc 1 4139 76 is_stmt 0 discriminator 1 view .LVU2587
 7719 028a 6575     		strb	r5, [r4, #21]
4139:./FW/ff.c     ****                 fp->flag &= (BYTE)~FA_DIRTY;
 7720              		.loc 1 4139 76 is_stmt 1 discriminator 1 view .LVU2588
 7721 028c D3E6     		b	.L538
 7722              	.LVL902:
 7723              	.L589:
4143:./FW/ff.c     **** #endif
 7724              		.loc 1 4143 68 discriminator 1 view .LVU2589
 7725 028e 0125     		movs	r5, #1
 7726              	.LVL903:
4143:./FW/ff.c     **** #endif
 7727              		.loc 1 4143 68 is_stmt 0 discriminator 1 view .LVU2590
 7728 0290 6575     		strb	r5, [r4, #21]
4143:./FW/ff.c     **** #endif
 7729              		.loc 1 4143 68 is_stmt 1 discriminator 1 view .LVU2591
 7730 0292 D0E6     		b	.L538
 7731              	.LVL904:
 7732              	.L574:
4043:./FW/ff.c     ****             }
 7733              		.loc 1 4043 21 is_stmt 0 view .LVU2592
 7734 0294 1125     		movs	r5, #17
 7735              	.LVL905:
4043:./FW/ff.c     ****             }
 7736              		.loc 1 4043 21 view .LVU2593
 7737 0296 CEE6     		b	.L538
 7738              		.cfi_endproc
 7739              	.LFE983:
 7741              		.section	.text.f_opendir,"ax",%progbits
 7742              		.align	1
 7743              		.global	f_opendir
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 280


 7744              		.syntax unified
 7745              		.thumb
 7746              		.thumb_func
 7747              		.fpu fpv4-sp-d16
 7749              	f_opendir:
 7750              	.LVL906:
 7751              	.LFB984:
4162:./FW/ff.c     ****     FRESULT res;
 7752              		.loc 1 4162 3 is_stmt 1 view -0
 7753              		.cfi_startproc
 7754              		@ args = 0, pretend = 0, frame = 16
 7755              		@ frame_needed = 0, uses_anonymous_args = 0
4162:./FW/ff.c     ****     FRESULT res;
 7756              		.loc 1 4162 3 is_stmt 0 view .LVU2595
 7757 0000 30B5     		push	{r4, r5, lr}
 7758              	.LCFI82:
 7759              		.cfi_def_cfa_offset 12
 7760              		.cfi_offset 4, -12
 7761              		.cfi_offset 5, -8
 7762              		.cfi_offset 14, -4
 7763 0002 85B0     		sub	sp, sp, #20
 7764              	.LCFI83:
 7765              		.cfi_def_cfa_offset 32
 7766 0004 0191     		str	r1, [sp, #4]
4163:./FW/ff.c     ****     FATFS *fs;
 7767              		.loc 1 4163 5 is_stmt 1 view .LVU2596
4164:./FW/ff.c     ****     _FDID *obj;
 7768              		.loc 1 4164 5 view .LVU2597
4165:./FW/ff.c     ****     DEF_NAMBUF
 7769              		.loc 1 4165 5 view .LVU2598
4169:./FW/ff.c     **** 
 7770              		.loc 1 4169 5 view .LVU2599
4169:./FW/ff.c     **** 
 7771              		.loc 1 4169 8 is_stmt 0 view .LVU2600
 7772 0006 0028     		cmp	r0, #0
 7773 0008 3DD0     		beq	.L602
 7774 000a 0546     		mov	r5, r0
4172:./FW/ff.c     ****     res = find_volume(&path, &fs, 0);
 7775              		.loc 1 4172 5 is_stmt 1 view .LVU2601
 7776              	.LVL907:
4173:./FW/ff.c     ****     if (res == FR_OK) {
 7777              		.loc 1 4173 5 view .LVU2602
4173:./FW/ff.c     ****     if (res == FR_OK) {
 7778              		.loc 1 4173 11 is_stmt 0 view .LVU2603
 7779 000c 0022     		movs	r2, #0
 7780 000e 03A9     		add	r1, sp, #12
 7781              	.LVL908:
4173:./FW/ff.c     ****     if (res == FR_OK) {
 7782              		.loc 1 4173 11 view .LVU2604
 7783 0010 01A8     		add	r0, sp, #4
 7784              	.LVL909:
4173:./FW/ff.c     ****     if (res == FR_OK) {
 7785              		.loc 1 4173 11 view .LVU2605
 7786 0012 FFF7FEFF 		bl	find_volume
 7787              	.LVL910:
4174:./FW/ff.c     ****         obj->fs = fs;
 7788              		.loc 1 4174 5 is_stmt 1 view .LVU2606
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 281


4174:./FW/ff.c     ****         obj->fs = fs;
 7789              		.loc 1 4174 8 is_stmt 0 view .LVU2607
 7790 0016 0446     		mov	r4, r0
 7791 0018 28B1     		cbz	r0, .L607
 7792              	.L597:
4216:./FW/ff.c     **** 
 7793              		.loc 1 4216 5 is_stmt 1 view .LVU2608
4216:./FW/ff.c     **** 
 7794              		.loc 1 4216 8 is_stmt 0 view .LVU2609
 7795 001a 0CB1     		cbz	r4, .L596
 7796              	.L601:
4216:./FW/ff.c     **** 
 7797              		.loc 1 4216 25 is_stmt 1 discriminator 1 view .LVU2610
4216:./FW/ff.c     **** 
 7798              		.loc 1 4216 33 is_stmt 0 discriminator 1 view .LVU2611
 7799 001c 0023     		movs	r3, #0
 7800 001e 2B60     		str	r3, [r5]
 7801              	.LVL911:
 7802              	.L596:
4219:./FW/ff.c     **** 
 7803              		.loc 1 4219 1 view .LVU2612
 7804 0020 2046     		mov	r0, r4
 7805 0022 05B0     		add	sp, sp, #20
 7806              	.LCFI84:
 7807              		.cfi_remember_state
 7808              		.cfi_def_cfa_offset 12
 7809              		@ sp needed
 7810 0024 30BD     		pop	{r4, r5, pc}
 7811              	.LVL912:
 7812              	.L607:
 7813              	.LCFI85:
 7814              		.cfi_restore_state
4175:./FW/ff.c     ****         INIT_NAMBUF(fs);
 7815              		.loc 1 4175 9 is_stmt 1 view .LVU2613
4175:./FW/ff.c     ****         INIT_NAMBUF(fs);
 7816              		.loc 1 4175 17 is_stmt 0 view .LVU2614
 7817 0026 039B     		ldr	r3, [sp, #12]
 7818 0028 2B60     		str	r3, [r5]
4176:./FW/ff.c     ****         res = follow_path(dp, path);            /* Follow the path to the directory */
 7819              		.loc 1 4176 24 is_stmt 1 view .LVU2615
4177:./FW/ff.c     ****         if (res == FR_OK) {                     /* Follow completed */
 7820              		.loc 1 4177 9 view .LVU2616
4177:./FW/ff.c     ****         if (res == FR_OK) {                     /* Follow completed */
 7821              		.loc 1 4177 15 is_stmt 0 view .LVU2617
 7822 002a 0199     		ldr	r1, [sp, #4]
 7823 002c 2846     		mov	r0, r5
 7824 002e FFF7FEFF 		bl	follow_path
 7825              	.LVL913:
4178:./FW/ff.c     ****             if (!(dp->fn[NSFLAG] & NS_NONAME)) {    /* It is not the origin directory itself */
 7826              		.loc 1 4178 9 is_stmt 1 view .LVU2618
4178:./FW/ff.c     ****             if (!(dp->fn[NSFLAG] & NS_NONAME)) {    /* It is not the origin directory itself */
 7827              		.loc 1 4178 12 is_stmt 0 view .LVU2619
 7828 0032 0446     		mov	r4, r0
 7829 0034 18BB     		cbnz	r0, .L598
4179:./FW/ff.c     ****                 if (obj->attr & AM_DIR) {       /* This object is a sub-directory */
 7830              		.loc 1 4179 13 is_stmt 1 view .LVU2620
4179:./FW/ff.c     ****                 if (obj->attr & AM_DIR) {       /* This object is a sub-directory */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 282


 7831              		.loc 1 4179 17 is_stmt 0 view .LVU2621
 7832 0036 95F92F30 		ldrsb	r3, [r5, #47]
4179:./FW/ff.c     ****                 if (obj->attr & AM_DIR) {       /* This object is a sub-directory */
 7833              		.loc 1 4179 16 view .LVU2622
 7834 003a 002B     		cmp	r3, #0
 7835 003c 08DB     		blt	.L599
4180:./FW/ff.c     **** #if _FS_EXFAT
 7836              		.loc 1 4180 17 is_stmt 1 view .LVU2623
4180:./FW/ff.c     **** #if _FS_EXFAT
 7837              		.loc 1 4180 24 is_stmt 0 view .LVU2624
 7838 003e AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
4180:./FW/ff.c     **** #if _FS_EXFAT
 7839              		.loc 1 4180 20 view .LVU2625
 7840 0040 13F0100F 		tst	r3, #16
 7841 0044 1AD0     		beq	.L603
4192:./FW/ff.c     ****                     }
 7842              		.loc 1 4192 25 is_stmt 1 view .LVU2626
4192:./FW/ff.c     ****                     }
 7843              		.loc 1 4192 39 is_stmt 0 view .LVU2627
 7844 0046 296A     		ldr	r1, [r5, #32]
 7845 0048 0398     		ldr	r0, [sp, #12]
 7846 004a FFF7FEFF 		bl	ld_clust
 7847              	.LVL914:
4192:./FW/ff.c     ****                     }
 7848              		.loc 1 4192 37 view .LVU2628
 7849 004e A860     		str	r0, [r5, #8]
 7850              	.L599:
4198:./FW/ff.c     ****                 obj->id = fs->id;
 7851              		.loc 1 4198 13 is_stmt 1 view .LVU2629
4199:./FW/ff.c     ****                 res = dir_sdi(dp, 0);           /* Rewind directory */
 7852              		.loc 1 4199 17 view .LVU2630
4199:./FW/ff.c     ****                 res = dir_sdi(dp, 0);           /* Rewind directory */
 7853              		.loc 1 4199 29 is_stmt 0 view .LVU2631
 7854 0050 039B     		ldr	r3, [sp, #12]
 7855 0052 DB88     		ldrh	r3, [r3, #6]
4199:./FW/ff.c     ****                 res = dir_sdi(dp, 0);           /* Rewind directory */
 7856              		.loc 1 4199 25 view .LVU2632
 7857 0054 AB80     		strh	r3, [r5, #4]	@ movhi
4200:./FW/ff.c     **** #if _FS_LOCK != 0
 7858              		.loc 1 4200 17 is_stmt 1 view .LVU2633
4200:./FW/ff.c     **** #if _FS_LOCK != 0
 7859              		.loc 1 4200 23 is_stmt 0 view .LVU2634
 7860 0056 0021     		movs	r1, #0
 7861 0058 2846     		mov	r0, r5
 7862 005a FFF7FEFF 		bl	dir_sdi
 7863              	.LVL915:
4202:./FW/ff.c     ****                     if (obj->sclust) {
 7864              		.loc 1 4202 17 is_stmt 1 view .LVU2635
4202:./FW/ff.c     ****                     if (obj->sclust) {
 7865              		.loc 1 4202 20 is_stmt 0 view .LVU2636
 7866 005e 0446     		mov	r4, r0
 7867 0060 68B9     		cbnz	r0, .L598
4203:./FW/ff.c     ****                         obj->lockid = inc_lock(dp, 0);  /* Lock the sub directory */
 7868              		.loc 1 4203 21 is_stmt 1 view .LVU2637
4203:./FW/ff.c     ****                         obj->lockid = inc_lock(dp, 0);  /* Lock the sub directory */
 7869              		.loc 1 4203 28 is_stmt 0 view .LVU2638
 7870 0062 AB68     		ldr	r3, [r5, #8]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 283


4203:./FW/ff.c     ****                         obj->lockid = inc_lock(dp, 0);  /* Lock the sub directory */
 7871              		.loc 1 4203 24 view .LVU2639
 7872 0064 13B9     		cbnz	r3, .L608
4207:./FW/ff.c     ****                     }
 7873              		.loc 1 4207 25 is_stmt 1 view .LVU2640
4207:./FW/ff.c     ****                     }
 7874              		.loc 1 4207 37 is_stmt 0 view .LVU2641
 7875 0066 0023     		movs	r3, #0
 7876 0068 2B61     		str	r3, [r5, #16]
 7877 006a 08E0     		b	.L598
 7878              	.L608:
4204:./FW/ff.c     ****                         if (!obj->lockid) { res = FR_TOO_MANY_OPEN_FILES; }
 7879              		.loc 1 4204 25 is_stmt 1 view .LVU2642
4204:./FW/ff.c     ****                         if (!obj->lockid) { res = FR_TOO_MANY_OPEN_FILES; }
 7880              		.loc 1 4204 39 is_stmt 0 view .LVU2643
 7881 006c 0021     		movs	r1, #0
 7882 006e 2846     		mov	r0, r5
 7883 0070 FFF7FEFF 		bl	inc_lock
 7884              	.LVL916:
4204:./FW/ff.c     ****                         if (!obj->lockid) { res = FR_TOO_MANY_OPEN_FILES; }
 7885              		.loc 1 4204 37 view .LVU2644
 7886 0074 2861     		str	r0, [r5, #16]
4205:./FW/ff.c     ****                     } else {
 7887              		.loc 1 4205 25 is_stmt 1 view .LVU2645
4205:./FW/ff.c     ****                     } else {
 7888              		.loc 1 4205 28 is_stmt 0 view .LVU2646
 7889 0076 10B9     		cbnz	r0, .L598
 7890              	.LVL917:
4205:./FW/ff.c     ****                     } else {
 7891              		.loc 1 4205 49 view .LVU2647
 7892 0078 1224     		movs	r4, #18
 7893 007a CEE7     		b	.L597
 7894              	.LVL918:
 7895              	.L603:
4195:./FW/ff.c     ****                 }
 7896              		.loc 1 4195 25 view .LVU2648
 7897 007c 0524     		movs	r4, #5
 7898              	.LVL919:
 7899              	.L598:
4213:./FW/ff.c     ****         if (res == FR_NO_FILE) { res = FR_NO_PATH; }
 7900              		.loc 1 4213 22 is_stmt 1 view .LVU2649
4214:./FW/ff.c     ****     }
 7901              		.loc 1 4214 9 view .LVU2650
4214:./FW/ff.c     ****     }
 7902              		.loc 1 4214 12 is_stmt 0 view .LVU2651
 7903 007e 042C     		cmp	r4, #4
 7904 0080 CBD1     		bne	.L597
 7905              	.LVL920:
4214:./FW/ff.c     ****     }
 7906              		.loc 1 4214 38 view .LVU2652
 7907 0082 0524     		movs	r4, #5
 7908 0084 CAE7     		b	.L601
 7909              	.LVL921:
 7910              	.L602:
4169:./FW/ff.c     **** 
 7911              		.loc 1 4169 23 view .LVU2653
 7912 0086 0924     		movs	r4, #9
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 284


 7913 0088 CAE7     		b	.L596
 7914              		.cfi_endproc
 7915              	.LFE984:
 7917              		.section	.text.f_closedir,"ax",%progbits
 7918              		.align	1
 7919              		.global	f_closedir
 7920              		.syntax unified
 7921              		.thumb
 7922              		.thumb_func
 7923              		.fpu fpv4-sp-d16
 7925              	f_closedir:
 7926              	.LVL922:
 7927              	.LFB985:
4230:./FW/ff.c     ****     FRESULT res;
 7928              		.loc 1 4230 3 is_stmt 1 view -0
 7929              		.cfi_startproc
 7930              		@ args = 0, pretend = 0, frame = 8
 7931              		@ frame_needed = 0, uses_anonymous_args = 0
4230:./FW/ff.c     ****     FRESULT res;
 7932              		.loc 1 4230 3 is_stmt 0 view .LVU2655
 7933 0000 10B5     		push	{r4, lr}
 7934              	.LCFI86:
 7935              		.cfi_def_cfa_offset 8
 7936              		.cfi_offset 4, -8
 7937              		.cfi_offset 14, -4
 7938 0002 82B0     		sub	sp, sp, #8
 7939              	.LCFI87:
 7940              		.cfi_def_cfa_offset 16
 7941 0004 0446     		mov	r4, r0
4231:./FW/ff.c     ****     FATFS *fs;
 7942              		.loc 1 4231 5 is_stmt 1 view .LVU2656
4232:./FW/ff.c     **** 
 7943              		.loc 1 4232 5 view .LVU2657
4235:./FW/ff.c     ****     if (res == FR_OK) {
 7944              		.loc 1 4235 5 view .LVU2658
4235:./FW/ff.c     ****     if (res == FR_OK) {
 7945              		.loc 1 4235 11 is_stmt 0 view .LVU2659
 7946 0006 01A9     		add	r1, sp, #4
 7947 0008 FFF7FEFF 		bl	validate
 7948              	.LVL923:
4236:./FW/ff.c     **** #if _FS_LOCK != 0
 7949              		.loc 1 4236 5 is_stmt 1 view .LVU2660
4236:./FW/ff.c     **** #if _FS_LOCK != 0
 7950              		.loc 1 4236 8 is_stmt 0 view .LVU2661
 7951 000c 20B9     		cbnz	r0, .L610
4238:./FW/ff.c     ****             res = dec_lock(dp->obj.lockid);
 7952              		.loc 1 4238 9 is_stmt 1 view .LVU2662
4238:./FW/ff.c     ****             res = dec_lock(dp->obj.lockid);
 7953              		.loc 1 4238 20 is_stmt 0 view .LVU2663
 7954 000e 2369     		ldr	r3, [r4, #16]
4238:./FW/ff.c     ****             res = dec_lock(dp->obj.lockid);
 7955              		.loc 1 4238 12 view .LVU2664
 7956 0010 23B9     		cbnz	r3, .L613
 7957              	.L611:
 7958              	.LVL924:
4241:./FW/ff.c     **** #endif
 7959              		.loc 1 4241 9 is_stmt 1 view .LVU2665
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 285


4241:./FW/ff.c     **** #endif
 7960              		.loc 1 4241 12 is_stmt 0 view .LVU2666
 7961 0012 08B9     		cbnz	r0, .L610
4244:./FW/ff.c     ****         }
 7962              		.loc 1 4244 13 is_stmt 1 view .LVU2667
4244:./FW/ff.c     ****         }
 7963              		.loc 1 4244 24 is_stmt 0 view .LVU2668
 7964 0014 0023     		movs	r3, #0
 7965 0016 2360     		str	r3, [r4]
 7966              	.LVL925:
 7967              	.L610:
4250:./FW/ff.c     **** }
 7968              		.loc 1 4250 5 is_stmt 1 view .LVU2669
4251:./FW/ff.c     **** 
 7969              		.loc 1 4251 1 is_stmt 0 view .LVU2670
 7970 0018 02B0     		add	sp, sp, #8
 7971              	.LCFI88:
 7972              		.cfi_remember_state
 7973              		.cfi_def_cfa_offset 8
 7974              		@ sp needed
 7975 001a 10BD     		pop	{r4, pc}
 7976              	.LVL926:
 7977              	.L613:
 7978              	.LCFI89:
 7979              		.cfi_restore_state
4239:./FW/ff.c     ****         }
 7980              		.loc 1 4239 13 is_stmt 1 view .LVU2671
4239:./FW/ff.c     ****         }
 7981              		.loc 1 4239 19 is_stmt 0 view .LVU2672
 7982 001c 1846     		mov	r0, r3
 7983 001e FFF7FEFF 		bl	dec_lock
 7984              	.LVL927:
4239:./FW/ff.c     ****         }
 7985              		.loc 1 4239 19 view .LVU2673
 7986 0022 F6E7     		b	.L611
 7987              		.cfi_endproc
 7988              	.LFE985:
 7990              		.section	.text.f_readdir,"ax",%progbits
 7991              		.align	1
 7992              		.global	f_readdir
 7993              		.syntax unified
 7994              		.thumb
 7995              		.thumb_func
 7996              		.fpu fpv4-sp-d16
 7998              	f_readdir:
 7999              	.LVL928:
 8000              	.LFB986:
4263:./FW/ff.c     ****     FRESULT res;
 8001              		.loc 1 4263 3 is_stmt 1 view -0
 8002              		.cfi_startproc
 8003              		@ args = 0, pretend = 0, frame = 8
 8004              		@ frame_needed = 0, uses_anonymous_args = 0
4263:./FW/ff.c     ****     FRESULT res;
 8005              		.loc 1 4263 3 is_stmt 0 view .LVU2675
 8006 0000 70B5     		push	{r4, r5, r6, lr}
 8007              	.LCFI90:
 8008              		.cfi_def_cfa_offset 16
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 286


 8009              		.cfi_offset 4, -16
 8010              		.cfi_offset 5, -12
 8011              		.cfi_offset 6, -8
 8012              		.cfi_offset 14, -4
 8013 0002 82B0     		sub	sp, sp, #8
 8014              	.LCFI91:
 8015              		.cfi_def_cfa_offset 24
 8016 0004 0446     		mov	r4, r0
 8017 0006 0D46     		mov	r5, r1
4264:./FW/ff.c     ****     FATFS *fs;
 8018              		.loc 1 4264 5 is_stmt 1 view .LVU2676
4265:./FW/ff.c     ****     DEF_NAMBUF
 8019              		.loc 1 4265 5 view .LVU2677
4269:./FW/ff.c     ****     if (res == FR_OK) {
 8020              		.loc 1 4269 5 view .LVU2678
4269:./FW/ff.c     ****     if (res == FR_OK) {
 8021              		.loc 1 4269 11 is_stmt 0 view .LVU2679
 8022 0008 01A9     		add	r1, sp, #4
 8023              	.LVL929:
4269:./FW/ff.c     ****     if (res == FR_OK) {
 8024              		.loc 1 4269 11 view .LVU2680
 8025 000a FFF7FEFF 		bl	validate
 8026              	.LVL930:
4270:./FW/ff.c     ****         if (!fno) {
 8027              		.loc 1 4270 5 is_stmt 1 view .LVU2681
4270:./FW/ff.c     ****         if (!fno) {
 8028              		.loc 1 4270 8 is_stmt 0 view .LVU2682
 8029 000e 0646     		mov	r6, r0
 8030 0010 C0B9     		cbnz	r0, .L615
4271:./FW/ff.c     ****             res = dir_sdi(dp, 0);           /* Rewind the directory object */
 8031              		.loc 1 4271 9 is_stmt 1 view .LVU2683
4271:./FW/ff.c     ****             res = dir_sdi(dp, 0);           /* Rewind the directory object */
 8032              		.loc 1 4271 12 is_stmt 0 view .LVU2684
 8033 0012 95B1     		cbz	r5, .L620
4274:./FW/ff.c     ****             res = dir_read(dp, 0);          /* Read an item */
 8034              		.loc 1 4274 28 is_stmt 1 view .LVU2685
4275:./FW/ff.c     ****             if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory */
 8035              		.loc 1 4275 13 view .LVU2686
4275:./FW/ff.c     ****             if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory */
 8036              		.loc 1 4275 19 is_stmt 0 view .LVU2687
 8037 0014 0021     		movs	r1, #0
 8038 0016 2046     		mov	r0, r4
 8039              	.LVL931:
4275:./FW/ff.c     ****             if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory */
 8040              		.loc 1 4275 19 view .LVU2688
 8041 0018 FFF7FEFF 		bl	dir_read
 8042              	.LVL932:
4276:./FW/ff.c     ****             if (res == FR_OK) {             /* A valid entry is found */
 8043              		.loc 1 4276 13 is_stmt 1 view .LVU2689
4276:./FW/ff.c     ****             if (res == FR_OK) {             /* A valid entry is found */
 8044              		.loc 1 4276 16 is_stmt 0 view .LVU2690
 8045 001c 0428     		cmp	r0, #4
 8046 001e 00D0     		beq	.L617
4277:./FW/ff.c     ****                 get_fileinfo(dp, fno);      /* Get the object information */
 8047              		.loc 1 4277 13 is_stmt 1 view .LVU2691
4277:./FW/ff.c     ****                 get_fileinfo(dp, fno);      /* Get the object information */
 8048              		.loc 1 4277 16 is_stmt 0 view .LVU2692
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 287


 8049 0020 98B9     		cbnz	r0, .L618
 8050              	.L617:
 8051              	.LVL933:
4278:./FW/ff.c     ****                 res = dir_next(dp, 0);      /* Increment index for next */
 8052              		.loc 1 4278 17 is_stmt 1 view .LVU2693
 8053 0022 2946     		mov	r1, r5
 8054 0024 2046     		mov	r0, r4
 8055 0026 FFF7FEFF 		bl	get_fileinfo
 8056              	.LVL934:
4279:./FW/ff.c     ****                 if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory now */
 8057              		.loc 1 4279 17 view .LVU2694
4279:./FW/ff.c     ****                 if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory now */
 8058              		.loc 1 4279 23 is_stmt 0 view .LVU2695
 8059 002a 0021     		movs	r1, #0
 8060 002c 2046     		mov	r0, r4
 8061 002e FFF7FEFF 		bl	dir_next
 8062              	.LVL935:
4280:./FW/ff.c     ****             }
 8063              		.loc 1 4280 17 is_stmt 1 view .LVU2696
4280:./FW/ff.c     ****             }
 8064              		.loc 1 4280 20 is_stmt 0 view .LVU2697
 8065 0032 0428     		cmp	r0, #4
 8066 0034 06D0     		beq	.L615
4279:./FW/ff.c     ****                 if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory now */
 8067              		.loc 1 4279 23 view .LVU2698
 8068 0036 0646     		mov	r6, r0
 8069 0038 04E0     		b	.L615
 8070              	.L620:
4272:./FW/ff.c     ****         } else {
 8071              		.loc 1 4272 13 is_stmt 1 view .LVU2699
4272:./FW/ff.c     ****         } else {
 8072              		.loc 1 4272 19 is_stmt 0 view .LVU2700
 8073 003a 0021     		movs	r1, #0
 8074 003c 2046     		mov	r0, r4
 8075              	.LVL936:
4272:./FW/ff.c     ****         } else {
 8076              		.loc 1 4272 19 view .LVU2701
 8077 003e FFF7FEFF 		bl	dir_sdi
 8078              	.LVL937:
 8079 0042 0646     		mov	r6, r0
 8080              	.LVL938:
 8081              	.L615:
4282:./FW/ff.c     ****         }
 8082              		.loc 1 4282 26 is_stmt 1 view .LVU2702
4285:./FW/ff.c     **** }
 8083              		.loc 1 4285 5 view .LVU2703
4286:./FW/ff.c     **** 
 8084              		.loc 1 4286 1 is_stmt 0 view .LVU2704
 8085 0044 3046     		mov	r0, r6
 8086 0046 02B0     		add	sp, sp, #8
 8087              	.LCFI92:
 8088              		.cfi_remember_state
 8089              		.cfi_def_cfa_offset 16
 8090              		@ sp needed
 8091 0048 70BD     		pop	{r4, r5, r6, pc}
 8092              	.LVL939:
 8093              	.L618:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 288


 8094              	.LCFI93:
 8095              		.cfi_restore_state
4275:./FW/ff.c     ****             if (res == FR_NO_FILE) { res = FR_OK; } /* Ignore end of directory */
 8096              		.loc 1 4275 19 view .LVU2705
 8097 004a 0646     		mov	r6, r0
 8098 004c FAE7     		b	.L615
 8099              		.cfi_endproc
 8100              	.LFE986:
 8102              		.section	.text.f_stat,"ax",%progbits
 8103              		.align	1
 8104              		.global	f_stat
 8105              		.syntax unified
 8106              		.thumb
 8107              		.thumb_func
 8108              		.fpu fpv4-sp-d16
 8110              	f_stat:
 8111              	.LVL940:
 8112              	.LFB987:
4348:./FW/ff.c     ****     FRESULT res;
 8113              		.loc 1 4348 3 is_stmt 1 view -0
 8114              		.cfi_startproc
 8115              		@ args = 0, pretend = 0, frame = 56
 8116              		@ frame_needed = 0, uses_anonymous_args = 0
4348:./FW/ff.c     ****     FRESULT res;
 8117              		.loc 1 4348 3 is_stmt 0 view .LVU2707
 8118 0000 30B5     		push	{r4, r5, lr}
 8119              	.LCFI94:
 8120              		.cfi_def_cfa_offset 12
 8121              		.cfi_offset 4, -12
 8122              		.cfi_offset 5, -8
 8123              		.cfi_offset 14, -4
 8124 0002 8FB0     		sub	sp, sp, #60
 8125              	.LCFI95:
 8126              		.cfi_def_cfa_offset 72
 8127 0004 0190     		str	r0, [sp, #4]
 8128 0006 0C46     		mov	r4, r1
4349:./FW/ff.c     ****     DIR dj;
 8129              		.loc 1 4349 5 is_stmt 1 view .LVU2708
4350:./FW/ff.c     ****     DEF_NAMBUF
 8130              		.loc 1 4350 5 view .LVU2709
4355:./FW/ff.c     ****     if (res == FR_OK) {
 8131              		.loc 1 4355 5 view .LVU2710
4355:./FW/ff.c     ****     if (res == FR_OK) {
 8132              		.loc 1 4355 11 is_stmt 0 view .LVU2711
 8133 0008 0022     		movs	r2, #0
 8134 000a 02A9     		add	r1, sp, #8
 8135              	.LVL941:
4355:./FW/ff.c     ****     if (res == FR_OK) {
 8136              		.loc 1 4355 11 view .LVU2712
 8137 000c 01A8     		add	r0, sp, #4
 8138              	.LVL942:
4355:./FW/ff.c     ****     if (res == FR_OK) {
 8139              		.loc 1 4355 11 view .LVU2713
 8140 000e FFF7FEFF 		bl	find_volume
 8141              	.LVL943:
4356:./FW/ff.c     ****         INIT_NAMBUF(dj.obj.fs);
 8142              		.loc 1 4356 5 is_stmt 1 view .LVU2714
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 289


4356:./FW/ff.c     ****         INIT_NAMBUF(dj.obj.fs);
 8143              		.loc 1 4356 8 is_stmt 0 view .LVU2715
 8144 0012 0546     		mov	r5, r0
 8145 0014 10B1     		cbz	r0, .L625
 8146              	.LVL944:
 8147              	.L622:
4366:./FW/ff.c     ****     }
 8148              		.loc 1 4366 22 is_stmt 1 view .LVU2716
4369:./FW/ff.c     **** }
 8149              		.loc 1 4369 5 view .LVU2717
4370:./FW/ff.c     **** 
 8150              		.loc 1 4370 1 is_stmt 0 view .LVU2718
 8151 0016 2846     		mov	r0, r5
 8152 0018 0FB0     		add	sp, sp, #60
 8153              	.LCFI96:
 8154              		.cfi_remember_state
 8155              		.cfi_def_cfa_offset 12
 8156              		@ sp needed
 8157 001a 30BD     		pop	{r4, r5, pc}
 8158              	.LVL945:
 8159              	.L625:
 8160              	.LCFI97:
 8161              		.cfi_restore_state
4357:./FW/ff.c     ****         res = follow_path(&dj, path);   /* Follow the file path */
 8162              		.loc 1 4357 31 is_stmt 1 view .LVU2719
4358:./FW/ff.c     ****         if (res == FR_OK) {             /* Follow completed */
 8163              		.loc 1 4358 9 view .LVU2720
4358:./FW/ff.c     ****         if (res == FR_OK) {             /* Follow completed */
 8164              		.loc 1 4358 15 is_stmt 0 view .LVU2721
 8165 001c 0199     		ldr	r1, [sp, #4]
 8166 001e 02A8     		add	r0, sp, #8
 8167              	.LVL946:
4358:./FW/ff.c     ****         if (res == FR_OK) {             /* Follow completed */
 8168              		.loc 1 4358 15 view .LVU2722
 8169 0020 FFF7FEFF 		bl	follow_path
 8170              	.LVL947:
4359:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {    /* It is origin directory */
 8171              		.loc 1 4359 9 is_stmt 1 view .LVU2723
4359:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {    /* It is origin directory */
 8172              		.loc 1 4359 12 is_stmt 0 view .LVU2724
 8173 0024 0546     		mov	r5, r0
 8174 0026 0028     		cmp	r0, #0
 8175 0028 F5D1     		bne	.L622
4360:./FW/ff.c     ****                 res = FR_INVALID_NAME;
 8176              		.loc 1 4360 13 is_stmt 1 view .LVU2725
4360:./FW/ff.c     ****                 res = FR_INVALID_NAME;
 8177              		.loc 1 4360 17 is_stmt 0 view .LVU2726
 8178 002a 9DF93730 		ldrsb	r3, [sp, #55]
4360:./FW/ff.c     ****                 res = FR_INVALID_NAME;
 8179              		.loc 1 4360 16 view .LVU2727
 8180 002e 002B     		cmp	r3, #0
 8181 0030 06DB     		blt	.L623
4363:./FW/ff.c     ****             }
 8182              		.loc 1 4363 17 is_stmt 1 view .LVU2728
4363:./FW/ff.c     ****             }
 8183              		.loc 1 4363 20 is_stmt 0 view .LVU2729
 8184 0032 002C     		cmp	r4, #0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 290


 8185 0034 EFD0     		beq	.L622
4363:./FW/ff.c     ****             }
 8186              		.loc 1 4363 28 is_stmt 1 discriminator 1 view .LVU2730
 8187 0036 2146     		mov	r1, r4
 8188 0038 02A8     		add	r0, sp, #8
 8189              	.LVL948:
4363:./FW/ff.c     ****             }
 8190              		.loc 1 4363 28 is_stmt 0 discriminator 1 view .LVU2731
 8191 003a FFF7FEFF 		bl	get_fileinfo
 8192              	.LVL949:
 8193 003e EAE7     		b	.L622
 8194              	.LVL950:
 8195              	.L623:
4361:./FW/ff.c     ****             } else {                            /* Found an object */
 8196              		.loc 1 4361 21 view .LVU2732
 8197 0040 0625     		movs	r5, #6
 8198 0042 E8E7     		b	.L622
 8199              		.cfi_endproc
 8200              	.LFE987:
 8202              		.section	.text.f_getfree,"ax",%progbits
 8203              		.align	1
 8204              		.global	f_getfree
 8205              		.syntax unified
 8206              		.thumb
 8207              		.thumb_func
 8208              		.fpu fpv4-sp-d16
 8210              	f_getfree:
 8211              	.LVL951:
 8212              	.LFB988:
4383:./FW/ff.c     ****     FRESULT res;
 8213              		.loc 1 4383 3 is_stmt 1 view -0
 8214              		.cfi_startproc
 8215              		@ args = 0, pretend = 0, frame = 32
 8216              		@ frame_needed = 0, uses_anonymous_args = 0
4383:./FW/ff.c     ****     FRESULT res;
 8217              		.loc 1 4383 3 is_stmt 0 view .LVU2734
 8218 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 8219              	.LCFI98:
 8220              		.cfi_def_cfa_offset 32
 8221              		.cfi_offset 4, -32
 8222              		.cfi_offset 5, -28
 8223              		.cfi_offset 6, -24
 8224              		.cfi_offset 7, -20
 8225              		.cfi_offset 8, -16
 8226              		.cfi_offset 9, -12
 8227              		.cfi_offset 10, -8
 8228              		.cfi_offset 14, -4
 8229 0004 88B0     		sub	sp, sp, #32
 8230              	.LCFI99:
 8231              		.cfi_def_cfa_offset 64
 8232 0006 0190     		str	r0, [sp, #4]
 8233 0008 8846     		mov	r8, r1
 8234 000a 1446     		mov	r4, r2
4384:./FW/ff.c     ****     FATFS *fs;
 8235              		.loc 1 4384 5 is_stmt 1 view .LVU2735
4385:./FW/ff.c     ****     DWORD nfree, clst, sect, stat;
 8236              		.loc 1 4385 5 view .LVU2736
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 291


4386:./FW/ff.c     ****     UINT i;
 8237              		.loc 1 4386 5 view .LVU2737
4387:./FW/ff.c     ****     BYTE *p;
 8238              		.loc 1 4387 5 view .LVU2738
4388:./FW/ff.c     ****     _FDID obj;
 8239              		.loc 1 4388 5 view .LVU2739
4389:./FW/ff.c     **** 
 8240              		.loc 1 4389 5 view .LVU2740
4393:./FW/ff.c     ****     if (res == FR_OK) {
 8241              		.loc 1 4393 5 view .LVU2741
4393:./FW/ff.c     ****     if (res == FR_OK) {
 8242              		.loc 1 4393 11 is_stmt 0 view .LVU2742
 8243 000c 0022     		movs	r2, #0
 8244              	.LVL952:
4393:./FW/ff.c     ****     if (res == FR_OK) {
 8245              		.loc 1 4393 11 view .LVU2743
 8246 000e 07A9     		add	r1, sp, #28
 8247              	.LVL953:
4393:./FW/ff.c     ****     if (res == FR_OK) {
 8248              		.loc 1 4393 11 view .LVU2744
 8249 0010 01A8     		add	r0, sp, #4
 8250              	.LVL954:
4393:./FW/ff.c     ****     if (res == FR_OK) {
 8251              		.loc 1 4393 11 view .LVU2745
 8252 0012 FFF7FEFF 		bl	find_volume
 8253              	.LVL955:
4394:./FW/ff.c     ****         *fatfs = fs;                /* Return ptr to the fs object */
 8254              		.loc 1 4394 5 is_stmt 1 view .LVU2746
4394:./FW/ff.c     ****         *fatfs = fs;                /* Return ptr to the fs object */
 8255              		.loc 1 4394 8 is_stmt 0 view .LVU2747
 8256 0016 8146     		mov	r9, r0
 8257 0018 40B9     		cbnz	r0, .L627
4395:./FW/ff.c     ****         /* If free_clst is valid, return it without full cluster scan */
 8258              		.loc 1 4395 9 is_stmt 1 view .LVU2748
4395:./FW/ff.c     ****         /* If free_clst is valid, return it without full cluster scan */
 8259              		.loc 1 4395 16 is_stmt 0 view .LVU2749
 8260 001a 079B     		ldr	r3, [sp, #28]
 8261 001c 2360     		str	r3, [r4]
4397:./FW/ff.c     ****             *nclst = fs->free_clst;
 8262              		.loc 1 4397 9 is_stmt 1 view .LVU2750
4397:./FW/ff.c     ****             *nclst = fs->free_clst;
 8263              		.loc 1 4397 15 is_stmt 0 view .LVU2751
 8264 001e 1A69     		ldr	r2, [r3, #16]
4397:./FW/ff.c     ****             *nclst = fs->free_clst;
 8265              		.loc 1 4397 32 view .LVU2752
 8266 0020 5D69     		ldr	r5, [r3, #20]
4397:./FW/ff.c     ****             *nclst = fs->free_clst;
 8267              		.loc 1 4397 43 view .LVU2753
 8268 0022 A91E     		subs	r1, r5, #2
4397:./FW/ff.c     ****             *nclst = fs->free_clst;
 8269              		.loc 1 4397 12 view .LVU2754
 8270 0024 8A42     		cmp	r2, r1
 8271 0026 05D8     		bhi	.L628
4398:./FW/ff.c     ****         } else {
 8272              		.loc 1 4398 13 is_stmt 1 view .LVU2755
4398:./FW/ff.c     ****         } else {
 8273              		.loc 1 4398 20 is_stmt 0 view .LVU2756
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 292


 8274 0028 C8F80020 		str	r2, [r8]
 8275              	.LVL956:
 8276              	.L627:
4461:./FW/ff.c     **** }
 8277              		.loc 1 4461 5 is_stmt 1 view .LVU2757
4462:./FW/ff.c     **** 
 8278              		.loc 1 4462 1 is_stmt 0 view .LVU2758
 8279 002c 4846     		mov	r0, r9
 8280 002e 08B0     		add	sp, sp, #32
 8281              	.LCFI100:
 8282              		.cfi_remember_state
 8283              		.cfi_def_cfa_offset 32
 8284              		@ sp needed
 8285 0030 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 8286              	.LVL957:
 8287              	.L628:
 8288              	.LCFI101:
 8289              		.cfi_restore_state
4401:./FW/ff.c     ****             if (fs->fs_type == FS_FAT12) {  /* FAT12: Sector unalighed FAT entries */
 8290              		.loc 1 4401 13 is_stmt 1 view .LVU2759
4402:./FW/ff.c     ****                 clst = 2;
 8291              		.loc 1 4402 13 view .LVU2760
4402:./FW/ff.c     ****                 clst = 2;
 8292              		.loc 1 4402 19 is_stmt 0 view .LVU2761
 8293 0034 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
4402:./FW/ff.c     ****                 clst = 2;
 8294              		.loc 1 4402 16 view .LVU2762
 8295 0036 012E     		cmp	r6, #1
 8296 0038 05D0     		beq	.L642
4432:./FW/ff.c     ****                     sect = fs->fatbase;
 8297              		.loc 1 4432 21 is_stmt 1 view .LVU2763
 8298              	.LVL958:
4433:./FW/ff.c     ****                     i = 0;
 8299              		.loc 1 4433 21 view .LVU2764
4433:./FW/ff.c     ****                     i = 0;
 8300              		.loc 1 4433 26 is_stmt 0 view .LVU2765
 8301 003a D3F820A0 		ldr	r10, [r3, #32]
 8302              	.LVL959:
4434:./FW/ff.c     ****                     p = 0;
 8303              		.loc 1 4434 21 is_stmt 1 view .LVU2766
4435:./FW/ff.c     ****                     do {
 8304              		.loc 1 4435 21 view .LVU2767
4435:./FW/ff.c     ****                     do {
 8305              		.loc 1 4435 23 is_stmt 0 view .LVU2768
 8306 003e 0024     		movs	r4, #0
 8307              	.LVL960:
4434:./FW/ff.c     ****                     p = 0;
 8308              		.loc 1 4434 23 view .LVU2769
 8309 0040 2646     		mov	r6, r4
4401:./FW/ff.c     ****             if (fs->fs_type == FS_FAT12) {  /* FAT12: Sector unalighed FAT entries */
 8310              		.loc 1 4401 19 view .LVU2770
 8311 0042 2746     		mov	r7, r4
 8312 0044 2FE0     		b	.L638
 8313              	.LVL961:
 8314              	.L642:
4403:./FW/ff.c     ****                 obj.fs = fs;
 8315              		.loc 1 4403 17 is_stmt 1 view .LVU2771
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 293


4404:./FW/ff.c     ****                 do {
 8316              		.loc 1 4404 17 view .LVU2772
4404:./FW/ff.c     ****                 do {
 8317              		.loc 1 4404 24 is_stmt 0 view .LVU2773
 8318 0046 0293     		str	r3, [sp, #8]
4403:./FW/ff.c     ****                 obj.fs = fs;
 8319              		.loc 1 4403 22 view .LVU2774
 8320 0048 0224     		movs	r4, #2
 8321              	.LVL962:
4401:./FW/ff.c     ****             if (fs->fs_type == FS_FAT12) {  /* FAT12: Sector unalighed FAT entries */
 8322              		.loc 1 4401 19 view .LVU2775
 8323 004a 0027     		movs	r7, #0
 8324 004c 04E0     		b	.L632
 8325              	.LVL963:
 8326              	.L631:
4410:./FW/ff.c     ****             } else {
 8327              		.loc 1 4410 25 is_stmt 1 view .LVU2776
4410:./FW/ff.c     ****             } else {
 8328              		.loc 1 4410 17 is_stmt 0 view .LVU2777
 8329 004e 0134     		adds	r4, r4, #1
 8330              	.LVL964:
4410:./FW/ff.c     ****             } else {
 8331              		.loc 1 4410 37 view .LVU2778
 8332 0050 079B     		ldr	r3, [sp, #28]
 8333 0052 5B69     		ldr	r3, [r3, #20]
4410:./FW/ff.c     ****             } else {
 8334              		.loc 1 4410 17 view .LVU2779
 8335 0054 A342     		cmp	r3, r4
 8336 0056 35D9     		bls	.L630
 8337              	.LVL965:
 8338              	.L632:
4405:./FW/ff.c     ****                     stat = get_fat(&obj, clst);
 8339              		.loc 1 4405 17 is_stmt 1 view .LVU2780
4406:./FW/ff.c     ****                     if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8340              		.loc 1 4406 21 view .LVU2781
4406:./FW/ff.c     ****                     if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8341              		.loc 1 4406 28 is_stmt 0 view .LVU2782
 8342 0058 2146     		mov	r1, r4
 8343 005a 02A8     		add	r0, sp, #8
 8344 005c FFF7FEFF 		bl	get_fat
 8345              	.LVL966:
4407:./FW/ff.c     ****                     if (stat == 1) { res = FR_INT_ERR; break; }
 8346              		.loc 1 4407 21 is_stmt 1 view .LVU2783
4407:./FW/ff.c     ****                     if (stat == 1) { res = FR_INT_ERR; break; }
 8347              		.loc 1 4407 24 is_stmt 0 view .LVU2784
 8348 0060 B0F1FF3F 		cmp	r0, #-1
 8349 0064 2DD0     		beq	.L639
4408:./FW/ff.c     ****                     if (stat == 0) { nfree++; }
 8350              		.loc 1 4408 21 is_stmt 1 view .LVU2785
4408:./FW/ff.c     ****                     if (stat == 0) { nfree++; }
 8351              		.loc 1 4408 24 is_stmt 0 view .LVU2786
 8352 0066 0128     		cmp	r0, #1
 8353 0068 35D0     		beq	.L640
4409:./FW/ff.c     ****                 } while (++clst < fs->n_fatent);
 8354              		.loc 1 4409 21 is_stmt 1 view .LVU2787
4409:./FW/ff.c     ****                 } while (++clst < fs->n_fatent);
 8355              		.loc 1 4409 24 is_stmt 0 view .LVU2788
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 294


 8356 006a 0028     		cmp	r0, #0
 8357 006c EFD1     		bne	.L631
4409:./FW/ff.c     ****                 } while (++clst < fs->n_fatent);
 8358              		.loc 1 4409 38 is_stmt 1 discriminator 1 view .LVU2789
4409:./FW/ff.c     ****                 } while (++clst < fs->n_fatent);
 8359              		.loc 1 4409 43 is_stmt 0 discriminator 1 view .LVU2790
 8360 006e 0137     		adds	r7, r7, #1
 8361              	.LVL967:
4409:./FW/ff.c     ****                 } while (++clst < fs->n_fatent);
 8362              		.loc 1 4409 43 discriminator 1 view .LVU2791
 8363 0070 EDE7     		b	.L631
 8364              	.LVL968:
 8365              	.L643:
4438:./FW/ff.c     ****                             if (res != FR_OK) { break; }
 8366              		.loc 1 4438 29 is_stmt 1 view .LVU2792
4438:./FW/ff.c     ****                             if (res != FR_OK) { break; }
 8367              		.loc 1 4438 35 is_stmt 0 view .LVU2793
 8368 0072 0AF10106 		add	r6, r10, #1
 8369              	.LVL969:
4438:./FW/ff.c     ****                             if (res != FR_OK) { break; }
 8370              		.loc 1 4438 35 view .LVU2794
 8371 0076 5146     		mov	r1, r10
 8372 0078 0798     		ldr	r0, [sp, #28]
 8373 007a FFF7FEFF 		bl	move_window
 8374              	.LVL970:
4439:./FW/ff.c     ****                             p = fs->win;
 8375              		.loc 1 4439 29 is_stmt 1 view .LVU2795
4439:./FW/ff.c     ****                             p = fs->win;
 8376              		.loc 1 4439 32 is_stmt 0 view .LVU2796
 8377 007e 8146     		mov	r9, r0
 8378 0080 00BB     		cbnz	r0, .L630
4440:./FW/ff.c     ****                             i = SS(fs);
 8379              		.loc 1 4440 29 is_stmt 1 view .LVU2797
4440:./FW/ff.c     ****                             i = SS(fs);
 8380              		.loc 1 4440 35 is_stmt 0 view .LVU2798
 8381 0082 079C     		ldr	r4, [sp, #28]
 8382              	.LVL971:
4440:./FW/ff.c     ****                             i = SS(fs);
 8383              		.loc 1 4440 31 view .LVU2799
 8384 0084 3034     		adds	r4, r4, #48
 8385              	.LVL972:
4441:./FW/ff.c     ****                         }
 8386              		.loc 1 4441 29 is_stmt 1 view .LVU2800
4438:./FW/ff.c     ****                             if (res != FR_OK) { break; }
 8387              		.loc 1 4438 35 is_stmt 0 view .LVU2801
 8388 0086 B246     		mov	r10, r6
4441:./FW/ff.c     ****                         }
 8389              		.loc 1 4441 31 view .LVU2802
 8390 0088 4FF40076 		mov	r6, #512
 8391              	.LVL973:
4441:./FW/ff.c     ****                         }
 8392              		.loc 1 4441 31 view .LVU2803
 8393 008c 0DE0     		b	.L633
 8394              	.LVL974:
 8395              	.L644:
4444:./FW/ff.c     ****                             p += 2;
 8396              		.loc 1 4444 29 is_stmt 1 view .LVU2804
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 295


4444:./FW/ff.c     ****                             p += 2;
 8397              		.loc 1 4444 33 is_stmt 0 view .LVU2805
 8398 008e 2046     		mov	r0, r4
 8399 0090 FFF7FEFF 		bl	ld_word
 8400              	.LVL975:
4444:./FW/ff.c     ****                             p += 2;
 8401              		.loc 1 4444 32 view .LVU2806
 8402 0094 00B9     		cbnz	r0, .L635
4444:./FW/ff.c     ****                             p += 2;
 8403              		.loc 1 4444 52 is_stmt 1 discriminator 1 view .LVU2807
4444:./FW/ff.c     ****                             p += 2;
 8404              		.loc 1 4444 57 is_stmt 0 discriminator 1 view .LVU2808
 8405 0096 0137     		adds	r7, r7, #1
 8406              	.LVL976:
 8407              	.L635:
4445:./FW/ff.c     ****                             i -= 2;
 8408              		.loc 1 4445 29 is_stmt 1 view .LVU2809
4445:./FW/ff.c     ****                             i -= 2;
 8409              		.loc 1 4445 31 is_stmt 0 view .LVU2810
 8410 0098 0234     		adds	r4, r4, #2
 8411              	.LVL977:
4446:./FW/ff.c     ****                         } else {
 8412              		.loc 1 4446 29 is_stmt 1 view .LVU2811
4446:./FW/ff.c     ****                         } else {
 8413              		.loc 1 4446 31 is_stmt 0 view .LVU2812
 8414 009a 023E     		subs	r6, r6, #2
 8415              	.LVL978:
4446:./FW/ff.c     ****                         } else {
 8416              		.loc 1 4446 31 view .LVU2813
 8417 009c 01E0     		b	.L636
 8418              	.L637:
4449:./FW/ff.c     ****                             i -= 4;
 8419              		.loc 1 4449 29 is_stmt 1 view .LVU2814
4449:./FW/ff.c     ****                             i -= 4;
 8420              		.loc 1 4449 31 is_stmt 0 view .LVU2815
 8421 009e 0434     		adds	r4, r4, #4
 8422              	.LVL979:
4450:./FW/ff.c     ****                         }
 8423              		.loc 1 4450 29 is_stmt 1 view .LVU2816
4450:./FW/ff.c     ****                         }
 8424              		.loc 1 4450 31 is_stmt 0 view .LVU2817
 8425 00a0 043E     		subs	r6, r6, #4
 8426              	.LVL980:
 8427              	.L636:
4452:./FW/ff.c     ****                 }
 8428              		.loc 1 4452 29 is_stmt 1 view .LVU2818
4452:./FW/ff.c     ****                 }
 8429              		.loc 1 4452 21 is_stmt 0 view .LVU2819
 8430 00a2 013D     		subs	r5, r5, #1
 8431              	.LVL981:
4452:./FW/ff.c     ****                 }
 8432              		.loc 1 4452 21 view .LVU2820
 8433 00a4 0ED0     		beq	.L630
 8434              	.LVL982:
 8435              	.L638:
4436:./FW/ff.c     ****                         if (i == 0) {
 8436              		.loc 1 4436 21 is_stmt 1 view .LVU2821
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 296


4437:./FW/ff.c     ****                             res = move_window(fs, sect++);
 8437              		.loc 1 4437 25 view .LVU2822
4437:./FW/ff.c     ****                             res = move_window(fs, sect++);
 8438              		.loc 1 4437 28 is_stmt 0 view .LVU2823
 8439 00a6 002E     		cmp	r6, #0
 8440 00a8 E3D0     		beq	.L643
 8441              	.LVL983:
 8442              	.L633:
4443:./FW/ff.c     ****                             if (ld_word(p) == 0) { nfree++; }
 8443              		.loc 1 4443 25 is_stmt 1 view .LVU2824
4443:./FW/ff.c     ****                             if (ld_word(p) == 0) { nfree++; }
 8444              		.loc 1 4443 31 is_stmt 0 view .LVU2825
 8445 00aa 079B     		ldr	r3, [sp, #28]
 8446 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
4443:./FW/ff.c     ****                             if (ld_word(p) == 0) { nfree++; }
 8447              		.loc 1 4443 28 view .LVU2826
 8448 00ae 022B     		cmp	r3, #2
 8449 00b0 EDD0     		beq	.L644
4448:./FW/ff.c     ****                             p += 4;
 8450              		.loc 1 4448 29 is_stmt 1 view .LVU2827
4448:./FW/ff.c     ****                             p += 4;
 8451              		.loc 1 4448 34 is_stmt 0 view .LVU2828
 8452 00b2 2046     		mov	r0, r4
 8453 00b4 FFF7FEFF 		bl	ld_dword
 8454              	.LVL984:
4448:./FW/ff.c     ****                             p += 4;
 8455              		.loc 1 4448 32 view .LVU2829
 8456 00b8 30F07043 		bics	r3, r0, #-268435456
 8457 00bc EFD1     		bne	.L637
4448:./FW/ff.c     ****                             p += 4;
 8458              		.loc 1 4448 68 is_stmt 1 discriminator 1 view .LVU2830
4448:./FW/ff.c     ****                             p += 4;
 8459              		.loc 1 4448 73 is_stmt 0 discriminator 1 view .LVU2831
 8460 00be 0137     		adds	r7, r7, #1
 8461              	.LVL985:
4448:./FW/ff.c     ****                             p += 4;
 8462              		.loc 1 4448 73 discriminator 1 view .LVU2832
 8463 00c0 EDE7     		b	.L637
 8464              	.LVL986:
 8465              	.L639:
4407:./FW/ff.c     ****                     if (stat == 1) { res = FR_INT_ERR; break; }
 8466              		.loc 1 4407 51 view .LVU2833
 8467 00c2 B146     		mov	r9, r6
 8468              	.LVL987:
 8469              	.L630:
4455:./FW/ff.c     ****             fs->free_clst = nfree;  /* Now free_clst is valid */
 8470              		.loc 1 4455 13 is_stmt 1 view .LVU2834
4455:./FW/ff.c     ****             fs->free_clst = nfree;  /* Now free_clst is valid */
 8471              		.loc 1 4455 20 is_stmt 0 view .LVU2835
 8472 00c4 C8F80070 		str	r7, [r8]
4456:./FW/ff.c     ****             fs->fsi_flag |= 1;      /* FSInfo is to be updated */
 8473              		.loc 1 4456 13 is_stmt 1 view .LVU2836
4456:./FW/ff.c     ****             fs->fsi_flag |= 1;      /* FSInfo is to be updated */
 8474              		.loc 1 4456 15 is_stmt 0 view .LVU2837
 8475 00c8 079B     		ldr	r3, [sp, #28]
4456:./FW/ff.c     ****             fs->fsi_flag |= 1;      /* FSInfo is to be updated */
 8476              		.loc 1 4456 27 view .LVU2838
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 297


 8477 00ca 1F61     		str	r7, [r3, #16]
4457:./FW/ff.c     ****         }
 8478              		.loc 1 4457 13 is_stmt 1 view .LVU2839
4457:./FW/ff.c     ****         }
 8479              		.loc 1 4457 26 is_stmt 0 view .LVU2840
 8480 00cc 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 8481 00ce 42F00102 		orr	r2, r2, #1
 8482 00d2 1A71     		strb	r2, [r3, #4]
 8483 00d4 AAE7     		b	.L627
 8484              	.LVL988:
 8485              	.L640:
4408:./FW/ff.c     ****                     if (stat == 0) { nfree++; }
 8486              		.loc 1 4408 42 view .LVU2841
 8487 00d6 4FF00209 		mov	r9, #2
 8488 00da F3E7     		b	.L630
 8489              		.cfi_endproc
 8490              	.LFE988:
 8492              		.section	.text.f_truncate,"ax",%progbits
 8493              		.align	1
 8494              		.global	f_truncate
 8495              		.syntax unified
 8496              		.thumb
 8497              		.thumb_func
 8498              		.fpu fpv4-sp-d16
 8500              	f_truncate:
 8501              	.LVL989:
 8502              	.LFB989:
4473:./FW/ff.c     ****     FRESULT res;
 8503              		.loc 1 4473 3 is_stmt 1 view -0
 8504              		.cfi_startproc
 8505              		@ args = 0, pretend = 0, frame = 8
 8506              		@ frame_needed = 0, uses_anonymous_args = 0
4473:./FW/ff.c     ****     FRESULT res;
 8507              		.loc 1 4473 3 is_stmt 0 view .LVU2843
 8508 0000 30B5     		push	{r4, r5, lr}
 8509              	.LCFI102:
 8510              		.cfi_def_cfa_offset 12
 8511              		.cfi_offset 4, -12
 8512              		.cfi_offset 5, -8
 8513              		.cfi_offset 14, -4
 8514 0002 83B0     		sub	sp, sp, #12
 8515              	.LCFI103:
 8516              		.cfi_def_cfa_offset 24
 8517 0004 0446     		mov	r4, r0
4474:./FW/ff.c     ****     FATFS *fs;
 8518              		.loc 1 4474 5 is_stmt 1 view .LVU2844
4475:./FW/ff.c     ****     DWORD ncl;
 8519              		.loc 1 4475 5 view .LVU2845
4476:./FW/ff.c     **** 
 8520              		.loc 1 4476 5 view .LVU2846
4479:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }
 8521              		.loc 1 4479 5 view .LVU2847
4479:./FW/ff.c     ****     if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) { LEAVE_FF(fs, res); }
 8522              		.loc 1 4479 11 is_stmt 0 view .LVU2848
 8523 0006 01A9     		add	r1, sp, #4
 8524 0008 FFF7FEFF 		bl	validate
 8525              	.LVL990:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 298


4480:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 8526              		.loc 1 4480 5 is_stmt 1 view .LVU2849
4480:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 8527              		.loc 1 4480 8 is_stmt 0 view .LVU2850
 8528 000c 0546     		mov	r5, r0
 8529 000e E8B9     		cbnz	r0, .L648
4480:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 8530              		.loc 1 4480 30 discriminator 2 view .LVU2851
 8531 0010 657D     		ldrb	r5, [r4, #21]	@ zero_extendqisi2
 8532              	.LVL991:
4480:./FW/ff.c     ****     if (!(fp->flag & FA_WRITE)) { LEAVE_FF(fs, FR_DENIED); }    /* Check access mode */
 8533              		.loc 1 4480 22 discriminator 2 view .LVU2852
 8534 0012 DDB9     		cbnz	r5, .L648
4481:./FW/ff.c     **** 
 8535              		.loc 1 4481 5 is_stmt 1 view .LVU2853
4481:./FW/ff.c     **** 
 8536              		.loc 1 4481 13 is_stmt 0 view .LVU2854
 8537 0014 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4481:./FW/ff.c     **** 
 8538              		.loc 1 4481 8 view .LVU2855
 8539 0016 13F0020F 		tst	r3, #2
 8540 001a 45D0     		beq	.L654
4483:./FW/ff.c     ****         if (fp->fptr == 0) {    /* When set file size to zero, remove entire cluster chain */
 8541              		.loc 1 4483 5 is_stmt 1 view .LVU2856
4483:./FW/ff.c     ****         if (fp->fptr == 0) {    /* When set file size to zero, remove entire cluster chain */
 8542              		.loc 1 4483 11 is_stmt 0 view .LVU2857
 8543 001c A369     		ldr	r3, [r4, #24]
4483:./FW/ff.c     ****         if (fp->fptr == 0) {    /* When set file size to zero, remove entire cluster chain */
 8544              		.loc 1 4483 27 view .LVU2858
 8545 001e E268     		ldr	r2, [r4, #12]
4483:./FW/ff.c     ****         if (fp->fptr == 0) {    /* When set file size to zero, remove entire cluster chain */
 8546              		.loc 1 4483 8 view .LVU2859
 8547 0020 9342     		cmp	r3, r2
 8548 0022 13D2     		bcs	.L648
4484:./FW/ff.c     ****             res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8549              		.loc 1 4484 9 is_stmt 1 view .LVU2860
4484:./FW/ff.c     ****             res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8550              		.loc 1 4484 12 is_stmt 0 view .LVU2861
 8551 0024 ABB9     		cbnz	r3, .L649
4485:./FW/ff.c     ****             fp->obj.sclust = 0;
 8552              		.loc 1 4485 13 is_stmt 1 view .LVU2862
4485:./FW/ff.c     ****             fp->obj.sclust = 0;
 8553              		.loc 1 4485 19 is_stmt 0 view .LVU2863
 8554 0026 0022     		movs	r2, #0
 8555 0028 A168     		ldr	r1, [r4, #8]
 8556 002a 2046     		mov	r0, r4
 8557 002c FFF7FEFF 		bl	remove_chain
 8558              	.LVL992:
 8559 0030 0546     		mov	r5, r0
 8560              	.LVL993:
4486:./FW/ff.c     ****         } else {                /* When truncate a part of the file, remove remaining clusters */
 8561              		.loc 1 4486 13 is_stmt 1 view .LVU2864
4486:./FW/ff.c     ****         } else {                /* When truncate a part of the file, remove remaining clusters */
 8562              		.loc 1 4486 28 is_stmt 0 view .LVU2865
 8563 0032 0023     		movs	r3, #0
 8564 0034 A360     		str	r3, [r4, #8]
 8565              	.LVL994:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 299


 8566              	.L650:
4496:./FW/ff.c     ****         fp->flag |= FA_MODIFIED;
 8567              		.loc 1 4496 9 is_stmt 1 view .LVU2866
4496:./FW/ff.c     ****         fp->flag |= FA_MODIFIED;
 8568              		.loc 1 4496 29 is_stmt 0 view .LVU2867
 8569 0036 A369     		ldr	r3, [r4, #24]
4496:./FW/ff.c     ****         fp->flag |= FA_MODIFIED;
 8570              		.loc 1 4496 25 view .LVU2868
 8571 0038 E360     		str	r3, [r4, #12]
4497:./FW/ff.c     **** #if !_FS_TINY
 8572              		.loc 1 4497 9 is_stmt 1 view .LVU2869
4497:./FW/ff.c     **** #if !_FS_TINY
 8573              		.loc 1 4497 18 is_stmt 0 view .LVU2870
 8574 003a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8575 003c 43F04003 		orr	r3, r3, #64
 8576 0040 2375     		strb	r3, [r4, #20]
4499:./FW/ff.c     ****             if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8577              		.loc 1 4499 9 is_stmt 1 view .LVU2871
4499:./FW/ff.c     ****             if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8578              		.loc 1 4499 12 is_stmt 0 view .LVU2872
 8579 0042 15B9     		cbnz	r5, .L652
4499:./FW/ff.c     ****             if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8580              		.loc 1 4499 26 discriminator 1 view .LVU2873
 8581 0044 13F0800F 		tst	r3, #128
 8582 0048 1DD1     		bne	.L659
 8583              	.L652:
4507:./FW/ff.c     ****     }
 8584              		.loc 1 4507 9 is_stmt 1 view .LVU2874
4507:./FW/ff.c     ****     }
 8585              		.loc 1 4507 12 is_stmt 0 view .LVU2875
 8586 004a 5DBB     		cbnz	r5, .L653
 8587              	.LVL995:
 8588              	.L648:
4511:./FW/ff.c     **** 
 8589              		.loc 1 4511 1 view .LVU2876
 8590 004c 2846     		mov	r0, r5
 8591 004e 03B0     		add	sp, sp, #12
 8592              	.LCFI104:
 8593              		.cfi_remember_state
 8594              		.cfi_def_cfa_offset 12
 8595              		@ sp needed
 8596 0050 30BD     		pop	{r4, r5, pc}
 8597              	.LVL996:
 8598              	.L649:
 8599              	.LCFI105:
 8600              		.cfi_restore_state
4488:./FW/ff.c     ****             res = FR_OK;
 8601              		.loc 1 4488 13 is_stmt 1 view .LVU2877
4488:./FW/ff.c     ****             res = FR_OK;
 8602              		.loc 1 4488 19 is_stmt 0 view .LVU2878
 8603 0052 E169     		ldr	r1, [r4, #28]
 8604 0054 2046     		mov	r0, r4
 8605 0056 FFF7FEFF 		bl	get_fat
 8606              	.LVL997:
4489:./FW/ff.c     ****             if (ncl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 8607              		.loc 1 4489 13 is_stmt 1 view .LVU2879
4490:./FW/ff.c     ****             if (ncl == 1) { res = FR_INT_ERR; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 300


 8608              		.loc 1 4490 13 view .LVU2880
4490:./FW/ff.c     ****             if (ncl == 1) { res = FR_INT_ERR; }
 8609              		.loc 1 4490 16 is_stmt 0 view .LVU2881
 8610 005a B0F1FF3F 		cmp	r0, #-1
 8611 005e 0ED0     		beq	.L660
 8612              	.L651:
 8613              	.LVL998:
4491:./FW/ff.c     ****             if (res == FR_OK && ncl < fs->n_fatent) {
 8614              		.loc 1 4491 13 is_stmt 1 view .LVU2882
4491:./FW/ff.c     ****             if (res == FR_OK && ncl < fs->n_fatent) {
 8615              		.loc 1 4491 16 is_stmt 0 view .LVU2883
 8616 0060 0128     		cmp	r0, #1
 8617 0062 0ED0     		beq	.L656
4492:./FW/ff.c     ****                 res = remove_chain(&fp->obj, ncl, fp->clust);
 8618              		.loc 1 4492 13 is_stmt 1 view .LVU2884
4492:./FW/ff.c     ****                 res = remove_chain(&fp->obj, ncl, fp->clust);
 8619              		.loc 1 4492 16 is_stmt 0 view .LVU2885
 8620 0064 002D     		cmp	r5, #0
 8621 0066 E6D1     		bne	.L650
4492:./FW/ff.c     ****                 res = remove_chain(&fp->obj, ncl, fp->clust);
 8622              		.loc 1 4492 41 discriminator 1 view .LVU2886
 8623 0068 019B     		ldr	r3, [sp, #4]
 8624 006a 5B69     		ldr	r3, [r3, #20]
4492:./FW/ff.c     ****                 res = remove_chain(&fp->obj, ncl, fp->clust);
 8625              		.loc 1 4492 30 discriminator 1 view .LVU2887
 8626 006c 8342     		cmp	r3, r0
 8627 006e E2D9     		bls	.L650
4493:./FW/ff.c     ****             }
 8628              		.loc 1 4493 17 is_stmt 1 view .LVU2888
4493:./FW/ff.c     ****             }
 8629              		.loc 1 4493 23 is_stmt 0 view .LVU2889
 8630 0070 E269     		ldr	r2, [r4, #28]
 8631 0072 0146     		mov	r1, r0
 8632 0074 2046     		mov	r0, r4
 8633              	.LVL999:
4493:./FW/ff.c     ****             }
 8634              		.loc 1 4493 23 view .LVU2890
 8635 0076 FFF7FEFF 		bl	remove_chain
 8636              	.LVL1000:
4493:./FW/ff.c     ****             }
 8637              		.loc 1 4493 23 view .LVU2891
 8638 007a 0546     		mov	r5, r0
 8639              	.LVL1001:
4493:./FW/ff.c     ****             }
 8640              		.loc 1 4493 23 view .LVU2892
 8641 007c DBE7     		b	.L650
 8642              	.LVL1002:
 8643              	.L660:
4490:./FW/ff.c     ****             if (ncl == 1) { res = FR_INT_ERR; }
 8644              		.loc 1 4490 42 view .LVU2893
 8645 007e 0125     		movs	r5, #1
 8646 0080 EEE7     		b	.L651
 8647              	.LVL1003:
 8648              	.L656:
4491:./FW/ff.c     ****             if (res == FR_OK && ncl < fs->n_fatent) {
 8649              		.loc 1 4491 33 view .LVU2894
 8650 0082 0225     		movs	r5, #2
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 301


 8651              	.LVL1004:
4491:./FW/ff.c     ****             if (res == FR_OK && ncl < fs->n_fatent) {
 8652              		.loc 1 4491 33 view .LVU2895
 8653 0084 D7E7     		b	.L650
 8654              	.LVL1005:
 8655              	.L659:
4500:./FW/ff.c     ****                 res = FR_DISK_ERR;
 8656              		.loc 1 4500 13 is_stmt 1 view .LVU2896
4500:./FW/ff.c     ****                 res = FR_DISK_ERR;
 8657              		.loc 1 4500 17 is_stmt 0 view .LVU2897
 8658 0086 0123     		movs	r3, #1
 8659 0088 226A     		ldr	r2, [r4, #32]
 8660 008a 04F13001 		add	r1, r4, #48
 8661 008e 0198     		ldr	r0, [sp, #4]
 8662 0090 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 8663 0092 FFF7FEFF 		bl	disk_write
 8664              	.LVL1006:
4500:./FW/ff.c     ****                 res = FR_DISK_ERR;
 8665              		.loc 1 4500 16 view .LVU2898
 8666 0096 20B9     		cbnz	r0, .L657
4503:./FW/ff.c     ****             }
 8667              		.loc 1 4503 17 is_stmt 1 view .LVU2899
4503:./FW/ff.c     ****             }
 8668              		.loc 1 4503 26 is_stmt 0 view .LVU2900
 8669 0098 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8670 009a 03F07F03 		and	r3, r3, #127
 8671 009e 2375     		strb	r3, [r4, #20]
 8672 00a0 D3E7     		b	.L652
 8673              	.L657:
4501:./FW/ff.c     ****             } else {
 8674              		.loc 1 4501 21 view .LVU2901
 8675 00a2 0125     		movs	r5, #1
 8676              	.LVL1007:
 8677              	.L653:
4507:./FW/ff.c     ****     }
 8678              		.loc 1 4507 29 is_stmt 1 discriminator 1 view .LVU2902
 8679 00a4 6575     		strb	r5, [r4, #21]
4507:./FW/ff.c     ****     }
 8680              		.loc 1 4507 29 discriminator 1 view .LVU2903
 8681 00a6 D1E7     		b	.L648
 8682              	.LVL1008:
 8683              	.L654:
4481:./FW/ff.c     **** 
 8684              		.loc 1 4481 35 is_stmt 0 view .LVU2904
 8685 00a8 0725     		movs	r5, #7
 8686              	.LVL1009:
4481:./FW/ff.c     **** 
 8687              		.loc 1 4481 35 view .LVU2905
 8688 00aa CFE7     		b	.L648
 8689              		.cfi_endproc
 8690              	.LFE989:
 8692              		.section	.text.f_unlink,"ax",%progbits
 8693              		.align	1
 8694              		.global	f_unlink
 8695              		.syntax unified
 8696              		.thumb
 8697              		.thumb_func
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 302


 8698              		.fpu fpv4-sp-d16
 8700              	f_unlink:
 8701              	.LVL1010:
 8702              	.LFB990:
4522:./FW/ff.c     ****     FRESULT res;
 8703              		.loc 1 4522 3 is_stmt 1 view -0
 8704              		.cfi_startproc
 8705              		@ args = 0, pretend = 0, frame = 112
 8706              		@ frame_needed = 0, uses_anonymous_args = 0
4522:./FW/ff.c     ****     FRESULT res;
 8707              		.loc 1 4522 3 is_stmt 0 view .LVU2907
 8708 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8709              	.LCFI106:
 8710              		.cfi_def_cfa_offset 20
 8711              		.cfi_offset 4, -20
 8712              		.cfi_offset 5, -16
 8713              		.cfi_offset 6, -12
 8714              		.cfi_offset 7, -8
 8715              		.cfi_offset 14, -4
 8716 0002 9DB0     		sub	sp, sp, #116
 8717              	.LCFI107:
 8718              		.cfi_def_cfa_offset 136
 8719 0004 0190     		str	r0, [sp, #4]
4523:./FW/ff.c     ****     DIR dj, sdj;
 8720              		.loc 1 4523 5 is_stmt 1 view .LVU2908
4524:./FW/ff.c     ****     DWORD dclst = 0;
 8721              		.loc 1 4524 5 view .LVU2909
4525:./FW/ff.c     ****     FATFS *fs;
 8722              		.loc 1 4525 5 view .LVU2910
 8723              	.LVL1011:
4526:./FW/ff.c     **** #if _FS_EXFAT
 8724              		.loc 1 4526 5 view .LVU2911
4534:./FW/ff.c     ****     dj.obj.fs = fs;
 8725              		.loc 1 4534 5 view .LVU2912
4534:./FW/ff.c     ****     dj.obj.fs = fs;
 8726              		.loc 1 4534 11 is_stmt 0 view .LVU2913
 8727 0006 0222     		movs	r2, #2
 8728 0008 03A9     		add	r1, sp, #12
 8729 000a 01A8     		add	r0, sp, #4
 8730              	.LVL1012:
4534:./FW/ff.c     ****     dj.obj.fs = fs;
 8731              		.loc 1 4534 11 view .LVU2914
 8732 000c FFF7FEFF 		bl	find_volume
 8733              	.LVL1013:
4535:./FW/ff.c     ****     if (res == FR_OK) {
 8734              		.loc 1 4535 5 is_stmt 1 view .LVU2915
4535:./FW/ff.c     ****     if (res == FR_OK) {
 8735              		.loc 1 4535 15 is_stmt 0 view .LVU2916
 8736 0010 039B     		ldr	r3, [sp, #12]
 8737 0012 1093     		str	r3, [sp, #64]
4536:./FW/ff.c     ****         INIT_NAMBUF(fs);
 8738              		.loc 1 4536 5 is_stmt 1 view .LVU2917
4536:./FW/ff.c     ****         INIT_NAMBUF(fs);
 8739              		.loc 1 4536 8 is_stmt 0 view .LVU2918
 8740 0014 0446     		mov	r4, r0
 8741 0016 10B1     		cbz	r0, .L671
 8742              	.LVL1014:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 303


 8743              	.L662:
4601:./FW/ff.c     ****     }
 8744              		.loc 1 4601 22 is_stmt 1 view .LVU2919
4604:./FW/ff.c     **** }
 8745              		.loc 1 4604 5 view .LVU2920
4605:./FW/ff.c     **** 
 8746              		.loc 1 4605 1 is_stmt 0 view .LVU2921
 8747 0018 2046     		mov	r0, r4
 8748 001a 1DB0     		add	sp, sp, #116
 8749              	.LCFI108:
 8750              		.cfi_remember_state
 8751              		.cfi_def_cfa_offset 20
 8752              		@ sp needed
 8753 001c F0BD     		pop	{r4, r5, r6, r7, pc}
 8754              	.LVL1015:
 8755              	.L671:
 8756              	.LCFI109:
 8757              		.cfi_restore_state
4537:./FW/ff.c     ****         res = follow_path(&dj, path);       /* Follow the file path */
 8758              		.loc 1 4537 24 is_stmt 1 view .LVU2922
4538:./FW/ff.c     ****         if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8759              		.loc 1 4538 9 view .LVU2923
4538:./FW/ff.c     ****         if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8760              		.loc 1 4538 15 is_stmt 0 view .LVU2924
 8761 001e 0199     		ldr	r1, [sp, #4]
 8762 0020 10A8     		add	r0, sp, #64
 8763              	.LVL1016:
4538:./FW/ff.c     ****         if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8764              		.loc 1 4538 15 view .LVU2925
 8765 0022 FFF7FEFF 		bl	follow_path
 8766              	.LVL1017:
4539:./FW/ff.c     ****             res = FR_INVALID_NAME;          /* Cannot remove dot entry */
 8767              		.loc 1 4539 9 is_stmt 1 view .LVU2926
4543:./FW/ff.c     **** #endif
 8768              		.loc 1 4543 9 view .LVU2927
4543:./FW/ff.c     **** #endif
 8769              		.loc 1 4543 12 is_stmt 0 view .LVU2928
 8770 0026 0446     		mov	r4, r0
 8771 0028 20B9     		cbnz	r0, .L663
4543:./FW/ff.c     **** #endif
 8772              		.loc 1 4543 29 is_stmt 1 discriminator 1 view .LVU2929
4543:./FW/ff.c     **** #endif
 8773              		.loc 1 4543 35 is_stmt 0 discriminator 1 view .LVU2930
 8774 002a 0221     		movs	r1, #2
 8775 002c 10A8     		add	r0, sp, #64
 8776              	.LVL1018:
4543:./FW/ff.c     **** #endif
 8777              		.loc 1 4543 35 discriminator 1 view .LVU2931
 8778 002e FFF7FEFF 		bl	chk_lock
 8779              	.LVL1019:
 8780 0032 0446     		mov	r4, r0
 8781              	.LVL1020:
 8782              	.L663:
4545:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {
 8783              		.loc 1 4545 9 is_stmt 1 view .LVU2932
4545:./FW/ff.c     ****             if (dj.fn[NSFLAG] & NS_NONAME) {
 8784              		.loc 1 4545 12 is_stmt 0 view .LVU2933
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 304


 8785 0034 002C     		cmp	r4, #0
 8786 0036 EFD1     		bne	.L662
4546:./FW/ff.c     ****                 res = FR_INVALID_NAME;      /* Cannot remove the origin directory */
 8787              		.loc 1 4546 13 is_stmt 1 view .LVU2934
4546:./FW/ff.c     ****                 res = FR_INVALID_NAME;      /* Cannot remove the origin directory */
 8788              		.loc 1 4546 17 is_stmt 0 view .LVU2935
 8789 0038 9DF96F30 		ldrsb	r3, [sp, #111]
4546:./FW/ff.c     ****                 res = FR_INVALID_NAME;      /* Cannot remove the origin directory */
 8790              		.loc 1 4546 16 view .LVU2936
 8791 003c 002B     		cmp	r3, #0
 8792 003e 1EDB     		blt	.L667
4549:./FW/ff.c     ****                     res = FR_DENIED;        /* Cannot remove R/O object */
 8793              		.loc 1 4549 17 is_stmt 1 view .LVU2937
4549:./FW/ff.c     ****                     res = FR_DENIED;        /* Cannot remove R/O object */
 8794              		.loc 1 4549 27 is_stmt 0 view .LVU2938
 8795 0040 9DF84660 		ldrb	r6, [sp, #70]	@ zero_extendqisi2
4549:./FW/ff.c     ****                     res = FR_DENIED;        /* Cannot remove R/O object */
 8796              		.loc 1 4549 20 view .LVU2939
 8797 0044 16F0010F 		tst	r6, #1
 8798 0048 2AD1     		bne	.L668
4553:./FW/ff.c     **** #if _FS_EXFAT
 8799              		.loc 1 4553 13 is_stmt 1 view .LVU2940
4563:./FW/ff.c     ****                 }
 8800              		.loc 1 4563 21 view .LVU2941
4563:./FW/ff.c     ****                 }
 8801              		.loc 1 4563 29 is_stmt 0 view .LVU2942
 8802 004a 039F     		ldr	r7, [sp, #12]
 8803 004c 1899     		ldr	r1, [sp, #96]
 8804 004e 3846     		mov	r0, r7
 8805 0050 FFF7FEFF 		bl	ld_clust
 8806              	.LVL1021:
 8807 0054 0546     		mov	r5, r0
 8808              	.LVL1022:
4565:./FW/ff.c     **** #if _FS_RPATH != 0
 8809              		.loc 1 4565 17 is_stmt 1 view .LVU2943
4565:./FW/ff.c     **** #if _FS_RPATH != 0
 8810              		.loc 1 4565 20 is_stmt 0 view .LVU2944
 8811 0056 16F0100F 		tst	r6, #16
 8812 005a 12D0     		beq	.L664
4572:./FW/ff.c     ****                         sdj.obj.sclust = dclst;
 8813              		.loc 1 4572 25 is_stmt 1 view .LVU2945
4572:./FW/ff.c     ****                         sdj.obj.sclust = dclst;
 8814              		.loc 1 4572 36 is_stmt 0 view .LVU2946
 8815 005c 0497     		str	r7, [sp, #16]
4573:./FW/ff.c     **** #if _FS_EXFAT
 8816              		.loc 1 4573 25 is_stmt 1 view .LVU2947
4573:./FW/ff.c     **** #if _FS_EXFAT
 8817              		.loc 1 4573 40 is_stmt 0 view .LVU2948
 8818 005e 0690     		str	r0, [sp, #24]
4580:./FW/ff.c     ****                         if (res == FR_OK) {
 8819              		.loc 1 4580 25 is_stmt 1 view .LVU2949
4580:./FW/ff.c     ****                         if (res == FR_OK) {
 8820              		.loc 1 4580 31 is_stmt 0 view .LVU2950
 8821 0060 0021     		movs	r1, #0
 8822 0062 04A8     		add	r0, sp, #16
 8823              	.LVL1023:
4580:./FW/ff.c     ****                         if (res == FR_OK) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 305


 8824              		.loc 1 4580 31 view .LVU2951
 8825 0064 FFF7FEFF 		bl	dir_sdi
 8826              	.LVL1024:
4581:./FW/ff.c     ****                             res = dir_read(&sdj, 0);            /* Read an item */
 8827              		.loc 1 4581 25 is_stmt 1 view .LVU2952
4581:./FW/ff.c     ****                             res = dir_read(&sdj, 0);            /* Read an item */
 8828              		.loc 1 4581 28 is_stmt 0 view .LVU2953
 8829 0068 0446     		mov	r4, r0
 8830 006a 50B9     		cbnz	r0, .L664
4582:./FW/ff.c     ****                             if (res == FR_OK) { res = FR_DENIED; }  /* Not empty? */
 8831              		.loc 1 4582 29 is_stmt 1 view .LVU2954
4582:./FW/ff.c     ****                             if (res == FR_OK) { res = FR_DENIED; }  /* Not empty? */
 8832              		.loc 1 4582 35 is_stmt 0 view .LVU2955
 8833 006c 0021     		movs	r1, #0
 8834 006e 04A8     		add	r0, sp, #16
 8835              	.LVL1025:
4582:./FW/ff.c     ****                             if (res == FR_OK) { res = FR_DENIED; }  /* Not empty? */
 8836              		.loc 1 4582 35 view .LVU2956
 8837 0070 FFF7FEFF 		bl	dir_read
 8838              	.LVL1026:
4583:./FW/ff.c     ****                             if (res == FR_NO_FILE) { res = FR_OK; } /* Empty? */
 8839              		.loc 1 4583 29 is_stmt 1 view .LVU2957
4583:./FW/ff.c     ****                             if (res == FR_NO_FILE) { res = FR_OK; } /* Empty? */
 8840              		.loc 1 4583 32 is_stmt 0 view .LVU2958
 8841 0074 0446     		mov	r4, r0
 8842 0076 B0B1     		cbz	r0, .L669
4584:./FW/ff.c     ****                         }
 8843              		.loc 1 4584 29 is_stmt 1 view .LVU2959
4584:./FW/ff.c     ****                         }
 8844              		.loc 1 4584 32 is_stmt 0 view .LVU2960
 8845 0078 0428     		cmp	r0, #4
 8846 007a 02D1     		bne	.L664
 8847 007c 03E0     		b	.L665
 8848              	.LVL1027:
 8849              	.L667:
4525:./FW/ff.c     ****     FATFS *fs;
 8850              		.loc 1 4525 11 view .LVU2961
 8851 007e 0025     		movs	r5, #0
4547:./FW/ff.c     ****             } else {
 8852              		.loc 1 4547 21 view .LVU2962
 8853 0080 0624     		movs	r4, #6
 8854              	.LVL1028:
 8855              	.L664:
4589:./FW/ff.c     ****                 res = dir_remove(&dj);          /* Remove the directory entry */
 8856              		.loc 1 4589 13 is_stmt 1 view .LVU2963
4589:./FW/ff.c     ****                 res = dir_remove(&dj);          /* Remove the directory entry */
 8857              		.loc 1 4589 16 is_stmt 0 view .LVU2964
 8858 0082 002C     		cmp	r4, #0
 8859 0084 C8D1     		bne	.L662
 8860              	.LVL1029:
 8861              	.L665:
4590:./FW/ff.c     ****                 if (res == FR_OK && dclst) {    /* Remove the cluster chain if exist */
 8862              		.loc 1 4590 17 is_stmt 1 view .LVU2965
4590:./FW/ff.c     ****                 if (res == FR_OK && dclst) {    /* Remove the cluster chain if exist */
 8863              		.loc 1 4590 23 is_stmt 0 view .LVU2966
 8864 0086 10A8     		add	r0, sp, #64
 8865 0088 FFF7FEFF 		bl	dir_remove
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 306


 8866              	.LVL1030:
4591:./FW/ff.c     **** #if _FS_EXFAT
 8867              		.loc 1 4591 17 is_stmt 1 view .LVU2967
4591:./FW/ff.c     **** #if _FS_EXFAT
 8868              		.loc 1 4591 20 is_stmt 0 view .LVU2968
 8869 008c 0446     		mov	r4, r0
 8870 008e 00B9     		cbnz	r0, .L666
4591:./FW/ff.c     **** #if _FS_EXFAT
 8871              		.loc 1 4591 34 discriminator 1 view .LVU2969
 8872 0090 5DB9     		cbnz	r5, .L672
 8873              	.LVL1031:
 8874              	.L666:
4598:./FW/ff.c     ****             }
 8875              		.loc 1 4598 17 is_stmt 1 view .LVU2970
4598:./FW/ff.c     ****             }
 8876              		.loc 1 4598 20 is_stmt 0 view .LVU2971
 8877 0092 002C     		cmp	r4, #0
 8878 0094 C0D1     		bne	.L662
4598:./FW/ff.c     ****             }
 8879              		.loc 1 4598 37 is_stmt 1 discriminator 1 view .LVU2972
4598:./FW/ff.c     ****             }
 8880              		.loc 1 4598 43 is_stmt 0 discriminator 1 view .LVU2973
 8881 0096 0398     		ldr	r0, [sp, #12]
 8882 0098 FFF7FEFF 		bl	sync_fs
 8883              	.LVL1032:
 8884 009c 0446     		mov	r4, r0
 8885              	.LVL1033:
4598:./FW/ff.c     ****             }
 8886              		.loc 1 4598 43 discriminator 1 view .LVU2974
 8887 009e BBE7     		b	.L662
 8888              	.LVL1034:
 8889              	.L668:
4525:./FW/ff.c     ****     FATFS *fs;
 8890              		.loc 1 4525 11 view .LVU2975
 8891 00a0 0025     		movs	r5, #0
4550:./FW/ff.c     ****                 }
 8892              		.loc 1 4550 25 view .LVU2976
 8893 00a2 0724     		movs	r4, #7
 8894              	.LVL1035:
4550:./FW/ff.c     ****                 }
 8895              		.loc 1 4550 25 view .LVU2977
 8896 00a4 EDE7     		b	.L664
 8897              	.LVL1036:
 8898              	.L669:
4583:./FW/ff.c     ****                             if (res == FR_NO_FILE) { res = FR_OK; } /* Empty? */
 8899              		.loc 1 4583 53 view .LVU2978
 8900 00a6 0724     		movs	r4, #7
 8901 00a8 EBE7     		b	.L664
 8902              	.LVL1037:
 8903              	.L672:
4595:./FW/ff.c     **** #endif
 8904              		.loc 1 4595 21 is_stmt 1 view .LVU2979
4595:./FW/ff.c     **** #endif
 8905              		.loc 1 4595 27 is_stmt 0 view .LVU2980
 8906 00aa 0022     		movs	r2, #0
 8907 00ac 2946     		mov	r1, r5
 8908 00ae 10A8     		add	r0, sp, #64
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 307


 8909              	.LVL1038:
4595:./FW/ff.c     **** #endif
 8910              		.loc 1 4595 27 view .LVU2981
 8911 00b0 FFF7FEFF 		bl	remove_chain
 8912              	.LVL1039:
 8913 00b4 0446     		mov	r4, r0
 8914              	.LVL1040:
4595:./FW/ff.c     **** #endif
 8915              		.loc 1 4595 27 view .LVU2982
 8916 00b6 ECE7     		b	.L666
 8917              		.cfi_endproc
 8918              	.LFE990:
 8920              		.section	.text.f_mkdir,"ax",%progbits
 8921              		.align	1
 8922              		.global	f_mkdir
 8923              		.syntax unified
 8924              		.thumb
 8925              		.thumb_func
 8926              		.fpu fpv4-sp-d16
 8928              	f_mkdir:
 8929              	.LVL1041:
 8930              	.LFB991:
4616:./FW/ff.c     ****     FRESULT res;
 8931              		.loc 1 4616 3 is_stmt 1 view -0
 8932              		.cfi_startproc
 8933              		@ args = 0, pretend = 0, frame = 64
 8934              		@ frame_needed = 0, uses_anonymous_args = 0
4616:./FW/ff.c     ****     FRESULT res;
 8935              		.loc 1 4616 3 is_stmt 0 view .LVU2984
 8936 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8937              	.LCFI110:
 8938              		.cfi_def_cfa_offset 36
 8939              		.cfi_offset 4, -36
 8940              		.cfi_offset 5, -32
 8941              		.cfi_offset 6, -28
 8942              		.cfi_offset 7, -24
 8943              		.cfi_offset 8, -20
 8944              		.cfi_offset 9, -16
 8945              		.cfi_offset 10, -12
 8946              		.cfi_offset 11, -8
 8947              		.cfi_offset 14, -4
 8948 0004 91B0     		sub	sp, sp, #68
 8949              	.LCFI111:
 8950              		.cfi_def_cfa_offset 104
 8951 0006 0190     		str	r0, [sp, #4]
4617:./FW/ff.c     ****     DIR dj;
 8952              		.loc 1 4617 5 is_stmt 1 view .LVU2985
4618:./FW/ff.c     ****     FATFS *fs;
 8953              		.loc 1 4618 5 view .LVU2986
4619:./FW/ff.c     ****     BYTE *dir;
 8954              		.loc 1 4619 5 view .LVU2987
4620:./FW/ff.c     ****     UINT n;
 8955              		.loc 1 4620 5 view .LVU2988
4621:./FW/ff.c     ****     DWORD dsc, dcl, pcl, tm;
 8956              		.loc 1 4621 5 view .LVU2989
4622:./FW/ff.c     ****     DEF_NAMBUF
 8957              		.loc 1 4622 5 view .LVU2990
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 308


4627:./FW/ff.c     ****     dj.obj.fs = fs;
 8958              		.loc 1 4627 5 view .LVU2991
4627:./FW/ff.c     ****     dj.obj.fs = fs;
 8959              		.loc 1 4627 11 is_stmt 0 view .LVU2992
 8960 0008 0222     		movs	r2, #2
 8961 000a 03A9     		add	r1, sp, #12
 8962 000c 01A8     		add	r0, sp, #4
 8963              	.LVL1042:
4627:./FW/ff.c     ****     dj.obj.fs = fs;
 8964              		.loc 1 4627 11 view .LVU2993
 8965 000e FFF7FEFF 		bl	find_volume
 8966              	.LVL1043:
4628:./FW/ff.c     ****     if (res == FR_OK) {
 8967              		.loc 1 4628 5 is_stmt 1 view .LVU2994
4628:./FW/ff.c     ****     if (res == FR_OK) {
 8968              		.loc 1 4628 15 is_stmt 0 view .LVU2995
 8969 0012 039B     		ldr	r3, [sp, #12]
 8970 0014 0493     		str	r3, [sp, #16]
4629:./FW/ff.c     ****         INIT_NAMBUF(fs);
 8971              		.loc 1 4629 5 is_stmt 1 view .LVU2996
4629:./FW/ff.c     ****         INIT_NAMBUF(fs);
 8972              		.loc 1 4629 8 is_stmt 0 view .LVU2997
 8973 0016 0446     		mov	r4, r0
 8974 0018 18B1     		cbz	r0, .L691
 8975              	.LVL1044:
 8976              	.L674:
4698:./FW/ff.c     ****     }
 8977              		.loc 1 4698 22 is_stmt 1 view .LVU2998
4701:./FW/ff.c     **** }
 8978              		.loc 1 4701 5 view .LVU2999
4702:./FW/ff.c     **** 
 8979              		.loc 1 4702 1 is_stmt 0 view .LVU3000
 8980 001a 2046     		mov	r0, r4
 8981 001c 11B0     		add	sp, sp, #68
 8982              	.LCFI112:
 8983              		.cfi_remember_state
 8984              		.cfi_def_cfa_offset 36
 8985              		@ sp needed
 8986 001e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8987              	.LVL1045:
 8988              	.L691:
 8989              	.LCFI113:
 8990              		.cfi_restore_state
4630:./FW/ff.c     ****         res = follow_path(&dj, path);           /* Follow the file path */
 8991              		.loc 1 4630 24 is_stmt 1 view .LVU3001
4631:./FW/ff.c     ****         if (res == FR_OK) { res = FR_EXIST; }       /* Any object with same name is already existin
 8992              		.loc 1 4631 9 view .LVU3002
4631:./FW/ff.c     ****         if (res == FR_OK) { res = FR_EXIST; }       /* Any object with same name is already existin
 8993              		.loc 1 4631 15 is_stmt 0 view .LVU3003
 8994 0022 0199     		ldr	r1, [sp, #4]
 8995 0024 04A8     		add	r0, sp, #16
 8996              	.LVL1046:
4631:./FW/ff.c     ****         if (res == FR_OK) { res = FR_EXIST; }       /* Any object with same name is already existin
 8997              		.loc 1 4631 15 view .LVU3004
 8998 0026 FFF7FEFF 		bl	follow_path
 8999              	.LVL1047:
4632:./FW/ff.c     ****         if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 309


 9000              		.loc 1 4632 9 is_stmt 1 view .LVU3005
4632:./FW/ff.c     ****         if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 9001              		.loc 1 4632 12 is_stmt 0 view .LVU3006
 9002 002a 0028     		cmp	r0, #0
 9003 002c 00F09980 		beq	.L684
4633:./FW/ff.c     ****             res = FR_INVALID_NAME;
 9004              		.loc 1 4633 9 is_stmt 1 view .LVU3007
4636:./FW/ff.c     ****             dcl = create_chain(&dj.obj, 0);     /* Allocate a cluster for the new directory table *
 9005              		.loc 1 4636 9 view .LVU3008
4636:./FW/ff.c     ****             dcl = create_chain(&dj.obj, 0);     /* Allocate a cluster for the new directory table *
 9006              		.loc 1 4636 12 is_stmt 0 view .LVU3009
 9007 0030 0428     		cmp	r0, #4
 9008 0032 01D0     		beq	.L692
4631:./FW/ff.c     ****         if (res == FR_OK) { res = FR_EXIST; }       /* Any object with same name is already existin
 9009              		.loc 1 4631 15 view .LVU3010
 9010 0034 0446     		mov	r4, r0
 9011 0036 F0E7     		b	.L674
 9012              	.L692:
4637:./FW/ff.c     ****             dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 9013              		.loc 1 4637 13 is_stmt 1 view .LVU3011
4637:./FW/ff.c     ****             dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 9014              		.loc 1 4637 19 is_stmt 0 view .LVU3012
 9015 0038 0021     		movs	r1, #0
 9016 003a 04A8     		add	r0, sp, #16
 9017              	.LVL1048:
4637:./FW/ff.c     ****             dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 9018              		.loc 1 4637 19 view .LVU3013
 9019 003c FFF7FEFF 		bl	create_chain
 9020              	.LVL1049:
4638:./FW/ff.c     ****             res = FR_OK;
 9021              		.loc 1 4638 13 is_stmt 1 view .LVU3014
4638:./FW/ff.c     ****             res = FR_OK;
 9022              		.loc 1 4638 39 is_stmt 0 view .LVU3015
 9023 0040 039A     		ldr	r2, [sp, #12]
 9024 0042 5389     		ldrh	r3, [r2, #10]
4638:./FW/ff.c     ****             res = FR_OK;
 9025              		.loc 1 4638 47 view .LVU3016
 9026 0044 5B02     		lsls	r3, r3, #9
4638:./FW/ff.c     ****             res = FR_OK;
 9027              		.loc 1 4638 28 view .LVU3017
 9028 0046 0793     		str	r3, [sp, #28]
4639:./FW/ff.c     ****             if (dcl == 0) { res = FR_DENIED; }      /* No space to allocate a new cluster */
 9029              		.loc 1 4639 13 is_stmt 1 view .LVU3018
 9030              	.LVL1050:
4640:./FW/ff.c     ****             if (dcl == 1) { res = FR_INT_ERR; }
 9031              		.loc 1 4640 13 view .LVU3019
4640:./FW/ff.c     ****             if (dcl == 1) { res = FR_INT_ERR; }
 9032              		.loc 1 4640 16 is_stmt 0 view .LVU3020
 9033 0048 8046     		mov	r8, r0
 9034 004a 00B9     		cbnz	r0, .L675
4640:./FW/ff.c     ****             if (dcl == 1) { res = FR_INT_ERR; }
 9035              		.loc 1 4640 33 view .LVU3021
 9036 004c 0724     		movs	r4, #7
 9037              	.L675:
 9038              	.LVL1051:
4641:./FW/ff.c     ****             if (dcl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 9039              		.loc 1 4641 13 is_stmt 1 view .LVU3022
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 310


4641:./FW/ff.c     ****             if (dcl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 9040              		.loc 1 4641 16 is_stmt 0 view .LVU3023
 9041 004e B8F1010F 		cmp	r8, #1
 9042 0052 20D0     		beq	.L693
 9043              	.LVL1052:
 9044              	.L676:
4642:./FW/ff.c     ****             if (res == FR_OK) { res = sync_window(fs); }    /* Flush FAT */
 9045              		.loc 1 4642 13 is_stmt 1 view .LVU3024
4642:./FW/ff.c     ****             if (res == FR_OK) { res = sync_window(fs); }    /* Flush FAT */
 9046              		.loc 1 4642 16 is_stmt 0 view .LVU3025
 9047 0054 B8F1FF3F 		cmp	r8, #-1
 9048 0058 24D0     		beq	.L688
4643:./FW/ff.c     ****             tm = GET_FATTIME();
 9049              		.loc 1 4643 13 is_stmt 1 view .LVU3026
4643:./FW/ff.c     ****             tm = GET_FATTIME();
 9050              		.loc 1 4643 16 is_stmt 0 view .LVU3027
 9051 005a F4B1     		cbz	r4, .L694
 9052              	.LVL1053:
 9053              	.L677:
4644:./FW/ff.c     ****             if (res == FR_OK) {                 /* Initialize the new directory table */
 9054              		.loc 1 4644 13 is_stmt 1 view .LVU3028
4644:./FW/ff.c     ****             if (res == FR_OK) {                 /* Initialize the new directory table */
 9055              		.loc 1 4644 18 is_stmt 0 view .LVU3029
 9056 005c FFF7FEFF 		bl	get_fattime
 9057              	.LVL1054:
 9058 0060 8246     		mov	r10, r0
 9059              	.LVL1055:
4645:./FW/ff.c     ****                 dsc = clust2sect(fs, dcl);
 9060              		.loc 1 4645 13 is_stmt 1 view .LVU3030
4645:./FW/ff.c     ****                 dsc = clust2sect(fs, dcl);
 9061              		.loc 1 4645 16 is_stmt 0 view .LVU3031
 9062 0062 0CB3     		cbz	r4, .L695
 9063              	.LVL1056:
 9064              	.L678:
4669:./FW/ff.c     ****                 res = dir_register(&dj);    /* Register the object to the directoy */
 9065              		.loc 1 4669 13 is_stmt 1 view .LVU3032
4669:./FW/ff.c     ****                 res = dir_register(&dj);    /* Register the object to the directoy */
 9066              		.loc 1 4669 16 is_stmt 0 view .LVU3033
 9067 0064 002C     		cmp	r4, #0
 9068 0066 71D0     		beq	.L696
 9069              	.L682:
4672:./FW/ff.c     **** #if _FS_EXFAT
 9070              		.loc 1 4672 13 is_stmt 1 view .LVU3034
4672:./FW/ff.c     **** #if _FS_EXFAT
 9071              		.loc 1 4672 16 is_stmt 0 view .LVU3035
 9072 0068 002C     		cmp	r4, #0
 9073 006a 74D1     		bne	.L683
4685:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);    /* Created time */
 9074              		.loc 1 4685 21 is_stmt 1 view .LVU3036
4685:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);    /* Created time */
 9075              		.loc 1 4685 25 is_stmt 0 view .LVU3037
 9076 006c 0C9C     		ldr	r4, [sp, #48]
 9077              	.LVL1057:
4686:./FW/ff.c     ****                     st_clust(fs, dir, dcl);             /* Table start cluster */
 9078              		.loc 1 4686 21 is_stmt 1 view .LVU3038
 9079 006e 5146     		mov	r1, r10
 9080 0070 04F11600 		add	r0, r4, #22
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 311


 9081 0074 FFF7FEFF 		bl	st_dword
 9082              	.LVL1058:
4687:./FW/ff.c     ****                     dir[DIR_Attr] = AM_DIR;             /* Attribute */
 9083              		.loc 1 4687 21 view .LVU3039
 9084 0078 4246     		mov	r2, r8
 9085 007a 2146     		mov	r1, r4
 9086 007c 0398     		ldr	r0, [sp, #12]
 9087 007e FFF7FEFF 		bl	st_clust
 9088              	.LVL1059:
4688:./FW/ff.c     ****                     fs->wflag = 1;
 9089              		.loc 1 4688 21 view .LVU3040
4688:./FW/ff.c     ****                     fs->wflag = 1;
 9090              		.loc 1 4688 35 is_stmt 0 view .LVU3041
 9091 0082 1023     		movs	r3, #16
 9092 0084 E372     		strb	r3, [r4, #11]
4689:./FW/ff.c     ****                 }
 9093              		.loc 1 4689 21 is_stmt 1 view .LVU3042
4689:./FW/ff.c     ****                 }
 9094              		.loc 1 4689 31 is_stmt 0 view .LVU3043
 9095 0086 039B     		ldr	r3, [sp, #12]
 9096 0088 0122     		movs	r2, #1
 9097 008a DA70     		strb	r2, [r3, #3]
4691:./FW/ff.c     ****                     res = sync_fs(fs);
 9098              		.loc 1 4691 17 is_stmt 1 view .LVU3044
4692:./FW/ff.c     ****                 }
 9099              		.loc 1 4692 21 view .LVU3045
4692:./FW/ff.c     ****                 }
 9100              		.loc 1 4692 27 is_stmt 0 view .LVU3046
 9101 008c 0398     		ldr	r0, [sp, #12]
 9102 008e FFF7FEFF 		bl	sync_fs
 9103              	.LVL1060:
 9104 0092 0446     		mov	r4, r0
 9105              	.LVL1061:
4692:./FW/ff.c     ****                 }
 9106              		.loc 1 4692 27 view .LVU3047
 9107 0094 C1E7     		b	.L674
 9108              	.LVL1062:
 9109              	.L693:
4641:./FW/ff.c     ****             if (dcl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 9110              		.loc 1 4641 33 view .LVU3048
 9111 0096 0224     		movs	r4, #2
 9112              	.LVL1063:
4641:./FW/ff.c     ****             if (dcl == 0xFFFFFFFF) { res = FR_DISK_ERR; }
 9113              		.loc 1 4641 33 view .LVU3049
 9114 0098 DCE7     		b	.L676
 9115              	.LVL1064:
 9116              	.L694:
4643:./FW/ff.c     ****             tm = GET_FATTIME();
 9117              		.loc 1 4643 33 is_stmt 1 discriminator 1 view .LVU3050
4643:./FW/ff.c     ****             tm = GET_FATTIME();
 9118              		.loc 1 4643 39 is_stmt 0 discriminator 1 view .LVU3051
 9119 009a 1046     		mov	r0, r2
 9120              	.LVL1065:
4643:./FW/ff.c     ****             tm = GET_FATTIME();
 9121              		.loc 1 4643 39 discriminator 1 view .LVU3052
 9122 009c FFF7FEFF 		bl	sync_window
 9123              	.LVL1066:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 312


 9124 00a0 0446     		mov	r4, r0
 9125              	.LVL1067:
4643:./FW/ff.c     ****             tm = GET_FATTIME();
 9126              		.loc 1 4643 39 discriminator 1 view .LVU3053
 9127 00a2 DBE7     		b	.L677
 9128              	.LVL1068:
 9129              	.L688:
4642:./FW/ff.c     ****             if (res == FR_OK) { res = sync_window(fs); }    /* Flush FAT */
 9130              		.loc 1 4642 42 view .LVU3054
 9131 00a4 0124     		movs	r4, #1
 9132              	.LVL1069:
4642:./FW/ff.c     ****             if (res == FR_OK) { res = sync_window(fs); }    /* Flush FAT */
 9133              		.loc 1 4642 42 view .LVU3055
 9134 00a6 D9E7     		b	.L677
 9135              	.LVL1070:
 9136              	.L695:
4646:./FW/ff.c     ****                 dir = fs->win;
 9137              		.loc 1 4646 17 is_stmt 1 view .LVU3056
4646:./FW/ff.c     ****                 dir = fs->win;
 9138              		.loc 1 4646 23 is_stmt 0 view .LVU3057
 9139 00a8 039E     		ldr	r6, [sp, #12]
 9140 00aa 4146     		mov	r1, r8
 9141 00ac 3046     		mov	r0, r6
 9142              	.LVL1071:
4646:./FW/ff.c     ****                 dir = fs->win;
 9143              		.loc 1 4646 23 view .LVU3058
 9144 00ae FFF7FEFF 		bl	clust2sect
 9145              	.LVL1072:
 9146 00b2 0546     		mov	r5, r0
 9147              	.LVL1073:
4647:./FW/ff.c     ****                 mem_set(dir, 0, SS(fs));
 9148              		.loc 1 4647 17 is_stmt 1 view .LVU3059
4647:./FW/ff.c     ****                 mem_set(dir, 0, SS(fs));
 9149              		.loc 1 4647 21 is_stmt 0 view .LVU3060
 9150 00b4 06F13009 		add	r9, r6, #48
 9151              	.LVL1074:
4648:./FW/ff.c     ****                 if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 9152              		.loc 1 4648 17 is_stmt 1 view .LVU3061
 9153 00b8 4FF40072 		mov	r2, #512
 9154 00bc 0021     		movs	r1, #0
 9155 00be 4846     		mov	r0, r9
 9156              	.LVL1075:
4648:./FW/ff.c     ****                 if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 9157              		.loc 1 4648 17 is_stmt 0 view .LVU3062
 9158 00c0 FFF7FEFF 		bl	mem_set
 9159              	.LVL1076:
4649:./FW/ff.c     ****                     mem_set(dir + DIR_Name, ' ', 11);   /* Create "." entry */
 9160              		.loc 1 4649 17 is_stmt 1 view .LVU3063
4650:./FW/ff.c     ****                     dir[DIR_Name] = '.';
 9161              		.loc 1 4650 21 view .LVU3064
 9162 00c4 0B22     		movs	r2, #11
 9163 00c6 2021     		movs	r1, #32
 9164 00c8 4846     		mov	r0, r9
 9165 00ca FFF7FEFF 		bl	mem_set
 9166              	.LVL1077:
4651:./FW/ff.c     ****                     dir[DIR_Attr] = AM_DIR;
 9167              		.loc 1 4651 21 view .LVU3065
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 313


4651:./FW/ff.c     ****                     dir[DIR_Attr] = AM_DIR;
 9168              		.loc 1 4651 35 is_stmt 0 view .LVU3066
 9169 00ce 4FF02E0B 		mov	fp, #46
 9170 00d2 86F830B0 		strb	fp, [r6, #48]
4652:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);
 9171              		.loc 1 4652 21 is_stmt 1 view .LVU3067
4652:./FW/ff.c     ****                     st_dword(dir + DIR_ModTime, tm);
 9172              		.loc 1 4652 35 is_stmt 0 view .LVU3068
 9173 00d6 1023     		movs	r3, #16
 9174 00d8 86F83B30 		strb	r3, [r6, #59]
4653:./FW/ff.c     ****                     st_clust(fs, dir, dcl);
 9175              		.loc 1 4653 21 is_stmt 1 view .LVU3069
 9176 00dc 5146     		mov	r1, r10
 9177 00de 06F14600 		add	r0, r6, #70
 9178 00e2 FFF7FEFF 		bl	st_dword
 9179              	.LVL1078:
4654:./FW/ff.c     ****                     mem_cpy(dir + SZDIRE, dir, SZDIRE);     /* Create ".." entry */
 9180              		.loc 1 4654 21 view .LVU3070
 9181 00e6 4246     		mov	r2, r8
 9182 00e8 4946     		mov	r1, r9
 9183 00ea 0398     		ldr	r0, [sp, #12]
 9184 00ec FFF7FEFF 		bl	st_clust
 9185              	.LVL1079:
4655:./FW/ff.c     ****                     dir[SZDIRE + 1] = '.';
 9186              		.loc 1 4655 21 view .LVU3071
4655:./FW/ff.c     ****                     dir[SZDIRE + 1] = '.';
 9187              		.loc 1 4655 33 is_stmt 0 view .LVU3072
 9188 00f0 06F15007 		add	r7, r6, #80
4655:./FW/ff.c     ****                     dir[SZDIRE + 1] = '.';
 9189              		.loc 1 4655 21 view .LVU3073
 9190 00f4 2022     		movs	r2, #32
 9191 00f6 4946     		mov	r1, r9
 9192 00f8 3846     		mov	r0, r7
 9193 00fa FFF7FEFF 		bl	mem_cpy
 9194              	.LVL1080:
4656:./FW/ff.c     ****                     pcl = dj.obj.sclust;
 9195              		.loc 1 4656 21 is_stmt 1 view .LVU3074
4656:./FW/ff.c     ****                     pcl = dj.obj.sclust;
 9196              		.loc 1 4656 37 is_stmt 0 view .LVU3075
 9197 00fe 86F851B0 		strb	fp, [r6, #81]
4657:./FW/ff.c     ****                     if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) { pcl = 0; }
 9198              		.loc 1 4657 21 is_stmt 1 view .LVU3076
4657:./FW/ff.c     ****                     if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) { pcl = 0; }
 9199              		.loc 1 4657 25 is_stmt 0 view .LVU3077
 9200 0102 069A     		ldr	r2, [sp, #24]
 9201              	.LVL1081:
4658:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
 9202              		.loc 1 4658 21 is_stmt 1 view .LVU3078
4658:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
 9203              		.loc 1 4658 27 is_stmt 0 view .LVU3079
 9204 0104 0398     		ldr	r0, [sp, #12]
 9205 0106 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
4658:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
 9206              		.loc 1 4658 24 view .LVU3080
 9207 0108 032B     		cmp	r3, #3
 9208 010a 1AD0     		beq	.L697
 9209              	.LVL1082:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 314


 9210              	.L679:
4659:./FW/ff.c     ****                 }
 9211              		.loc 1 4659 21 is_stmt 1 view .LVU3081
 9212 010c 3946     		mov	r1, r7
 9213 010e FFF7FEFF 		bl	st_clust
 9214              	.LVL1083:
4661:./FW/ff.c     ****                     fs->winsect = dsc++;
 9215              		.loc 1 4661 17 view .LVU3082
4661:./FW/ff.c     ****                     fs->winsect = dsc++;
 9216              		.loc 1 4661 28 is_stmt 0 view .LVU3083
 9217 0112 039B     		ldr	r3, [sp, #12]
 9218 0114 5E89     		ldrh	r6, [r3, #10]
 9219              	.LVL1084:
 9220              	.L680:
4661:./FW/ff.c     ****                     fs->winsect = dsc++;
 9221              		.loc 1 4661 37 is_stmt 1 discriminator 1 view .LVU3084
4661:./FW/ff.c     ****                     fs->winsect = dsc++;
 9222              		.loc 1 4661 17 is_stmt 0 discriminator 1 view .LVU3085
 9223 0116 002E     		cmp	r6, #0
 9224 0118 A4D0     		beq	.L678
4662:./FW/ff.c     ****                     fs->wflag = 1;
 9225              		.loc 1 4662 21 is_stmt 1 view .LVU3086
4662:./FW/ff.c     ****                     fs->wflag = 1;
 9226              		.loc 1 4662 38 is_stmt 0 view .LVU3087
 9227 011a 6F1C     		adds	r7, r5, #1
 9228              	.LVL1085:
4662:./FW/ff.c     ****                     fs->wflag = 1;
 9229              		.loc 1 4662 23 view .LVU3088
 9230 011c 039B     		ldr	r3, [sp, #12]
4662:./FW/ff.c     ****                     fs->wflag = 1;
 9231              		.loc 1 4662 33 view .LVU3089
 9232 011e DD62     		str	r5, [r3, #44]
4663:./FW/ff.c     ****                     res = sync_window(fs);
 9233              		.loc 1 4663 21 is_stmt 1 view .LVU3090
4663:./FW/ff.c     ****                     res = sync_window(fs);
 9234              		.loc 1 4663 31 is_stmt 0 view .LVU3091
 9235 0120 0122     		movs	r2, #1
 9236 0122 DA70     		strb	r2, [r3, #3]
4664:./FW/ff.c     ****                     if (res != FR_OK) { break; }
 9237              		.loc 1 4664 21 is_stmt 1 view .LVU3092
4664:./FW/ff.c     ****                     if (res != FR_OK) { break; }
 9238              		.loc 1 4664 27 is_stmt 0 view .LVU3093
 9239 0124 0398     		ldr	r0, [sp, #12]
 9240 0126 FFF7FEFF 		bl	sync_window
 9241              	.LVL1086:
4665:./FW/ff.c     ****                     mem_set(dir, 0, SS(fs));
 9242              		.loc 1 4665 21 is_stmt 1 view .LVU3094
4665:./FW/ff.c     ****                     mem_set(dir, 0, SS(fs));
 9243              		.loc 1 4665 24 is_stmt 0 view .LVU3095
 9244 012a 0446     		mov	r4, r0
 9245 012c 0028     		cmp	r0, #0
 9246 012e 99D1     		bne	.L678
4666:./FW/ff.c     ****                 }
 9247              		.loc 1 4666 21 is_stmt 1 discriminator 2 view .LVU3096
 9248 0130 4FF40072 		mov	r2, #512
 9249 0134 0021     		movs	r1, #0
 9250 0136 4846     		mov	r0, r9
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 315


 9251              	.LVL1087:
4666:./FW/ff.c     ****                 }
 9252              		.loc 1 4666 21 is_stmt 0 discriminator 2 view .LVU3097
 9253 0138 FFF7FEFF 		bl	mem_set
 9254              	.LVL1088:
4661:./FW/ff.c     ****                     fs->winsect = dsc++;
 9255              		.loc 1 4661 40 is_stmt 1 discriminator 2 view .LVU3098
4661:./FW/ff.c     ****                     fs->winsect = dsc++;
 9256              		.loc 1 4661 41 is_stmt 0 discriminator 2 view .LVU3099
 9257 013c 013E     		subs	r6, r6, #1
 9258              	.LVL1089:
4662:./FW/ff.c     ****                     fs->wflag = 1;
 9259              		.loc 1 4662 38 discriminator 2 view .LVU3100
 9260 013e 3D46     		mov	r5, r7
 9261 0140 E9E7     		b	.L680
 9262              	.LVL1090:
 9263              	.L697:
4658:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
 9264              		.loc 1 4658 61 discriminator 1 view .LVU3101
 9265 0142 436A     		ldr	r3, [r0, #36]
4658:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
 9266              		.loc 1 4658 49 discriminator 1 view .LVU3102
 9267 0144 9342     		cmp	r3, r2
 9268 0146 E1D1     		bne	.L679
4658:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
 9269              		.loc 1 4658 78 view .LVU3103
 9270 0148 0022     		movs	r2, #0
 9271              	.LVL1091:
4658:./FW/ff.c     ****                     st_clust(fs, dir + SZDIRE, pcl);
 9272              		.loc 1 4658 78 view .LVU3104
 9273 014a DFE7     		b	.L679
 9274              	.LVL1092:
 9275              	.L696:
4670:./FW/ff.c     ****             }
 9276              		.loc 1 4670 17 is_stmt 1 view .LVU3105
4670:./FW/ff.c     ****             }
 9277              		.loc 1 4670 23 is_stmt 0 view .LVU3106
 9278 014c 04A8     		add	r0, sp, #16
 9279 014e FFF7FEFF 		bl	dir_register
 9280              	.LVL1093:
 9281 0152 0446     		mov	r4, r0
 9282              	.LVL1094:
4670:./FW/ff.c     ****             }
 9283              		.loc 1 4670 23 view .LVU3107
 9284 0154 88E7     		b	.L682
 9285              	.L683:
4695:./FW/ff.c     ****             }
 9286              		.loc 1 4695 17 is_stmt 1 view .LVU3108
 9287 0156 0022     		movs	r2, #0
 9288 0158 4146     		mov	r1, r8
 9289 015a 04A8     		add	r0, sp, #16
 9290 015c FFF7FEFF 		bl	remove_chain
 9291              	.LVL1095:
 9292 0160 5BE7     		b	.L674
 9293              	.LVL1096:
 9294              	.L684:
4632:./FW/ff.c     ****         if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 316


 9295              		.loc 1 4632 33 is_stmt 0 view .LVU3109
 9296 0162 0824     		movs	r4, #8
 9297 0164 59E7     		b	.L674
 9298              		.cfi_endproc
 9299              	.LFE991:
 9301              		.section	.text.f_rename,"ax",%progbits
 9302              		.align	1
 9303              		.global	f_rename
 9304              		.syntax unified
 9305              		.thumb
 9306              		.thumb_func
 9307              		.fpu fpv4-sp-d16
 9309              	f_rename:
 9310              	.LVL1097:
 9311              	.LFB992:
4714:./FW/ff.c     ****     FRESULT res;
 9312              		.loc 1 4714 3 is_stmt 1 view -0
 9313              		.cfi_startproc
 9314              		@ args = 0, pretend = 0, frame = 136
 9315              		@ frame_needed = 0, uses_anonymous_args = 0
4714:./FW/ff.c     ****     FRESULT res;
 9316              		.loc 1 4714 3 is_stmt 0 view .LVU3111
 9317 0000 30B5     		push	{r4, r5, lr}
 9318              	.LCFI114:
 9319              		.cfi_def_cfa_offset 12
 9320              		.cfi_offset 4, -12
 9321              		.cfi_offset 5, -8
 9322              		.cfi_offset 14, -4
 9323 0002 A3B0     		sub	sp, sp, #140
 9324              	.LCFI115:
 9325              		.cfi_def_cfa_offset 152
 9326 0004 0190     		str	r0, [sp, #4]
 9327 0006 0091     		str	r1, [sp]
4715:./FW/ff.c     ****     DIR djo, djn;
 9328              		.loc 1 4715 5 is_stmt 1 view .LVU3112
4716:./FW/ff.c     ****     FATFS *fs;
 9329              		.loc 1 4716 5 view .LVU3113
4717:./FW/ff.c     ****     BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
 9330              		.loc 1 4717 5 view .LVU3114
4718:./FW/ff.c     ****     DWORD dw;
 9331              		.loc 1 4718 5 view .LVU3115
4719:./FW/ff.c     ****     DEF_NAMBUF
 9332              		.loc 1 4719 5 view .LVU3116
4723:./FW/ff.c     ****     res = find_volume(&path_old, &fs, FA_WRITE);    /* Get logical drive of the old object */
 9333              		.loc 1 4723 5 view .LVU3117
 9334 0008 6846     		mov	r0, sp
 9335              	.LVL1098:
4723:./FW/ff.c     ****     res = find_volume(&path_old, &fs, FA_WRITE);    /* Get logical drive of the old object */
 9336              		.loc 1 4723 5 is_stmt 0 view .LVU3118
 9337 000a FFF7FEFF 		bl	get_ldnumber
 9338              	.LVL1099:
4724:./FW/ff.c     ****     if (res == FR_OK) {
 9339              		.loc 1 4724 5 is_stmt 1 view .LVU3119
4724:./FW/ff.c     ****     if (res == FR_OK) {
 9340              		.loc 1 4724 11 is_stmt 0 view .LVU3120
 9341 000e 0222     		movs	r2, #2
 9342 0010 09A9     		add	r1, sp, #36
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 317


 9343 0012 01A8     		add	r0, sp, #4
 9344 0014 FFF7FEFF 		bl	find_volume
 9345              	.LVL1100:
4725:./FW/ff.c     ****         djo.obj.fs = fs;
 9346              		.loc 1 4725 5 is_stmt 1 view .LVU3121
4725:./FW/ff.c     ****         djo.obj.fs = fs;
 9347              		.loc 1 4725 8 is_stmt 0 view .LVU3122
 9348 0018 0446     		mov	r4, r0
 9349 001a 10B1     		cbz	r0, .L709
 9350              	.LVL1101:
 9351              	.L699:
4803:./FW/ff.c     ****     }
 9352              		.loc 1 4803 22 is_stmt 1 view .LVU3123
4806:./FW/ff.c     **** }
 9353              		.loc 1 4806 5 view .LVU3124
4807:./FW/ff.c     **** 
 9354              		.loc 1 4807 1 is_stmt 0 view .LVU3125
 9355 001c 2046     		mov	r0, r4
 9356 001e 23B0     		add	sp, sp, #140
 9357              	.LCFI116:
 9358              		.cfi_remember_state
 9359              		.cfi_def_cfa_offset 12
 9360              		@ sp needed
 9361 0020 30BD     		pop	{r4, r5, pc}
 9362              	.LVL1102:
 9363              	.L709:
 9364              	.LCFI117:
 9365              		.cfi_restore_state
4726:./FW/ff.c     ****         INIT_NAMBUF(fs);
 9366              		.loc 1 4726 9 is_stmt 1 view .LVU3126
4726:./FW/ff.c     ****         INIT_NAMBUF(fs);
 9367              		.loc 1 4726 20 is_stmt 0 view .LVU3127
 9368 0022 099B     		ldr	r3, [sp, #36]
 9369 0024 1693     		str	r3, [sp, #88]
4727:./FW/ff.c     ****         res = follow_path(&djo, path_old);      /* Check old object */
 9370              		.loc 1 4727 24 is_stmt 1 view .LVU3128
4728:./FW/ff.c     ****         if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) { res = FR_INVALID_NAME; } /* 
 9371              		.loc 1 4728 9 view .LVU3129
4728:./FW/ff.c     ****         if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) { res = FR_INVALID_NAME; } /* 
 9372              		.loc 1 4728 15 is_stmt 0 view .LVU3130
 9373 0026 0199     		ldr	r1, [sp, #4]
 9374 0028 16A8     		add	r0, sp, #88
 9375              	.LVL1103:
4728:./FW/ff.c     ****         if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) { res = FR_INVALID_NAME; } /* 
 9376              		.loc 1 4728 15 view .LVU3131
 9377 002a FFF7FEFF 		bl	follow_path
 9378              	.LVL1104:
4729:./FW/ff.c     **** #if _FS_LOCK != 0
 9379              		.loc 1 4729 9 is_stmt 1 view .LVU3132
4729:./FW/ff.c     **** #if _FS_LOCK != 0
 9380              		.loc 1 4729 12 is_stmt 0 view .LVU3133
 9381 002e 0446     		mov	r4, r0
 9382 0030 20B9     		cbnz	r0, .L700
4729:./FW/ff.c     **** #if _FS_LOCK != 0
 9383              		.loc 1 4729 36 discriminator 1 view .LVU3134
 9384 0032 9DF88730 		ldrb	r3, [sp, #135]	@ zero_extendqisi2
4729:./FW/ff.c     **** #if _FS_LOCK != 0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 318


 9385              		.loc 1 4729 26 discriminator 1 view .LVU3135
 9386 0036 13F0A00F 		tst	r3, #160
 9387 003a 1ED1     		bne	.L705
 9388              	.L700:
 9389              	.LVL1105:
4731:./FW/ff.c     ****             res = chk_lock(&djo, 2);
 9390              		.loc 1 4731 9 is_stmt 1 view .LVU3136
4731:./FW/ff.c     ****             res = chk_lock(&djo, 2);
 9391              		.loc 1 4731 12 is_stmt 0 view .LVU3137
 9392 003c 24B9     		cbnz	r4, .L701
4732:./FW/ff.c     ****         }
 9393              		.loc 1 4732 13 is_stmt 1 view .LVU3138
4732:./FW/ff.c     ****         }
 9394              		.loc 1 4732 19 is_stmt 0 view .LVU3139
 9395 003e 0221     		movs	r1, #2
 9396 0040 16A8     		add	r0, sp, #88
 9397 0042 FFF7FEFF 		bl	chk_lock
 9398              	.LVL1106:
 9399 0046 0446     		mov	r4, r0
 9400              	.LVL1107:
 9401              	.L701:
4735:./FW/ff.c     **** #if _FS_EXFAT
 9402              		.loc 1 4735 9 is_stmt 1 view .LVU3140
4735:./FW/ff.c     **** #if _FS_EXFAT
 9403              		.loc 1 4735 12 is_stmt 0 view .LVU3141
 9404 0048 002C     		cmp	r4, #0
 9405 004a E7D1     		bne	.L699
4765:./FW/ff.c     ****                 mem_cpy(&djn, &djo, sizeof (DIR));      /* Duplicate the directory object */
 9406              		.loc 1 4765 17 is_stmt 1 view .LVU3142
 9407 004c 1522     		movs	r2, #21
 9408 004e 1E99     		ldr	r1, [sp, #120]
 9409 0050 0B31     		adds	r1, r1, #11
 9410 0052 03A8     		add	r0, sp, #12
 9411 0054 FFF7FEFF 		bl	mem_cpy
 9412              	.LVL1108:
4766:./FW/ff.c     ****                 res = follow_path(&djn, path_new);      /* Make sure if new object name is not in u
 9413              		.loc 1 4766 17 view .LVU3143
 9414 0058 3022     		movs	r2, #48
 9415 005a 16A9     		add	r1, sp, #88
 9416 005c 0AA8     		add	r0, sp, #40
 9417 005e FFF7FEFF 		bl	mem_cpy
 9418              	.LVL1109:
4767:./FW/ff.c     ****                 if (res == FR_OK) {                     /* Is new name already in use by any other 
 9419              		.loc 1 4767 17 view .LVU3144
4767:./FW/ff.c     ****                 if (res == FR_OK) {                     /* Is new name already in use by any other 
 9420              		.loc 1 4767 23 is_stmt 0 view .LVU3145
 9421 0062 0099     		ldr	r1, [sp]
 9422 0064 0AA8     		add	r0, sp, #40
 9423 0066 FFF7FEFF 		bl	follow_path
 9424              	.LVL1110:
4768:./FW/ff.c     ****                     res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE :
 9425              		.loc 1 4768 17 is_stmt 1 view .LVU3146
4768:./FW/ff.c     ****                     res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE :
 9426              		.loc 1 4768 20 is_stmt 0 view .LVU3147
 9427 006a 0446     		mov	r4, r0
 9428 006c 68B9     		cbnz	r0, .L702
4769:./FW/ff.c     ****                 }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 319


 9429              		.loc 1 4769 21 is_stmt 1 view .LVU3148
4769:./FW/ff.c     ****                 }
 9430              		.loc 1 4769 99 is_stmt 0 view .LVU3149
 9431 006e 0C9A     		ldr	r2, [sp, #48]
 9432 0070 189B     		ldr	r3, [sp, #96]
 9433 0072 9A42     		cmp	r2, r3
 9434 0074 03D0     		beq	.L710
 9435 0076 0824     		movs	r4, #8
 9436 0078 09E0     		b	.L703
 9437              	.L705:
4729:./FW/ff.c     **** #if _FS_LOCK != 0
 9438              		.loc 1 4729 76 view .LVU3150
 9439 007a 0624     		movs	r4, #6
 9440 007c E4E7     		b	.L701
 9441              	.L710:
4769:./FW/ff.c     ****                 }
 9442              		.loc 1 4769 61 discriminator 1 view .LVU3151
 9443 007e 0F9A     		ldr	r2, [sp, #60]
 9444 0080 1B9B     		ldr	r3, [sp, #108]
 9445 0082 9A42     		cmp	r2, r3
 9446 0084 10D0     		beq	.L704
4769:./FW/ff.c     ****                 }
 9447              		.loc 1 4769 99 view .LVU3152
 9448 0086 0824     		movs	r4, #8
 9449 0088 01E0     		b	.L703
 9450              	.L702:
4771:./FW/ff.c     ****                     res = dir_register(&djn);           /* Register the new entry */
 9451              		.loc 1 4771 17 is_stmt 1 view .LVU3153
4771:./FW/ff.c     ****                     res = dir_register(&djn);           /* Register the new entry */
 9452              		.loc 1 4771 20 is_stmt 0 view .LVU3154
 9453 008a 0428     		cmp	r0, #4
 9454 008c 0CD0     		beq	.L704
 9455              	.LVL1111:
 9456              	.L703:
4795:./FW/ff.c     ****                 res = dir_remove(&djo);     /* Remove old entry */
 9457              		.loc 1 4795 13 is_stmt 1 view .LVU3155
4795:./FW/ff.c     ****                 res = dir_remove(&djo);     /* Remove old entry */
 9458              		.loc 1 4795 16 is_stmt 0 view .LVU3156
 9459 008e 002C     		cmp	r4, #0
 9460 0090 C4D1     		bne	.L699
4796:./FW/ff.c     ****                 if (res == FR_OK) {
 9461              		.loc 1 4796 17 is_stmt 1 view .LVU3157
4796:./FW/ff.c     ****                 if (res == FR_OK) {
 9462              		.loc 1 4796 23 is_stmt 0 view .LVU3158
 9463 0092 16A8     		add	r0, sp, #88
 9464 0094 FFF7FEFF 		bl	dir_remove
 9465              	.LVL1112:
4797:./FW/ff.c     ****                     res = sync_fs(fs);
 9466              		.loc 1 4797 17 is_stmt 1 view .LVU3159
4797:./FW/ff.c     ****                     res = sync_fs(fs);
 9467              		.loc 1 4797 20 is_stmt 0 view .LVU3160
 9468 0098 0446     		mov	r4, r0
 9469 009a 0028     		cmp	r0, #0
 9470 009c BED1     		bne	.L699
4798:./FW/ff.c     ****                 }
 9471              		.loc 1 4798 21 is_stmt 1 view .LVU3161
4798:./FW/ff.c     ****                 }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 320


 9472              		.loc 1 4798 27 is_stmt 0 view .LVU3162
 9473 009e 0998     		ldr	r0, [sp, #36]
 9474              	.LVL1113:
4798:./FW/ff.c     ****                 }
 9475              		.loc 1 4798 27 view .LVU3163
 9476 00a0 FFF7FEFF 		bl	sync_fs
 9477              	.LVL1114:
 9478 00a4 0446     		mov	r4, r0
 9479              	.LVL1115:
4798:./FW/ff.c     ****                 }
 9480              		.loc 1 4798 27 view .LVU3164
 9481 00a6 B9E7     		b	.L699
 9482              	.LVL1116:
 9483              	.L704:
4772:./FW/ff.c     ****                     if (res == FR_OK) {
 9484              		.loc 1 4772 21 is_stmt 1 view .LVU3165
4772:./FW/ff.c     ****                     if (res == FR_OK) {
 9485              		.loc 1 4772 27 is_stmt 0 view .LVU3166
 9486 00a8 0AA8     		add	r0, sp, #40
 9487 00aa FFF7FEFF 		bl	dir_register
 9488              	.LVL1117:
4773:./FW/ff.c     ****                         dir = djn.dir;                  /* Copy information about object except nam
 9489              		.loc 1 4773 21 is_stmt 1 view .LVU3167
4773:./FW/ff.c     ****                         dir = djn.dir;                  /* Copy information about object except nam
 9490              		.loc 1 4773 24 is_stmt 0 view .LVU3168
 9491 00ae 0446     		mov	r4, r0
 9492 00b0 0028     		cmp	r0, #0
 9493 00b2 ECD1     		bne	.L703
4774:./FW/ff.c     ****                         mem_cpy(dir + 13, buf + 2, 19);
 9494              		.loc 1 4774 25 is_stmt 1 view .LVU3169
4774:./FW/ff.c     ****                         mem_cpy(dir + 13, buf + 2, 19);
 9495              		.loc 1 4774 29 is_stmt 0 view .LVU3170
 9496 00b4 129D     		ldr	r5, [sp, #72]
 9497              	.LVL1118:
4775:./FW/ff.c     ****                         dir[DIR_Attr] = buf[0] | AM_ARC;
 9498              		.loc 1 4775 25 is_stmt 1 view .LVU3171
 9499 00b6 1322     		movs	r2, #19
 9500 00b8 0DF10E01 		add	r1, sp, #14
 9501 00bc 05F10D00 		add	r0, r5, #13
 9502              	.LVL1119:
4775:./FW/ff.c     ****                         dir[DIR_Attr] = buf[0] | AM_ARC;
 9503              		.loc 1 4775 25 is_stmt 0 view .LVU3172
 9504 00c0 FFF7FEFF 		bl	mem_cpy
 9505              	.LVL1120:
4776:./FW/ff.c     ****                         fs->wflag = 1;
 9506              		.loc 1 4776 25 is_stmt 1 view .LVU3173
4776:./FW/ff.c     ****                         fs->wflag = 1;
 9507              		.loc 1 4776 44 is_stmt 0 view .LVU3174
 9508 00c4 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
4776:./FW/ff.c     ****                         fs->wflag = 1;
 9509              		.loc 1 4776 39 view .LVU3175
 9510 00c8 43F02003 		orr	r3, r3, #32
 9511 00cc EB72     		strb	r3, [r5, #11]
4777:./FW/ff.c     ****                         if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) { /* Upda
 9512              		.loc 1 4777 25 is_stmt 1 view .LVU3176
4777:./FW/ff.c     ****                         if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) { /* Upda
 9513              		.loc 1 4777 35 is_stmt 0 view .LVU3177
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 321


 9514 00ce 099B     		ldr	r3, [sp, #36]
 9515 00d0 0122     		movs	r2, #1
 9516 00d2 DA70     		strb	r2, [r3, #3]
4778:./FW/ff.c     ****                             dw = clust2sect(fs, ld_clust(fs, dir));
 9517              		.loc 1 4778 25 is_stmt 1 view .LVU3178
4778:./FW/ff.c     ****                             dw = clust2sect(fs, ld_clust(fs, dir));
 9518              		.loc 1 4778 33 is_stmt 0 view .LVU3179
 9519 00d4 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
4778:./FW/ff.c     ****                             dw = clust2sect(fs, ld_clust(fs, dir));
 9520              		.loc 1 4778 28 view .LVU3180
 9521 00d6 13F0100F 		tst	r3, #16
 9522 00da D8D0     		beq	.L703
4778:./FW/ff.c     ****                             dw = clust2sect(fs, ld_clust(fs, dir));
 9523              		.loc 1 4778 54 discriminator 1 view .LVU3181
 9524 00dc 189A     		ldr	r2, [sp, #96]
 9525 00de 0C9B     		ldr	r3, [sp, #48]
 9526 00e0 9A42     		cmp	r2, r3
 9527 00e2 D4D0     		beq	.L703
4779:./FW/ff.c     ****                             if (!dw) {
 9528              		.loc 1 4779 29 is_stmt 1 view .LVU3182
4779:./FW/ff.c     ****                             if (!dw) {
 9529              		.loc 1 4779 34 is_stmt 0 view .LVU3183
 9530 00e4 099C     		ldr	r4, [sp, #36]
 9531 00e6 2946     		mov	r1, r5
 9532 00e8 2046     		mov	r0, r4
 9533 00ea FFF7FEFF 		bl	ld_clust
 9534              	.LVL1121:
 9535 00ee 0146     		mov	r1, r0
 9536 00f0 2046     		mov	r0, r4
 9537 00f2 FFF7FEFF 		bl	clust2sect
 9538              	.LVL1122:
4780:./FW/ff.c     ****                                 res = FR_INT_ERR;
 9539              		.loc 1 4780 29 is_stmt 1 view .LVU3184
4780:./FW/ff.c     ****                                 res = FR_INT_ERR;
 9540              		.loc 1 4780 32 is_stmt 0 view .LVU3185
 9541 00f6 0146     		mov	r1, r0
 9542 00f8 08B9     		cbnz	r0, .L711
4781:./FW/ff.c     ****                             } else {
 9543              		.loc 1 4781 37 view .LVU3186
 9544 00fa 0224     		movs	r4, #2
 9545 00fc 8EE7     		b	.L699
 9546              	.L711:
4784:./FW/ff.c     ****                                 dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
 9547              		.loc 1 4784 33 is_stmt 1 view .LVU3187
4784:./FW/ff.c     ****                                 dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
 9548              		.loc 1 4784 39 is_stmt 0 view .LVU3188
 9549 00fe 2046     		mov	r0, r4
 9550              	.LVL1123:
4784:./FW/ff.c     ****                                 dir = fs->win + SZDIRE * 1; /* Ptr to .. entry */
 9551              		.loc 1 4784 39 view .LVU3189
 9552 0100 FFF7FEFF 		bl	move_window
 9553              	.LVL1124:
4785:./FW/ff.c     ****                                 if (res == FR_OK && dir[1] == '.') {
 9554              		.loc 1 4785 33 is_stmt 1 view .LVU3190
4785:./FW/ff.c     ****                                 if (res == FR_OK && dir[1] == '.') {
 9555              		.loc 1 4785 41 is_stmt 0 view .LVU3191
 9556 0104 099B     		ldr	r3, [sp, #36]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 322


4785:./FW/ff.c     ****                                 if (res == FR_OK && dir[1] == '.') {
 9557              		.loc 1 4785 37 view .LVU3192
 9558 0106 03F15001 		add	r1, r3, #80
 9559              	.LVL1125:
4786:./FW/ff.c     ****                                     st_clust(fs, dir, djn.obj.sclust);
 9560              		.loc 1 4786 33 is_stmt 1 view .LVU3193
4786:./FW/ff.c     ****                                     st_clust(fs, dir, djn.obj.sclust);
 9561              		.loc 1 4786 36 is_stmt 0 view .LVU3194
 9562 010a 0446     		mov	r4, r0
 9563 010c 0028     		cmp	r0, #0
 9564 010e BED1     		bne	.L703
4786:./FW/ff.c     ****                                     st_clust(fs, dir, djn.obj.sclust);
 9565              		.loc 1 4786 56 discriminator 1 view .LVU3195
 9566 0110 93F85120 		ldrb	r2, [r3, #81]	@ zero_extendqisi2
4786:./FW/ff.c     ****                                     st_clust(fs, dir, djn.obj.sclust);
 9567              		.loc 1 4786 50 discriminator 1 view .LVU3196
 9568 0114 2E2A     		cmp	r2, #46
 9569 0116 BAD1     		bne	.L703
4787:./FW/ff.c     ****                                     fs->wflag = 1;
 9570              		.loc 1 4787 37 is_stmt 1 view .LVU3197
 9571 0118 0C9A     		ldr	r2, [sp, #48]
 9572 011a 1846     		mov	r0, r3
 9573              	.LVL1126:
4787:./FW/ff.c     ****                                     fs->wflag = 1;
 9574              		.loc 1 4787 37 is_stmt 0 view .LVU3198
 9575 011c FFF7FEFF 		bl	st_clust
 9576              	.LVL1127:
4788:./FW/ff.c     ****                                 }
 9577              		.loc 1 4788 37 is_stmt 1 view .LVU3199
4788:./FW/ff.c     ****                                 }
 9578              		.loc 1 4788 47 is_stmt 0 view .LVU3200
 9579 0120 099B     		ldr	r3, [sp, #36]
 9580 0122 0122     		movs	r2, #1
 9581 0124 DA70     		strb	r2, [r3, #3]
 9582 0126 B2E7     		b	.L703
 9583              		.cfi_endproc
 9584              	.LFE992:
 9586              		.section	.rodata.f_mkfs.str1.4,"aMS",%progbits,1
 9587              		.align	2
 9588              	.LC1:
 9589 0000 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 9589      53444F53 
 9589      352E3000 
 9590              		.align	2
 9591              	.LC2:
 9592 000c 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 9592      414D4520 
 9592      20202046 
 9592      41543332 
 9592      20202000 
 9593              		.align	2
 9594              	.LC3:
 9595 0020 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 9595      414D4520 
 9595      20202046 
 9595      41542020 
 9595      20202000 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 323


 9596              		.section	.text.f_mkfs,"ax",%progbits
 9597              		.align	1
 9598              		.global	f_mkfs
 9599              		.syntax unified
 9600              		.thumb
 9601              		.thumb_func
 9602              		.fpu fpv4-sp-d16
 9604              	f_mkfs:
 9605              	.LVL1128:
 9606              	.LFB993:
5306:./FW/ff.c     ****     const UINT n_fats = 1;      /* Number of FATs for FAT12/16/32 volume (1 or 2) */
 9607              		.loc 1 5306 3 is_stmt 1 view -0
 9608              		.cfi_startproc
 9609              		@ args = 4, pretend = 0, frame = 48
 9610              		@ frame_needed = 0, uses_anonymous_args = 0
5306:./FW/ff.c     ****     const UINT n_fats = 1;      /* Number of FATs for FAT12/16/32 volume (1 or 2) */
 9611              		.loc 1 5306 3 is_stmt 0 view .LVU3202
 9612 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9613              	.LCFI118:
 9614              		.cfi_def_cfa_offset 36
 9615              		.cfi_offset 4, -36
 9616              		.cfi_offset 5, -32
 9617              		.cfi_offset 6, -28
 9618              		.cfi_offset 7, -24
 9619              		.cfi_offset 8, -20
 9620              		.cfi_offset 9, -16
 9621              		.cfi_offset 10, -12
 9622              		.cfi_offset 11, -8
 9623              		.cfi_offset 14, -4
 9624 0004 8DB0     		sub	sp, sp, #52
 9625              	.LCFI119:
 9626              		.cfi_def_cfa_offset 88
 9627 0006 0990     		str	r0, [sp, #36]
 9628 0008 0F46     		mov	r7, r1
 9629 000a 1646     		mov	r6, r2
 9630 000c 0093     		str	r3, [sp]
5307:./FW/ff.c     ****     const UINT n_rootdir = 512; /* Number of root directory entries for FAT12/16 volume */
 9631              		.loc 1 5307 5 is_stmt 1 view .LVU3203
 9632              	.LVL1129:
5308:./FW/ff.c     ****     static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};  /* Cluster size boundary for FAT12/16 v
 9633              		.loc 1 5308 5 view .LVU3204
5309:./FW/ff.c     ****     static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};    /* Cluster size boundary for FAT32 volu
 9634              		.loc 1 5309 5 view .LVU3205
5310:./FW/ff.c     ****     BYTE fmt, sys, *buf, *pte, pdrv, part;
 9635              		.loc 1 5310 5 view .LVU3206
5311:./FW/ff.c     ****     WORD ss;
 9636              		.loc 1 5311 5 view .LVU3207
5312:./FW/ff.c     ****     DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
 9637              		.loc 1 5312 5 view .LVU3208
5313:./FW/ff.c     ****     DWORD b_vol, b_fat, b_data;             /* Base LBA for volume, fat, data */
 9638              		.loc 1 5313 5 view .LVU3209
5314:./FW/ff.c     ****     DWORD sz_vol, sz_rsv, sz_fat, sz_dir;   /* Size for volume, fat, dir, data */
 9639              		.loc 1 5314 5 view .LVU3210
5315:./FW/ff.c     ****     UINT i;
 9640              		.loc 1 5315 5 view .LVU3211
5316:./FW/ff.c     ****     int vol;
 9641              		.loc 1 5316 5 view .LVU3212
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 324


5317:./FW/ff.c     ****     DSTATUS stat;
 9642              		.loc 1 5317 5 view .LVU3213
5318:./FW/ff.c     **** #if _USE_TRIM || _FS_EXFAT
 9643              		.loc 1 5318 5 view .LVU3214
5325:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 9644              		.loc 1 5325 5 view .LVU3215
5325:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 9645              		.loc 1 5325 11 is_stmt 0 view .LVU3216
 9646 000e 09A8     		add	r0, sp, #36
 9647              	.LVL1130:
5325:./FW/ff.c     ****     if (vol < 0) { return FR_INVALID_DRIVE; }
 9648              		.loc 1 5325 11 view .LVU3217
 9649 0010 FFF7FEFF 		bl	get_ldnumber
 9650              	.LVL1131:
5326:./FW/ff.c     ****     if (FatFs[vol]) { FatFs[vol]->fs_type = 0; }    /* Clear the volume */
 9651              		.loc 1 5326 5 is_stmt 1 view .LVU3218
5326:./FW/ff.c     ****     if (FatFs[vol]) { FatFs[vol]->fs_type = 0; }    /* Clear the volume */
 9652              		.loc 1 5326 8 is_stmt 0 view .LVU3219
 9653 0014 0028     		cmp	r0, #0
5326:./FW/ff.c     ****     if (FatFs[vol]) { FatFs[vol]->fs_type = 0; }    /* Clear the volume */
 9654              		.loc 1 5326 8 view .LVU3220
 9655 0016 C0F20683 		blt	.L757
5327:./FW/ff.c     ****     pdrv = LD2PD(vol);  /* Physical drive */
 9656              		.loc 1 5327 5 is_stmt 1 view .LVU3221
5327:./FW/ff.c     ****     pdrv = LD2PD(vol);  /* Physical drive */
 9657              		.loc 1 5327 14 is_stmt 0 view .LVU3222
 9658 001a 914B     		ldr	r3, .L807
 9659 001c 53F82030 		ldr	r3, [r3, r0, lsl #2]
5327:./FW/ff.c     ****     pdrv = LD2PD(vol);  /* Physical drive */
 9660              		.loc 1 5327 8 view .LVU3223
 9661 0020 0BB1     		cbz	r3, .L714
5327:./FW/ff.c     ****     pdrv = LD2PD(vol);  /* Physical drive */
 9662              		.loc 1 5327 23 is_stmt 1 discriminator 1 view .LVU3224
5327:./FW/ff.c     ****     pdrv = LD2PD(vol);  /* Physical drive */
 9663              		.loc 1 5327 43 is_stmt 0 discriminator 1 view .LVU3225
 9664 0022 0022     		movs	r2, #0
 9665 0024 1A70     		strb	r2, [r3]
 9666              	.L714:
5328:./FW/ff.c     ****     part = LD2PT(vol);  /* Partition (0:create as new, 1-4:get from partition table) */
 9667              		.loc 1 5328 5 is_stmt 1 view .LVU3226
5328:./FW/ff.c     ****     part = LD2PT(vol);  /* Partition (0:create as new, 1-4:get from partition table) */
 9668              		.loc 1 5328 10 is_stmt 0 view .LVU3227
 9669 0026 C4B2     		uxtb	r4, r0
 9670              	.LVL1132:
5329:./FW/ff.c     **** 
 9671              		.loc 1 5329 5 is_stmt 1 view .LVU3228
5332:./FW/ff.c     ****     if (stat & STA_NOINIT) { return FR_NOT_READY; }
 9672              		.loc 1 5332 5 view .LVU3229
5332:./FW/ff.c     ****     if (stat & STA_NOINIT) { return FR_NOT_READY; }
 9673              		.loc 1 5332 12 is_stmt 0 view .LVU3230
 9674 0028 2046     		mov	r0, r4
 9675              	.LVL1133:
5332:./FW/ff.c     ****     if (stat & STA_NOINIT) { return FR_NOT_READY; }
 9676              		.loc 1 5332 12 view .LVU3231
 9677 002a FFF7FEFF 		bl	disk_initialize
 9678              	.LVL1134:
5333:./FW/ff.c     ****     if (stat & STA_PROTECT) { return FR_WRITE_PROTECTED; }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 325


 9679              		.loc 1 5333 5 is_stmt 1 view .LVU3232
5333:./FW/ff.c     ****     if (stat & STA_PROTECT) { return FR_WRITE_PROTECTED; }
 9680              		.loc 1 5333 8 is_stmt 0 view .LVU3233
 9681 002e 10F0010F 		tst	r0, #1
 9682 0032 40F0FA82 		bne	.L758
5334:./FW/ff.c     ****     if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk
 9683              		.loc 1 5334 5 is_stmt 1 view .LVU3234
5334:./FW/ff.c     ****     if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk
 9684              		.loc 1 5334 8 is_stmt 0 view .LVU3235
 9685 0036 10F0040F 		tst	r0, #4
 9686 003a 40F0F882 		bne	.L759
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9687              		.loc 1 5335 5 is_stmt 1 view .LVU3236
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9688              		.loc 1 5335 9 is_stmt 0 view .LVU3237
 9689 003e 0BAA     		add	r2, sp, #44
 9690 0040 0321     		movs	r1, #3
 9691 0042 2046     		mov	r0, r4
 9692              	.LVL1135:
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9693              		.loc 1 5335 9 view .LVU3238
 9694 0044 FFF7FEFF 		bl	disk_ioctl
 9695              	.LVL1136:
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9696              		.loc 1 5335 8 view .LVU3239
 9697 0048 38B9     		cbnz	r0, .L715
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9698              		.loc 1 5335 64 discriminator 2 view .LVU3240
 9699 004a 0B9B     		ldr	r3, [sp, #44]
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9700              		.loc 1 5335 61 discriminator 2 view .LVU3241
 9701 004c 2BB1     		cbz	r3, .L715
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9702              		.loc 1 5335 72 discriminator 4 view .LVU3242
 9703 004e B3F5004F 		cmp	r3, #32768
 9704 0052 02D8     		bhi	.L715
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9705              		.loc 1 5335 111 discriminator 6 view .LVU3243
 9706 0054 5A1E     		subs	r2, r3, #1
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9707              		.loc 1 5335 90 discriminator 6 view .LVU3244
 9708 0056 1342     		tst	r3, r2
 9709 0058 01D0     		beq	.L716
 9710              	.L715:
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9711              		.loc 1 5335 120 is_stmt 1 discriminator 7 view .LVU3245
5335:./FW/ff.c     **** #if _MAX_SS != _MIN_SS      /* Get sector size of the medium if variable sector size cfg. */
 9712              		.loc 1 5335 127 is_stmt 0 discriminator 7 view .LVU3246
 9713 005a 0123     		movs	r3, #1
 9714 005c 0B93     		str	r3, [sp, #44]
 9715              	.L716:
5340:./FW/ff.c     **** #endif
 9716              		.loc 1 5340 5 is_stmt 1 view .LVU3247
 9717              	.LVL1137:
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
 9718              		.loc 1 5342 5 view .LVU3248
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 326


 9719              		.loc 1 5342 8 is_stmt 0 view .LVU3249
 9720 005e 1EB1     		cbz	r6, .L717
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
 9721              		.loc 1 5342 18 discriminator 1 view .LVU3250
 9722 0060 B6F5007F 		cmp	r6, #512
 9723 0064 C0F0E782 		bcc	.L760
 9724              	.L717:
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
 9725              		.loc 1 5342 30 discriminator 4 view .LVU3251
 9726 0068 B6F1807F 		cmp	r6, #16777216
 9727 006c 00F2E582 		bhi	.L761
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
 9728              		.loc 1 5342 61 discriminator 6 view .LVU3252
 9729 0070 731E     		subs	r3, r6, #1
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
 9730              		.loc 1 5342 48 discriminator 6 view .LVU3253
 9731 0072 3340     		ands	r3, r3, r6
 9732 0074 0193     		str	r3, [sp, #4]
 9733 0076 40F0E282 		bne	.L762
5343:./FW/ff.c     **** 
 9734              		.loc 1 5343 5 is_stmt 1 view .LVU3254
5343:./FW/ff.c     **** 
 9735              		.loc 1 5343 8 is_stmt 0 view .LVU3255
 9736 007a 4FEA5629 		lsr	r9, r6, #9
 9737              	.LVL1138:
5346:./FW/ff.c     ****     sz_buf = len / ss;      /* Size of working buffer (sector) */
 9738              		.loc 1 5346 5 is_stmt 1 view .LVU3256
5347:./FW/ff.c     ****     szb_buf = sz_buf * ss;  /* Size of working buffer (byte) */
 9739              		.loc 1 5347 5 view .LVU3257
5347:./FW/ff.c     ****     szb_buf = sz_buf * ss;  /* Size of working buffer (byte) */
 9740              		.loc 1 5347 12 is_stmt 0 view .LVU3258
 9741 007e 169A     		ldr	r2, [sp, #88]
 9742 0080 520A     		lsrs	r2, r2, #9
 9743 0082 0292     		str	r2, [sp, #8]
 9744              	.LVL1139:
5348:./FW/ff.c     ****     if (!szb_buf) { return FR_MKFS_ABORTED; }
 9745              		.loc 1 5348 5 is_stmt 1 view .LVU3259
5348:./FW/ff.c     ****     if (!szb_buf) { return FR_MKFS_ABORTED; }
 9746              		.loc 1 5348 13 is_stmt 0 view .LVU3260
 9747 0084 169A     		ldr	r2, [sp, #88]
 9748              	.LVL1140:
5348:./FW/ff.c     ****     if (!szb_buf) { return FR_MKFS_ABORTED; }
 9749              		.loc 1 5348 13 view .LVU3261
 9750 0086 22F4FF75 		bic	r5, r2, #510
 9751 008a 25F00105 		bic	r5, r5, #1
 9752              	.LVL1141:
5349:./FW/ff.c     **** 
 9753              		.loc 1 5349 5 is_stmt 1 view .LVU3262
5349:./FW/ff.c     **** 
 9754              		.loc 1 5349 8 is_stmt 0 view .LVU3263
 9755 008e 002D     		cmp	r5, #0
 9756 0090 00F0D782 		beq	.L763
5352:./FW/ff.c     ****         /* Get partition information from partition table in the MBR */
 9757              		.loc 1 5352 5 is_stmt 1 view .LVU3264
5362:./FW/ff.c     ****         b_vol = (opt & FM_SFD) ? 0 : 63;        /* Volume start sector */
 9758              		.loc 1 5362 9 view .LVU3265
5362:./FW/ff.c     ****         b_vol = (opt & FM_SFD) ? 0 : 63;        /* Volume start sector */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 327


 9759              		.loc 1 5362 13 is_stmt 0 view .LVU3266
 9760 0094 0AAA     		add	r2, sp, #40
 9761 0096 0121     		movs	r1, #1
 9762 0098 2046     		mov	r0, r4
 9763 009a FFF7FEFF 		bl	disk_ioctl
 9764              	.LVL1142:
5362:./FW/ff.c     ****         b_vol = (opt & FM_SFD) ? 0 : 63;        /* Volume start sector */
 9765              		.loc 1 5362 12 view .LVU3267
 9766 009e 0028     		cmp	r0, #0
 9767 00a0 40F0D182 		bne	.L764
5363:./FW/ff.c     ****         if (sz_vol < b_vol) { return FR_MKFS_ABORTED; }
 9768              		.loc 1 5363 9 is_stmt 1 view .LVU3268
5363:./FW/ff.c     ****         if (sz_vol < b_vol) { return FR_MKFS_ABORTED; }
 9769              		.loc 1 5363 36 is_stmt 0 view .LVU3269
 9770 00a4 17F00802 		ands	r2, r7, #8
 9771 00a8 0392     		str	r2, [sp, #12]
 9772 00aa 6DD0     		beq	.L765
 9773 00ac DDF804B0 		ldr	fp, [sp, #4]
 9774              	.L718:
 9775              	.LVL1143:
5364:./FW/ff.c     ****         sz_vol -= b_vol;                        /* Volume size */
 9776              		.loc 1 5364 9 is_stmt 1 discriminator 4 view .LVU3270
5364:./FW/ff.c     ****         sz_vol -= b_vol;                        /* Volume size */
 9777              		.loc 1 5364 20 is_stmt 0 discriminator 4 view .LVU3271
 9778 00b0 0A9A     		ldr	r2, [sp, #40]
5364:./FW/ff.c     ****         sz_vol -= b_vol;                        /* Volume size */
 9779              		.loc 1 5364 12 discriminator 4 view .LVU3272
 9780 00b2 5A45     		cmp	r2, fp
 9781 00b4 C0F0C982 		bcc	.L766
5365:./FW/ff.c     ****     }
 9782              		.loc 1 5365 9 is_stmt 1 view .LVU3273
5365:./FW/ff.c     ****     }
 9783              		.loc 1 5365 16 is_stmt 0 view .LVU3274
 9784 00b8 A2EB0B02 		sub	r2, r2, fp
 9785 00bc 0A92     		str	r2, [sp, #40]
5367:./FW/ff.c     **** 
 9786              		.loc 1 5367 5 is_stmt 1 view .LVU3275
5367:./FW/ff.c     **** 
 9787              		.loc 1 5367 8 is_stmt 0 view .LVU3276
 9788 00be 7F2A     		cmp	r2, #127
 9789 00c0 40F2C582 		bls	.L767
5370:./FW/ff.c     ****         if (_FS_EXFAT && (opt & FM_EXFAT)) {    /* exFAT possible? */
 9790              		.loc 1 5370 5 is_stmt 1 view .LVU3277
5371:./FW/ff.c     ****             if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {    /* exFAT only, 
 9791              		.loc 1 5371 9 view .LVU3278
5377:./FW/ff.c     ****         if (opt & FM_FAT32) {   /* FAT32 possible? */
 9792              		.loc 1 5377 9 view .LVU3279
5377:./FW/ff.c     ****         if (opt & FM_FAT32) {   /* FAT32 possible? */
 9793              		.loc 1 5377 12 is_stmt 0 view .LVU3280
 9794 00c4 B6F5813F 		cmp	r6, #66048
 9795 00c8 80F0C382 		bcs	.L768
5378:./FW/ff.c     ****             if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {    /* FAT32 only or no-FAT? */
 9796              		.loc 1 5378 9 is_stmt 1 view .LVU3281
5378:./FW/ff.c     ****             if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {    /* FAT32 only or no-FAT? */
 9797              		.loc 1 5378 12 is_stmt 0 view .LVU3282
 9798 00cc 17F00200 		ands	r0, r7, #2
 9799 00d0 06D0     		beq	.L719
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 328


5379:./FW/ff.c     ****                 fmt = FS_FAT32;
 9800              		.loc 1 5379 13 is_stmt 1 view .LVU3283
5379:./FW/ff.c     ****                 fmt = FS_FAT32;
 9801              		.loc 1 5379 16 is_stmt 0 view .LVU3284
 9802 00d2 07F00703 		and	r3, r7, #7
 9803 00d6 022B     		cmp	r3, #2
 9804 00d8 59D0     		beq	.L769
5379:./FW/ff.c     ****                 fmt = FS_FAT32;
 9805              		.loc 1 5379 44 discriminator 1 view .LVU3285
 9806 00da 17F0010F 		tst	r7, #1
 9807 00de 5CD0     		beq	.L770
 9808              	.L719:
5384:./FW/ff.c     ****         fmt = FS_FAT16;
 9809              		.loc 1 5384 9 is_stmt 1 view .LVU3286
5384:./FW/ff.c     ****         fmt = FS_FAT16;
 9810              		.loc 1 5384 12 is_stmt 0 view .LVU3287
 9811 00e0 17F0010F 		tst	r7, #1
 9812 00e4 00F0B782 		beq	.L771
5385:./FW/ff.c     ****     } while (0);
 9813              		.loc 1 5385 13 view .LVU3288
 9814 00e8 4FF0020A 		mov	r10, #2
 9815 00ec 9646     		mov	lr, r2
 9816 00ee 4A46     		mov	r2, r9
 9817 00f0 0494     		str	r4, [sp, #16]
 9818              	.LVL1144:
 9819              	.L721:
5386:./FW/ff.c     **** 
 9820              		.loc 1 5386 13 is_stmt 1 view .LVU3289
5573:./FW/ff.c     ****             pau = au;
 9821              		.loc 1 5573 9 view .LVU3290
5574:./FW/ff.c     ****             /* Pre-determine number of clusters and FAT sub-type */
 9822              		.loc 1 5574 13 view .LVU3291
5576:./FW/ff.c     ****                 if (!pau) { /* au auto-selection */
 9823              		.loc 1 5576 13 view .LVU3292
5576:./FW/ff.c     ****                 if (!pau) { /* au auto-selection */
 9824              		.loc 1 5576 16 is_stmt 0 view .LVU3293
 9825 00f2 BAF1030F 		cmp	r10, #3
 9826 00f6 5AD0     		beq	.L739
5587:./FW/ff.c     ****                     n = sz_vol / 0x1000;    /* Volume size in unit of 4KS */
 9827              		.loc 1 5587 17 is_stmt 1 view .LVU3294
5587:./FW/ff.c     ****                     n = sz_vol / 0x1000;    /* Volume size in unit of 4KS */
 9828              		.loc 1 5587 20 is_stmt 0 view .LVU3295
 9829 00f8 002A     		cmp	r2, #0
 9830 00fa 7CD0     		beq	.L796
 9831 00fc 1746     		mov	r7, r2
 9832              	.LVL1145:
 9833              	.L727:
5591:./FW/ff.c     ****                 if (n_clst > MAX_FAT12) {
 9834              		.loc 1 5591 17 is_stmt 1 view .LVU3296
5591:./FW/ff.c     ****                 if (n_clst > MAX_FAT12) {
 9835              		.loc 1 5591 24 is_stmt 0 view .LVU3297
 9836 00fe BEFBF7F3 		udiv	r3, lr, r7
 9837              	.LVL1146:
5592:./FW/ff.c     ****                     n = n_clst * 2 + 4;     /* FAT size [byte] */
 9838              		.loc 1 5592 17 is_stmt 1 view .LVU3298
5592:./FW/ff.c     ****                     n = n_clst * 2 + 4;     /* FAT size [byte] */
 9839              		.loc 1 5592 20 is_stmt 0 view .LVU3299
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 329


 9840 0102 40F6F571 		movw	r1, #4085
 9841 0106 8B42     		cmp	r3, r1
 9842 0108 40F28580 		bls	.L730
5593:./FW/ff.c     ****                 } else {
 9843              		.loc 1 5593 21 is_stmt 1 view .LVU3300
5593:./FW/ff.c     ****                 } else {
 9844              		.loc 1 5593 36 is_stmt 0 view .LVU3301
 9845 010c 9E1C     		adds	r6, r3, #2
5593:./FW/ff.c     ****                 } else {
 9846              		.loc 1 5593 23 view .LVU3302
 9847 010e 7600     		lsls	r6, r6, #1
 9848              	.LVL1147:
 9849              	.L731:
5598:./FW/ff.c     ****                 sz_rsv = 1;                     /* Number of reserved sectors */
 9850              		.loc 1 5598 17 is_stmt 1 view .LVU3303
5598:./FW/ff.c     ****                 sz_rsv = 1;                     /* Number of reserved sectors */
 9851              		.loc 1 5598 34 is_stmt 0 view .LVU3304
 9852 0110 06F2FF16 		addw	r6, r6, #511
 9853              	.LVL1148:
5598:./FW/ff.c     ****                 sz_rsv = 1;                     /* Number of reserved sectors */
 9854              		.loc 1 5598 24 view .LVU3305
 9855 0114 760A     		lsrs	r6, r6, #9
 9856              	.LVL1149:
5599:./FW/ff.c     ****                 sz_dir = (DWORD)n_rootdir * SZDIRE / ss;    /* Rootdir size [sector] */
 9857              		.loc 1 5599 17 is_stmt 1 view .LVU3306
5600:./FW/ff.c     ****             }
 9858              		.loc 1 5600 17 view .LVU3307
5600:./FW/ff.c     ****             }
 9859              		.loc 1 5600 24 is_stmt 0 view .LVU3308
 9860 0116 4FF02009 		mov	r9, #32
5599:./FW/ff.c     ****                 sz_dir = (DWORD)n_rootdir * SZDIRE / ss;    /* Rootdir size [sector] */
 9861              		.loc 1 5599 24 view .LVU3309
 9862 011a 4FF0010C 		mov	ip, #1
 9863              	.LVL1150:
 9864              	.L726:
5602:./FW/ff.c     ****             b_data = b_fat + sz_fat * n_fats + sz_dir;  /* Data base */
 9865              		.loc 1 5602 13 is_stmt 1 view .LVU3310
5602:./FW/ff.c     ****             b_data = b_fat + sz_fat * n_fats + sz_dir;  /* Data base */
 9866              		.loc 1 5602 19 is_stmt 0 view .LVU3311
 9867 011e 0CEB0B08 		add	r8, ip, fp
 9868              	.LVL1151:
5603:./FW/ff.c     **** 
 9869              		.loc 1 5603 13 is_stmt 1 view .LVU3312
5603:./FW/ff.c     **** 
 9870              		.loc 1 5603 28 is_stmt 0 view .LVU3313
 9871 0122 06EB0803 		add	r3, r6, r8
5603:./FW/ff.c     **** 
 9872              		.loc 1 5603 20 view .LVU3314
 9873 0126 4B44     		add	r3, r3, r9
 9874              	.LVL1152:
5606:./FW/ff.c     ****             if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
 9875              		.loc 1 5606 13 is_stmt 1 view .LVU3315
5606:./FW/ff.c     ****             if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
 9876              		.loc 1 5606 26 is_stmt 0 view .LVU3316
 9877 0128 0B9C     		ldr	r4, [sp, #44]
 9878 012a E118     		adds	r1, r4, r3
5606:./FW/ff.c     ****             if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 330


 9879              		.loc 1 5606 35 view .LVU3317
 9880 012c 0139     		subs	r1, r1, #1
5606:./FW/ff.c     ****             if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
 9881              		.loc 1 5606 42 view .LVU3318
 9882 012e 6442     		rsbs	r4, r4, #0
5606:./FW/ff.c     ****             if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
 9883              		.loc 1 5606 40 view .LVU3319
 9884 0130 0C40     		ands	r4, r4, r1
5606:./FW/ff.c     ****             if (fmt == FS_FAT32) {      /* FAT32: Move FAT base */
 9885              		.loc 1 5606 15 view .LVU3320
 9886 0132 E41A     		subs	r4, r4, r3
 9887              	.LVL1153:
5607:./FW/ff.c     ****                 sz_rsv += n;
 9888              		.loc 1 5607 13 is_stmt 1 view .LVU3321
5607:./FW/ff.c     ****                 sz_rsv += n;
 9889              		.loc 1 5607 16 is_stmt 0 view .LVU3322
 9890 0134 BAF1030F 		cmp	r10, #3
 9891 0138 75D0     		beq	.L797
5611:./FW/ff.c     ****             }
 9892              		.loc 1 5611 17 is_stmt 1 view .LVU3323
5611:./FW/ff.c     ****             }
 9893              		.loc 1 5611 24 is_stmt 0 view .LVU3324
 9894 013a 2644     		add	r6, r6, r4
 9895              	.LVL1154:
 9896              	.L733:
5615:./FW/ff.c     ****             n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 9897              		.loc 1 5615 13 is_stmt 1 view .LVU3325
5615:./FW/ff.c     ****             n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 9898              		.loc 1 5615 33 is_stmt 0 view .LVU3326
 9899 013c 03EB0713 		add	r3, r3, r7, lsl #4
 9900              	.LVL1155:
5615:./FW/ff.c     ****             n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 9901              		.loc 1 5615 44 view .LVU3327
 9902 0140 A3EB0B03 		sub	r3, r3, fp
5615:./FW/ff.c     ****             n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 9903              		.loc 1 5615 16 view .LVU3328
 9904 0144 9E45     		cmp	lr, r3
 9905 0146 C0F08A82 		bcc	.L775
5616:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 9906              		.loc 1 5616 13 is_stmt 1 view .LVU3329
5616:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 9907              		.loc 1 5616 30 is_stmt 0 view .LVU3330
 9908 014a AEEB0C03 		sub	r3, lr, ip
5616:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 9909              		.loc 1 5616 39 view .LVU3331
 9910 014e 9B1B     		subs	r3, r3, r6
5616:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 9911              		.loc 1 5616 57 view .LVU3332
 9912 0150 A3EB0903 		sub	r3, r3, r9
5616:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 9913              		.loc 1 5616 20 view .LVU3333
 9914 0154 B3FBF7F3 		udiv	r3, r3, r7
 9915              	.LVL1156:
5617:./FW/ff.c     ****                 if (n_clst <= MAX_FAT16) {  /* Too few clusters for FAT32 */
 9916              		.loc 1 5617 13 is_stmt 1 view .LVU3334
5617:./FW/ff.c     ****                 if (n_clst <= MAX_FAT16) {  /* Too few clusters for FAT32 */
 9917              		.loc 1 5617 16 is_stmt 0 view .LVU3335
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 331


 9918 0158 BAF1030F 		cmp	r10, #3
 9919 015c 66D0     		beq	.L798
 9920              	.L734:
5623:./FW/ff.c     ****                 if (n_clst > MAX_FAT16) {   /* Too many clusters for FAT16 */
 9921              		.loc 1 5623 13 is_stmt 1 view .LVU3336
5623:./FW/ff.c     ****                 if (n_clst > MAX_FAT16) {   /* Too many clusters for FAT16 */
 9922              		.loc 1 5623 16 is_stmt 0 view .LVU3337
 9923 015e BAF1020F 		cmp	r10, #2
 9924 0162 40F08580 		bne	.L736
5624:./FW/ff.c     ****                     if (!au && (pau * 2) <= 64) {
 9925              		.loc 1 5624 17 is_stmt 1 view .LVU3338
5624:./FW/ff.c     ****                     if (!au && (pau * 2) <= 64) {
 9926              		.loc 1 5624 20 is_stmt 0 view .LVU3339
 9927 0166 4FF6F571 		movw	r1, #65525
 9928 016a 8B42     		cmp	r3, r1
 9929 016c 6BD9     		bls	.L737
5625:./FW/ff.c     ****                         au = pau * 2;
 9930              		.loc 1 5625 21 is_stmt 1 view .LVU3340
5625:./FW/ff.c     ****                         au = pau * 2;
 9931              		.loc 1 5625 24 is_stmt 0 view .LVU3341
 9932 016e 12B9     		cbnz	r2, .L738
5625:./FW/ff.c     ****                         au = pau * 2;
 9933              		.loc 1 5625 37 discriminator 1 view .LVU3342
 9934 0170 7B00     		lsls	r3, r7, #1
 9935              	.LVL1157:
5625:./FW/ff.c     ****                         au = pau * 2;
 9936              		.loc 1 5625 29 discriminator 1 view .LVU3343
 9937 0172 402B     		cmp	r3, #64
 9938 0174 17D9     		bls	.L777
 9939              	.L738:
5629:./FW/ff.c     ****                         fmt = FS_FAT32;
 9940              		.loc 1 5629 21 is_stmt 1 view .LVU3344
5629:./FW/ff.c     ****                         fmt = FS_FAT32;
 9941              		.loc 1 5629 24 is_stmt 0 view .LVU3345
 9942 0176 C0B9     		cbnz	r0, .L778
5633:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 9943              		.loc 1 5633 21 is_stmt 1 view .LVU3346
5633:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 9944              		.loc 1 5633 24 is_stmt 0 view .LVU3347
 9945 0178 002A     		cmp	r2, #0
 9946 017a 40F07482 		bne	.L779
5633:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 9947              		.loc 1 5633 36 discriminator 1 view .LVU3348
 9948 017e 7A00     		lsls	r2, r7, #1
 9949              	.LVL1158:
5633:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 9950              		.loc 1 5633 29 discriminator 1 view .LVU3349
 9951 0180 802A     		cmp	r2, #128
 9952 0182 B6D9     		bls	.L721
5634:./FW/ff.c     ****                 }
 9953              		.loc 1 5634 28 view .LVU3350
 9954 0184 0E20     		movs	r0, #14
 9955 0186 53E2     		b	.L713
 9956              	.LVL1159:
 9957              	.L765:
5363:./FW/ff.c     ****         if (sz_vol < b_vol) { return FR_MKFS_ABORTED; }
 9958              		.loc 1 5363 36 view .LVU3351
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 332


 9959 0188 4FF03F0B 		mov	fp, #63
 9960 018c 90E7     		b	.L718
 9961              	.LVL1160:
 9962              	.L769:
5380:./FW/ff.c     ****                 break;
 9963              		.loc 1 5380 21 view .LVU3352
 9964 018e 4FF0030A 		mov	r10, #3
 9965 0192 9646     		mov	lr, r2
 9966 0194 4A46     		mov	r2, r9
 9967 0196 0494     		str	r4, [sp, #16]
 9968 0198 ABE7     		b	.L721
 9969              	.L770:
5380:./FW/ff.c     ****                 break;
 9970              		.loc 1 5380 21 view .LVU3353
 9971 019a 4FF0030A 		mov	r10, #3
 9972 019e 9646     		mov	lr, r2
 9973 01a0 4A46     		mov	r2, r9
 9974 01a2 0494     		str	r4, [sp, #16]
 9975 01a4 A5E7     		b	.L721
 9976              	.LVL1161:
 9977              	.L777:
5626:./FW/ff.c     ****                         continue;       /* Adjust cluster size and retry */
 9978              		.loc 1 5626 28 view .LVU3354
 9979 01a6 1A46     		mov	r2, r3
 9980 01a8 A3E7     		b	.L721
 9981              	.L778:
5630:./FW/ff.c     ****                         continue;   /* Switch type to FAT32 and retry */
 9982              		.loc 1 5630 29 view .LVU3355
 9983 01aa 4FF0030A 		mov	r10, #3
 9984              	.LVL1162:
 9985              	.L739:
5577:./FW/ff.c     ****                     n = sz_vol / 0x20000;   /* Volume size in unit of 128KS */
 9986              		.loc 1 5577 17 is_stmt 1 view .LVU3356
5577:./FW/ff.c     ****                     n = sz_vol / 0x20000;   /* Volume size in unit of 128KS */
 9987              		.loc 1 5577 20 is_stmt 0 view .LVU3357
 9988 01ae 9AB1     		cbz	r2, .L799
 9989 01b0 1746     		mov	r7, r2
 9990              	.L723:
 9991              	.LVL1163:
5581:./FW/ff.c     ****                 sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;    /* FAT size [sector] */
 9992              		.loc 1 5581 17 is_stmt 1 view .LVU3358
5581:./FW/ff.c     ****                 sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;    /* FAT size [sector] */
 9993              		.loc 1 5581 24 is_stmt 0 view .LVU3359
 9994 01b2 BEFBF7F3 		udiv	r3, lr, r7
 9995              	.LVL1164:
5582:./FW/ff.c     ****                 sz_rsv = 32;    /* Number of reserved sectors */
 9996              		.loc 1 5582 17 is_stmt 1 view .LVU3360
5582:./FW/ff.c     ****                 sz_rsv = 32;    /* Number of reserved sectors */
 9997              		.loc 1 5582 38 is_stmt 0 view .LVU3361
 9998 01b6 9E1C     		adds	r6, r3, #2
 9999 01b8 B600     		lsls	r6, r6, #2
5582:./FW/ff.c     ****                 sz_rsv = 32;    /* Number of reserved sectors */
 10000              		.loc 1 5582 47 view .LVU3362
 10001 01ba 06F2FF16 		addw	r6, r6, #511
5582:./FW/ff.c     ****                 sz_rsv = 32;    /* Number of reserved sectors */
 10002              		.loc 1 5582 24 view .LVU3363
 10003 01be 760A     		lsrs	r6, r6, #9
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 333


 10004              	.LVL1165:
5583:./FW/ff.c     ****                 sz_dir = 0;     /* No static directory */
 10005              		.loc 1 5583 17 is_stmt 1 view .LVU3364
5584:./FW/ff.c     ****                 if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) { return FR_MKFS_ABORTED; }
 10006              		.loc 1 5584 17 view .LVU3365
5585:./FW/ff.c     ****             } else {                /* FAT12/16 volume */
 10007              		.loc 1 5585 17 view .LVU3366
5585:./FW/ff.c     ****             } else {                /* FAT12/16 volume */
 10008              		.loc 1 5585 41 is_stmt 0 view .LVU3367
 10009 01c0 A3F57F43 		sub	r3, r3, #65280
 10010              	.LVL1166:
5585:./FW/ff.c     ****             } else {                /* FAT12/16 volume */
 10011              		.loc 1 5585 41 view .LVU3368
 10012 01c4 F63B     		subs	r3, r3, #246
 10013              	.LVL1167:
5585:./FW/ff.c     ****             } else {                /* FAT12/16 volume */
 10014              		.loc 1 5585 20 view .LVU3369
 10015 01c6 2749     		ldr	r1, .L807+4
 10016 01c8 8B42     		cmp	r3, r1
 10017 01ca 00F24682 		bhi	.L773
5584:./FW/ff.c     ****                 if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) { return FR_MKFS_ABORTED; }
 10018              		.loc 1 5584 24 view .LVU3370
 10019 01ce DDF80490 		ldr	r9, [sp, #4]
5583:./FW/ff.c     ****                 sz_dir = 0;     /* No static directory */
 10020              		.loc 1 5583 24 view .LVU3371
 10021 01d2 4FF0200C 		mov	ip, #32
 10022 01d6 A2E7     		b	.L726
 10023              	.LVL1168:
 10024              	.L799:
5578:./FW/ff.c     ****                     for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;   /* Get from
 10025              		.loc 1 5578 21 is_stmt 1 view .LVU3372
5578:./FW/ff.c     ****                     for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;   /* Get from
 10026              		.loc 1 5578 23 is_stmt 0 view .LVU3373
 10027 01d8 4FEA5E44 		lsr	r4, lr, #17
 10028              	.LVL1169:
5579:./FW/ff.c     ****                 }
 10029              		.loc 1 5579 21 is_stmt 1 view .LVU3374
5579:./FW/ff.c     ****                 }
 10030              		.loc 1 5579 28 is_stmt 0 view .LVU3375
 10031 01dc 1146     		mov	r1, r2
5579:./FW/ff.c     ****                 }
 10032              		.loc 1 5579 37 view .LVU3376
 10033 01de 0127     		movs	r7, #1
5579:./FW/ff.c     ****                 }
 10034              		.loc 1 5579 21 view .LVU3377
 10035 01e0 01E0     		b	.L724
 10036              	.LVL1170:
 10037              	.L725:
5579:./FW/ff.c     ****                 }
 10038              		.loc 1 5579 85 is_stmt 1 discriminator 4 view .LVU3378
5579:./FW/ff.c     ****                 }
 10039              		.loc 1 5579 69 discriminator 4 view .LVU3379
5579:./FW/ff.c     ****                 }
 10040              		.loc 1 5579 70 is_stmt 0 discriminator 4 view .LVU3380
 10041 01e2 0131     		adds	r1, r1, #1
 10042              	.LVL1171:
5579:./FW/ff.c     ****                 }
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 334


 10043              		.loc 1 5579 78 discriminator 4 view .LVU3381
 10044 01e4 7F00     		lsls	r7, r7, #1
 10045              	.LVL1172:
 10046              	.L724:
5579:./FW/ff.c     ****                 }
 10047              		.loc 1 5579 42 is_stmt 1 discriminator 1 view .LVU3382
5579:./FW/ff.c     ****                 }
 10048              		.loc 1 5579 47 is_stmt 0 discriminator 1 view .LVU3383
 10049 01e6 204B     		ldr	r3, .L807+8
 10050 01e8 33F81130 		ldrh	r3, [r3, r1, lsl #1]
5579:./FW/ff.c     ****                 }
 10051              		.loc 1 5579 21 discriminator 1 view .LVU3384
 10052 01ec 002B     		cmp	r3, #0
 10053 01ee E0D0     		beq	.L723
5579:./FW/ff.c     ****                 }
 10054              		.loc 1 5579 51 discriminator 3 view .LVU3385
 10055 01f0 A342     		cmp	r3, r4
 10056 01f2 F6D9     		bls	.L725
 10057 01f4 DDE7     		b	.L723
 10058              	.LVL1173:
 10059              	.L796:
5588:./FW/ff.c     ****                     for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;   /* Get from tab
 10060              		.loc 1 5588 21 is_stmt 1 view .LVU3386
5588:./FW/ff.c     ****                     for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;   /* Get from tab
 10061              		.loc 1 5588 23 is_stmt 0 view .LVU3387
 10062 01f6 4FEA1E34 		lsr	r4, lr, #12
 10063              	.LVL1174:
5589:./FW/ff.c     ****                 }
 10064              		.loc 1 5589 21 is_stmt 1 view .LVU3388
5589:./FW/ff.c     ****                 }
 10065              		.loc 1 5589 28 is_stmt 0 view .LVU3389
 10066 01fa 1146     		mov	r1, r2
5589:./FW/ff.c     ****                 }
 10067              		.loc 1 5589 37 view .LVU3390
 10068 01fc 0127     		movs	r7, #1
5589:./FW/ff.c     ****                 }
 10069              		.loc 1 5589 21 view .LVU3391
 10070 01fe 01E0     		b	.L728
 10071              	.LVL1175:
 10072              	.L729:
5589:./FW/ff.c     ****                 }
 10073              		.loc 1 5589 81 is_stmt 1 discriminator 4 view .LVU3392
5589:./FW/ff.c     ****                 }
 10074              		.loc 1 5589 65 discriminator 4 view .LVU3393
5589:./FW/ff.c     ****                 }
 10075              		.loc 1 5589 66 is_stmt 0 discriminator 4 view .LVU3394
 10076 0200 0131     		adds	r1, r1, #1
 10077              	.LVL1176:
5589:./FW/ff.c     ****                 }
 10078              		.loc 1 5589 74 discriminator 4 view .LVU3395
 10079 0202 7F00     		lsls	r7, r7, #1
 10080              	.LVL1177:
 10081              	.L728:
5589:./FW/ff.c     ****                 }
 10082              		.loc 1 5589 42 is_stmt 1 discriminator 1 view .LVU3396
5589:./FW/ff.c     ****                 }
 10083              		.loc 1 5589 45 is_stmt 0 discriminator 1 view .LVU3397
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 335


 10084 0204 194B     		ldr	r3, .L807+12
 10085 0206 33F81130 		ldrh	r3, [r3, r1, lsl #1]
5589:./FW/ff.c     ****                 }
 10086              		.loc 1 5589 21 discriminator 1 view .LVU3398
 10087 020a 002B     		cmp	r3, #0
 10088 020c 3FF477AF 		beq	.L727
5589:./FW/ff.c     ****                 }
 10089              		.loc 1 5589 49 discriminator 3 view .LVU3399
 10090 0210 A342     		cmp	r3, r4
 10091 0212 F5D9     		bls	.L729
 10092 0214 73E7     		b	.L727
 10093              	.LVL1178:
 10094              	.L730:
5595:./FW/ff.c     ****                     n = (n_clst * 3 + 1) / 2 + 3;   /* FAT size [byte] */
 10095              		.loc 1 5595 21 is_stmt 1 view .LVU3400
5596:./FW/ff.c     ****                 }
 10096              		.loc 1 5596 21 view .LVU3401
5596:./FW/ff.c     ****                 }
 10097              		.loc 1 5596 33 is_stmt 0 view .LVU3402
 10098 0216 03EB4306 		add	r6, r3, r3, lsl #1
5596:./FW/ff.c     ****                 }
 10099              		.loc 1 5596 37 view .LVU3403
 10100 021a 0136     		adds	r6, r6, #1
5596:./FW/ff.c     ****                 }
 10101              		.loc 1 5596 42 view .LVU3404
 10102 021c 7608     		lsrs	r6, r6, #1
5596:./FW/ff.c     ****                 }
 10103              		.loc 1 5596 23 view .LVU3405
 10104 021e 0336     		adds	r6, r6, #3
 10105              	.LVL1179:
5595:./FW/ff.c     ****                     n = (n_clst * 3 + 1) / 2 + 3;   /* FAT size [byte] */
 10106              		.loc 1 5595 25 view .LVU3406
 10107 0220 4FF0010A 		mov	r10, #1
 10108 0224 74E7     		b	.L731
 10109              	.LVL1180:
 10110              	.L797:
5608:./FW/ff.c     ****                 b_fat += n;
 10111              		.loc 1 5608 17 is_stmt 1 view .LVU3407
5608:./FW/ff.c     ****                 b_fat += n;
 10112              		.loc 1 5608 24 is_stmt 0 view .LVU3408
 10113 0226 A444     		add	ip, ip, r4
 10114              	.LVL1181:
5609:./FW/ff.c     ****             } else {                    /* FAT12/16: Expand FAT size */
 10115              		.loc 1 5609 17 is_stmt 1 view .LVU3409
5609:./FW/ff.c     ****             } else {                    /* FAT12/16: Expand FAT size */
 10116              		.loc 1 5609 23 is_stmt 0 view .LVU3410
 10117 0228 A044     		add	r8, r8, r4
 10118              	.LVL1182:
5609:./FW/ff.c     ****             } else {                    /* FAT12/16: Expand FAT size */
 10119              		.loc 1 5609 23 view .LVU3411
 10120 022a 87E7     		b	.L733
 10121              	.LVL1183:
 10122              	.L798:
5618:./FW/ff.c     ****                     if (!au && (au = pau / 2) != 0) { continue; }   /* Adjust cluster size and retr
 10123              		.loc 1 5618 17 is_stmt 1 view .LVU3412
5618:./FW/ff.c     ****                     if (!au && (au = pau / 2) != 0) { continue; }   /* Adjust cluster size and retr
 10124              		.loc 1 5618 20 is_stmt 0 view .LVU3413
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 336


 10125 022c 4FF6F571 		movw	r1, #65525
 10126 0230 8B42     		cmp	r3, r1
 10127 0232 94D8     		bhi	.L734
5619:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10128              		.loc 1 5619 21 is_stmt 1 view .LVU3414
5619:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10129              		.loc 1 5619 24 is_stmt 0 view .LVU3415
 10130 0234 002A     		cmp	r2, #0
 10131 0236 40F01482 		bne	.L776
5619:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10132              		.loc 1 5619 36 discriminator 1 view .LVU3416
 10133 023a 7A08     		lsrs	r2, r7, #1
 10134              	.LVL1184:
5619:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10135              		.loc 1 5619 29 discriminator 1 view .LVU3417
 10136 023c 012F     		cmp	r7, #1
 10137 023e 3FF658AF 		bhi	.L721
5620:./FW/ff.c     ****                 }
 10138              		.loc 1 5620 28 view .LVU3418
 10139 0242 0E20     		movs	r0, #14
 10140 0244 F4E1     		b	.L713
 10141              	.LVL1185:
 10142              	.L737:
5636:./FW/ff.c     ****                     if (!au && (au = pau * 2) <= 128) { continue; } /* Adjust cluster size and retr
 10143              		.loc 1 5636 17 is_stmt 1 view .LVU3419
5636:./FW/ff.c     ****                     if (!au && (au = pau * 2) <= 128) { continue; } /* Adjust cluster size and retr
 10144              		.loc 1 5636 21 is_stmt 0 view .LVU3420
 10145 0246 40F6F571 		movw	r1, #4085
 10146 024a 8B42     		cmp	r3, r1
 10147 024c 10D8     		bhi	.L736
5637:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10148              		.loc 1 5637 21 is_stmt 1 view .LVU3421
5637:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10149              		.loc 1 5637 24 is_stmt 0 view .LVU3422
 10150 024e 002A     		cmp	r2, #0
 10151 0250 40F00B82 		bne	.L780
5637:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10152              		.loc 1 5637 36 discriminator 1 view .LVU3423
 10153 0254 7A00     		lsls	r2, r7, #1
 10154              	.LVL1186:
5637:./FW/ff.c     ****                     return FR_MKFS_ABORTED;
 10155              		.loc 1 5637 29 discriminator 1 view .LVU3424
 10156 0256 802A     		cmp	r2, #128
 10157 0258 7FF64BAF 		bls	.L721
5638:./FW/ff.c     ****                 }
 10158              		.loc 1 5638 28 view .LVU3425
 10159 025c 0E20     		movs	r0, #14
 10160 025e E7E1     		b	.L713
 10161              	.L808:
 10162              		.align	2
 10163              	.L807:
 10164 0260 00000000 		.word	.LANCHOR2
 10165 0264 FFFFFE0F 		.word	268369919
 10166 0268 00000000 		.word	.LANCHOR4
 10167 026c 00000000 		.word	.LANCHOR5
 10168              	.LVL1187:
 10169              	.L736:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 337


5638:./FW/ff.c     ****                 }
 10170              		.loc 1 5638 28 view .LVU3426
 10171 0270 CDF81890 		str	r9, [sp, #24]
 10172 0274 CDF81480 		str	r8, [sp, #20]
 10173 0278 CDF81CC0 		str	ip, [sp, #28]
 10174 027c 049C     		ldr	r4, [sp, #16]
 10175              	.LVL1188:
5638:./FW/ff.c     ****                 }
 10176              		.loc 1 5638 28 view .LVU3427
 10177 027e 9846     		mov	r8, r3
 10178              	.LVL1189:
5641:./FW/ff.c     **** 
 10179              		.loc 1 5641 13 is_stmt 1 view .LVU3428
5641:./FW/ff.c     **** 
 10180              		.loc 1 5641 16 is_stmt 0 view .LVU3429
 10181 0280 BAF1010F 		cmp	r10, #1
 10182 0284 04D1     		bne	.L740
5641:./FW/ff.c     **** 
 10183              		.loc 1 5641 33 discriminator 1 view .LVU3430
 10184 0286 40F6F573 		movw	r3, #4085
 10185              	.LVL1190:
5641:./FW/ff.c     **** 
 10186              		.loc 1 5641 33 discriminator 1 view .LVU3431
 10187 028a 9845     		cmp	r8, r3
 10188 028c 00F2EF81 		bhi	.L781
 10189              	.L740:
5644:./FW/ff.c     ****         } while (1);
 10190              		.loc 1 5644 13 is_stmt 1 view .LVU3432
5653:./FW/ff.c     ****         mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name 
 10191              		.loc 1 5653 9 view .LVU3433
 10192 0290 4FF40072 		mov	r2, #512
 10193 0294 0021     		movs	r1, #0
 10194 0296 DDF80090 		ldr	r9, [sp]
 10195              	.LVL1191:
5653:./FW/ff.c     ****         mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name 
 10196              		.loc 1 5653 9 is_stmt 0 view .LVU3434
 10197 029a 4846     		mov	r0, r9
 10198 029c FFF7FEFF 		bl	mem_set
 10199              	.LVL1192:
5654:./FW/ff.c     ****         st_word(buf + BPB_BytsPerSec, ss);              /* Sector size [byte] */
 10200              		.loc 1 5654 9 is_stmt 1 view .LVU3435
 10201 02a0 0B22     		movs	r2, #11
 10202 02a2 B649     		ldr	r1, .L809
 10203 02a4 4846     		mov	r0, r9
 10204 02a6 FFF7FEFF 		bl	mem_cpy
 10205              	.LVL1193:
5655:./FW/ff.c     ****         buf[BPB_SecPerClus] = (BYTE)pau;                /* Cluster size [sector] */
 10206              		.loc 1 5655 9 view .LVU3436
 10207 02aa 4FF40071 		mov	r1, #512
 10208 02ae CDF80090 		str	r9, [sp]
 10209              	.LVL1194:
5655:./FW/ff.c     ****         buf[BPB_SecPerClus] = (BYTE)pau;                /* Cluster size [sector] */
 10210              		.loc 1 5655 9 is_stmt 0 view .LVU3437
 10211 02b2 09F10B00 		add	r0, r9, #11
 10212 02b6 FFF7FEFF 		bl	st_word
 10213              	.LVL1195:
5656:./FW/ff.c     ****         st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);    /* Size of reserved area */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 338


 10214              		.loc 1 5656 9 is_stmt 1 view .LVU3438
5656:./FW/ff.c     ****         st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);    /* Size of reserved area */
 10215              		.loc 1 5656 29 is_stmt 0 view .LVU3439
 10216 02ba 009B     		ldr	r3, [sp]
 10217 02bc 5F73     		strb	r7, [r3, #13]
5657:./FW/ff.c     ****         buf[BPB_NumFATs] = (BYTE)n_fats;                /* Number of FATs */
 10218              		.loc 1 5657 9 is_stmt 1 view .LVU3440
 10219 02be BDF81C10 		ldrh	r1, [sp, #28]
 10220 02c2 03F10E00 		add	r0, r3, #14
 10221 02c6 FFF7FEFF 		bl	st_word
 10222              	.LVL1196:
5658:./FW/ff.c     ****         st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));   /* Number of ro
 10223              		.loc 1 5658 9 view .LVU3441
5658:./FW/ff.c     ****         st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));   /* Number of ro
 10224              		.loc 1 5658 26 is_stmt 0 view .LVU3442
 10225 02ca 0123     		movs	r3, #1
 10226 02cc 009A     		ldr	r2, [sp]
 10227 02ce 1374     		strb	r3, [r2, #16]
5659:./FW/ff.c     ****         if (sz_vol < 0x10000) {
 10228              		.loc 1 5659 9 is_stmt 1 view .LVU3443
 10229 02d0 02F11100 		add	r0, r2, #17
 10230 02d4 BAF1030F 		cmp	r10, #3
 10231 02d8 00F09C80 		beq	.L800
 10232 02dc 4FF40071 		mov	r1, #512
 10233              	.L741:
5659:./FW/ff.c     ****         if (sz_vol < 0x10000) {
 10234              		.loc 1 5659 9 is_stmt 0 discriminator 4 view .LVU3444
 10235 02e0 FFF7FEFF 		bl	st_word
 10236              	.LVL1197:
5660:./FW/ff.c     ****             st_word(buf + BPB_TotSec16, (WORD)sz_vol);  /* Volume size in 16-bit LBA */
 10237              		.loc 1 5660 9 is_stmt 1 discriminator 4 view .LVU3445
5660:./FW/ff.c     ****             st_word(buf + BPB_TotSec16, (WORD)sz_vol);  /* Volume size in 16-bit LBA */
 10238              		.loc 1 5660 20 is_stmt 0 discriminator 4 view .LVU3446
 10239 02e4 0A99     		ldr	r1, [sp, #40]
5660:./FW/ff.c     ****             st_word(buf + BPB_TotSec16, (WORD)sz_vol);  /* Volume size in 16-bit LBA */
 10240              		.loc 1 5660 12 discriminator 4 view .LVU3447
 10241 02e6 B1F5803F 		cmp	r1, #65536
 10242 02ea 80F09580 		bcs	.L742
5661:./FW/ff.c     ****         } else {
 10243              		.loc 1 5661 13 is_stmt 1 view .LVU3448
 10244 02ee 89B2     		uxth	r1, r1
 10245 02f0 009B     		ldr	r3, [sp]
 10246 02f2 03F11300 		add	r0, r3, #19
 10247 02f6 FFF7FEFF 		bl	st_word
 10248              	.LVL1198:
 10249              	.L743:
5665:./FW/ff.c     ****         st_word(buf + BPB_SecPerTrk, 63);               /* Number of sectors per track (for int13) 
 10250              		.loc 1 5665 9 view .LVU3449
5665:./FW/ff.c     ****         st_word(buf + BPB_SecPerTrk, 63);               /* Number of sectors per track (for int13) 
 10251              		.loc 1 5665 24 is_stmt 0 view .LVU3450
 10252 02fa F823     		movs	r3, #248
 10253 02fc 009A     		ldr	r2, [sp]
 10254 02fe 5375     		strb	r3, [r2, #21]
5666:./FW/ff.c     ****         st_word(buf + BPB_NumHeads, 255);               /* Number of heads (for int13) */
 10255              		.loc 1 5666 9 is_stmt 1 view .LVU3451
 10256 0300 3F21     		movs	r1, #63
 10257 0302 02F11800 		add	r0, r2, #24
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 339


 10258 0306 FFF7FEFF 		bl	st_word
 10259              	.LVL1199:
5667:./FW/ff.c     ****         st_dword(buf + BPB_HiddSec, b_vol);             /* Volume offset in the physical drive [sec
 10260              		.loc 1 5667 9 view .LVU3452
 10261 030a FF21     		movs	r1, #255
 10262 030c 009B     		ldr	r3, [sp]
 10263 030e 03F11A00 		add	r0, r3, #26
 10264 0312 FFF7FEFF 		bl	st_word
 10265              	.LVL1200:
5668:./FW/ff.c     ****         if (fmt == FS_FAT32) {
 10266              		.loc 1 5668 9 view .LVU3453
 10267 0316 5946     		mov	r1, fp
 10268 0318 009B     		ldr	r3, [sp]
 10269 031a 03F11C00 		add	r0, r3, #28
 10270 031e FFF7FEFF 		bl	st_dword
 10271              	.LVL1201:
5669:./FW/ff.c     ****             st_dword(buf + BS_VolID32, GET_FATTIME());  /* VSN */
 10272              		.loc 1 5669 9 view .LVU3454
5669:./FW/ff.c     ****             st_dword(buf + BS_VolID32, GET_FATTIME());  /* VSN */
 10273              		.loc 1 5669 12 is_stmt 0 view .LVU3455
 10274 0322 BAF1030F 		cmp	r10, #3
 10275 0326 7DD0     		beq	.L801
5679:./FW/ff.c     ****             st_word(buf + BPB_FATSz16, (WORD)sz_fat);   /* FAT size [sector] */
 10276              		.loc 1 5679 13 is_stmt 1 view .LVU3456
 10277 0328 FFF7FEFF 		bl	get_fattime
 10278              	.LVL1202:
 10279 032c 0146     		mov	r1, r0
 10280 032e 009B     		ldr	r3, [sp]
 10281 0330 03F12700 		add	r0, r3, #39
 10282 0334 FFF7FEFF 		bl	st_dword
 10283              	.LVL1203:
5680:./FW/ff.c     ****             buf[BS_DrvNum] = 0x80;                      /* Drive number (for int13) */
 10284              		.loc 1 5680 13 view .LVU3457
 10285 0338 B1B2     		uxth	r1, r6
 10286 033a 009B     		ldr	r3, [sp]
 10287 033c 03F11600 		add	r0, r3, #22
 10288 0340 FFF7FEFF 		bl	st_word
 10289              	.LVL1204:
5681:./FW/ff.c     ****             buf[BS_BootSig] = 0x29;                     /* Extended boot signature */
 10290              		.loc 1 5681 13 view .LVU3458
5681:./FW/ff.c     ****             buf[BS_BootSig] = 0x29;                     /* Extended boot signature */
 10291              		.loc 1 5681 28 is_stmt 0 view .LVU3459
 10292 0344 8023     		movs	r3, #128
 10293 0346 0098     		ldr	r0, [sp]
 10294 0348 80F82430 		strb	r3, [r0, #36]
5682:./FW/ff.c     ****             mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature 
 10295              		.loc 1 5682 13 is_stmt 1 view .LVU3460
5682:./FW/ff.c     ****             mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature 
 10296              		.loc 1 5682 29 is_stmt 0 view .LVU3461
 10297 034c 2923     		movs	r3, #41
 10298 034e 80F82630 		strb	r3, [r0, #38]
5683:./FW/ff.c     ****         }
 10299              		.loc 1 5683 13 is_stmt 1 view .LVU3462
 10300 0352 1322     		movs	r2, #19
 10301 0354 8A49     		ldr	r1, .L809+4
 10302 0356 2B30     		adds	r0, r0, #43
 10303 0358 FFF7FEFF 		bl	mem_cpy
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 340


 10304              	.LVL1205:
 10305              	.L745:
5685:./FW/ff.c     ****         if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) { return FR_DISK_ERR; }  /* Write it to the 
 10306              		.loc 1 5685 9 view .LVU3463
 10307 035c 009B     		ldr	r3, [sp]
 10308 035e 03F5FF79 		add	r9, r3, #510
 10309 0362 4AF65521 		movw	r1, #43605
 10310 0366 4846     		mov	r0, r9
 10311 0368 FFF7FEFF 		bl	st_word
 10312              	.LVL1206:
5686:./FW/ff.c     **** 
 10313              		.loc 1 5686 9 view .LVU3464
5686:./FW/ff.c     **** 
 10314              		.loc 1 5686 13 is_stmt 0 view .LVU3465
 10315 036c 0123     		movs	r3, #1
 10316 036e 5A46     		mov	r2, fp
 10317 0370 0099     		ldr	r1, [sp]
 10318 0372 2046     		mov	r0, r4
 10319 0374 FFF7FEFF 		bl	disk_write
 10320              	.LVL1207:
5686:./FW/ff.c     **** 
 10321              		.loc 1 5686 12 view .LVU3466
 10322 0378 0028     		cmp	r0, #0
 10323 037a 40F07A81 		bne	.L783
5689:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 6, 1);        /* Write backup VBR (VBR + 6) */
 10324              		.loc 1 5689 9 is_stmt 1 view .LVU3467
5689:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 6, 1);        /* Write backup VBR (VBR + 6) */
 10325              		.loc 1 5689 12 is_stmt 0 view .LVU3468
 10326 037e BAF1030F 		cmp	r10, #3
 10327 0382 7CD0     		beq	.L802
 10328              	.LVL1208:
 10329              	.L746:
5702:./FW/ff.c     ****         sect = b_fat;       /* FAT start sector */
 10330              		.loc 1 5702 9 is_stmt 1 view .LVU3469
 10331 0384 2A46     		mov	r2, r5
 10332 0386 0021     		movs	r1, #0
 10333 0388 009D     		ldr	r5, [sp]
 10334              	.LVL1209:
5702:./FW/ff.c     ****         sect = b_fat;       /* FAT start sector */
 10335              		.loc 1 5702 9 is_stmt 0 view .LVU3470
 10336 038a 2846     		mov	r0, r5
 10337 038c FFF7FEFF 		bl	mem_set
 10338              	.LVL1210:
5703:./FW/ff.c     ****         for (i = 0; i < n_fats; i++) {          /* Initialize FATs each */
 10339              		.loc 1 5703 9 is_stmt 1 view .LVU3471
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10340              		.loc 1 5704 9 view .LVU3472
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10341              		.loc 1 5704 9 is_stmt 0 view .LVU3473
 10342 0390 DDF81480 		ldr	r8, [sp, #20]
 10343 0394 0497     		str	r7, [sp, #16]
 10344              	.LVL1211:
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10345              		.loc 1 5704 9 view .LVU3474
 10346 0396 CDF81C90 		str	r9, [sp, #28]
 10347              	.LVL1212:
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 341


 10348              		.loc 1 5704 9 view .LVU3475
 10349 039a CDF820B0 		str	fp, [sp, #32]
 10350 039e DDF808B0 		ldr	fp, [sp, #8]
 10351              	.LVL1213:
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10352              		.loc 1 5704 9 view .LVU3476
 10353 03a2 A946     		mov	r9, r5
 10354              	.LVL1214:
 10355              	.L747:
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10356              		.loc 1 5704 21 is_stmt 1 discriminator 1 view .LVU3477
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10357              		.loc 1 5704 9 is_stmt 0 discriminator 1 view .LVU3478
 10358 03a4 019B     		ldr	r3, [sp, #4]
 10359 03a6 002B     		cmp	r3, #0
 10360 03a8 00F0A380 		beq	.L752
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10361              		.loc 1 5704 9 discriminator 1 view .LVU3479
 10362 03ac CDF81480 		str	r8, [sp, #20]
 10363              	.LVL1215:
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10364              		.loc 1 5704 9 discriminator 1 view .LVU3480
 10365 03b0 049F     		ldr	r7, [sp, #16]
 10366 03b2 DDF81C90 		ldr	r9, [sp, #28]
 10367 03b6 DDF820B0 		ldr	fp, [sp, #32]
5723:./FW/ff.c     ****         do {
 10368              		.loc 1 5723 9 is_stmt 1 view .LVU3481
5723:./FW/ff.c     ****         do {
 10369              		.loc 1 5723 41 is_stmt 0 view .LVU3482
 10370 03ba BAF1030F 		cmp	r10, #3
 10371 03be 00F0D280 		beq	.L803
 10372 03c2 069E     		ldr	r6, [sp, #24]
 10373              	.LVL1216:
5723:./FW/ff.c     ****         do {
 10374              		.loc 1 5723 41 view .LVU3483
 10375 03c4 059F     		ldr	r7, [sp, #20]
 10376 03c6 CDF80490 		str	r9, [sp, #4]
 10377              	.LVL1217:
5723:./FW/ff.c     ****         do {
 10378              		.loc 1 5723 41 view .LVU3484
 10379 03ca DDF80880 		ldr	r8, [sp, #8]
 10380              	.LVL1218:
5723:./FW/ff.c     ****         do {
 10381              		.loc 1 5723 41 view .LVU3485
 10382 03ce DDF80090 		ldr	r9, [sp]
 10383              	.LVL1219:
 10384              	.L754:
5724:./FW/ff.c     ****             n = (nsect > sz_buf) ? sz_buf : nsect;
 10385              		.loc 1 5724 9 is_stmt 1 view .LVU3486
5725:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) { return FR_DISK_ERR; }
 10386              		.loc 1 5725 13 view .LVU3487
5725:./FW/ff.c     ****             if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) { return FR_DISK_ERR; }
 10387              		.loc 1 5725 15 is_stmt 0 view .LVU3488
 10388 03d2 3546     		mov	r5, r6
 10389 03d4 4645     		cmp	r6, r8
 10390 03d6 28BF     		it	cs
 10391 03d8 4546     		movcs	r5, r8
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 342


 10392              	.LVL1220:
5726:./FW/ff.c     ****             sect += n;
 10393              		.loc 1 5726 13 is_stmt 1 view .LVU3489
5726:./FW/ff.c     ****             sect += n;
 10394              		.loc 1 5726 17 is_stmt 0 view .LVU3490
 10395 03da 2B46     		mov	r3, r5
 10396 03dc 3A46     		mov	r2, r7
 10397 03de 4946     		mov	r1, r9
 10398 03e0 2046     		mov	r0, r4
 10399 03e2 FFF7FEFF 		bl	disk_write
 10400              	.LVL1221:
5726:./FW/ff.c     ****             sect += n;
 10401              		.loc 1 5726 16 view .LVU3491
 10402 03e6 0028     		cmp	r0, #0
 10403 03e8 40F04781 		bne	.L786
5727:./FW/ff.c     ****             nsect -= n;
 10404              		.loc 1 5727 13 is_stmt 1 view .LVU3492
5727:./FW/ff.c     ****             nsect -= n;
 10405              		.loc 1 5727 18 is_stmt 0 view .LVU3493
 10406 03ec 2F44     		add	r7, r7, r5
 10407              	.LVL1222:
5728:./FW/ff.c     ****         } while (nsect);
 10408              		.loc 1 5728 13 is_stmt 1 view .LVU3494
5729:./FW/ff.c     ****     }
 10409              		.loc 1 5729 17 view .LVU3495
5729:./FW/ff.c     ****     }
 10410              		.loc 1 5729 9 is_stmt 0 view .LVU3496
 10411 03ee 761B     		subs	r6, r6, r5
 10412              	.LVL1223:
5729:./FW/ff.c     ****     }
 10413              		.loc 1 5729 9 view .LVU3497
 10414 03f0 EFD1     		bne	.L754
 10415 03f2 DDF80490 		ldr	r9, [sp, #4]
5733:./FW/ff.c     ****         sys = 0x07;         /* HPFS/NTFS/exFAT */
 10416              		.loc 1 5733 5 is_stmt 1 view .LVU3498
5736:./FW/ff.c     ****             sys = 0x0C;     /* FAT32X */
 10417              		.loc 1 5736 9 view .LVU3499
5736:./FW/ff.c     ****             sys = 0x0C;     /* FAT32X */
 10418              		.loc 1 5736 12 is_stmt 0 view .LVU3500
 10419 03f6 BAF1030F 		cmp	r10, #3
 10420 03fa 00F0CB80 		beq	.L787
5739:./FW/ff.c     ****                 sys = 0x06; /* FAT12/16 (>=64KS) */
 10421              		.loc 1 5739 13 is_stmt 1 view .LVU3501
5739:./FW/ff.c     ****                 sys = 0x06; /* FAT12/16 (>=64KS) */
 10422              		.loc 1 5739 24 is_stmt 0 view .LVU3502
 10423 03fe 0A9B     		ldr	r3, [sp, #40]
5739:./FW/ff.c     ****                 sys = 0x06; /* FAT12/16 (>=64KS) */
 10424              		.loc 1 5739 16 view .LVU3503
 10425 0400 B3F5803F 		cmp	r3, #65536
 10426 0404 80F00D81 		bcs	.L788
5742:./FW/ff.c     ****             }
 10427              		.loc 1 5742 17 is_stmt 1 view .LVU3504
5742:./FW/ff.c     ****             }
 10428              		.loc 1 5742 21 is_stmt 0 view .LVU3505
 10429 0408 BAF1020F 		cmp	r10, #2
 10430 040c 00F0B480 		beq	.L804
 10431 0410 0127     		movs	r7, #1
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 343


 10432              	.LVL1224:
5742:./FW/ff.c     ****             }
 10433              		.loc 1 5742 21 view .LVU3506
 10434 0412 C0E0     		b	.L755
 10435              	.LVL1225:
 10436              	.L800:
5659:./FW/ff.c     ****         if (sz_vol < 0x10000) {
 10437              		.loc 1 5659 9 view .LVU3507
 10438 0414 0021     		movs	r1, #0
 10439 0416 63E7     		b	.L741
 10440              	.L742:
5663:./FW/ff.c     ****         }
 10441              		.loc 1 5663 13 is_stmt 1 view .LVU3508
 10442 0418 009B     		ldr	r3, [sp]
 10443 041a 03F12000 		add	r0, r3, #32
 10444 041e FFF7FEFF 		bl	st_dword
 10445              	.LVL1226:
 10446 0422 6AE7     		b	.L743
 10447              	.L801:
5670:./FW/ff.c     ****             st_dword(buf + BPB_FATSz32, sz_fat);        /* FAT size [sector] */
 10448              		.loc 1 5670 13 view .LVU3509
 10449 0424 FFF7FEFF 		bl	get_fattime
 10450              	.LVL1227:
 10451 0428 0146     		mov	r1, r0
 10452 042a 009B     		ldr	r3, [sp]
 10453 042c 03F14300 		add	r0, r3, #67
 10454 0430 FFF7FEFF 		bl	st_dword
 10455              	.LVL1228:
5671:./FW/ff.c     ****             st_dword(buf + BPB_RootClus32, 2);          /* Root directory cluster # (2) */
 10456              		.loc 1 5671 13 view .LVU3510
 10457 0434 3146     		mov	r1, r6
 10458 0436 009B     		ldr	r3, [sp]
 10459 0438 03F12400 		add	r0, r3, #36
 10460 043c FFF7FEFF 		bl	st_dword
 10461              	.LVL1229:
5672:./FW/ff.c     ****             st_word(buf + BPB_FSInfo32, 1);             /* Offset of FSINFO sector (VBR + 1) */
 10462              		.loc 1 5672 13 view .LVU3511
 10463 0440 0221     		movs	r1, #2
 10464 0442 009B     		ldr	r3, [sp]
 10465 0444 03F12C00 		add	r0, r3, #44
 10466 0448 FFF7FEFF 		bl	st_dword
 10467              	.LVL1230:
5673:./FW/ff.c     ****             st_word(buf + BPB_BkBootSec32, 6);          /* Offset of backup VBR (VBR + 6) */
 10468              		.loc 1 5673 13 view .LVU3512
 10469 044c 0121     		movs	r1, #1
 10470 044e 009B     		ldr	r3, [sp]
 10471 0450 03F13000 		add	r0, r3, #48
 10472 0454 FFF7FEFF 		bl	st_word
 10473              	.LVL1231:
5674:./FW/ff.c     ****             buf[BS_DrvNum32] = 0x80;                    /* Drive number (for int13) */
 10474              		.loc 1 5674 13 view .LVU3513
 10475 0458 0621     		movs	r1, #6
 10476 045a 009B     		ldr	r3, [sp]
 10477 045c 03F13200 		add	r0, r3, #50
 10478 0460 FFF7FEFF 		bl	st_word
 10479              	.LVL1232:
5675:./FW/ff.c     ****             buf[BS_BootSig32] = 0x29;                   /* Extended boot signature */
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 344


 10480              		.loc 1 5675 13 view .LVU3514
5675:./FW/ff.c     ****             buf[BS_BootSig32] = 0x29;                   /* Extended boot signature */
 10481              		.loc 1 5675 30 is_stmt 0 view .LVU3515
 10482 0464 8023     		movs	r3, #128
 10483 0466 0098     		ldr	r0, [sp]
 10484 0468 80F84030 		strb	r3, [r0, #64]
5676:./FW/ff.c     ****             mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);   /* Volume label, FAT signat
 10485              		.loc 1 5676 13 is_stmt 1 view .LVU3516
5676:./FW/ff.c     ****             mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);   /* Volume label, FAT signat
 10486              		.loc 1 5676 31 is_stmt 0 view .LVU3517
 10487 046c 2923     		movs	r3, #41
 10488 046e 80F84230 		strb	r3, [r0, #66]
5677:./FW/ff.c     ****         } else {
 10489              		.loc 1 5677 13 is_stmt 1 view .LVU3518
 10490 0472 1322     		movs	r2, #19
 10491 0474 4349     		ldr	r1, .L809+8
 10492 0476 4730     		adds	r0, r0, #71
 10493 0478 FFF7FEFF 		bl	mem_cpy
 10494              	.LVL1233:
 10495 047c 6EE7     		b	.L745
 10496              	.L802:
5690:./FW/ff.c     ****             mem_set(buf, 0, ss);
 10497              		.loc 1 5690 13 view .LVU3519
 10498 047e 0123     		movs	r3, #1
 10499 0480 0BF10602 		add	r2, fp, #6
 10500 0484 0099     		ldr	r1, [sp]
 10501 0486 2046     		mov	r0, r4
 10502 0488 FFF7FEFF 		bl	disk_write
 10503              	.LVL1234:
5691:./FW/ff.c     ****             st_dword(buf + FSI_LeadSig, 0x41615252);
 10504              		.loc 1 5691 13 view .LVU3520
 10505 048c 4FF40072 		mov	r2, #512
 10506 0490 0021     		movs	r1, #0
 10507 0492 0098     		ldr	r0, [sp]
 10508 0494 FFF7FEFF 		bl	mem_set
 10509              	.LVL1235:
5692:./FW/ff.c     ****             st_dword(buf + FSI_StrucSig, 0x61417272);
 10510              		.loc 1 5692 13 view .LVU3521
 10511 0498 3B49     		ldr	r1, .L809+12
 10512 049a 0098     		ldr	r0, [sp]
 10513 049c FFF7FEFF 		bl	st_dword
 10514              	.LVL1236:
5693:./FW/ff.c     ****             st_dword(buf + FSI_Free_Count, n_clst - 1); /* Number of free clusters */
 10515              		.loc 1 5693 13 view .LVU3522
 10516 04a0 3A49     		ldr	r1, .L809+16
 10517 04a2 009B     		ldr	r3, [sp]
 10518 04a4 03F5F270 		add	r0, r3, #484
 10519 04a8 FFF7FEFF 		bl	st_dword
 10520              	.LVL1237:
5694:./FW/ff.c     ****             st_dword(buf + FSI_Nxt_Free, 2);            /* Last allocated cluster# */
 10521              		.loc 1 5694 13 view .LVU3523
 10522 04ac 08F1FF31 		add	r1, r8, #-1
 10523 04b0 009B     		ldr	r3, [sp]
 10524 04b2 03F5F470 		add	r0, r3, #488
 10525 04b6 FFF7FEFF 		bl	st_dword
 10526              	.LVL1238:
5695:./FW/ff.c     ****             st_word(buf + BS_55AA, 0xAA55);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 345


 10527              		.loc 1 5695 13 view .LVU3524
 10528 04ba 0221     		movs	r1, #2
 10529 04bc 009B     		ldr	r3, [sp]
 10530 04be 03F5F670 		add	r0, r3, #492
 10531 04c2 FFF7FEFF 		bl	st_dword
 10532              	.LVL1239:
5696:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 7, 1);        /* Write backup FSINFO (VBR + 7) */
 10533              		.loc 1 5696 13 view .LVU3525
 10534 04c6 4AF65521 		movw	r1, #43605
 10535 04ca 4846     		mov	r0, r9
 10536 04cc FFF7FEFF 		bl	st_word
 10537              	.LVL1240:
5697:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 1, 1);        /* Write original FSINFO (VBR + 1) */
 10538              		.loc 1 5697 13 view .LVU3526
 10539 04d0 0123     		movs	r3, #1
 10540 04d2 0BF10702 		add	r2, fp, #7
 10541 04d6 DDF80080 		ldr	r8, [sp]
 10542              	.LVL1241:
5697:./FW/ff.c     ****             disk_write(pdrv, buf, b_vol + 1, 1);        /* Write original FSINFO (VBR + 1) */
 10543              		.loc 1 5697 13 is_stmt 0 view .LVU3527
 10544 04da 4146     		mov	r1, r8
 10545 04dc 2046     		mov	r0, r4
 10546 04de FFF7FEFF 		bl	disk_write
 10547              	.LVL1242:
5698:./FW/ff.c     ****         }
 10548              		.loc 1 5698 13 is_stmt 1 view .LVU3528
 10549 04e2 0123     		movs	r3, #1
 10550 04e4 0BEB0302 		add	r2, fp, r3
 10551 04e8 4146     		mov	r1, r8
 10552 04ea 2046     		mov	r0, r4
 10553 04ec FFF7FEFF 		bl	disk_write
 10554              	.LVL1243:
 10555 04f0 48E7     		b	.L746
 10556              	.LVL1244:
 10557              	.L752:
5705:./FW/ff.c     ****                 st_dword(buf + 0, 0xFFFFFFF8);  /* Entry 0 */
 10558              		.loc 1 5705 13 view .LVU3529
5705:./FW/ff.c     ****                 st_dword(buf + 0, 0xFFFFFFF8);  /* Entry 0 */
 10559              		.loc 1 5705 16 is_stmt 0 view .LVU3530
 10560 04f2 BAF1030F 		cmp	r10, #3
 10561 04f6 22D0     		beq	.L805
5710:./FW/ff.c     ****             }
 10562              		.loc 1 5710 17 is_stmt 1 view .LVU3531
 10563 04f8 BAF1010F 		cmp	r10, #1
 10564 04fc 31D0     		beq	.L806
 10565 04fe 6FF00701 		mvn	r1, #7
 10566              	.L750:
5710:./FW/ff.c     ****             }
 10567              		.loc 1 5710 17 is_stmt 0 discriminator 4 view .LVU3532
 10568 0502 4846     		mov	r0, r9
 10569 0504 FFF7FEFF 		bl	st_dword
 10570              	.LVL1245:
 10571              	.L749:
5710:./FW/ff.c     ****             }
 10572              		.loc 1 5710 17 view .LVU3533
 10573 0508 3746     		mov	r7, r6
 10574              	.L751:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 346


 10575              	.LVL1246:
5713:./FW/ff.c     ****                 n = (nsect > sz_buf) ? sz_buf : nsect;
 10576              		.loc 1 5713 13 is_stmt 1 view .LVU3534
5714:./FW/ff.c     ****                 if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) { return FR_DISK_ERR; }
 10577              		.loc 1 5714 17 view .LVU3535
5714:./FW/ff.c     ****                 if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) { return FR_DISK_ERR; }
 10578              		.loc 1 5714 19 is_stmt 0 view .LVU3536
 10579 050a 3D46     		mov	r5, r7
 10580 050c 5F45     		cmp	r7, fp
 10581 050e 28BF     		it	cs
 10582 0510 5D46     		movcs	r5, fp
 10583              	.LVL1247:
5715:./FW/ff.c     ****                 mem_set(buf, 0, ss);
 10584              		.loc 1 5715 17 is_stmt 1 view .LVU3537
5715:./FW/ff.c     ****                 mem_set(buf, 0, ss);
 10585              		.loc 1 5715 21 is_stmt 0 view .LVU3538
 10586 0512 2B46     		mov	r3, r5
 10587 0514 4246     		mov	r2, r8
 10588 0516 4946     		mov	r1, r9
 10589 0518 2046     		mov	r0, r4
 10590 051a FFF7FEFF 		bl	disk_write
 10591              	.LVL1248:
5715:./FW/ff.c     ****                 mem_set(buf, 0, ss);
 10592              		.loc 1 5715 20 view .LVU3539
 10593 051e 0028     		cmp	r0, #0
 10594 0520 40F0A980 		bne	.L785
5716:./FW/ff.c     ****                 sect += n;
 10595              		.loc 1 5716 17 is_stmt 1 view .LVU3540
 10596 0524 4FF40072 		mov	r2, #512
 10597 0528 0021     		movs	r1, #0
 10598 052a 4846     		mov	r0, r9
 10599 052c FFF7FEFF 		bl	mem_set
 10600              	.LVL1249:
5717:./FW/ff.c     ****                 nsect -= n;
 10601              		.loc 1 5717 17 view .LVU3541
5717:./FW/ff.c     ****                 nsect -= n;
 10602              		.loc 1 5717 22 is_stmt 0 view .LVU3542
 10603 0530 A844     		add	r8, r8, r5
 10604              	.LVL1250:
5718:./FW/ff.c     ****             } while (nsect);
 10605              		.loc 1 5718 17 is_stmt 1 view .LVU3543
5719:./FW/ff.c     ****         }
 10606              		.loc 1 5719 21 view .LVU3544
5719:./FW/ff.c     ****         }
 10607              		.loc 1 5719 13 is_stmt 0 view .LVU3545
 10608 0532 7F1B     		subs	r7, r7, r5
 10609              	.LVL1251:
5719:./FW/ff.c     ****         }
 10610              		.loc 1 5719 13 view .LVU3546
 10611 0534 E9D1     		bne	.L751
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10612              		.loc 1 5704 33 is_stmt 1 discriminator 2 view .LVU3547
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10613              		.loc 1 5704 34 is_stmt 0 discriminator 2 view .LVU3548
 10614 0536 019B     		ldr	r3, [sp, #4]
 10615 0538 0133     		adds	r3, r3, #1
 10616 053a 0193     		str	r3, [sp, #4]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 347


 10617              	.LVL1252:
5704:./FW/ff.c     ****             if (fmt == FS_FAT32) {
 10618              		.loc 1 5704 34 discriminator 2 view .LVU3549
 10619 053c 32E7     		b	.L747
 10620              	.LVL1253:
 10621              	.L805:
5706:./FW/ff.c     ****                 st_dword(buf + 4, 0xFFFFFFFF);  /* Entry 1 */
 10622              		.loc 1 5706 17 is_stmt 1 view .LVU3550
 10623 053e 6FF00701 		mvn	r1, #7
 10624 0542 4846     		mov	r0, r9
 10625 0544 FFF7FEFF 		bl	st_dword
 10626              	.LVL1254:
5707:./FW/ff.c     ****                 st_dword(buf + 8, 0x0FFFFFFF);  /* Entry 2 (root directory) */
 10627              		.loc 1 5707 17 view .LVU3551
 10628 0548 4FF0FF31 		mov	r1, #-1
 10629 054c 09F10400 		add	r0, r9, #4
 10630 0550 FFF7FEFF 		bl	st_dword
 10631              	.LVL1255:
5708:./FW/ff.c     ****             } else {
 10632              		.loc 1 5708 17 view .LVU3552
 10633 0554 6FF07041 		mvn	r1, #-268435456
 10634 0558 09F10800 		add	r0, r9, #8
 10635 055c FFF7FEFF 		bl	st_dword
 10636              	.LVL1256:
 10637 0560 D2E7     		b	.L749
 10638              	.LVL1257:
 10639              	.L806:
5710:./FW/ff.c     ****             }
 10640              		.loc 1 5710 17 is_stmt 0 view .LVU3553
 10641 0562 0B49     		ldr	r1, .L809+20
 10642 0564 CDE7     		b	.L750
 10643              	.LVL1258:
 10644              	.L803:
5723:./FW/ff.c     ****         do {
 10645              		.loc 1 5723 41 view .LVU3554
 10646 0566 3E46     		mov	r6, r7
 10647              	.LVL1259:
5723:./FW/ff.c     ****         do {
 10648              		.loc 1 5723 41 view .LVU3555
 10649 0568 4746     		mov	r7, r8
 10650 056a CDF80490 		str	r9, [sp, #4]
 10651 056e DDF80880 		ldr	r8, [sp, #8]
 10652              	.LVL1260:
5723:./FW/ff.c     ****         do {
 10653              		.loc 1 5723 41 view .LVU3556
 10654 0572 DDF80090 		ldr	r9, [sp]
 10655 0576 2CE7     		b	.L754
 10656              	.LVL1261:
 10657              	.L804:
5742:./FW/ff.c     ****             }
 10658              		.loc 1 5742 21 view .LVU3557
 10659 0578 0427     		movs	r7, #4
 10660              	.LVL1262:
5742:./FW/ff.c     ****             }
 10661              		.loc 1 5742 21 view .LVU3558
 10662 057a 0CE0     		b	.L755
 10663              	.L810:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 348


 10664              		.align	2
 10665              	.L809:
 10666 057c 00000000 		.word	.LC1
 10667 0580 20000000 		.word	.LC3
 10668 0584 0C000000 		.word	.LC2
 10669 0588 52526141 		.word	1096897106
 10670 058c 72724161 		.word	1631679090
 10671 0590 F8FFFF00 		.word	16777208
 10672              	.LVL1263:
 10673              	.L787:
5737:./FW/ff.c     ****         } else {
 10674              		.loc 1 5737 17 view .LVU3559
 10675 0594 0C27     		movs	r7, #12
 10676              	.LVL1264:
 10677              	.L755:
5748:./FW/ff.c     ****         /* Update system ID in the partition table */
 10678              		.loc 1 5748 5 is_stmt 1 view .LVU3560
5754:./FW/ff.c     ****             mem_set(buf, 0, ss);
 10679              		.loc 1 5754 9 view .LVU3561
5754:./FW/ff.c     ****             mem_set(buf, 0, ss);
 10680              		.loc 1 5754 12 is_stmt 0 view .LVU3562
 10681 0596 039B     		ldr	r3, [sp, #12]
 10682 0598 DBBB     		cbnz	r3, .L756
5755:./FW/ff.c     ****             st_word(buf + BS_55AA, 0xAA55);     /* MBR signature */
 10683              		.loc 1 5755 13 is_stmt 1 view .LVU3563
 10684 059a 4FF40072 		mov	r2, #512
 10685 059e 0021     		movs	r1, #0
 10686 05a0 009E     		ldr	r6, [sp]
 10687              	.LVL1265:
5755:./FW/ff.c     ****             st_word(buf + BS_55AA, 0xAA55);     /* MBR signature */
 10688              		.loc 1 5755 13 is_stmt 0 view .LVU3564
 10689 05a2 3046     		mov	r0, r6
 10690 05a4 FFF7FEFF 		bl	mem_set
 10691              	.LVL1266:
5756:./FW/ff.c     ****             pte = buf + MBR_Table;              /* Create partition table for single partition in t
 10692              		.loc 1 5756 13 is_stmt 1 view .LVU3565
 10693 05a8 4AF65521 		movw	r1, #43605
 10694 05ac 4846     		mov	r0, r9
 10695 05ae FFF7FEFF 		bl	st_word
 10696              	.LVL1267:
5757:./FW/ff.c     ****             pte[PTE_Boot] = 0;                  /* Boot indicator */
 10697              		.loc 1 5757 13 view .LVU3566
5758:./FW/ff.c     ****             pte[PTE_StHead] = 1;                /* Start head */
 10698              		.loc 1 5758 13 view .LVU3567
5758:./FW/ff.c     ****             pte[PTE_StHead] = 1;                /* Start head */
 10699              		.loc 1 5758 27 is_stmt 0 view .LVU3568
 10700 05b2 0025     		movs	r5, #0
 10701              	.LVL1268:
5758:./FW/ff.c     ****             pte[PTE_StHead] = 1;                /* Start head */
 10702              		.loc 1 5758 27 view .LVU3569
 10703 05b4 3346     		mov	r3, r6
 10704 05b6 3146     		mov	r1, r6
 10705 05b8 86F8BE51 		strb	r5, [r6, #446]
5759:./FW/ff.c     ****             pte[PTE_StSec] = 1;                 /* Start sector */
 10706              		.loc 1 5759 13 is_stmt 1 view .LVU3570
5759:./FW/ff.c     ****             pte[PTE_StSec] = 1;                 /* Start sector */
 10707              		.loc 1 5759 29 is_stmt 0 view .LVU3571
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 349


 10708 05bc 0126     		movs	r6, #1
 10709              	.LVL1269:
5759:./FW/ff.c     ****             pte[PTE_StSec] = 1;                 /* Start sector */
 10710              		.loc 1 5759 29 view .LVU3572
 10711 05be 83F8BF61 		strb	r6, [r3, #447]
5760:./FW/ff.c     ****             pte[PTE_StCyl] = 0;                 /* Start cylinder */
 10712              		.loc 1 5760 13 is_stmt 1 view .LVU3573
5760:./FW/ff.c     ****             pte[PTE_StCyl] = 0;                 /* Start cylinder */
 10713              		.loc 1 5760 28 is_stmt 0 view .LVU3574
 10714 05c2 83F8C061 		strb	r6, [r3, #448]
5761:./FW/ff.c     ****             pte[PTE_System] = sys;              /* System type */
 10715              		.loc 1 5761 13 is_stmt 1 view .LVU3575
5761:./FW/ff.c     ****             pte[PTE_System] = sys;              /* System type */
 10716              		.loc 1 5761 28 is_stmt 0 view .LVU3576
 10717 05c6 83F8C151 		strb	r5, [r3, #449]
5762:./FW/ff.c     ****             n = (b_vol + sz_vol) / (63 * 255);  /* (End CHS may be invalid) */
 10718              		.loc 1 5762 13 is_stmt 1 view .LVU3577
5762:./FW/ff.c     ****             n = (b_vol + sz_vol) / (63 * 255);  /* (End CHS may be invalid) */
 10719              		.loc 1 5762 29 is_stmt 0 view .LVU3578
 10720 05ca 83F8C271 		strb	r7, [r3, #450]
5763:./FW/ff.c     ****             pte[PTE_EdHead] = 254;              /* End head */
 10721              		.loc 1 5763 13 is_stmt 1 view .LVU3579
5763:./FW/ff.c     ****             pte[PTE_EdHead] = 254;              /* End head */
 10722              		.loc 1 5763 24 is_stmt 0 view .LVU3580
 10723 05ce 0A9B     		ldr	r3, [sp, #40]
 10724 05d0 5B44     		add	r3, r3, fp
5763:./FW/ff.c     ****             pte[PTE_EdHead] = 254;              /* End head */
 10725              		.loc 1 5763 15 view .LVU3581
 10726 05d2 43F6C162 		movw	r2, #16065
 10727 05d6 B3FBF2F3 		udiv	r3, r3, r2
 10728              	.LVL1270:
5764:./FW/ff.c     ****             pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);   /* End sector */
 10729              		.loc 1 5764 13 is_stmt 1 view .LVU3582
5764:./FW/ff.c     ****             pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);   /* End sector */
 10730              		.loc 1 5764 29 is_stmt 0 view .LVU3583
 10731 05da FE22     		movs	r2, #254
 10732 05dc 81F8C321 		strb	r2, [r1, #451]
5765:./FW/ff.c     ****             pte[PTE_EdCyl] = (BYTE)n;           /* End cylinder */
 10733              		.loc 1 5765 13 is_stmt 1 view .LVU3584
5765:./FW/ff.c     ****             pte[PTE_EdCyl] = (BYTE)n;           /* End cylinder */
 10734              		.loc 1 5765 39 is_stmt 0 view .LVU3585
 10735 05e0 9A08     		lsrs	r2, r3, #2
5765:./FW/ff.c     ****             pte[PTE_EdCyl] = (BYTE)n;           /* End cylinder */
 10736              		.loc 1 5765 30 view .LVU3586
 10737 05e2 42F03F02 		orr	r2, r2, #63
5765:./FW/ff.c     ****             pte[PTE_EdCyl] = (BYTE)n;           /* End cylinder */
 10738              		.loc 1 5765 28 view .LVU3587
 10739 05e6 0F46     		mov	r7, r1
 10740              	.LVL1271:
5765:./FW/ff.c     ****             pte[PTE_EdCyl] = (BYTE)n;           /* End cylinder */
 10741              		.loc 1 5765 28 view .LVU3588
 10742 05e8 81F8C421 		strb	r2, [r1, #452]
5766:./FW/ff.c     ****             st_dword(pte + PTE_StLba, b_vol);   /* Start offset in LBA */
 10743              		.loc 1 5766 13 is_stmt 1 view .LVU3589
5766:./FW/ff.c     ****             st_dword(pte + PTE_StLba, b_vol);   /* Start offset in LBA */
 10744              		.loc 1 5766 28 is_stmt 0 view .LVU3590
 10745 05ec 81F8C531 		strb	r3, [r1, #453]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 350


5767:./FW/ff.c     ****             st_dword(pte + PTE_SizLba, sz_vol); /* Size in sectors */
 10746              		.loc 1 5767 13 is_stmt 1 view .LVU3591
 10747 05f0 5946     		mov	r1, fp
 10748              	.LVL1272:
5767:./FW/ff.c     ****             st_dword(pte + PTE_SizLba, sz_vol); /* Size in sectors */
 10749              		.loc 1 5767 13 is_stmt 0 view .LVU3592
 10750 05f2 07F5E370 		add	r0, r7, #454
 10751 05f6 FFF7FEFF 		bl	st_dword
 10752              	.LVL1273:
5768:./FW/ff.c     ****             if (disk_write(pdrv, buf, 0, 1) != RES_OK) { return FR_DISK_ERR; }  /* Write it to the 
 10753              		.loc 1 5768 13 is_stmt 1 view .LVU3593
 10754 05fa 0A99     		ldr	r1, [sp, #40]
 10755 05fc 07F5E570 		add	r0, r7, #458
 10756 0600 FFF7FEFF 		bl	st_dword
 10757              	.LVL1274:
5769:./FW/ff.c     ****         }
 10758              		.loc 1 5769 13 view .LVU3594
5769:./FW/ff.c     ****         }
 10759              		.loc 1 5769 17 is_stmt 0 view .LVU3595
 10760 0604 3346     		mov	r3, r6
 10761 0606 2A46     		mov	r2, r5
 10762 0608 3946     		mov	r1, r7
 10763 060a 2046     		mov	r0, r4
 10764 060c FFF7FEFF 		bl	disk_write
 10765              	.LVL1275:
5769:./FW/ff.c     ****         }
 10766              		.loc 1 5769 16 view .LVU3596
 10767 0610 A8BB     		cbnz	r0, .L790
 10768              	.LVL1276:
 10769              	.L756:
5773:./FW/ff.c     **** 
 10770              		.loc 1 5773 5 is_stmt 1 view .LVU3597
5773:./FW/ff.c     **** 
 10771              		.loc 1 5773 9 is_stmt 0 view .LVU3598
 10772 0612 0022     		movs	r2, #0
 10773 0614 1146     		mov	r1, r2
 10774 0616 2046     		mov	r0, r4
 10775 0618 FFF7FEFF 		bl	disk_ioctl
 10776              	.LVL1277:
5773:./FW/ff.c     **** 
 10777              		.loc 1 5773 8 view .LVU3599
 10778 061c 40B1     		cbz	r0, .L713
5773:./FW/ff.c     **** 
 10779              		.loc 1 5773 60 view .LVU3600
 10780 061e 0120     		movs	r0, #1
 10781 0620 06E0     		b	.L713
 10782              	.LVL1278:
 10783              	.L788:
5740:./FW/ff.c     ****             } else {
 10784              		.loc 1 5740 21 view .LVU3601
 10785 0622 0627     		movs	r7, #6
 10786              	.LVL1279:
5740:./FW/ff.c     ****             } else {
 10787              		.loc 1 5740 21 view .LVU3602
 10788 0624 B7E7     		b	.L755
 10789              	.LVL1280:
 10790              	.L757:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 351


5326:./FW/ff.c     ****     if (FatFs[vol]) { FatFs[vol]->fs_type = 0; }    /* Clear the volume */
 10791              		.loc 1 5326 27 view .LVU3603
 10792 0626 0B20     		movs	r0, #11
 10793              	.LVL1281:
5326:./FW/ff.c     ****     if (FatFs[vol]) { FatFs[vol]->fs_type = 0; }    /* Clear the volume */
 10794              		.loc 1 5326 27 view .LVU3604
 10795 0628 02E0     		b	.L713
 10796              	.LVL1282:
 10797              	.L758:
5333:./FW/ff.c     ****     if (stat & STA_PROTECT) { return FR_WRITE_PROTECTED; }
 10798              		.loc 1 5333 37 view .LVU3605
 10799 062a 0320     		movs	r0, #3
 10800              	.LVL1283:
5333:./FW/ff.c     ****     if (stat & STA_PROTECT) { return FR_WRITE_PROTECTED; }
 10801              		.loc 1 5333 37 view .LVU3606
 10802 062c 00E0     		b	.L713
 10803              	.LVL1284:
 10804              	.L759:
5334:./FW/ff.c     ****     if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk
 10805              		.loc 1 5334 38 view .LVU3607
 10806 062e 0A20     		movs	r0, #10
 10807              	.LVL1285:
 10808              	.L713:
5776:./FW/ff.c     **** 
 10809              		.loc 1 5776 1 view .LVU3608
 10810 0630 0DB0     		add	sp, sp, #52
 10811              	.LCFI120:
 10812              		.cfi_remember_state
 10813              		.cfi_def_cfa_offset 36
 10814              		@ sp needed
 10815 0632 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 10816              	.LVL1286:
 10817              	.L760:
 10818              	.LCFI121:
 10819              		.cfi_restore_state
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
 10820              		.loc 1 5342 77 view .LVU3609
 10821 0636 1320     		movs	r0, #19
 10822 0638 FAE7     		b	.L713
 10823              	.L761:
5342:./FW/ff.c     ****     au /= ss;   /* Cluster size in unit of sector */
 10824              		.loc 1 5342 77 view .LVU3610
 10825 063a 1320     		movs	r0, #19
 10826 063c F8E7     		b	.L713
 10827              	.L762:
 10828 063e 1320     		movs	r0, #19
 10829 0640 F6E7     		b	.L713
 10830              	.LVL1287:
 10831              	.L763:
5349:./FW/ff.c     **** 
 10832              		.loc 1 5349 28 view .LVU3611
 10833 0642 0E20     		movs	r0, #14
 10834 0644 F4E7     		b	.L713
 10835              	.L764:
5362:./FW/ff.c     ****         b_vol = (opt & FM_SFD) ? 0 : 63;        /* Volume start sector */
 10836              		.loc 1 5362 77 view .LVU3612
 10837 0646 0120     		movs	r0, #1
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 352


 10838 0648 F2E7     		b	.L713
 10839              	.LVL1288:
 10840              	.L766:
5364:./FW/ff.c     ****         sz_vol -= b_vol;                        /* Volume size */
 10841              		.loc 1 5364 38 view .LVU3613
 10842 064a 0E20     		movs	r0, #14
 10843 064c F0E7     		b	.L713
 10844              	.L767:
5367:./FW/ff.c     **** 
 10845              		.loc 1 5367 32 view .LVU3614
 10846 064e 0E20     		movs	r0, #14
 10847 0650 EEE7     		b	.L713
 10848              	.L768:
5377:./FW/ff.c     ****         if (opt & FM_FAT32) {   /* FAT32 possible? */
 10849              		.loc 1 5377 32 view .LVU3615
 10850 0652 1320     		movs	r0, #19
 10851 0654 ECE7     		b	.L713
 10852              	.L771:
5384:./FW/ff.c     ****         fmt = FS_FAT16;
 10853              		.loc 1 5384 39 view .LVU3616
 10854 0656 1320     		movs	r0, #19
 10855 0658 EAE7     		b	.L713
 10856              	.LVL1289:
 10857              	.L773:
5585:./FW/ff.c     ****             } else {                /* FAT12/16 volume */
 10858              		.loc 1 5585 73 view .LVU3617
 10859 065a 0E20     		movs	r0, #14
 10860 065c E8E7     		b	.L713
 10861              	.LVL1290:
 10862              	.L775:
5615:./FW/ff.c     ****             n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 10863              		.loc 1 5615 62 view .LVU3618
 10864 065e 0E20     		movs	r0, #14
 10865 0660 E6E7     		b	.L713
 10866              	.LVL1291:
 10867              	.L776:
5620:./FW/ff.c     ****                 }
 10868              		.loc 1 5620 28 view .LVU3619
 10869 0662 0E20     		movs	r0, #14
 10870 0664 E4E7     		b	.L713
 10871              	.LVL1292:
 10872              	.L779:
5634:./FW/ff.c     ****                 }
 10873              		.loc 1 5634 28 view .LVU3620
 10874 0666 0E20     		movs	r0, #14
 10875 0668 E2E7     		b	.L713
 10876              	.LVL1293:
 10877              	.L780:
5638:./FW/ff.c     ****                 }
 10878              		.loc 1 5638 28 view .LVU3621
 10879 066a 0E20     		movs	r0, #14
 10880 066c E0E7     		b	.L713
 10881              	.LVL1294:
 10882              	.L781:
5641:./FW/ff.c     **** 
 10883              		.loc 1 5641 65 view .LVU3622
 10884 066e 0E20     		movs	r0, #14
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 353


 10885 0670 DEE7     		b	.L713
 10886              	.LVL1295:
 10887              	.L783:
5686:./FW/ff.c     **** 
 10888              		.loc 1 5686 65 view .LVU3623
 10889 0672 0120     		movs	r0, #1
 10890 0674 DCE7     		b	.L713
 10891              	.LVL1296:
 10892              	.L785:
5715:./FW/ff.c     ****                 mem_set(buf, 0, ss);
 10893              		.loc 1 5715 78 view .LVU3624
 10894 0676 0120     		movs	r0, #1
 10895 0678 DAE7     		b	.L713
 10896              	.LVL1297:
 10897              	.L786:
5726:./FW/ff.c     ****             sect += n;
 10898              		.loc 1 5726 74 view .LVU3625
 10899 067a 0120     		movs	r0, #1
 10900 067c D8E7     		b	.L713
 10901              	.LVL1298:
 10902              	.L790:
5769:./FW/ff.c     ****         }
 10903              		.loc 1 5769 65 view .LVU3626
 10904 067e 0120     		movs	r0, #1
 10905 0680 D6E7     		b	.L713
 10906              		.cfi_endproc
 10907              	.LFE993:
 10909 0682 00BF     		.section	.text.f_gets,"ax",%progbits
 10910              		.align	1
 10911              		.global	f_gets
 10912              		.syntax unified
 10913              		.thumb
 10914              		.thumb_func
 10915              		.fpu fpv4-sp-d16
 10917              	f_gets:
 10918              	.LVL1299:
 10919              	.LFB994:
5862:./FW/ff.c     ****     int n = 0;
 10920              		.loc 1 5862 3 is_stmt 1 view -0
 10921              		.cfi_startproc
 10922              		@ args = 0, pretend = 0, frame = 8
 10923              		@ frame_needed = 0, uses_anonymous_args = 0
5862:./FW/ff.c     ****     int n = 0;
 10924              		.loc 1 5862 3 is_stmt 0 view .LVU3628
 10925 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 10926              	.LCFI122:
 10927              		.cfi_def_cfa_offset 24
 10928              		.cfi_offset 4, -24
 10929              		.cfi_offset 5, -20
 10930              		.cfi_offset 6, -16
 10931              		.cfi_offset 7, -12
 10932              		.cfi_offset 8, -8
 10933              		.cfi_offset 14, -4
 10934 0004 82B0     		sub	sp, sp, #8
 10935              	.LCFI123:
 10936              		.cfi_def_cfa_offset 32
 10937 0006 8046     		mov	r8, r0
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 354


 10938 0008 0E46     		mov	r6, r1
 10939 000a 1746     		mov	r7, r2
5863:./FW/ff.c     ****     TCHAR c, *p = buff;
 10940              		.loc 1 5863 5 is_stmt 1 view .LVU3629
 10941              	.LVL1300:
5864:./FW/ff.c     ****     BYTE s[2];
 10942              		.loc 1 5864 5 view .LVU3630
5865:./FW/ff.c     ****     UINT rc;
 10943              		.loc 1 5865 5 view .LVU3631
5866:./FW/ff.c     **** 
 10944              		.loc 1 5866 5 view .LVU3632
5869:./FW/ff.c     **** #if _LFN_UNICODE
 10945              		.loc 1 5869 5 view .LVU3633
5864:./FW/ff.c     ****     BYTE s[2];
 10946              		.loc 1 5864 15 is_stmt 0 view .LVU3634
 10947 000c 0446     		mov	r4, r0
5863:./FW/ff.c     ****     TCHAR c, *p = buff;
 10948              		.loc 1 5863 9 view .LVU3635
 10949 000e 0025     		movs	r5, #0
 10950              	.LVL1301:
 10951              	.L812:
5869:./FW/ff.c     **** #if _LFN_UNICODE
 10952              		.loc 1 5869 11 is_stmt 1 view .LVU3636
5869:./FW/ff.c     **** #if _LFN_UNICODE
 10953              		.loc 1 5869 20 is_stmt 0 view .LVU3637
 10954 0010 731E     		subs	r3, r6, #1
5869:./FW/ff.c     **** #if _LFN_UNICODE
 10955              		.loc 1 5869 11 view .LVU3638
 10956 0012 AB42     		cmp	r3, r5
 10957 0014 11DD     		ble	.L813
5914:./FW/ff.c     ****         if (rc != 1) { break; }
 10958              		.loc 1 5914 9 is_stmt 1 view .LVU3639
 10959 0016 6B46     		mov	r3, sp
 10960 0018 0122     		movs	r2, #1
 10961 001a 01A9     		add	r1, sp, #4
 10962 001c 3846     		mov	r0, r7
 10963 001e FFF7FEFF 		bl	f_read
 10964              	.LVL1302:
5915:./FW/ff.c     ****         c = s[0];
 10965              		.loc 1 5915 9 view .LVU3640
5915:./FW/ff.c     ****         c = s[0];
 10966              		.loc 1 5915 16 is_stmt 0 view .LVU3641
 10967 0022 009B     		ldr	r3, [sp]
5915:./FW/ff.c     ****         c = s[0];
 10968              		.loc 1 5915 12 view .LVU3642
 10969 0024 012B     		cmp	r3, #1
 10970 0026 08D1     		bne	.L813
5916:./FW/ff.c     **** #endif
 10971              		.loc 1 5916 9 is_stmt 1 view .LVU3643
5916:./FW/ff.c     **** #endif
 10972              		.loc 1 5916 11 is_stmt 0 view .LVU3644
 10973 0028 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 10974              	.LVL1303:
5918:./FW/ff.c     ****         *p++ = c;
 10975              		.loc 1 5918 9 is_stmt 1 view .LVU3645
5918:./FW/ff.c     ****         *p++ = c;
 10976              		.loc 1 5918 12 is_stmt 0 view .LVU3646
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 355


 10977 002c 0D2B     		cmp	r3, #13
 10978 002e EFD0     		beq	.L812
5919:./FW/ff.c     ****         n++;
 10979              		.loc 1 5919 9 is_stmt 1 view .LVU3647
 10980              	.LVL1304:
5919:./FW/ff.c     ****         n++;
 10981              		.loc 1 5919 14 is_stmt 0 view .LVU3648
 10982 0030 04F8013B 		strb	r3, [r4], #1
 10983              	.LVL1305:
5920:./FW/ff.c     ****         if (c == '\n') { break; }       /* Break on EOL */
 10984              		.loc 1 5920 9 is_stmt 1 view .LVU3649
5920:./FW/ff.c     ****         if (c == '\n') { break; }       /* Break on EOL */
 10985              		.loc 1 5920 10 is_stmt 0 view .LVU3650
 10986 0034 0135     		adds	r5, r5, #1
 10987              	.LVL1306:
5921:./FW/ff.c     ****     }
 10988              		.loc 1 5921 9 is_stmt 1 view .LVU3651
5921:./FW/ff.c     ****     }
 10989              		.loc 1 5921 12 is_stmt 0 view .LVU3652
 10990 0036 0A2B     		cmp	r3, #10
 10991 0038 EAD1     		bne	.L812
 10992              	.LVL1307:
 10993              	.L813:
5923:./FW/ff.c     ****     return n ? buff : 0;            /* When no data read (eof or error), return with error. */
 10994              		.loc 1 5923 5 is_stmt 1 view .LVU3653
5923:./FW/ff.c     ****     return n ? buff : 0;            /* When no data read (eof or error), return with error. */
 10995              		.loc 1 5923 8 is_stmt 0 view .LVU3654
 10996 003a 0023     		movs	r3, #0
 10997 003c 2370     		strb	r3, [r4]
5924:./FW/ff.c     **** }
 10998              		.loc 1 5924 5 is_stmt 1 view .LVU3655
5924:./FW/ff.c     **** }
 10999              		.loc 1 5924 21 is_stmt 0 view .LVU3656
 11000 003e 1DB1     		cbz	r5, .L819
5924:./FW/ff.c     **** }
 11001              		.loc 1 5924 21 view .LVU3657
 11002 0040 4046     		mov	r0, r8
 11003              	.L811:
5925:./FW/ff.c     **** 
 11004              		.loc 1 5925 1 view .LVU3658
 11005 0042 02B0     		add	sp, sp, #8
 11006              	.LCFI124:
 11007              		.cfi_remember_state
 11008              		.cfi_def_cfa_offset 24
 11009              		@ sp needed
 11010 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11011              	.LVL1308:
 11012              	.L819:
 11013              	.LCFI125:
 11014              		.cfi_restore_state
5924:./FW/ff.c     **** }
 11015              		.loc 1 5924 21 view .LVU3659
 11016 0048 0020     		movs	r0, #0
 11017 004a FAE7     		b	.L811
 11018              		.cfi_endproc
 11019              	.LFE994:
 11021              		.section	.text.f_putc,"ax",%progbits
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 356


 11022              		.align	1
 11023              		.global	f_putc
 11024              		.syntax unified
 11025              		.thumb
 11026              		.thumb_func
 11027              		.fpu fpv4-sp-d16
 11029              	f_putc:
 11030              	.LVL1309:
 11031              	.LFB998:
6019:./FW/ff.c     **** 
6020:./FW/ff.c     **** 
6021:./FW/ff.c     **** 
6022:./FW/ff.c     **** int f_putc (
6023:./FW/ff.c     ****     TCHAR c,    /* A character to be output */
6024:./FW/ff.c     ****     FIL* fp     /* Pointer to the file object */
6025:./FW/ff.c     **** ) {
 11032              		.loc 1 6025 3 is_stmt 1 view -0
 11033              		.cfi_startproc
 11034              		@ args = 0, pretend = 0, frame = 80
 11035              		@ frame_needed = 0, uses_anonymous_args = 0
 11036              		.loc 1 6025 3 is_stmt 0 view .LVU3661
 11037 0000 10B5     		push	{r4, lr}
 11038              	.LCFI126:
 11039              		.cfi_def_cfa_offset 8
 11040              		.cfi_offset 4, -8
 11041              		.cfi_offset 14, -4
 11042 0002 94B0     		sub	sp, sp, #80
 11043              	.LCFI127:
 11044              		.cfi_def_cfa_offset 88
 11045 0004 0446     		mov	r4, r0
6026:./FW/ff.c     ****     putbuff pb;
 11046              		.loc 1 6026 5 is_stmt 1 view .LVU3662
6027:./FW/ff.c     **** 
6028:./FW/ff.c     **** 
6029:./FW/ff.c     ****     putc_init(&pb, fp);
 11047              		.loc 1 6029 5 view .LVU3663
 11048 0006 01A8     		add	r0, sp, #4
 11049              	.LVL1310:
 11050              		.loc 1 6029 5 is_stmt 0 view .LVU3664
 11051 0008 FFF7FEFF 		bl	putc_init
 11052              	.LVL1311:
6030:./FW/ff.c     ****     putc_bfd(&pb, c);   /* Put the character */
 11053              		.loc 1 6030 5 is_stmt 1 view .LVU3665
 11054 000c 2146     		mov	r1, r4
 11055 000e 01A8     		add	r0, sp, #4
 11056 0010 FFF7FEFF 		bl	putc_bfd
 11057              	.LVL1312:
6031:./FW/ff.c     ****     return putc_flush(&pb);
 11058              		.loc 1 6031 5 view .LVU3666
 11059              		.loc 1 6031 12 is_stmt 0 view .LVU3667
 11060 0014 01A8     		add	r0, sp, #4
 11061 0016 FFF7FEFF 		bl	putc_flush
 11062              	.LVL1313:
6032:./FW/ff.c     **** }
 11063              		.loc 1 6032 1 view .LVU3668
 11064 001a 14B0     		add	sp, sp, #80
 11065              	.LCFI128:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 357


 11066              		.cfi_def_cfa_offset 8
 11067              		@ sp needed
 11068 001c 10BD     		pop	{r4, pc}
 11069              		.cfi_endproc
 11070              	.LFE998:
 11072              		.section	.text.f_puts,"ax",%progbits
 11073              		.align	1
 11074              		.global	f_puts
 11075              		.syntax unified
 11076              		.thumb
 11077              		.thumb_func
 11078              		.fpu fpv4-sp-d16
 11080              	f_puts:
 11081              	.LVL1314:
 11082              	.LFB999:
6033:./FW/ff.c     **** 
6034:./FW/ff.c     **** 
6035:./FW/ff.c     **** 
6036:./FW/ff.c     **** 
6037:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
6038:./FW/ff.c     **** /* Put a string to the file                                              */
6039:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
6040:./FW/ff.c     **** 
6041:./FW/ff.c     **** int f_puts (
6042:./FW/ff.c     ****     const TCHAR* str,   /* Pointer to the string to be output */
6043:./FW/ff.c     ****     FIL* fp             /* Pointer to the file object */
6044:./FW/ff.c     **** ) {
 11083              		.loc 1 6044 3 is_stmt 1 view -0
 11084              		.cfi_startproc
 11085              		@ args = 0, pretend = 0, frame = 80
 11086              		@ frame_needed = 0, uses_anonymous_args = 0
 11087              		.loc 1 6044 3 is_stmt 0 view .LVU3670
 11088 0000 10B5     		push	{r4, lr}
 11089              	.LCFI129:
 11090              		.cfi_def_cfa_offset 8
 11091              		.cfi_offset 4, -8
 11092              		.cfi_offset 14, -4
 11093 0002 94B0     		sub	sp, sp, #80
 11094              	.LCFI130:
 11095              		.cfi_def_cfa_offset 88
 11096 0004 0446     		mov	r4, r0
6045:./FW/ff.c     ****     putbuff pb;
 11097              		.loc 1 6045 5 is_stmt 1 view .LVU3671
6046:./FW/ff.c     **** 
6047:./FW/ff.c     **** 
6048:./FW/ff.c     ****     putc_init(&pb, fp);
 11098              		.loc 1 6048 5 view .LVU3672
 11099 0006 01A8     		add	r0, sp, #4
 11100              	.LVL1315:
 11101              		.loc 1 6048 5 is_stmt 0 view .LVU3673
 11102 0008 FFF7FEFF 		bl	putc_init
 11103              	.LVL1316:
6049:./FW/ff.c     ****     while (*str) { putc_bfd(&pb, *str++); }     /* Put the string */
 11104              		.loc 1 6049 5 is_stmt 1 view .LVU3674
 11105              	.L824:
 11106              		.loc 1 6049 11 discriminator 1 view .LVU3675
 11107              		.loc 1 6049 12 is_stmt 0 discriminator 1 view .LVU3676
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 358


 11108 000c 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 11109              		.loc 1 6049 11 discriminator 1 view .LVU3677
 11110 000e 21B1     		cbz	r1, .L827
 11111              		.loc 1 6049 20 is_stmt 1 discriminator 2 view .LVU3678
 11112              		.loc 1 6049 38 is_stmt 0 discriminator 2 view .LVU3679
 11113 0010 0134     		adds	r4, r4, #1
 11114              	.LVL1317:
 11115              		.loc 1 6049 20 discriminator 2 view .LVU3680
 11116 0012 01A8     		add	r0, sp, #4
 11117 0014 FFF7FEFF 		bl	putc_bfd
 11118              	.LVL1318:
 11119 0018 F8E7     		b	.L824
 11120              	.L827:
6050:./FW/ff.c     ****     return putc_flush(&pb);
 11121              		.loc 1 6050 5 is_stmt 1 view .LVU3681
 11122              		.loc 1 6050 12 is_stmt 0 view .LVU3682
 11123 001a 01A8     		add	r0, sp, #4
 11124 001c FFF7FEFF 		bl	putc_flush
 11125              	.LVL1319:
6051:./FW/ff.c     **** }
 11126              		.loc 1 6051 1 view .LVU3683
 11127 0020 14B0     		add	sp, sp, #80
 11128              	.LCFI131:
 11129              		.cfi_def_cfa_offset 8
 11130              		@ sp needed
 11131 0022 10BD     		pop	{r4, pc}
 11132              		.loc 1 6051 1 view .LVU3684
 11133              		.cfi_endproc
 11134              	.LFE999:
 11136              		.section	.text.f_printf,"ax",%progbits
 11137              		.align	1
 11138              		.global	f_printf
 11139              		.syntax unified
 11140              		.thumb
 11141              		.thumb_func
 11142              		.fpu fpv4-sp-d16
 11144              	f_printf:
 11145              	.LVL1320:
 11146              	.LFB1000:
6052:./FW/ff.c     **** 
6053:./FW/ff.c     **** 
6054:./FW/ff.c     **** 
6055:./FW/ff.c     **** 
6056:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
6057:./FW/ff.c     **** /* Put a formatted string to the file                                    */
6058:./FW/ff.c     **** /*-----------------------------------------------------------------------*/
6059:./FW/ff.c     **** 
6060:./FW/ff.c     **** int f_printf (
6061:./FW/ff.c     ****     FIL* fp,            /* Pointer to the file object */
6062:./FW/ff.c     ****     const TCHAR* fmt,   /* Pointer to the format string */
6063:./FW/ff.c     ****     ...                 /* Optional arguments... */
6064:./FW/ff.c     **** ) {
 11147              		.loc 1 6064 3 is_stmt 1 view -0
 11148              		.cfi_startproc
 11149              		@ args = 4, pretend = 12, frame = 112
 11150              		@ frame_needed = 0, uses_anonymous_args = 1
 11151              		.loc 1 6064 3 is_stmt 0 view .LVU3686
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 359


 11152 0000 0EB4     		push	{r1, r2, r3}
 11153              	.LCFI132:
 11154              		.cfi_def_cfa_offset 12
 11155              		.cfi_offset 1, -12
 11156              		.cfi_offset 2, -8
 11157              		.cfi_offset 3, -4
 11158 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11159              	.LCFI133:
 11160              		.cfi_def_cfa_offset 44
 11161              		.cfi_offset 4, -44
 11162              		.cfi_offset 5, -40
 11163              		.cfi_offset 6, -36
 11164              		.cfi_offset 7, -32
 11165              		.cfi_offset 8, -28
 11166              		.cfi_offset 9, -24
 11167              		.cfi_offset 10, -20
 11168              		.cfi_offset 14, -16
 11169 0006 9DB0     		sub	sp, sp, #116
 11170              	.LCFI134:
 11171              		.cfi_def_cfa_offset 160
 11172 0008 0146     		mov	r1, r0
 11173 000a 25AC     		add	r4, sp, #148
 11174 000c 54F8045B 		ldr	r5, [r4], #4
6065:./FW/ff.c     ****     va_list arp;
 11175              		.loc 1 6065 5 is_stmt 1 view .LVU3687
6066:./FW/ff.c     ****     putbuff pb;
 11176              		.loc 1 6066 5 view .LVU3688
6067:./FW/ff.c     ****     BYTE f, r;
 11177              		.loc 1 6067 5 view .LVU3689
6068:./FW/ff.c     ****     UINT i, j, w;
 11178              		.loc 1 6068 5 view .LVU3690
6069:./FW/ff.c     ****     DWORD v;
 11179              		.loc 1 6069 5 view .LVU3691
6070:./FW/ff.c     ****     TCHAR c, d, str[32], *p;
 11180              		.loc 1 6070 5 view .LVU3692
6071:./FW/ff.c     **** 
6072:./FW/ff.c     **** 
6073:./FW/ff.c     ****     putc_init(&pb, fp);
 11181              		.loc 1 6073 5 view .LVU3693
 11182 0010 08A8     		add	r0, sp, #32
 11183              	.LVL1321:
 11184              		.loc 1 6073 5 is_stmt 0 view .LVU3694
 11185 0012 FFF7FEFF 		bl	putc_init
 11186              	.LVL1322:
6074:./FW/ff.c     **** 
6075:./FW/ff.c     ****     va_start(arp, fmt);
 11187              		.loc 1 6075 5 is_stmt 1 view .LVU3695
 11188 0016 1B94     		str	r4, [sp, #108]
 11189 0018 03E0     		b	.L829
 11190              	.LVL1323:
 11191              	.L880:
6076:./FW/ff.c     **** 
6077:./FW/ff.c     ****     for (;;) {
6078:./FW/ff.c     ****         c = *fmt++;
6079:./FW/ff.c     ****         if (c == 0) { break; }          /* End of string */
6080:./FW/ff.c     ****         if (c != '%') {             /* Non escape character */
6081:./FW/ff.c     ****             putc_bfd(&pb, c);
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 360


 11192              		.loc 1 6081 13 view .LVU3696
 11193 001a 08A8     		add	r0, sp, #32
 11194 001c FFF7FEFF 		bl	putc_bfd
 11195              	.LVL1324:
6082:./FW/ff.c     ****             continue;
 11196              		.loc 1 6082 13 view .LVU3697
6078:./FW/ff.c     ****         if (c == 0) { break; }          /* End of string */
 11197              		.loc 1 6078 17 is_stmt 0 view .LVU3698
 11198 0020 2546     		mov	r5, r4
 11199              	.LVL1325:
 11200              	.L829:
6077:./FW/ff.c     ****         c = *fmt++;
 11201              		.loc 1 6077 5 is_stmt 1 view .LVU3699
6078:./FW/ff.c     ****         if (c == 0) { break; }          /* End of string */
 11202              		.loc 1 6078 9 view .LVU3700
6078:./FW/ff.c     ****         if (c == 0) { break; }          /* End of string */
 11203              		.loc 1 6078 17 is_stmt 0 view .LVU3701
 11204 0022 2C46     		mov	r4, r5
 11205              	.LVL1326:
6078:./FW/ff.c     ****         if (c == 0) { break; }          /* End of string */
 11206              		.loc 1 6078 11 view .LVU3702
 11207 0024 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 11208              	.LVL1327:
6079:./FW/ff.c     ****         if (c != '%') {             /* Non escape character */
 11209              		.loc 1 6079 9 is_stmt 1 view .LVU3703
6079:./FW/ff.c     ****         if (c != '%') {             /* Non escape character */
 11210              		.loc 1 6079 12 is_stmt 0 view .LVU3704
 11211 0028 0029     		cmp	r1, #0
 11212 002a 00F0FA80 		beq	.L830
6080:./FW/ff.c     ****             putc_bfd(&pb, c);
 11213              		.loc 1 6080 9 is_stmt 1 view .LVU3705
6080:./FW/ff.c     ****             putc_bfd(&pb, c);
 11214              		.loc 1 6080 12 is_stmt 0 view .LVU3706
 11215 002e 2529     		cmp	r1, #37
 11216 0030 F3D1     		bne	.L880
6083:./FW/ff.c     ****         }
6084:./FW/ff.c     ****         w = f = 0;
 11217              		.loc 1 6084 9 is_stmt 1 view .LVU3707
 11218              	.LVL1328:
6085:./FW/ff.c     ****         c = *fmt++;
 11219              		.loc 1 6085 9 view .LVU3708
 11220              		.loc 1 6085 17 is_stmt 0 view .LVU3709
 11221 0032 0235     		adds	r5, r5, #2
 11222              	.LVL1329:
 11223              		.loc 1 6085 11 view .LVU3710
 11224 0034 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 11225              	.LVL1330:
6086:./FW/ff.c     ****         if (c == '0') {             /* Flag: '0' padding */
 11226              		.loc 1 6086 9 is_stmt 1 view .LVU3711
 11227              		.loc 1 6086 12 is_stmt 0 view .LVU3712
 11228 0036 3029     		cmp	r1, #48
 11229 0038 04D0     		beq	.L881
6087:./FW/ff.c     ****             f = 1;
6088:./FW/ff.c     ****             c = *fmt++;
6089:./FW/ff.c     ****         } else {
6090:./FW/ff.c     ****             if (c == '-') {         /* Flag: left justified */
 11230              		.loc 1 6090 13 is_stmt 1 view .LVU3713
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 361


 11231              		.loc 1 6090 16 is_stmt 0 view .LVU3714
 11232 003a 2D29     		cmp	r1, #45
 11233 003c 06D0     		beq	.L882
6084:./FW/ff.c     ****         c = *fmt++;
 11234              		.loc 1 6084 15 view .LVU3715
 11235 003e 0027     		movs	r7, #0
 11236              	.LVL1331:
 11237              	.L834:
6084:./FW/ff.c     ****         c = *fmt++;
 11238              		.loc 1 6084 15 view .LVU3716
 11239 0040 0024     		movs	r4, #0
 11240 0042 0EE0     		b	.L835
 11241              	.LVL1332:
 11242              	.L881:
6087:./FW/ff.c     ****             f = 1;
 11243              		.loc 1 6087 13 is_stmt 1 view .LVU3717
6088:./FW/ff.c     ****         } else {
 11244              		.loc 1 6088 13 view .LVU3718
6088:./FW/ff.c     ****         } else {
 11245              		.loc 1 6088 21 is_stmt 0 view .LVU3719
 11246 0044 A51C     		adds	r5, r4, #2
 11247              	.LVL1333:
6088:./FW/ff.c     ****         } else {
 11248              		.loc 1 6088 15 view .LVU3720
 11249 0046 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 11250              	.LVL1334:
6087:./FW/ff.c     ****             f = 1;
 11251              		.loc 1 6087 15 view .LVU3721
 11252 0048 0127     		movs	r7, #1
 11253 004a F9E7     		b	.L834
 11254              	.LVL1335:
 11255              	.L882:
6091:./FW/ff.c     ****                 f = 2;
 11256              		.loc 1 6091 17 is_stmt 1 view .LVU3722
6092:./FW/ff.c     ****                 c = *fmt++;
 11257              		.loc 1 6092 17 view .LVU3723
 11258              		.loc 1 6092 25 is_stmt 0 view .LVU3724
 11259 004c A51C     		adds	r5, r4, #2
 11260              	.LVL1336:
 11261              		.loc 1 6092 19 view .LVU3725
 11262 004e 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 11263              	.LVL1337:
6091:./FW/ff.c     ****                 f = 2;
 11264              		.loc 1 6091 19 view .LVU3726
 11265 0050 0227     		movs	r7, #2
 11266 0052 F5E7     		b	.L834
 11267              	.LVL1338:
 11268              	.L836:
6093:./FW/ff.c     ****             }
6094:./FW/ff.c     ****         }
6095:./FW/ff.c     ****         while (IsDigit(c)) {        /* Precision */
6096:./FW/ff.c     ****             w = w * 10 + c - '0';
 11269              		.loc 1 6096 13 is_stmt 1 view .LVU3727
 11270              		.loc 1 6096 19 is_stmt 0 view .LVU3728
 11271 0054 04EB8404 		add	r4, r4, r4, lsl #2
 11272              	.LVL1339:
 11273              		.loc 1 6096 24 view .LVU3729
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 362


 11274 0058 01EB4404 		add	r4, r1, r4, lsl #1
 11275              		.loc 1 6096 15 view .LVU3730
 11276 005c 303C     		subs	r4, r4, #48
 11277              	.LVL1340:
6097:./FW/ff.c     ****             c = *fmt++;
 11278              		.loc 1 6097 13 is_stmt 1 view .LVU3731
 11279              		.loc 1 6097 15 is_stmt 0 view .LVU3732
 11280 005e 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 11281              	.LVL1341:
 11282              	.L835:
6095:./FW/ff.c     ****             w = w * 10 + c - '0';
 11283              		.loc 1 6095 15 is_stmt 1 view .LVU3733
6095:./FW/ff.c     ****             w = w * 10 + c - '0';
 11284              		.loc 1 6095 16 is_stmt 0 view .LVU3734
 11285 0062 A1F13003 		sub	r3, r1, #48
 11286 0066 DBB2     		uxtb	r3, r3
6095:./FW/ff.c     ****             w = w * 10 + c - '0';
 11287              		.loc 1 6095 15 view .LVU3735
 11288 0068 092B     		cmp	r3, #9
 11289 006a F3D9     		bls	.L836
6098:./FW/ff.c     ****         }
6099:./FW/ff.c     ****         if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
 11290              		.loc 1 6099 9 is_stmt 1 view .LVU3736
 11291              		.loc 1 6099 12 is_stmt 0 view .LVU3737
 11292 006c 6C29     		cmp	r1, #108
 11293 006e 01D0     		beq	.L837
 11294              		.loc 1 6099 22 discriminator 1 view .LVU3738
 11295 0070 4C29     		cmp	r1, #76
 11296 0072 03D1     		bne	.L838
 11297              	.L837:
6100:./FW/ff.c     ****             f |= 4;
 11298              		.loc 1 6100 13 is_stmt 1 view .LVU3739
 11299              		.loc 1 6100 15 is_stmt 0 view .LVU3740
 11300 0074 47F00407 		orr	r7, r7, #4
 11301              	.LVL1342:
6101:./FW/ff.c     ****             c = *fmt++;
 11302              		.loc 1 6101 13 is_stmt 1 view .LVU3741
 11303              		.loc 1 6101 15 is_stmt 0 view .LVU3742
 11304 0078 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 11305              	.LVL1343:
 11306              	.L838:
6102:./FW/ff.c     ****         }
6103:./FW/ff.c     ****         if (!c) { break; }
 11307              		.loc 1 6103 9 is_stmt 1 view .LVU3743
 11308              		.loc 1 6103 12 is_stmt 0 view .LVU3744
 11309 007c 0029     		cmp	r1, #0
 11310 007e 00F0D080 		beq	.L830
6104:./FW/ff.c     ****         d = c;
 11311              		.loc 1 6104 9 is_stmt 1 view .LVU3745
 11312              	.LVL1344:
6105:./FW/ff.c     ****         if (IsLower(d)) { d -= 0x20; }
 11313              		.loc 1 6105 9 view .LVU3746
 11314              		.loc 1 6105 13 is_stmt 0 view .LVU3747
 11315 0082 A1F16103 		sub	r3, r1, #97
 11316 0086 DBB2     		uxtb	r3, r3
 11317              		.loc 1 6105 12 view .LVU3748
 11318 0088 192B     		cmp	r3, #25
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 363


 11319 008a 03D8     		bhi	.L874
 11320              		.loc 1 6105 27 is_stmt 1 discriminator 1 view .LVU3749
 11321              		.loc 1 6105 29 is_stmt 0 discriminator 1 view .LVU3750
 11322 008c A1F12003 		sub	r3, r1, #32
 11323 0090 DBB2     		uxtb	r3, r3
 11324              	.LVL1345:
 11325              		.loc 1 6105 29 discriminator 1 view .LVU3751
 11326 0092 00E0     		b	.L839
 11327              	.LVL1346:
 11328              	.L874:
6104:./FW/ff.c     ****         d = c;
 11329              		.loc 1 6104 11 view .LVU3752
 11330 0094 0B46     		mov	r3, r1
 11331              	.LVL1347:
 11332              	.L839:
6106:./FW/ff.c     ****         switch (d) {                /* Type is... */
 11333              		.loc 1 6106 9 is_stmt 1 view .LVU3753
 11334 0096 A3F14202 		sub	r2, r3, #66
 11335 009a 162A     		cmp	r2, #22
 11336 009c 53D8     		bhi	.L840
 11337 009e DFE802F0 		tbb	[pc, r2]
 11338              	.L842:
 11339 00a2 56       		.byte	(.L847-.L842)/2
 11340 00a3 3B       		.byte	(.L846-.L842)/2
 11341 00a4 43       		.byte	(.L843-.L842)/2
 11342 00a5 52       		.byte	(.L840-.L842)/2
 11343 00a6 52       		.byte	(.L840-.L842)/2
 11344 00a7 52       		.byte	(.L840-.L842)/2
 11345 00a8 52       		.byte	(.L840-.L842)/2
 11346 00a9 52       		.byte	(.L840-.L842)/2
 11347 00aa 52       		.byte	(.L840-.L842)/2
 11348 00ab 52       		.byte	(.L840-.L842)/2
 11349 00ac 52       		.byte	(.L840-.L842)/2
 11350 00ad 52       		.byte	(.L840-.L842)/2
 11351 00ae 52       		.byte	(.L840-.L842)/2
 11352 00af 58       		.byte	(.L875-.L842)/2
 11353 00b0 52       		.byte	(.L840-.L842)/2
 11354 00b1 52       		.byte	(.L840-.L842)/2
 11355 00b2 52       		.byte	(.L840-.L842)/2
 11356 00b3 0C       		.byte	(.L844-.L842)/2
 11357 00b4 52       		.byte	(.L840-.L842)/2
 11358 00b5 43       		.byte	(.L843-.L842)/2
 11359 00b6 52       		.byte	(.L840-.L842)/2
 11360 00b7 52       		.byte	(.L840-.L842)/2
 11361 00b8 50       		.byte	(.L841-.L842)/2
 11362 00b9 00       		.p2align 1
 11363              	.L844:
6107:./FW/ff.c     ****         case 'S' :                  /* String */
6108:./FW/ff.c     ****             p = va_arg(arp, TCHAR*);
 11364              		.loc 1 6108 13 view .LVU3754
 11365              		.loc 1 6108 15 is_stmt 0 view .LVU3755
 11366 00ba 1B9B     		ldr	r3, [sp, #108]
 11367              	.LVL1348:
 11368              		.loc 1 6108 15 view .LVU3756
 11369 00bc 1A1D     		adds	r2, r3, #4
 11370 00be 1B92     		str	r2, [sp, #108]
 11371 00c0 D3F80080 		ldr	r8, [r3]
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 364


6109:./FW/ff.c     ****             for (j = 0; p[j]; j++) ;
 11372              		.loc 1 6109 13 is_stmt 1 view .LVU3757
 11373              	.LVL1349:
 11374              		.loc 1 6109 20 is_stmt 0 view .LVU3758
 11375 00c4 0026     		movs	r6, #0
 11376              		.loc 1 6109 13 view .LVU3759
 11377 00c6 00E0     		b	.L848
 11378              	.LVL1350:
 11379              	.L849:
 11380              		.loc 1 6109 36 is_stmt 1 discriminator 3 view .LVU3760
 11381              		.loc 1 6109 31 discriminator 3 view .LVU3761
 11382              		.loc 1 6109 32 is_stmt 0 discriminator 3 view .LVU3762
 11383 00c8 0136     		adds	r6, r6, #1
 11384              	.LVL1351:
 11385              	.L848:
 11386              		.loc 1 6109 25 is_stmt 1 discriminator 1 view .LVU3763
 11387              		.loc 1 6109 26 is_stmt 0 discriminator 1 view .LVU3764
 11388 00ca 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 11389              		.loc 1 6109 13 discriminator 1 view .LVU3765
 11390 00ce 002B     		cmp	r3, #0
 11391 00d0 FAD1     		bne	.L849
6110:./FW/ff.c     ****             if (!(f & 2)) {
 11392              		.loc 1 6110 13 is_stmt 1 view .LVU3766
 11393              		.loc 1 6110 16 is_stmt 0 view .LVU3767
 11394 00d2 17F0020F 		tst	r7, #2
 11395 00d6 10D1     		bne	.L853
 11396 00d8 05E0     		b	.L850
 11397              	.LVL1352:
 11398              	.L852:
6111:./FW/ff.c     ****                 while (j++ < w) { putc_bfd(&pb, ' '); }
 11399              		.loc 1 6111 35 is_stmt 1 discriminator 2 view .LVU3768
 11400 00da 2021     		movs	r1, #32
 11401 00dc 0DEB0100 		add	r0, sp, r1
 11402 00e0 FFF7FEFF 		bl	putc_bfd
 11403              	.LVL1353:
 11404              		.loc 1 6111 25 is_stmt 0 discriminator 2 view .LVU3769
 11405 00e4 3E46     		mov	r6, r7
 11406              	.LVL1354:
 11407              	.L850:
 11408              		.loc 1 6111 23 is_stmt 1 discriminator 1 view .LVU3770
 11409              		.loc 1 6111 25 is_stmt 0 discriminator 1 view .LVU3771
 11410 00e6 771C     		adds	r7, r6, #1
 11411              	.LVL1355:
 11412              		.loc 1 6111 23 discriminator 1 view .LVU3772
 11413 00e8 A642     		cmp	r6, r4
 11414 00ea F6D3     		bcc	.L852
 11415              		.loc 1 6111 25 view .LVU3773
 11416 00ec 3E46     		mov	r6, r7
 11417 00ee 04E0     		b	.L853
 11418              	.LVL1356:
 11419              	.L854:
6112:./FW/ff.c     ****             }
6113:./FW/ff.c     ****             while (*p) { putc_bfd(&pb, *p++); }
 11420              		.loc 1 6113 26 is_stmt 1 discriminator 2 view .LVU3774
 11421              		.loc 1 6113 42 is_stmt 0 discriminator 2 view .LVU3775
 11422 00f0 08F10108 		add	r8, r8, #1
 11423              	.LVL1357:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 365


 11424              		.loc 1 6113 26 discriminator 2 view .LVU3776
 11425 00f4 08A8     		add	r0, sp, #32
 11426 00f6 FFF7FEFF 		bl	putc_bfd
 11427              	.LVL1358:
 11428              	.L853:
 11429              		.loc 1 6113 19 is_stmt 1 discriminator 1 view .LVU3777
 11430              		.loc 1 6113 20 is_stmt 0 discriminator 1 view .LVU3778
 11431 00fa 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 11432              		.loc 1 6113 19 discriminator 1 view .LVU3779
 11433 00fe 0029     		cmp	r1, #0
 11434 0100 F6D1     		bne	.L854
 11435              		.loc 1 6113 19 discriminator 1 view .LVU3780
 11436 0102 05E0     		b	.L855
 11437              	.LVL1359:
 11438              	.L856:
6114:./FW/ff.c     ****             while (j++ < w) { putc_bfd(&pb, ' '); }
 11439              		.loc 1 6114 31 is_stmt 1 discriminator 2 view .LVU3781
 11440 0104 2021     		movs	r1, #32
 11441 0106 0DEB0100 		add	r0, sp, r1
 11442 010a FFF7FEFF 		bl	putc_bfd
 11443              	.LVL1360:
 11444              		.loc 1 6114 21 is_stmt 0 discriminator 2 view .LVU3782
 11445 010e 3E46     		mov	r6, r7
 11446              	.LVL1361:
 11447              	.L855:
 11448              		.loc 1 6114 19 is_stmt 1 discriminator 1 view .LVU3783
 11449              		.loc 1 6114 21 is_stmt 0 discriminator 1 view .LVU3784
 11450 0110 771C     		adds	r7, r6, #1
 11451              	.LVL1362:
 11452              		.loc 1 6114 19 discriminator 1 view .LVU3785
 11453 0112 A642     		cmp	r6, r4
 11454 0114 F6D3     		bcc	.L856
 11455 0116 84E7     		b	.L829
 11456              	.LVL1363:
 11457              	.L846:
6115:./FW/ff.c     ****             continue;
6116:./FW/ff.c     **** 
6117:./FW/ff.c     ****         case 'C' :                  /* Character */
6118:./FW/ff.c     ****             putc_bfd(&pb, (TCHAR)va_arg(arp, int));
 11458              		.loc 1 6118 13 is_stmt 1 view .LVU3786
 11459              		.loc 1 6118 34 is_stmt 0 view .LVU3787
 11460 0118 1B9B     		ldr	r3, [sp, #108]
 11461              	.LVL1364:
 11462              		.loc 1 6118 34 view .LVU3788
 11463 011a 1A1D     		adds	r2, r3, #4
 11464 011c 1B92     		str	r2, [sp, #108]
 11465              		.loc 1 6118 13 view .LVU3789
 11466 011e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 11467              	.LVL1365:
 11468              		.loc 1 6118 13 view .LVU3790
 11469 0120 08A8     		add	r0, sp, #32
 11470 0122 FFF7FEFF 		bl	putc_bfd
 11471              	.LVL1366:
6119:./FW/ff.c     ****             continue;
 11472              		.loc 1 6119 13 is_stmt 1 view .LVU3791
 11473 0126 7CE7     		b	.L829
 11474              	.LVL1367:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 366


 11475              	.L843:
6120:./FW/ff.c     **** 
6121:./FW/ff.c     ****         case 'B' :                  /* Binary */
6122:./FW/ff.c     ****             r = 2;
6123:./FW/ff.c     ****             break;
6124:./FW/ff.c     **** 
6125:./FW/ff.c     ****         case 'O' :                  /* Octal */
6126:./FW/ff.c     ****             r = 8;
6127:./FW/ff.c     ****             break;
6128:./FW/ff.c     **** 
6129:./FW/ff.c     ****         case 'D' :                  /* Signed decimal */
6130:./FW/ff.c     ****         case 'U' :                  /* Unsigned decimal */
6131:./FW/ff.c     ****             r = 10;
 11476              		.loc 1 6131 13 view .LVU3792
6132:./FW/ff.c     ****             break;
 11477              		.loc 1 6132 13 view .LVU3793
6131:./FW/ff.c     ****             break;
 11478              		.loc 1 6131 15 is_stmt 0 view .LVU3794
 11479 0128 0A20     		movs	r0, #10
 11480              	.LVL1368:
 11481              	.L845:
6133:./FW/ff.c     **** 
6134:./FW/ff.c     ****         case 'X' :                  /* Hexdecimal */
6135:./FW/ff.c     ****             r = 16;
6136:./FW/ff.c     ****             break;
6137:./FW/ff.c     **** 
6138:./FW/ff.c     ****         default:                    /* Unknown type (pass-through) */
6139:./FW/ff.c     ****             putc_bfd(&pb, c);
6140:./FW/ff.c     ****             continue;
6141:./FW/ff.c     ****         }
6142:./FW/ff.c     **** 
6143:./FW/ff.c     ****         /* Get an argument and put it in numeral */
6144:./FW/ff.c     ****         v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWO
 11482              		.loc 1 6144 9 is_stmt 1 view .LVU3795
 11483              		.loc 1 6144 48 is_stmt 0 view .LVU3796
 11484 012a 17F0040F 		tst	r7, #4
 11485 012e 12D0     		beq	.L857
 11486              		.loc 1 6144 30 view .LVU3797
 11487 0130 1B9A     		ldr	r2, [sp, #108]
 11488 0132 161D     		adds	r6, r2, #4
 11489 0134 1B96     		str	r6, [sp, #108]
 11490 0136 1268     		ldr	r2, [r2]
 11491              	.L858:
 11492              	.LVL1369:
6145:./FW/ff.c     ****         if (d == 'D' && (v & 0x80000000)) {
 11493              		.loc 1 6145 9 is_stmt 1 discriminator 8 view .LVU3798
 11494              		.loc 1 6145 12 is_stmt 0 discriminator 8 view .LVU3799
 11495 0138 442B     		cmp	r3, #68
 11496 013a 18D0     		beq	.L883
 11497              	.L860:
6146:./FW/ff.c     ****             v = 0 - v;
6147:./FW/ff.c     ****             f |= 8;
6148:./FW/ff.c     ****         }
6149:./FW/ff.c     ****         i = 0;
 11498              		.loc 1 6149 9 is_stmt 1 view .LVU3800
 11499              	.LVL1370:
 11500              		.loc 1 6149 11 is_stmt 0 view .LVU3801
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 367


 11501 013c 4FF0000C 		mov	ip, #0
 11502 0140 2BE0     		b	.L864
 11503              	.LVL1371:
 11504              	.L841:
6135:./FW/ff.c     ****             break;
 11505              		.loc 1 6135 13 is_stmt 1 view .LVU3802
6136:./FW/ff.c     **** 
 11506              		.loc 1 6136 13 view .LVU3803
6135:./FW/ff.c     ****             break;
 11507              		.loc 1 6135 15 is_stmt 0 view .LVU3804
 11508 0142 1020     		movs	r0, #16
6136:./FW/ff.c     **** 
 11509              		.loc 1 6136 13 view .LVU3805
 11510 0144 F1E7     		b	.L845
 11511              	.LVL1372:
 11512              	.L840:
6139:./FW/ff.c     ****             continue;
 11513              		.loc 1 6139 13 is_stmt 1 view .LVU3806
 11514 0146 08A8     		add	r0, sp, #32
 11515 0148 FFF7FEFF 		bl	putc_bfd
 11516              	.LVL1373:
6140:./FW/ff.c     ****         }
 11517              		.loc 1 6140 13 view .LVU3807
 11518 014c 69E7     		b	.L829
 11519              	.LVL1374:
 11520              	.L847:
6131:./FW/ff.c     ****             break;
 11521              		.loc 1 6131 15 is_stmt 0 view .LVU3808
 11522 014e 0220     		movs	r0, #2
 11523 0150 EBE7     		b	.L845
 11524              	.L875:
6126:./FW/ff.c     ****             break;
 11525              		.loc 1 6126 15 view .LVU3809
 11526 0152 0820     		movs	r0, #8
 11527 0154 E9E7     		b	.L845
 11528              	.LVL1375:
 11529              	.L857:
6144:./FW/ff.c     ****         if (d == 'D' && (v & 0x80000000)) {
 11530              		.loc 1 6144 94 discriminator 2 view .LVU3810
 11531 0156 442B     		cmp	r3, #68
 11532 0158 04D0     		beq	.L884
6144:./FW/ff.c     ****         if (d == 'D' && (v & 0x80000000)) {
 11533              		.loc 1 6144 94 view .LVU3811
 11534 015a 1B9A     		ldr	r2, [sp, #108]
 11535 015c 161D     		adds	r6, r2, #4
 11536 015e 1B96     		str	r6, [sp, #108]
 11537 0160 1268     		ldr	r2, [r2]
 11538 0162 E9E7     		b	.L858
 11539              	.L884:
6144:./FW/ff.c     ****         if (d == 'D' && (v & 0x80000000)) {
 11540              		.loc 1 6144 77 view .LVU3812
 11541 0164 1B9A     		ldr	r2, [sp, #108]
 11542 0166 161D     		adds	r6, r2, #4
 11543 0168 1B96     		str	r6, [sp, #108]
 11544 016a 1268     		ldr	r2, [r2]
 11545 016c E4E7     		b	.L858
 11546              	.LVL1376:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 368


 11547              	.L883:
6145:./FW/ff.c     ****             v = 0 - v;
 11548              		.loc 1 6145 22 discriminator 1 view .LVU3813
 11549 016e 002A     		cmp	r2, #0
 11550 0170 E4DA     		bge	.L860
6146:./FW/ff.c     ****             f |= 8;
 11551              		.loc 1 6146 13 is_stmt 1 view .LVU3814
6146:./FW/ff.c     ****             f |= 8;
 11552              		.loc 1 6146 15 is_stmt 0 view .LVU3815
 11553 0172 5242     		rsbs	r2, r2, #0
 11554              	.LVL1377:
6147:./FW/ff.c     ****         }
 11555              		.loc 1 6147 13 is_stmt 1 view .LVU3816
6147:./FW/ff.c     ****         }
 11556              		.loc 1 6147 15 is_stmt 0 view .LVU3817
 11557 0174 47F00807 		orr	r7, r7, #8
 11558              	.LVL1378:
6147:./FW/ff.c     ****         }
 11559              		.loc 1 6147 15 view .LVU3818
 11560 0178 E0E7     		b	.L860
 11561              	.LVL1379:
 11562              	.L885:
6150:./FW/ff.c     ****         do {
6151:./FW/ff.c     ****             d = (TCHAR)(v % r);
6152:./FW/ff.c     ****             v /= r;
6153:./FW/ff.c     ****             if (d > 9) { d += (c == 'x') ? 0x27 : 0x07; }
 11563              		.loc 1 6153 28 view .LVU3819
 11564 017a 2726     		movs	r6, #39
 11565              	.L862:
 11566              		.loc 1 6153 28 discriminator 5 view .LVU3820
 11567 017c 3344     		add	r3, r3, r6
 11568              	.LVL1380:
 11569              		.loc 1 6153 28 discriminator 5 view .LVU3821
 11570 017e DBB2     		uxtb	r3, r3
 11571              	.LVL1381:
 11572              	.L861:
6154:./FW/ff.c     ****             str[i++] = d + '0';
 11573              		.loc 1 6154 13 is_stmt 1 view .LVU3822
 11574              		.loc 1 6154 18 is_stmt 0 view .LVU3823
 11575 0180 0CF10106 		add	r6, ip, #1
 11576              	.LVL1382:
 11577              		.loc 1 6154 26 view .LVU3824
 11578 0184 3033     		adds	r3, r3, #48
 11579              	.LVL1383:
 11580              		.loc 1 6154 22 view .LVU3825
 11581 0186 0DF17009 		add	r9, sp, #112
 11582 018a E144     		add	r9, r9, ip
 11583 018c 09F8703C 		strb	r3, [r9, #-112]
6155:./FW/ff.c     ****         } while (v && i < sizeof str / sizeof str[0]);
 11584              		.loc 1 6155 17 is_stmt 1 view .LVU3826
 11585              		.loc 1 6155 9 is_stmt 0 view .LVU3827
 11586 0190 C645     		cmp	lr, r8
 11587 0192 10D8     		bhi	.L863
 11588              		.loc 1 6155 20 discriminator 1 view .LVU3828
 11589 0194 1F2E     		cmp	r6, #31
 11590 0196 0ED8     		bhi	.L863
6154:./FW/ff.c     ****             str[i++] = d + '0';
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 369


 11591              		.loc 1 6154 18 view .LVU3829
 11592 0198 B446     		mov	ip, r6
 11593              	.LVL1384:
 11594              	.L864:
6150:./FW/ff.c     ****         do {
 11595              		.loc 1 6150 9 is_stmt 1 view .LVU3830
6151:./FW/ff.c     ****             v /= r;
 11596              		.loc 1 6151 13 view .LVU3831
6151:./FW/ff.c     ****             v /= r;
 11597              		.loc 1 6151 27 is_stmt 0 view .LVU3832
 11598 019a 8646     		mov	lr, r0
 11599 019c B2FBF0F6 		udiv	r6, r2, r0
 11600 01a0 00FB1623 		mls	r3, r0, r6, r2
6151:./FW/ff.c     ****             v /= r;
 11601              		.loc 1 6151 15 view .LVU3833
 11602 01a4 DBB2     		uxtb	r3, r3
 11603              	.LVL1385:
6152:./FW/ff.c     ****             if (d > 9) { d += (c == 'x') ? 0x27 : 0x07; }
 11604              		.loc 1 6152 13 is_stmt 1 view .LVU3834
 11605 01a6 9046     		mov	r8, r2
6152:./FW/ff.c     ****             if (d > 9) { d += (c == 'x') ? 0x27 : 0x07; }
 11606              		.loc 1 6152 15 is_stmt 0 view .LVU3835
 11607 01a8 3246     		mov	r2, r6
 11608              	.LVL1386:
6153:./FW/ff.c     ****             str[i++] = d + '0';
 11609              		.loc 1 6153 13 is_stmt 1 view .LVU3836
6153:./FW/ff.c     ****             str[i++] = d + '0';
 11610              		.loc 1 6153 16 is_stmt 0 view .LVU3837
 11611 01aa 092B     		cmp	r3, #9
 11612 01ac E8D9     		bls	.L861
6153:./FW/ff.c     ****             str[i++] = d + '0';
 11613              		.loc 1 6153 26 is_stmt 1 discriminator 1 view .LVU3838
6153:./FW/ff.c     ****             str[i++] = d + '0';
 11614              		.loc 1 6153 28 is_stmt 0 discriminator 1 view .LVU3839
 11615 01ae 7829     		cmp	r1, #120
 11616 01b0 E3D0     		beq	.L885
6153:./FW/ff.c     ****             str[i++] = d + '0';
 11617              		.loc 1 6153 28 view .LVU3840
 11618 01b2 0726     		movs	r6, #7
 11619 01b4 E2E7     		b	.L862
 11620              	.LVL1387:
 11621              	.L863:
6156:./FW/ff.c     ****         if (f & 8) { str[i++] = '-'; }
 11622              		.loc 1 6156 9 is_stmt 1 view .LVU3841
 11623              		.loc 1 6156 12 is_stmt 0 view .LVU3842
 11624 01b6 17F0080F 		tst	r7, #8
 11625 01ba 06D0     		beq	.L865
 11626              		.loc 1 6156 22 is_stmt 1 discriminator 1 view .LVU3843
 11627              	.LVL1388:
 11628              		.loc 1 6156 31 is_stmt 0 discriminator 1 view .LVU3844
 11629 01bc 1CAB     		add	r3, sp, #112
 11630 01be 1E44     		add	r6, r6, r3
 11631 01c0 2D23     		movs	r3, #45
 11632 01c2 06F8703C 		strb	r3, [r6, #-112]
 11633              		.loc 1 6156 27 discriminator 1 view .LVU3845
 11634 01c6 0CF10206 		add	r6, ip, #2
 11635              	.LVL1389:
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 370


 11636              	.L865:
6157:./FW/ff.c     ****         j = i;
 11637              		.loc 1 6157 9 is_stmt 1 view .LVU3846
6158:./FW/ff.c     ****         d = (f & 1) ? '0' : ' ';
 11638              		.loc 1 6158 9 view .LVU3847
 11639              		.loc 1 6158 11 is_stmt 0 view .LVU3848
 11640 01ca 17F0010F 		tst	r7, #1
 11641 01ce 03D0     		beq	.L878
 11642              		.loc 1 6158 11 view .LVU3849
 11643 01d0 4FF0300A 		mov	r10, #48
 11644              	.L866:
 11645              	.LVL1390:
6159:./FW/ff.c     ****         while (!(f & 2) && j++ < w) { putc_bfd(&pb, d); }
 11646              		.loc 1 6159 9 is_stmt 1 discriminator 4 view .LVU3850
6157:./FW/ff.c     ****         j = i;
 11647              		.loc 1 6157 11 is_stmt 0 discriminator 4 view .LVU3851
 11648 01d4 B046     		mov	r8, r6
 11649              		.loc 1 6159 15 discriminator 4 view .LVU3852
 11650 01d6 07E0     		b	.L867
 11651              	.LVL1391:
 11652              	.L878:
6158:./FW/ff.c     ****         d = (f & 1) ? '0' : ' ';
 11653              		.loc 1 6158 11 view .LVU3853
 11654 01d8 4FF0200A 		mov	r10, #32
 11655 01dc FAE7     		b	.L866
 11656              	.LVL1392:
 11657              	.L869:
 11658              		.loc 1 6159 39 is_stmt 1 discriminator 3 view .LVU3854
 11659 01de 5146     		mov	r1, r10
 11660 01e0 08A8     		add	r0, sp, #32
 11661 01e2 FFF7FEFF 		bl	putc_bfd
 11662              	.LVL1393:
 11663              		.loc 1 6159 29 is_stmt 0 discriminator 3 view .LVU3855
 11664 01e6 C846     		mov	r8, r9
 11665              	.LVL1394:
 11666              	.L867:
 11667              		.loc 1 6159 15 is_stmt 1 discriminator 1 view .LVU3856
 11668 01e8 17F0020F 		tst	r7, #2
 11669 01ec 04D1     		bne	.L870
 11670              		.loc 1 6159 29 is_stmt 0 discriminator 2 view .LVU3857
 11671 01ee 08F10109 		add	r9, r8, #1
 11672              	.LVL1395:
 11673              		.loc 1 6159 25 discriminator 2 view .LVU3858
 11674 01f2 A045     		cmp	r8, r4
 11675 01f4 F3D3     		bcc	.L869
 11676              		.loc 1 6159 29 view .LVU3859
 11677 01f6 C846     		mov	r8, r9
 11678              	.LVL1396:
 11679              	.L870:
6160:./FW/ff.c     ****         do {
 11680              		.loc 1 6160 9 is_stmt 1 discriminator 1 view .LVU3860
6161:./FW/ff.c     ****             putc_bfd(&pb, str[--i]);
 11681              		.loc 1 6161 13 discriminator 1 view .LVU3861
 11682 01f8 013E     		subs	r6, r6, #1
 11683              	.LVL1397:
 11684              		.loc 1 6161 13 is_stmt 0 discriminator 1 view .LVU3862
 11685 01fa 1CAB     		add	r3, sp, #112
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 371


 11686 01fc 3344     		add	r3, r3, r6
 11687 01fe 13F8701C 		ldrb	r1, [r3, #-112]	@ zero_extendqisi2
 11688 0202 08A8     		add	r0, sp, #32
 11689 0204 FFF7FEFF 		bl	putc_bfd
 11690              	.LVL1398:
6162:./FW/ff.c     ****         } while (i);
 11691              		.loc 1 6162 17 is_stmt 1 discriminator 1 view .LVU3863
 11692              		.loc 1 6162 9 is_stmt 0 discriminator 1 view .LVU3864
 11693 0208 002E     		cmp	r6, #0
 11694 020a F5D1     		bne	.L870
 11695              	.LVL1399:
 11696              	.L871:
6163:./FW/ff.c     ****         while (j++ < w) { putc_bfd(&pb, d); }
 11697              		.loc 1 6163 15 is_stmt 1 discriminator 1 view .LVU3865
 11698              		.loc 1 6163 17 is_stmt 0 discriminator 1 view .LVU3866
 11699 020c 08F10106 		add	r6, r8, #1
 11700              	.LVL1400:
 11701              		.loc 1 6163 15 discriminator 1 view .LVU3867
 11702 0210 A045     		cmp	r8, r4
 11703 0212 BFF406AF 		bcs	.L829
 11704              		.loc 1 6163 27 is_stmt 1 discriminator 2 view .LVU3868
 11705 0216 5146     		mov	r1, r10
 11706 0218 08A8     		add	r0, sp, #32
 11707 021a FFF7FEFF 		bl	putc_bfd
 11708              	.LVL1401:
 11709              		.loc 1 6163 17 is_stmt 0 discriminator 2 view .LVU3869
 11710 021e B046     		mov	r8, r6
 11711 0220 F4E7     		b	.L871
 11712              	.LVL1402:
 11713              	.L830:
6164:./FW/ff.c     ****     }
6165:./FW/ff.c     **** 
6166:./FW/ff.c     ****     va_end(arp);
 11714              		.loc 1 6166 5 is_stmt 1 view .LVU3870
6167:./FW/ff.c     **** 
6168:./FW/ff.c     ****     return putc_flush(&pb);
 11715              		.loc 1 6168 5 view .LVU3871
 11716              		.loc 1 6168 12 is_stmt 0 view .LVU3872
 11717 0222 08A8     		add	r0, sp, #32
 11718 0224 FFF7FEFF 		bl	putc_flush
 11719              	.LVL1403:
6169:./FW/ff.c     **** }
 11720              		.loc 1 6169 1 view .LVU3873
 11721 0228 1DB0     		add	sp, sp, #116
 11722              	.LCFI135:
 11723              		.cfi_def_cfa_offset 44
 11724              		@ sp needed
 11725 022a BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 11726              	.LCFI136:
 11727              		.cfi_restore 14
 11728              		.cfi_restore 10
 11729              		.cfi_restore 9
 11730              		.cfi_restore 8
 11731              		.cfi_restore 7
 11732              		.cfi_restore 6
 11733              		.cfi_restore 5
 11734              		.cfi_restore 4
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 372


 11735              		.cfi_def_cfa_offset 12
 11736 022e 03B0     		add	sp, sp, #12
 11737              	.LCFI137:
 11738              		.cfi_restore 3
 11739              		.cfi_restore 2
 11740              		.cfi_restore 1
 11741              		.cfi_def_cfa_offset 0
 11742 0230 7047     		bx	lr
 11743              		.cfi_endproc
 11744              	.LFE1000:
 11746              		.section	.bss.FatFs,"aw",%nobits
 11747              		.align	2
 11748              		.set	.LANCHOR2,. + 0
 11751              	FatFs:
 11752 0000 00000000 		.space	4
 11753              		.section	.bss.Files,"aw",%nobits
 11754              		.align	2
 11755              		.set	.LANCHOR0,. + 0
 11758              	Files:
 11759 0000 00000000 		.space	32
 11759      00000000 
 11759      00000000 
 11759      00000000 
 11759      00000000 
 11760              		.section	.bss.Fsid,"aw",%nobits
 11761              		.align	1
 11762              		.set	.LANCHOR3,. + 0
 11765              	Fsid:
 11766 0000 0000     		.space	2
 11767              		.section	.rodata.ExCvt,"a"
 11768              		.align	2
 11769              		.set	.LANCHOR1,. + 0
 11772              	ExCvt:
 11773 0000 43554541 		.ascii	"CUEAAAACEEEIIIAAE\222\222OOOUUYOUO\234O\236\237AIOU"
 11773      41414143 
 11773      45454549 
 11773      49494141 
 11773      4592924F 
 11774 0024 A5A5A6A7 		.ascii	"\245\245\246\247\250\251\252\253\254\255\256\257\260"
 11774      A8A9AAAB 
 11774      ACADAEAF 
 11774      B0
 11775 0031 B1B2B3B4 		.ascii	"\261\262\263\264AAA\270\271\272\273\274\275\276\277"
 11775      414141B8 
 11775      B9BABBBC 
 11775      BDBEBF
 11776 0040 C0C1C2C3 		.ascii	"\300\301\302\303\304\305AA\310\311\312\313\314\315\316"
 11776      C4C54141 
 11776      C8C9CACB 
 11776      CCCDCE
 11777 004f CFD1D145 		.ascii	"\317\321\321EEEIIII\331\332\333\334\335I\337O\341OO"
 11777      45454949 
 11777      4949D9DA 
 11777      DBDCDD49 
 11777      DF4FE14F 
 11778 0064 4F4FE6E8 		.ascii	"OO\346\350\350UUUYY\356\357\360\361\362\363\364\365"
 11778      E8555555 
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 373


 11778      5959EEEF 
 11778      F0F1F2F3 
 11778      F4F5
 11779 0076 F6F7F8F9 		.ascii	"\366\367\370\371\372\373\374\375\376\377"
 11779      FAFBFCFD 
 11779      FEFF
 11780              		.section	.rodata.cst.12208,"a"
 11781              		.align	2
 11782              		.set	.LANCHOR5,. + 0
 11785              	cst.12208:
 11786 0000 0100     		.short	1
 11787 0002 0400     		.short	4
 11788 0004 1000     		.short	16
 11789 0006 4000     		.short	64
 11790 0008 0001     		.short	256
 11791 000a 0002     		.short	512
 11792 000c 0000     		.short	0
 11793              		.section	.rodata.cst32.12209,"a"
 11794              		.align	2
 11795              		.set	.LANCHOR4,. + 0
 11798              	cst32.12209:
 11799 0000 0100     		.short	1
 11800 0002 0200     		.short	2
 11801 0004 0400     		.short	4
 11802 0006 0800     		.short	8
 11803 0008 1000     		.short	16
 11804 000a 2000     		.short	32
 11805 000c 0000     		.short	0
 11806              		.text
 11807              	.Letext0:
 11808              		.file 2 "./FW/integer.h"
 11809              		.file 3 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\arm-none-eabi\\include\\machine\\_default_types.h"
 11810              		.file 4 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\arm-none-eabi\\include\\sys\\_stdint.h"
 11811              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 11812              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 11813              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 11814              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
 11815              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 11816              		.file 10 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\arm-none-eabi\\include\\sys\\lock.h"
 11817              		.file 11 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\arm-none-eabi\\include\\sys\\_types.h"
 11818              		.file 12 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h
 11819              		.file 13 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\arm-none-eabi\\include\\sys\\reent.h"
 11820              		.file 14 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\arm-none-eabi\\include\\stdlib.h"
 11821              		.file 15 "./FW/ff.h"
 11822              		.file 16 "./FW/diskio.h"
 11823              		.file 17 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 11824              		.file 18 "c:\\gnu_tools_arm_embedded\\9_2019_q4\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stdarg.h
 11825              		.file 19 "<built-in>"
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 374


DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\cygwin64\tmp\cchCJpEA.s:18     .text.ld_word:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:25     .text.ld_word:00000000 ld_word
C:\cygwin64\tmp\cchCJpEA.s:53     .text.ld_dword:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:59     .text.ld_dword:00000000 ld_dword
C:\cygwin64\tmp\cchCJpEA.s:98     .text.st_word:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:104    .text.st_word:00000000 st_word
C:\cygwin64\tmp\cchCJpEA.s:129    .text.st_dword:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:135    .text.st_dword:00000000 st_dword
C:\cygwin64\tmp\cchCJpEA.s:174    .text.mem_cpy:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:180    .text.mem_cpy:00000000 mem_cpy
C:\cygwin64\tmp\cchCJpEA.s:232    .text.mem_set:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:238    .text.mem_set:00000000 mem_set
C:\cygwin64\tmp\cchCJpEA.s:265    .text.mem_cmp:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:271    .text.mem_cmp:00000000 mem_cmp
C:\cygwin64\tmp\cchCJpEA.s:324    .text.chk_chr:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:330    .text.chk_chr:00000000 chk_chr
C:\cygwin64\tmp\cchCJpEA.s:365    .text.chk_lock:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:371    .text.chk_lock:00000000 chk_lock
C:\cygwin64\tmp\cchCJpEA.s:518    .text.chk_lock:00000070 $d
C:\cygwin64\tmp\cchCJpEA.s:523    .text.enq_lock:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:529    .text.enq_lock:00000000 enq_lock
C:\cygwin64\tmp\cchCJpEA.s:576    .text.enq_lock:0000001c $d
C:\cygwin64\tmp\cchCJpEA.s:581    .text.inc_lock:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:587    .text.inc_lock:00000000 inc_lock
C:\cygwin64\tmp\cchCJpEA.s:768    .text.inc_lock:000000a0 $d
C:\cygwin64\tmp\cchCJpEA.s:773    .text.dec_lock:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:779    .text.dec_lock:00000000 dec_lock
C:\cygwin64\tmp\cchCJpEA.s:862    .text.dec_lock:0000003c $d
C:\cygwin64\tmp\cchCJpEA.s:867    .text.clear_lock:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:873    .text.clear_lock:00000000 clear_lock
C:\cygwin64\tmp\cchCJpEA.s:954    .text.clear_lock:00000038 $d
C:\cygwin64\tmp\cchCJpEA.s:959    .text.clust2sect:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:965    .text.clust2sect:00000000 clust2sect
C:\cygwin64\tmp\cchCJpEA.s:1005   .text.clmt_clust:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1011   .text.clmt_clust:00000000 clmt_clust
C:\cygwin64\tmp\cchCJpEA.s:1079   .text.ld_clust:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1085   .text.ld_clust:00000000 ld_clust
C:\cygwin64\tmp\cchCJpEA.s:1141   .text.st_clust:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1147   .text.st_clust:00000000 st_clust
C:\cygwin64\tmp\cchCJpEA.s:1196   .text.get_fileinfo:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1202   .text.get_fileinfo:00000000 get_fileinfo
C:\cygwin64\tmp\cchCJpEA.s:1345   .rodata.create_name.str1.4:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:1349   .text.create_name:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1355   .text.create_name:00000000 create_name
C:\cygwin64\tmp\cchCJpEA.s:1586   .text.create_name:000000c4 $d
C:\cygwin64\tmp\cchCJpEA.s:1592   .text.get_ldnumber:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1598   .text.get_ldnumber:00000000 get_ldnumber
C:\cygwin64\tmp\cchCJpEA.s:1724   .text.putc_init:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1730   .text.putc_init:00000000 putc_init
C:\cygwin64\tmp\cchCJpEA.s:1753   .text.validate:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1759   .text.validate:00000000 validate
C:\cygwin64\tmp\cchCJpEA.s:1868   .text.sync_window:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1874   .text.sync_window:00000000 sync_window
C:\cygwin64\tmp\cchCJpEA.s:1980   .text.move_window:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:1986   .text.move_window:00000000 move_window
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 375


C:\cygwin64\tmp\cchCJpEA.s:2057   .text.check_fs:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:2063   .text.check_fs:00000000 check_fs
C:\cygwin64\tmp\cchCJpEA.s:2159   .text.check_fs:0000006c $d
C:\cygwin64\tmp\cchCJpEA.s:2166   .text.find_volume:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:2172   .text.find_volume:00000000 find_volume
C:\cygwin64\tmp\cchCJpEA.s:2839   .text.find_volume:000002f0 $d
C:\cygwin64\tmp\cchCJpEA.s:2847   .text.put_fat:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:2853   .text.put_fat:00000000 put_fat
C:\cygwin64\tmp\cchCJpEA.s:3109   .text.get_fat:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:3115   .text.get_fat:00000000 get_fat
C:\cygwin64\tmp\cchCJpEA.s:3332   .text.dir_sdi:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:3338   .text.dir_sdi:00000000 dir_sdi
C:\cygwin64\tmp\cchCJpEA.s:3535   .text.create_chain:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:3541   .text.create_chain:00000000 create_chain
C:\cygwin64\tmp\cchCJpEA.s:3771   .text.remove_chain:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:3777   .text.remove_chain:00000000 remove_chain
C:\cygwin64\tmp\cchCJpEA.s:3938   .text.dir_remove:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:3944   .text.dir_remove:00000000 dir_remove
C:\cygwin64\tmp\cchCJpEA.s:3995   .text.dir_next:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:4001   .text.dir_next:00000000 dir_next
C:\cygwin64\tmp\cchCJpEA.s:4298   .text.dir_find:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:4304   .text.dir_find:00000000 dir_find
C:\cygwin64\tmp\cchCJpEA.s:4411   .text.follow_path:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:4417   .text.follow_path:00000000 follow_path
C:\cygwin64\tmp\cchCJpEA.s:4579   .text.dir_alloc:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:4585   .text.dir_alloc:00000000 dir_alloc
C:\cygwin64\tmp\cchCJpEA.s:4701   .text.dir_register:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:4707   .text.dir_register:00000000 dir_register
C:\cygwin64\tmp\cchCJpEA.s:4781   .text.dir_read:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:4787   .text.dir_read:00000000 dir_read
C:\cygwin64\tmp\cchCJpEA.s:4910   .text.sync_fs:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:4916   .text.sync_fs:00000000 sync_fs
C:\cygwin64\tmp\cchCJpEA.s:5030   .text.sync_fs:00000084 $d
C:\cygwin64\tmp\cchCJpEA.s:5036   .text.f_mount:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:5043   .text.f_mount:00000000 f_mount
C:\cygwin64\tmp\cchCJpEA.s:5160   .text.f_mount:00000058 $d
C:\cygwin64\tmp\cchCJpEA.s:5165   .text.f_open:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:5172   .text.f_open:00000000 f_open
C:\cygwin64\tmp\cchCJpEA.s:5721   .text.f_read:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:5728   .text.f_read:00000000 f_read
C:\cygwin64\tmp\cchCJpEA.s:6141   .text.f_write:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:6148   .text.f_write:00000000 f_write
C:\cygwin64\tmp\cchCJpEA.s:6606   .text.putc_bfd:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:6612   .text.putc_bfd:00000000 putc_bfd
C:\cygwin64\tmp\cchCJpEA.s:6723   .text.putc_flush:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:6729   .text.putc_flush:00000000 putc_flush
C:\cygwin64\tmp\cchCJpEA.s:6808   .text.f_sync:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:6815   .text.f_sync:00000000 f_sync
C:\cygwin64\tmp\cchCJpEA.s:6963   .text.f_close:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:6970   .text.f_close:00000000 f_close
C:\cygwin64\tmp\cchCJpEA.s:7039   .text.f_lseek:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:7046   .text.f_lseek:00000000 f_lseek
C:\cygwin64\tmp\cchCJpEA.s:7742   .text.f_opendir:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:7749   .text.f_opendir:00000000 f_opendir
C:\cygwin64\tmp\cchCJpEA.s:7918   .text.f_closedir:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:7925   .text.f_closedir:00000000 f_closedir
C:\cygwin64\tmp\cchCJpEA.s:7991   .text.f_readdir:00000000 $t
ARM GAS  C:\cygwin64\tmp\cchCJpEA.s 			page 376


C:\cygwin64\tmp\cchCJpEA.s:7998   .text.f_readdir:00000000 f_readdir
C:\cygwin64\tmp\cchCJpEA.s:8103   .text.f_stat:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:8110   .text.f_stat:00000000 f_stat
C:\cygwin64\tmp\cchCJpEA.s:8203   .text.f_getfree:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:8210   .text.f_getfree:00000000 f_getfree
C:\cygwin64\tmp\cchCJpEA.s:8493   .text.f_truncate:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:8500   .text.f_truncate:00000000 f_truncate
C:\cygwin64\tmp\cchCJpEA.s:8693   .text.f_unlink:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:8700   .text.f_unlink:00000000 f_unlink
C:\cygwin64\tmp\cchCJpEA.s:8921   .text.f_mkdir:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:8928   .text.f_mkdir:00000000 f_mkdir
C:\cygwin64\tmp\cchCJpEA.s:9302   .text.f_rename:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:9309   .text.f_rename:00000000 f_rename
C:\cygwin64\tmp\cchCJpEA.s:9587   .rodata.f_mkfs.str1.4:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:9597   .text.f_mkfs:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:9604   .text.f_mkfs:00000000 f_mkfs
C:\cygwin64\tmp\cchCJpEA.s:10164  .text.f_mkfs:00000260 $d
C:\cygwin64\tmp\cchCJpEA.s:10171  .text.f_mkfs:00000270 $t
C:\cygwin64\tmp\cchCJpEA.s:10666  .text.f_mkfs:0000057c $d
C:\cygwin64\tmp\cchCJpEA.s:10675  .text.f_mkfs:00000594 $t
C:\cygwin64\tmp\cchCJpEA.s:10910  .text.f_gets:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:10917  .text.f_gets:00000000 f_gets
C:\cygwin64\tmp\cchCJpEA.s:11022  .text.f_putc:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:11029  .text.f_putc:00000000 f_putc
C:\cygwin64\tmp\cchCJpEA.s:11073  .text.f_puts:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:11080  .text.f_puts:00000000 f_puts
C:\cygwin64\tmp\cchCJpEA.s:11137  .text.f_printf:00000000 $t
C:\cygwin64\tmp\cchCJpEA.s:11144  .text.f_printf:00000000 f_printf
C:\cygwin64\tmp\cchCJpEA.s:11339  .text.f_printf:000000a2 $d
C:\cygwin64\tmp\cchCJpEA.s:11747  .bss.FatFs:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:11751  .bss.FatFs:00000000 FatFs
C:\cygwin64\tmp\cchCJpEA.s:11754  .bss.Files:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:11758  .bss.Files:00000000 Files
C:\cygwin64\tmp\cchCJpEA.s:11761  .bss.Fsid:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:11765  .bss.Fsid:00000000 Fsid
C:\cygwin64\tmp\cchCJpEA.s:11768  .rodata.ExCvt:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:11772  .rodata.ExCvt:00000000 ExCvt
C:\cygwin64\tmp\cchCJpEA.s:11781  .rodata.cst.12208:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:11785  .rodata.cst.12208:00000000 cst.12208
C:\cygwin64\tmp\cchCJpEA.s:11794  .rodata.cst32.12209:00000000 $d
C:\cygwin64\tmp\cchCJpEA.s:11798  .rodata.cst32.12209:00000000 cst32.12209
C:\cygwin64\tmp\cchCJpEA.s:11362  .text.f_printf:000000b9 $d
C:\cygwin64\tmp\cchCJpEA.s:11362  .text.f_printf:000000ba $t

UNDEFINED SYMBOLS
disk_status
disk_write
disk_read
disk_initialize
disk_ioctl
get_fattime
